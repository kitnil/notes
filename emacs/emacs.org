#+TITLE: Emacs org-mode
#+AUTHOR: Oleg Pykhalov
#+EMAIL: go.wigust@gmail.com

* [[https://www.reddit.com/r/emacs/comments/1m73gs/how_do_you_manage_multiple_workspaces/][How do you manage multiple workspaces? : emacs]]
* gnus
- [[https://www.gnu.org/software/emacs/manual/gnus.html][Gnus Manual]]
* Documentation
** [[https://github.com/syl20bnr/spacemacs/tree/master/layers/org][Spacemacs]]
*** [[https://github.com/syl20bnr/spacemacs/tree/master/layers/org][Official documentation]]
*** [[https://github.com/syl20bnr/spacemacs/blob/master/doc/QUICK_START.org][Quick start]]

*** Layers

**** [[https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Btools/ranger][ranger]]
**** [[https://github.com/syl20bnr/spacemacs/tree/master/layers/shell][shell]]
**** [[https://github.com/syl20bnr/spacemacs/tree/master/layers/auto-completion][auto-completion]]

** Cheat sheets
 [[https://www.cheatography.com/logcat/cheat-sheets/spacemacs-basics/][cheatography | spacemacs-basics]]

** Russian

*** Habrahabr
[[http://www.gnu.org/software/emacs/manual/html_mono/eintr.html][An Introduction to Programming in Emacs Lisp]]
** Help
 describe-mode -- <f1> m
** cheatsheets
- [[http://orgmode.org/worg/orgcard.html][Org-Mode Reference Card]]
* Video

** org-mode

*** [[https://www.youtube.com/watch?v=lpPS6JPUUME][Изучаем Emacs. Эпизод 10: Базовые возможности Org-mode, literate programming и экспорт в html/pdf]]
*** [[https://www.youtube.com/watch?v=lsYdK0C2RvQ][Embedding code snippets]]
 Embedding code snippets within Org Mode couldn't be easier when using these neat
 little tricks.
*** [[https://www.youtube.com/watch?v=SzA2YODtgK4][How to by Harry Schwartz]]

 Harry Schwartz demonstrates some of the nifty features of Org mode

 "Org mode is an outliner, markup language, task manager, calendar, contact
 manager, and who-knows-what-else. I use it to write documents and presentations,
 manage my todo list, and I even write my Emacs configuration in it.

 In other words, Org is taking over my life.

 I’ll be introducing some of the functionality of Org, demonstrating what it can
 do, and showing how you, too, can become pleasantly obsessed with a wacky,
 overgrown outlining tool."

** org-ref
*** [[https://www.youtube.com/watch?v=JyvpSVl4_dg][org ref show]]
*** [[https://www.youtube.com/watch?v=2t925KRBbFc][Introduction to org-ref]]
 org-ref features that are available in the package on Melpa
* magit
- [[https://github.com/magit/magit/wiki/Cheatsheet][Cheatsheet · magit/magit Wiki]]
- [[https://magit.vc/manual/magit.html][Magit User Manual]]

* org-mode
** [[http://ehneilsen.net/notebook/orgExamples/org-examples.html][Emacs org-mode examples and cookbook]]
** Visibility cycling
 | Key             | Function                   |
 | Tab             | show current               |
 | S-Tab           | show all children          |
 | C-u C-u C-u Tab | show all including drawers |
** Editing
 | Key         | Function                      |
 | M-Ret       | add element on the same level |
 | M-S-Ret     | insert TODO element           |
 | M-Left      | promote current element       |
 | M-S-Left    | promote current subtree       |
 | M-Right     | demote current element        |
 | M-S-Right   | demote current subtree        |
 | M-S-Up      | move current tree up          |
 | M-S-Down    | move current tree down        |
 | C-c C-x C-w | kill current subtree          |
 | C-c C-x M-w | copy current subtree          |
 | C-c C-x C-y | yank subtree                  |
** Plain lists
 Use M-Ret to add list item

 Ordered list:
 1. First
 2. Second
 3. Third

 Unordered lists:
 - abc
 - abd
 - afg
 - asd

 List with checkouts (M-S-Ret)
 - [ ] Element with checkbox (C-c - togle checkbox state)
** More devices (drawers)
 - C-c C-z - time-stamped drawer
 - C-c C-x f - footnote
** Start up options

 Hide all trees
 ~#+STARTUP: overview~

 Show all in trees
 ~#+STARTUP: showall~

 Show only content
 ~#+STARTUP: content~

 Show all including utilities
 ~#+STARTUP: showeverything~
** ToDo functionality
 | C-c C-t         | rotate TODO state    |
 | S-Left, S-Right | rotate TODO state    |
 | S-M-Ret         | insert new TODO note |

 #+SRC_CODE
 (setq org-todo-keywords'((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
 #+END_SRC
** Code editing
| C-c '     | open code block in pop up buffer |
| C-c C-v t | export to code file              |

:tangle yes
:tangle no

<s tab -- insert begin_src

#+begin_src -n -- add line numbering

** References
C-c l -- org-store-link -- reference
#+begin_src -r -- add tugging feature

C-c C-l -- access to reference

** Exporting

 C-c C-e -- export

 org2blog - export to WordPress

 org-publish
** Header

 + TITLE: Python programming example
 + AUTHOR: Oleg Pykhalov
 + DATE: 11.09.2016
 + EMAIL: go.wigust@gmail.com
 + DESCRIPTION: Demonstration of org-mode
 + KEYWORDS: org-mode, python
 + LANGUAGE: en

** HTML Tags ** One line +HTML: My email: <b>go.wigust@gmail.com</b> ** Multiple lines +BEGIN_HTML <h3>02.09.2013</h3> +END_HTML
** Images and links

 +CAPTION: Python Tutorial
 +ATTR_HTML: title="Python!" style="float:left;"
 file:python-logo.gif

** Tables
 #+CAPTION: This is a table with lines around and between cells
 | 1 | 2 | 3 | 4 |  5 |
 |---+---+---+---+----|
 | 6 | 7 | 8 | 9 | 10 |

** Links & URL
 Is this SPC m l which does evil-org-open-links . There is a pending pull request
 about this: evil-org-mode/issue/14

** Buffer
 #+BEGIN_SRC bash
 read buffer from stdin on start
 emacs --insert <(echo 123)
 #+END_SRC
** Wrapping
 visual-line-mode -- line wrap
 smartparens-mode -- auto close parens
** LaTex
** Math mode
$somemath$
$$somemath$$ -- на отдельной строке
** LaTeX document template
#+BEGIN_SRC latex
\documentclass[11pt]{article}

\begin

\end{document}
#+END_SRC
** Exponents

*** superscripts

#+BEGIN_SRC latex
superscripts: $2x^3$
superscripts: $2x^(34)$ != superscripts: $2x^34$
$$2x^(3x+4)$$
$$2x^(3x^4+5)$$
#+END_SRC

*** subscripts

Underline "_" instead of caret brace "^"

#+BEGIN_SRC latex
$$x_1$$
$$x_{12}$$
$$x_1_2$$
$${x_1}_2$$
$${{x_1}_2}_3$$
#+END_SRC

** Greek letters

#+BEGIN_SRC latex
$$\pi$$
$$\alpha$$
$$A=\pi r^2$$
#+END_SRC

** trig functions

#+BEGIN_SRC latex
$$\sin{x}$$
#+END_SRC

** log functions
#+BEGIN_SRC latex
$$\log{x}$$
$$\ln{x}$$
$$\log_5{x}$$
#+END_SRC

** square roots
#+BEGIN_SRC latex
$$\sqrt{2}$$
$$\sqrt[3]{2}$$
$$\sqrt{x^2+y^2}$$
$$\sqrt{1+\sqrt{x}}$$
#+END_SRC

** fractions
About 2/3 of the glass is full.
#+BEGIN_SRC latex
$$2/3$$
$\frac{2}{3}$
#+END_SRC

** Make something larger
\displaystyle

#+BEGIN_SRC latex
About $\displaystyle[\frac{2}{3}]$ of the glass is full.
#+END_SRC

** complex fractions
#+BEGIN_SRC latex
$$\frac{x}{x^2+x+1}$$
#+END_SRC

** [[http://orgmode.org/worg/org-contrib/babel/intro.html][Babel]] code execution
* Evil
[[http://vim.wikia.com/wiki/Best_Vim_Tips][Best tips]]
* Handy things
** Force a syntax-highlighting refresh
 M-x -- font-lock-fontify-buffer
** [[https://www.gnu.org/software/emacs/manual/html_node/efaq/Inserting-text-at-the-beginning-of-each-line.html][GNU Emacs FAQ: Inserting text at the beginning of each line]]

How do I insert <some text> at the beginning of every line?

To do this to an entire buffer,
type M-< M-x replace-regexp RET ^ RET your text RET.

To do this to a region,
use string-insert-rectangle.

Set the mark (C-SPC) at the beginning of the first line you want to prefix, move
the cursor to last line to be prefixed, and type M-x string-insert-rectangle
RET. To do this for the whole buffer, type C-x h M-x string-insert-rectangle
RET.

If you are trying to prefix a yanked mail message with ‘>’,
you might want to set the variable mail-yank-prefix.

In Message buffers,
you can even use M-;
to cite yanked messages (M-; runs the function comment-region,
it is a general-purpose mechanism to comment regions)
(see Changing the included text prefix).

* Git (Magit)
** [[http://daemianmack.com/magit-cheatsheet.html][cheatsheet]]
** [[https://www.emacswiki.org/emacs/Magit][Emacs wiki]]
* Sites
** [[https://melpa.org][Melpa (Milkypostman’s Emacs Lisp Package Archive)]]
*** Up-to-date packages built on our servers from upstream source
*** Installable in any Emacs with 'package.el' - no local version-control tools needed
*** Curated - no obsolete, renamed, forked or randomly hacked packages
*** Comprehensive - more packages than any other archive
*** Automatic updates - new commits result in new packages
*** Extensible - contribute recipes via github, and we'll build the packages
** [[https://spin.atomicobject.com/2016/05/27/write-emacs-package/][A Simple Guide to Writing & Publishing Emacs Packages]]

* Presentations

** [[http://orgmode.org/manual/Beamer-export.html][Beamer export - The Org Manual]]

** [[http://orgmode.org/worg/exporters/beamer/ox-beamer.html][Beamer presentations using the new export engine]]
* Awesome
- [[https://github.com/purcell/emacs.d][purcell/emacs.d: An Emacs configuration bundle with batteries included]]
* Bad things
- [[https://emacs.stackexchange.com/questions/4237/how-to-prevent-emacs-from-breaking-hard-links][files - How to prevent Emacs from breaking hard links? - Emacs Stack Exchange]]
* Howto
** [[https://stackoverflow.com/questions/3527142/how-do-you-redo-changes-after-undo-with-emacs][How do you 'redo' changes after 'undo' with Emacs? - Stack Overflow]]

To undo: C-_

To redo after a undo: C-g C-_

Type multiple times on C-_ to redo what have been undone by C-_ To redo an emacs command multiple times, execute your command then type C-xz and then type many times on z key to repeat the command (interesting when you want to execute multiple times a macro)

