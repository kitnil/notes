:PROPERTIES:
:ID:       4bc0f85a-9e99-481e-8109-34ae75a74a3c
:END:
#+title: Prometheus

- [[https://github.com/adhocteam/script_exporter][adhocteam/script_exporter: Shell script prometheus exporter]]
- [[https://github.com/AlexZzz/libvirt-exporter][AlexZzz/libvirt-exporter: Prometheus metrics exporter for libvirt.]]
- [[https://github.com/alxrem/prometheus-logstash-exporter][alxrem/prometheus-logstash-exporter: Prometheus exporter for Logstash metrics]]
- [[https://rsmitty.github.io/Prometheus-Exporters/][A Noob's Guide to Custom Prometheus Exporters – Spencer's Blog]]
- [[https://awesome-prometheus-alerts.grep.to/][Awesome Prometheus alerts | Collection of alerting rules]]
- [[https://github.com/benjojo/alertmanager-discord][benjojo/alertmanager-discord: Take your alertmanager alerts, into discord]]
- [[https://github.com/benjojo/sping][benjojo/sping: Split ping, see what direction the loss or latency is on]]
- [[https://github.com/prometheus/blackbox_exporter/blob/master/example.yml][blackbox_exporter/example.yml at master · prometheus/blackbox_exporter]]
- [[https://github.com/caarlos0/domain_exporter][caarlos0/domain_exporter: Exports the expiration time of your domains as prometheus metrics.]]
- [[https://github.com/caarlos0/fastcom-exporter][caarlos0/fastcom-exporter: Prometheus Fast.com exporter]]
- [[https://github.com/caarlos0/speedtest-exporter][caarlos0/speedtest-exporter: Exports speedtest-cli metrics in the prometheus format]]
- [[https://github.com/cloudflare/pint][cloudflare/pint: Prometheus rule linter]]
- [[https://github.com/containers/prometheus-podman-exporter#collectors][containers/prometheus-podman-exporter: Prometheus exporter for podman environments exposing containers, pods, images, volumes and networks information.]]
- [[https://trstringer.com/quick-and-easy-prometheus-exporter/][Create a Quick and Easy Prometheus Exporter | Thomas Stringer]]
- [[https://github.com/prometheus/docs/blob/master/content/docs/instrumenting/exporters.md][docs/exporters.md at master · prometheus/docs]]
- [[https://github.com/DRuggeri/dhcpd_leases_exporter][DRuggeri/dhcpd_leases_exporter: A Prometheus exporter for the ISC dhcpd daemon's dhcpd.leases file]]
- [[https://github.com/Drumato/promqlinter][Drumato/promqlinter: A PromQL parser/type-checker/linter in GitHub Actions/CLI]]
- [[https://prometheus.io/docs/instrumenting/exporters/][Exporters and integrations | Prometheus]]
- [[https://github.com/feiyu563/PrometheusAlert][feiyu563/PrometheusAlert: Prometheus Alert是开源的运维告警中心消息转发系统,支持主流的监控系统Prometheus,Zabbix,日志系统Graylog和数据可视化系统Grafana发出的预警消息,支持钉钉,微信,华为云短信,腾讯云短信,腾讯云电话,阿里云短信,阿里云电话等]]
- [[https://github.com/fstab/grok_exporter][fstab/grok_exporter: Export Prometheus metrics from arbitrary unstructured log data.]]
- [[https://github.com/Gandi/prometheus-linux-nfsdv4-exporter][Gandi/prometheus-linux-nfsdv4-exporter]]
- [[https://github.com/Gandi/xenlight_exporter][Gandi/xenlight_exporter: Prometheus exporter for Xen using xenlight library]]
- [[https://github.com/gluster/gluster-prometheus][gluster/gluster-prometheus: Gluster monitoring using Prometheus]]
- [[https://github.com/google/alertmanager-irc-relay][google/alertmanager-irc-relay: Send Prometheus Alerts to IRC using Webhooks]]
- [[https://github.com/google/dnsmasq_exporter][google/dnsmasq_exporter: dnsmasq exporter for Prometheus]]
- [[https://github.com/google/mtail][google/mtail: extract internal monitoring data from application logs for collection in a timeseries database]]
- [[https://github.com/hipages/php-fpm_exporter][hipages/php-fpm_exporter: A prometheus exporter for PHP-FPM.]]
- [[https://github.com/imgix/prometheus-am-executor][imgix/prometheus-am-executor: Execute command based on Prometheus alerts]]
- [[https://docs.bitnami.com/tutorials/implementing-slos-using-prometheus/][Implementing SLOs using Prometheus and Grafana]]
- [[https://github.com/insomniacslk/prometheus-weather-exporter][insomniacslk/prometheus-weather-exporter: Weather exporter for Prometheus, using the Google Maps and Darksky APIs]]
- [[https://github.com/kbknapp/iptables_exporter][kbknapp/iptables_exporter: A Prometheus exporter for iptables in Rust]]
- [[https://github.com/kbknapp/wireguard_exporter][kbknapp/wireguard_exporter: A Prometheus exporter for WireGuard]]
- [[https://github.com/kumina/dovecot_exporter][kumina/dovecot_exporter: Prometheus metrics exporter for Dovecot.]]
- [[https://github.com/Luzilla/dnsbl_exporter][Luzilla/dnsbl_exporter: Prometheus compatible exporter to query DNSBLs/RBLs.]]
- [[https://github.com/lwch/proxmox-exporter][lwch/proxmox-exporter: proxmox exporter of prometheus]]
- [[https://github.com/matusnovak/prometheus-smartctl][matusnovak/prometheus-smartctl: HDD S.M.A.R.T exporter for Prometheus written in Python]]
- [[https://github.com/messagebird/sachet][messagebird/sachet: SMS alerts for Prometheus' Alertmanager]]
- [[https://github.com/MyBook/zabbix-exporter][MyBook/zabbix-exporter: Zabbix metrics exporter for Prometheus]]
- [[https://github.com/ncabatoff/script-exporter][ncabatoff/script-exporter: Prometheus exporter to invoke scripts and parse their output as metrics.]]
- [[https://github.com/NCCloud/ovs-exporter][NCCloud/ovs-exporter: Prometheus openVswitch-exporter]]
- [[https://github.com/nickbabcock/OhmGraphite][nickbabcock/OhmGraphite: Expose hardware sensor data to Graphite / InfluxDB / Prometheus / Postgres / Timescaledb]]
- [[https://github.com/Nordstrom/ssh_exporter][Nordstrom/ssh_exporter: A Prometheus exporter for running SSH commands on a remote host and collecting statistics on those outputs]]
- [[https://github.com/pinpox/alertmanager-ntfy][pinpox/alertmanager-ntfy: Relay prometheus alertmanager alerts to ntfy.sh]]
- [[https://github.com/povilasv/systemd_exporter][povilasv/systemd_exporter: Exporter for systemd unit metrics]]
- [[https://promcat.io/][PromCat.io - A resource catalog for enterprise-class Prometheus monitoring]]
- [[https://github.com/prometheus/blackbox_exporter][prometheus/blackbox_exporter: Blackbox prober exporter]]
- [[https://github.com/prometheus-community/bind_exporter][prometheus-community/bind_exporter: Prometheus exporter for BIND]]
- [[https://github.com/prometheus-community/elasticsearch_exporter][prometheus-community/elasticsearch_exporter: Elasticsearch stats exporter for Prometheus]]
- [[https://github.com/prometheus-community/helm-charts][prometheus-community/helm-charts: Prometheus community Helm charts]]
- [[https://github.com/prometheus-community/ipmi_exporter][prometheus-community/ipmi_exporter: Remote IPMI exporter for Prometheus]]
- [[https://github.com/prometheus-community/promql-langserver][prometheus-community/promql-langserver: PromQL language server]]
- [[https://github.com/prometheus-community/PushProx][prometheus-community/PushProx: Proxy to allow Prometheus to scrape through NAT etc.]]
- [[https://github.com/prometheus-community/smartctl_exporter][prometheus-community/smartctl_exporter: Export smartctl statistics to prometheus]]
- [[https://sysdig.com/wp-content/uploads/2019/01/prometheus-monitoring-guide.pdf][prometheus-monitoring-guide.pdf]]
- [[https://michael.stapelberg.ch/posts/2016-01-01-prometheus-blackbox-exporter/][Prometheus: Using the blackbox exporter (2016) - Michael Stapelberg]]
- [[https://coralogix.com/blog/promql-tutorial-5-tricks-to-become-a-prometheus-god/][PromQL Tutorial: 5 Tricks to Become a Prometheus God - Coralogix]]
- [[https://github.com/QubitProducts/exporter_exporter][QubitProducts/exporter_exporter: A reverse proxy designed for Prometheus exporters]]
- [[https://github.com/RamboRogers/layer2_exporter][RamboRogers/layer2_exporter: A Layer2 (ARP) Discovery and Exporter for Prometheus.io]]
- [[https://github.com/ricoberger/jaeger-exporter][ricoberger/jaeger-exporter: Create Prometheus metrics for the Jaeger Service Performance Monitoring]]
- [[https://github.com/ricoberger/script_exporter][ricoberger/script_exporter: Prometheus exporter to execute scripts and collect metrics from the output or the exit status.]]
- [[https://github.com/robusta-dev/robusta][robusta-dev/robusta: Open source Kubernetes monitoring, troubleshooting, and automation platform]]
- RPE (Nagios exporter)
- [[https://github.com/rzrbld/zabbix-exporter-3000][rzrbld/zabbix-exporter-3000: just another zabbix exporter for Prometheus]]
- [[https://github.com/Sheridan/nftables_exporter][Sheridan/nftables_exporter: Export nftables statistics to prometheus]]
- [[https://github.com/soundcloud/ipmi_exporter][soundcloud/ipmi_exporter: Remote IPMI exporter for Prometheus]]
- [[https://github.com/stapelberg/rsyncparse][stapelberg/rsyncparse: rsync output parser]]
- [[https://github.com/stapelberg/rsyncprom][stapelberg/rsyncprom: rsync wrapper (or output parser) that pushes metrics to prometheus]]
- [[https://github.com/summerwind/github-project-exporter][summerwind/github-project-exporter: Export GitHub project status to Prometheus.]]
- [[https://github.com/thanos-io/thanos][thanos-io/thanos: Highly available Prometheus setup with long term storage capabilities. A CNCF Incubating project.]]
- [[https://awesomeopensource.com/projects/prometheus-exporter][The Top 85 Prometheus Exporter Open Source Projects]]
- [[https://github.com/timoa/app-stores-prometheus-exporter][timoa/app-stores-prometheus-exporter: Prometheus exporter that exports metrics (score, ratings, reviews, app version, etc.) from Apple App Store and Google Play.]]
- [[https://github.com/tomcz/openldap_exporter][tomcz/openldap_exporter: This is a simple service that scrapes metrics from OpenLDAP and exports them via HTTP for Prometheus consumption.]]
- [[https://github.com/treydock/ssh_exporter][treydock/ssh_exporter]]
- [[https://github.com/twitter/rezolus][twitter/rezolus: Systems performance telemetry]]
- [[https://github.com/xaque208/freebsd_exporter][xaque208/freebsd_exporter: An exporter for some FreeBSD stats. (nfsstat, poudriere, etc)]]
- [[https://github.com/xaque208/junos_exporter][xaque208/junos_exporter: Export ARP entries from Junos to Prometheus]]
- [[https://github.com/xaque208/openweathermap_exporter][xaque208/openweathermap_exporter: A Prometheus exporter for reading weather forecast data from Open Weather Map.]]
- [[https://github.com/zhangjianweibj/prometheus-libvirt-exporter][zhangjianweibj/prometheus-libvirt-exporter: prometheus-libvirt-exporter]]
- [[https://deckhouse.io/ru/documentation/v1/modules/303-prometheus-pushgateway/usage.html][Модуль Prometheus Pushgateway: примеры конфигурации | Deckhouse]]
: echo 'channel 1' | curl --data-binary @- http://127.0.0.1:9095/metrics/job/guix/instance/127.0.0.1:9100/name/guix/commit/d96f47f012571cdd6dd67c513e496042db303ca7
: curl -X POST -g 'http://localhost:9090/api/v1/admin/tsdb/delete_series?match[]={instance="127.0.0.1:9101"}'
: curl -XPOST http://127.0.0.1:9090/api/v1/admin/tsdb/clean_tombstones
- [[https://blog.mafr.de/2020/09/13/testing-alertmanager/][Testing Alertmanager | Matthias Friedrich's Blog]]
  #+begin_src shell
    #! /usr/bin/env sh
    
    URL="http://localhost:9093/api/v1/alerts"
    
    curl -si -X POST -H "Content-Type: application/json" "$URL" -d '
    [
      {
        "labels": {
          "alertname": "InstanceDown",
          "instance": "localhost:8080",
          "job": "node",
          "severity": "critical"
        },
        "annotations": {
          "summary": "Instance is down"
        },
        "generatorURL": "http://localhost:9090/graph"
      }
    ]
    '
    
  #+end_src
- [[https://github.com/cfunkhouser/actuator][cfunkhouser/actuator: Trigger actions using Prometheus alerts]]

- icmp
: 127.0.0.1:9115/probe?module=icmp&target=192.168.0.1

* Examples

: sum without (device) (rate(node_network_transmit_bytes_total{device=~"vm.+", instance=~"172.16.102.+"}[1m]))

* Learning
- [[https://www.robustperception.io/absent-alerting-for-jobs][Absent Alerting for Jobs – Robust Perception | Prometheus Monitoring Experts]]
- [[https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0][Alerting on gauges in Prometheus 2.0 – Robust Perception | Prometheus Monitoring Experts]]
- [[https://github.com/ncabatoff/process-exporter][ncabatoff/process-exporter: Prometheus exporter that mines /proc to report on selected processes]]
- [[https://towardsdatascience.com/how-i-monitor-active-ssh-sessions-with-prometheus-and-grafana-f4811da0a8cc][Monitor SSH sessions with Prometheus and Grafana | Towards Data Science]]
- [[https://prometheus.io/docs/practices/instrumentation/#use-labels][Instrumentation | Prometheus]]
- [[https://grafana.com/blog/2022/03/21/how-relabeling-in-prometheus-works/][How relabeling in Prometheus works | Grafana Labs]]
- [[https://prometheus.io/docs/guides/multi-target-exporter/][Understanding and using the multi-target exporter pattern | Prometheus]]
- [[https://prometheus.io/docs/prometheus/latest/configuration/configuration/][Configuration | Prometheus]]
- [[https://github.com/prometheus/prometheus/discussions/10215][Prometheus stopped working after the error - opening storage failed: reloadBlocks: invalid block sequence: block time ranges overlap: · Discussion #10215 · prometheus/prometheus]]

* Blackbox
- http://127.0.0.1:9115/probes
- GET /probe?module=http_2xx&target=http%3A%2F%2F127.0.0.1%3A8071%2Fphpinfo-json.php

* High availability
- [[https://github.com/cortexproject/cortex][cortexproject/cortex: A horizontally scalable, highly available, multi-tenant, long term Prometheus.]]
- [[https://github.com/grafana/mimir][grafana/mimir: Grafana Mimir provides horizontally scalable, highly available, multi-tenant, long-term storage for Prometheus.]]

* ChatGPT

** How to curl Prometheus instead of using WEB UI?

To curl Prometheus and retrieve data in the command line, you can use the Prometheus query API. Here are the basic steps:

    Determine the address and port of your Prometheus instance. By default, Prometheus runs on port 9090, so if you are running Prometheus on the same machine where you are issuing the curl command, you can use localhost:9090.

    Identify the query that you want to execute. The Prometheus query API supports a wide range of queries. Here's an example query to get the current CPU usage for all instances:

scss

rate(node_cpu{mode="idle"}[5m])

This query returns the rate of change of the node_cpu metric with the mode label set to idle over the last 5 minutes.

    Use curl to issue the query to the Prometheus API:

css

curl -g 'http://localhost:9090/api/v1/query?query=rate(node_cpu{mode="idle"}[5m])'

The -g option tells curl to interpret the query string as a URL, even if it contains special characters such as braces or spaces. The query parameter specifies the Prometheus query to execute.

The output of the query will be returned as JSON. You can use the -s option to suppress curl's progress output, and the -o option to save the output to a file:

css

curl -sg 'http://localhost:9090/api/v1/query?query=rate(node_cpu{mode="idle"}[5m])' -o result.json

This will save the JSON response to a file called result.json. You can then use standard command line tools such as jq or grep to parse the response as needed.

** It is hard to specify query in the URL. Is it possible use a file instead?

Yes, it is possible to use a file instead of specifying the query in the URL when querying Prometheus with cURL.

First, create a file that contains the query you want to execute, for example, a file named query.txt that contains the following query:

bash

sum(node_cpu{mode="idle"})

Then, use the --data-urlencode option with cURL to pass the query file to Prometheus. Here's an example command:

graphql

curl -G 'http://localhost:9090/api/v1/query' --data-urlencode 'query@query.txt'

This command will execute the query in the query.txt file and return the result in JSON format. Note that the @ symbol is used to indicate that the following argument is a file name. You can modify the file name and location as needed.
