:PROPERTIES:
:ID:       af34fb7d-d93b-41e2-a5b6-766b63be5191
:END:
#+title: Linux

- blktrace
  - iowatcher
#+begin_src shell
  sudo blktrace -d /dev/nvme0n1 -w 10 -o trace
  iowatcher -o trace.svg -t trace.blktrace.
#+end_src

"kernel.printk" = "7  7 1 7";

- [[https://unix.stackexchange.com/questions/226872/how-to-shrink-root-filesystem-without-booting-a-livecd/227318#227318][centos - How to shrink root filesystem without booting a livecd - Unix & Linux Stack Exchange]]
- [[https://habr.com/ru/post/179597/][–†–∞–±–æ—Ç–∞ —Å ¬´–ø–ª–æ—Ö–∏–º–∏¬ª —Ñ–∞–π–ª–∞–º–∏ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤ Linux / –•–∞–±—Ä]]
- [[https://habr.com/ru/company/ruvds/blog/337934/][–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: lsof / –ë–ª–æ–≥ –∫–æ–º–ø–∞–Ω–∏–∏ RUVDS.com / –•–∞–±—Ä]]
- [[https://github.com/akme/lsofgraph-python][akme/lsofgraph-python: python version of lsof to graphviz parser]]
- [[https://github.com/dundee/gdu][dundee/gdu: Disk usage analyzer with console interface written in Go]]
- [[https://archive.fosdem.org/2020/schedule/event/measure_linux_performance/][FOSDEM 2020 - How to measure Linux Performance Wrong]]
- [[https://github.com/mchehab/rasdaemon][mchehab/rasdaemon: Rasdaemon is a RAS (Reliability, Availability and Serviceability) logging tool. It records memory errors, using the EDAC tracing events. EDAC is a Linux kernel subsystem with handles detection of ECC errors from memory controllers for most chipsets on i386 and x86_64 architectures. EDAC drivers for other architectures like arm also exists.]]
- [[https://github.com/orhun/zps][orhun/zps: A small utility for listing and reaping zombie processes on GNU/Linux.]]
- [[https://web.archive.org/web/20170905131225if_/https://wiki.linuxfoundation.org/images/1/1c/Network_data_flow_through_kernel.png][Network_data_flow_through_kernel.png (PNG Image, 3489¬†√ó¬†1952 pixels) ‚Äî Scaled (50%)]]
- [[https://tanelpoder.com/2013/02/21/peeking-into-linux-kernel-land-using-proc-filesystem-for-quickndirty-troubleshooting/][Peeking into Linux kernel-land using /proc filesystem for quick‚Äôn‚Äôdirty troubleshooting | Tanel Poder Consulting]]
- [[https://github.com/wtarreau/bootterm][wtarreau/bootterm: The terminal written for its users by its users]]
- [[https://github.com/CiscoCXSecurity/sudo-parser][CiscoCXSecurity/sudo-parser: sudo-parser is a tool to audit complex sudoers files]]
- [[https://github.com/LloydLabs/delete-self-poc][LloydLabs/delete-self-poc: A way to delete a locked file, or current running executable, on disk.]]
- [[https://gitlab.com/interception/linux/tools][interception / linux / Interception Tools ¬∑ GitLab]]
- [[https://bootlin.com/doc/training/linux-kernel/linux-kernel-slides.pdf][linux-kernel-slides.pdf]]
- [[https://github.com/sahib/rmlint][sahib/rmlint: Extremely fast tool to remove duplicates and other lint from your filesystem]]
- [[https://github.com/trapexit/mergerfs][trapexit/mergerfs: a featureful union filesystem]]
- [[https://github.com/cunctator/traceshark][cunctator/traceshark: This is a tool for Linux kernel ftrace and perf events visualization]]
- [[https://github.com/aide/aide][aide/aide: aide source code]]
- [[https://github.com/apjanke/ronn-ng][apjanke/ronn-ng: Ronn-NG: An updated fork of ronn. Build man pages from Markdown.]]
- [[https://github.com/acaudwell/Logstalgia][acaudwell/Logstalgia: replay or stream website access logs as a retro arcade game]]
- [[https://github.com/gregkh/usbview][gregkh/usbview: usb viewer for Linux]]
- [[https://github.com/nelhage/reptyr][nelhage/reptyr: Reparent a running program to a new terminal]]
- [[https://github.com/Xfennec/progress][Xfennec/progress: Linux tool to show progress for cp, mv, dd, ... (formerly known as cv)]]
- [[https://github.com/pshved/timeout][pshved/timeout: A script to measure and limit CPU time and memory consumption of black-box processes in Linux]]
- [[https://github.com/brendangregg/FlameGraph][brendangregg/FlameGraph: Stack trace visualizer]]
- [[https://github.com/iberianpig/xSwipe][iberianpig/xSwipe: Multitouch gestures with synaptics driver on X11, Linux]]
- [[https://github.com/lukeed/watchlist][lukeed / watchlist JavaScript]]
- [[https://github.com/bannsec/linux-kernel-lab][bannsec/linux-kernel-lab: Lab Environment For Learning About The Linux Kernel]]
- [[https://habr.com/ru/post/503648/][–ß—Ç–æ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –≤—ã–≤–æ–¥ ¬´ss -s¬ª / –•–∞–±—Ä]]
- [[https://www.rodsbooks.com/gdisk/wipegpt.html][Wiping Out Old GPT Data]]
- [[https://github.com/leandromoreira/linux-network-performance-parameters][leandromoreira/linux-network-performance-parameters: Learn where some of the network sysctl variables fit into the Linux/Kernel network flow]]
- [[https://github.com/orhun/systeroid][orhun/systeroid: A more powerful alternative to sysctl(8) with a terminal user interface üêß]]
- [[https://blog.tinned-software.net/modify-file-and-directory-date/][Modify file and directory date - Experiencing Technology]]
- [[https://loicpefferkorn.net/2016/03/linux-network-metrics-why-you-should-use-nstat-instead-of-netstat/][Linux network metrics: why you should use nstat instead of netstat]]
- [[https://github.com/asz/icmpshell][asz/icmpshell: Experimental kernel-level remote shell based on ICMP content]]
- [[https://github.com/sp00f1ng/booty][sp00f1ng/booty: Boot to any GNU/Linux via PXE, ISO or USB, HDD, SSD and so on... With using the shmfs (tmpfs) or Overlay FS + SquashFS.]]
- [[https://github.com/foundObjects/zram-swap][foundObjects/zram-swap: A simple zram swap service for modern systemd Linux]]
- [[https://github.com/jarun/keysniffer][jarun/keysniffer: Linux kernel mode debugfs keylogger]]
- [[https://github.com/jarun/bcal][jarun/bcal: :1234: Storage and regular CLI calculator]]
- [[https://habr.com/ru/post/332544/][–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç timeout & strace –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Shellinabox / –•–∞–±—Ä]]
- [[https://cwrap.org/nss_wrapper.html][cwrap - nss_wrapper]]
- [[https://github.com/carltheperson/10-things-linux][carltheperson/10-things-linux: Getting better at Linux with 10 mini-projects.]]
- [[https://tanelpoder.com/psnapper/][Linux Process Snapper | Tanel Poder Consulting]]
- [[https://github.com/stolk/diskgraph][stolk/diskgraph: Graphs the disk IO in a linux terminal.]]
- [[https://github.com/harporoeder/ebpfsnitch][harporoeder/ebpfsnitch: Linux Application Level Firewall based on eBPF and NFQUEUE.]]
- [[https://www.digitalocean.com/community/tutorials/how-to-create-raid-arrays-with-mdadm-on-ubuntu-16-04][How To Create RAID Arrays with mdadm on Ubuntu 16.04 | DigitalOcean]]
- [[https://github.com/pimaker/rvc][PiMaker/rvc: A 32-bit RISC-V emulator in a shader (and C)]]
- [[https://github.com/Sysinternals/ProcMon-for-Linux][Sysinternals/ProcMon-for-Linux: Procmon is a Linux reimagining of the classic Procmon tool from the Sysinternals suite of tools for Windows. Procmon provides a convenient and efficient way for Linux developers to trace the syscall activity on the system.]]
- [[https://github.com/cloudflare/tubular][cloudflare/tubular: BSD socket API on steroids]]
- [[https://community.atlassian.com/t5/Trust-Security-articles/Introducing-vmdiff-a-tool-to-find-everything-that-changes-on/ba-p/2321969][Introducing vmdiff: a tool to find everything that changes on your computer]]

* ALSA
- [[https://rendaw.gitlab.io/blog/2125f09a85f2.html#alsa-exposed][rendaw - ALSA, exposed!]]

* BCC
https://github.com/iovisor/bcc/blob/master/QUICKSTART.md

* BPF
- [[https://www.geeklan.co.uk/?p=2493][Book review: BPF Performance Tools: Linux System and Application Observability ‚Äì GeekLAN]]
- [[https://github.com/chenjiandongx/yap][chenjiandongx/yap: üö• Yet another pinger: A high-performance ICMP ping implementation build on top of BPF technology.]]
- [[https://github.com/cilium/cilium][cilium/cilium: eBPF-based Networking, Security, and Observability]]
- [[https://github.com/cilium/pwru][cilium/pwru: Packet, where are you? -- Linux kernel networking debugger]]
- [[https://github.com/dylandreimerink/edb][dylandreimerink/edb: An eBPF program debugger]]
- [[https://github.com/ehids/ecapture][ehids/ecapture: capture SSL/TLS text content without CA cert by eBPF.]]
- [[https://github.com/iovisor/bpftrace][iovisor/bpftrace: High-level tracing language for Linux eBPF]]
- [[https://github.com/lizrice/ebpf-beginners][lizrice/ebpf-beginners: The beginner's guide to eBPF]]
- [[https://github.com/lizrice/ebpf-networking][lizrice/ebpf-networking: The Beginner's Guide to eBPF Programming for Networking]]
- [[https://github.com/lizrice/libbpfgo-beginners][lizrice/libbpfgo-beginners: Basic eBPF examples in Golang using libbpfgo]]
- [[https://github.com/mehrdadrad/tcpdog][mehrdadrad/tcpdog: eBPF based TCP observability.]]
- [[https://github.com/parca-dev/parca-agent][parca-dev/parca-agent: eBPF based always-on profiler auto-discovering targets in Kubernetes and systemd, zero code changes or restarts needed!]]
- [[https://github.com/pchaigno/tail-call-bench][pchaigno/tail-call-bench: Benchmark tools to evaluate the cost of BPF tail calls]]
- [[https://github.com/redsift/redbpf][redsift/redbpf: Rust library for building and running BPF/eBPF modules]]
- [[https://rutracker.org/forum/viewtopic.php?t=5945896][–ë–µ—Å—Ç—Å–µ–ª–ª–µ—Ä—ã O‚ÄôReilly - Calavera D., Fontana L. / –ö–∞–ª–∞–≤–µ—Ä–∞ –î., –§–æ–Ω—Ç–∞–Ω–∞ –õ. - Linux Observability with BPF / BPF –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Linux [2021, PDF, RUS] :: RuTracker.org]]

* Build
- [[https://github.com/takano32/build-kernel][takano32/build-kernel in Docker Ubuntu 20.04 container]]

* Cheatsheet
- [[http://www.brendangregg.com/Perf/linux_perf_tools_full.png][linux_perf_tools_full.png (3000√ó2100)]]
- [[https://access.redhat.com/sites/default/files/attachments/rh_ip_command_cheatsheet_1214_jcs_print.pdf][rh_ip_command_cheatsheet_1214_jcs_print.pdf]]

- run command from a host mount namespace
  : /usr/bin/nsenter -m/proc/1/ns/mnt -- /run/current-system/sw/bin/systemctl reboot

* console
#+begin_quote
I think it would also be nice if the sysadmins could get
access to the serial console (or even the racadm console).  With the
serial console you could see if the server is stuck even if you can‚Äôt
SSH.  With the racadm console (where we type ‚Äúconsole com2‚Äù to start the
serial console) you could also trigger a soft reboot.

We have these management interfaces pretty locked down, but perhaps we
can set up a tunnel from bayfront, or something like that.
#+end_quote

* Containers
- [[https://github.com/genuinetools/amicontained][genuinetools/amicontained: Container introspection tool. Find out what container runtime is being used as well as features available.]]
- [[https://github.com/prologic/box][prologic/box: üì¶ A command-line utility (non-daemon) for creating Linux containers, sandboxing a processes written in Go.]]

* D

- [[https://stackoverflow.com/questions/767551/how-to-stop-uninterruptible-process-on-linux][signals - How to stop 'uninterruptible' process on Linux? - Stack Overflow]]

#+begin_example
  kill -9 {process_id}
  sync
  echo 3 | sudo tee /proc/sys/vm/drop_caches
#+end_example

- [[https://www.kernel.org/doc/Documentation/sysctl/vm.txt][kernel.org/doc/Documentation/sysctl/vm.txt]]

#+begin_example
echo 1 > /proc/sys/vm/drop_caches
echo 2 > /proc/sys/vm/drop_caches
echo 3 > /proc/sys/vm/drop_caches
#+end_example

* Device mapper
- [[https://www.youtube.com/watch?v=xy0Tgt4Aryw][Device Mapper - –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ—á–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ - YouTube]]
* Distributions
- [[https://distrotest.net/index.php][DistroTest.net - The first online operating system tester]]
- [[https://distr1.org/][distri: a Linux distribution to research fast package management]]
- [[id:fe0f9df6-5ce3-4fb4-9b55-04ca64b32d73][Arch Linux]]
- [[id:3a808743-6e55-4eb4-b5b8-7b090abd28be][Debian]]
- [[id:1a04d6b5-4a18-4e60-8dce-283389185347][Guix]]
- [[id:2dc46956-0cc8-46e7-a31f-4f4d9730807c][Nix]]
- [[id:08018469-85bc-4b19-9271-2eee5d814b7a][Ubuntu]]
- [[https://vyos.io/][VyOS ‚Äì Open source router and firewall platform]]
- [[https://github.com/89luca89/distrobox][89luca89/distrobox: Use any linux distribution inside your terminal. Enable both backward and forward compatibility with software and freedom to use whatever distribution you‚Äôre more comfortable with.]]
- [[https://github.com/tracelabs/tlosint-live][tracelabs/tlosint-live: Trace Labs OSINT Linux Distribution based on Kali.]]
- [[https://inventory.raw.pm/operating_systems.html][Rawsec's CyberSecurity Inventory]]

* Documentation

- [[https://github.com/filiparag/wikiman][filiparag/wikiman: Wikiman is an offline search engine for manual pages, Arch Wiki, Gentoo Wiki and other documentation.]]
- [[https://access.redhat.com/sites/default/files/attachments/rh_ip_command_cheatsheet_1214_jcs_print.pdf][rh_ip_command_cheatsheet_1214_jcs_print.pdf]]
- [[https://habr.com/en/post/416669/][–í—Å—è –ø—Ä–∞–≤–¥–∞ –æ linux epoll / Habr]]
  - [[http://artemy-kolesnikov.blogspot.com/2010/11/epoll.html][–ü—Ä–æ–≥—Ä–∞–º–º–µ—Ä—Å–∫–∏–π –±–ª–æ–≥: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ epoll]]
  - [[https://www.insight-it.ru/linux/2012/kak-rabotaet-epoll/][–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç epoll?]]
- [[https://www.kernel.org/doc/html/latest/admin-guide/index.html][The Linux kernel user‚Äôs and administrator‚Äôs guide ‚Äî The Linux Kernel documentation]]

- [[https://archlinux.org.ru/forum/topic/19282/][–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å—à–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞]]
- [[https://github.com/0xAX/linux-insides][0xAX/linux-insides: A little bit about a linux kernel]]

* Framebuffer
- [[https://github.com/mekb-turtle/imgfb][mekb-turtle/imgfb: Draws a farbfeld or jpeg image to the Linux framebuffer]]

* Graphics
- [[https://vadosware.io/post/using-both-integrated-and-discrete-graphics-cards/][Using Both Integrated And Discrete Graphics Cards - VADOSWARE]]
- [[https://wiki.archlinux.org/index.php/PRIME#PRIME_GPU_offloading][PRIME - ArchWiki]]
- [[https://www.opennet.ru/openforum/vsluhforumID3/91202.html][forum.opennet.ru - "–í xorg-–¥—Ä–∞–π–≤–µ—Ä AMD –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ reverse PRIME" (47)]]

* initram
- [[https://github.com/anatol/booster][anatol/booster: Fast and secure initramfs generator]]

* IO
- [[https://github.com/osresearch/iomonitor][osresearch/iomonitor: Trace IO calls in a process]]
- [[https://habr.com/ru/company/raidix/blog/578894/][NVMe-–Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏: —á–µ–º –æ–Ω–∏ —Ö–æ—Ä–æ—à–∏ –∏ –∫–∞–∫ –Ω–∞ –Ω–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å. –ß–∞—Å—Ç—å –ø–µ—Ä–≤–∞—è / –•–∞–±—Ä]]
- [[https://habr.com/ru/company/raidix/blog/578894/][NVMe-–Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏: —á–µ–º –æ–Ω–∏ —Ö–æ—Ä–æ—à–∏ –∏ –∫–∞–∫ –Ω–∞ –Ω–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å. –ß–∞—Å—Ç—å –ø–µ—Ä–≤–∞—è / –•–∞–±—Ä]]

* kexec

[[https://www.linux.com/training-tutorials/simple-kexec-example/][Simple Kexec example - Linux.com]]

Some time ago I was helping a friend with some kexec problems and written some notes on how to use it ‚Äì here a CentOS based server was used, but the process should be pretty similiar also for other distributions. The main advantage is in skipping the BIOS init part which on servers takes quite some time. I personally use it for the gateway server (it has also other functions, like dns, dhcp, openvpn server) and testing servers reboots with minimal downtime. A nice kexec description is on its man page:

    kexec is a system call that enables you to load and boot into another kernel from the currently running kernel. kexec performs the function of the boot loader from within the kernel. The primary difference between a standard system boot and a kexec boot is that the hardware initialization normally performed by the BIOS or firmware (depending on architecture) is not performed during a kexec boot. This has the effect of reducing the time required for a reboot.

CentOS, Fedora users can install it using yum:

[root@cent:~]# yum install kexec-tools

To switch between kernels you have to install a new one, here for example after running a ‚Äùyum update‚Äù also a new kernel was installed ‚Äì the 2.6.18-194.11.4.el5 version.

[root@cent:~]# yum update
[...]
Installed:
  kernel.x86_64 0:2.6.18-194.11.4.el5  kernel-devel.x86_64 0:2.6.18-194.11.4.el5
[...]

Current kernel is 2.6.18-194.11.3.el5

[root@cent:~]# uname -r
2.6.18-194.11.3.el5

For kexec, kernel and initrd path will be specified; paths (not full) can be found for example in the grub.conf file which was already updated.

[root@cent:~]# cat /etc/grub.conf
[...]
title CentOS (2.6.18-194.11.4.el5)
        root (hd0,0)
        kernel /vmlinuz-2.6.18-194.11.4.el5 ro root=LABEL=/
        initrd /initrd-2.6.18-194.11.4.el5.img
title CentOS (2.6.18-194.11.3.el5)
        root (hd0,0)
        kernel /vmlinuz-2.6.18-194.11.3.el5 ro root=LABEL=/
        initrd /initrd-2.6.18-194.11.3.el5.img
[...]

Also the arguments passed to the kernel at boot time are needed, you can look at your current arguments in the /proc/cmdline file. Later these same arguments will be given for the new kernel.

[root@cent:~]# cat /proc/cmdline
ro root=LABEL=/

Now to load the new kernel:

[root@cent:~]# kexec -l /boot/vmlinuz-2.6.18-194.11.4.el5 
--initrd=/boot/initrd-2.6.18-194.11.4.el5.img 
--command-line="$( cat /proc/cmdline )"

Start the magic and boot to the new loaded kernel:

[root@cent:~]# kexec -e

Hope this post will be helpful and inspire others to some kexec experiments üôÇ

* Kill session by terminal

#+begin_example
  [root@web23:~]# w
   16:43:11 up 414 days, 18:30,  2 users,  load average: 6.01, 6.78, 7.07
  USER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT
  eng      tty1      25Mar21  3:11   0.55s  0.02s -bash
  eng      pts/0     16:42    0.00s  2.70s  0.01s sshd: eng [priv]                                                                             

  [root@web23:~]# ps -ft tty1
  UID        PID  PPID  C STIME TTY          TIME CMD
  root       933     1  0  2020 tty1     00:00:00 /nix/store/1l5yw8hyfpvcn2a5lzds5nvgaz519n67-shadow-4.8/bin/login --
  eng      30346   933  0  2021 tty1     00:00:00 -bash
  root     30412 30346  0  2021 tty1     00:00:00 sudo -i
  root     30423 30412  0  2021 tty1     00:00:00 -bash

  [root@web23:~]# kill 933

  [root@web23:~]# w
   16:44:01 up 414 days, 18:31,  1 user,  load average: 5.77, 6.55, 6.97
  USER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT
  eng      pts/0     16:42    1.00s  2.70s  0.01s sshd: eng [priv]
#+end_example

* Learning
- [[https://www.youtube.com/watch?v=NtK3poD_0X0][(1) How to understand the linux control groups cgroups - YouTube]]
- [[https://serveradmin.ru/a-start-job-is-running-for-file-system-check/][A start job is running for File System Check ‚Äî Server Admin]]
- [[https://github.com/cirosantilli/linux-kernel-module-cheat][cirosantilli/linux-kernel-module-cheat: The perfect emulation setup to study and develop the Linux kernel v5.4.3]]
- [[https://blog.habets.se/2022/03/Dropping-privileges.html][Dropping privileges]]
- [[https://github.com/giulianop/lfcs][giulianop/lfcs: Personal notes to prepare for the Linux Foundation Certified System Administrator (LFCS) exam]]
- [[https://disnetern.ru/21-sample-settings-iptables-for-linux/][iptables samples | IT Knowledge Base]]
- [[https://www.kernel.org/doc/Documentation/networking/netconsole.txt][kernel.org/doc/Documentation/networking/netconsole.txt]]
- [[https://lartc.org/lartc.pdf][lartc.pdf | Linux Advanced Routing & TrafficControl HOWTO]]
- [[https://www.kernel.org/doc/html/latest/admin-guide/sysrq.html#what-are-the-command-keys][Linux Magic System Request Key Hacks ‚Äî The Linux Kernel documentation]]
- [[http://www.brendangregg.com/linuxperf.html][Linux Performance]]
- [[https://syscalls.mebeim.net/?table=x86/64/x64/v6.2][Linux syscall tables]]
- [[https://darkcoding.net/software/linux-what-can-you-epoll/][Linux: What can you epoll? ¬∑ Graham King]]
- [[https://habr.com/ru/post/111036/][Linux: –£—Å–∫–æ—Ä—è–µ–º —Å–æ—Ñ—Ç—Ä–µ–π–¥ –∏ RAID6 –≤ –¥–æ–º–∞—à–Ω–µ–º —Å–µ—Ä–≤–µ—Ä–µ]]
- [[https://github.com/PacktPublishing/Linux-for-Networking-Professionals][PacktPublishing/Linux-for-Networking-Professionals: Linux for Networking Professionals, published by Packt]]
- [[https://www.jackos.io/rust-kernel/rust-for-linux.html#restarting-the-kernel][Rust linux kernel development | JackOS]]
- [[https://github.com/sn99/Optimizing-linux][sn99/Optimizing-linux: A simple guide for optimizing linux in detail]]
- [[https://sysprog21.github.io/lkmpg/][The Linux Kernel Module Programming Guide]]
- [[https://old.reddit.com/r/linux/comments/y1mss7/the_linux_process_journey_pid_0_swapper/][The Linux Process Journey ‚Äî PID 0 (swapper) : linux]]
- [[https://disnetern.ru/ioping-performance-measurement/][–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ioping. –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∏—Å–∫–∞. | IT Knowledge Base]]
- [[https://disnetern.ru/monitoring-servers/][–ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ | IT Knowledge Base]]
- [[https://habr.com/ru/company/ruvds/blog/581444/][–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —è–¥—Ä–∞ Linux: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã / –•–∞–±—Ä]]
- [[https://habr.com/ru/company/ruvds/blog/578788/][–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –≤ Linux / –•–∞–±—Ä]]
- [[https://habr.com/ru/post/438042/][–≠–≤–æ–ª—é—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ x86 –≤ Linux / –•–∞–±—Ä]]
** [[https://access.redhat.com/solutions/69271][Why system shows high number of context switching and interrupt rate? - Red Hat Customer Portal]]
#+begin_example
  Why system shows high number of context switching and interrupt rate?
  Solution Unverified - Updated November 18 2020 at 2:43 PM - English
  Environment

      Red Hat Enterprise Linux

  Issue

      Observed high number of context switching and interrupt rate on Linux box, is this a cause of concern?

  Raw

  10:45:02 AM    proc/s   cswch/s
  10:45:03 AM   7461.86 162656.70
  10:45:04 AM   7577.08 165451.04
  10:45:05 AM   7269.07 158628.87
  10:45:06 AM   7202.02 156147.47
  10:45:07 AM   6997.96 150135.71
  10:45:08 AM   5878.43 129769.61
  10:45:09 AM      0.00   2238.38
  10:45:10 AM      1.00   1753.00
  10:45:11 AM      0.00   1659.00
  10:45:12 AM      1.02   1956.12
  10:45:13 AM   1472.55  29550.00
  10:45:14 AM   7503.09 164700.00
  10:45:15 AM   7564.95 163741.24
  10:45:16 AM   7130.00 154742.00
  10:45:17 AM   7367.01 162021.65
  10:45:18 AM   6876.24 147852.48
  10:45:19 AM   6965.69 150706.86
  10:45:20 AM   6059.38 135597.92
  10:45:21 AM      6.06   2325.25
  10:45:22 AM   5360.20 118755.10
  10:45:23 AM   7123.76 158248.51
  10:45:24 AM   6091.92 133512.12
  10:45:25 AM   7167.00 156230.00
  10:45:26 AM   6929.70 152298.02
  10:45:27 AM   7541.24 166132.99
  10:45:28 AM   7544.33 165311.34
  10:45:29 AM    328.28  10556.57
  10:45:30 AM      1.00   3835.00
  10:45:31 AM      9.00   3728.00
  10:45:32 AM      0.00   3266.67
  10:45:33 AM   1000.00  32036.36
  10:45:34 AM   6616.16 151763.64
  10:45:35 AM   7281.00 158306.00

  Resolution

      A context switch is described as the kernel suspending execution of one process on the CPU and resuming execution of some other process that had previously been suspended. A context switch is required for every interrupt and every task that the scheduler picks.

      Context switching can be due to multitasking, Interrupt handling , user & kernel mode switching. The interrupt rate will naturally go high, if there is higher network traffic, or higher disk traffic. Also it is dependent on the application which every now and then invoking system calls.

      If the cores/CPU's are not sufficient to handle load of threads created by application will also result in context switching.

      It is not a cause of concern until performance breaks down. This is expected that CPU will do context switching. One shouldn't verify these data at first place since there are many statistical data which should be analyzed prior to looking into kernel activities. Verify the CPU, memory and network usage during this time. Sar utility will provide these data.

  Diagnostic Steps

      Collect following output to check which process is causing issue :

  Raw

  # pidstat -w 3 10   > /tmp/pidstat.out

  10:15:24 AM     UID     PID     cswch/s         nvcswch/s       Command 
  10:15:27 AM     0       1       162656.7        16656.7         systemd
  10:15:27 AM     0       9       165451.04       15451.04        ksoftirqd/0
  10:15:27 AM     0       10      158628.87       15828.87        rcu_sched
  10:15:27 AM     0       11      156147.47       15647.47        migration/0
  10:15:27 AM     0       17      150135.71       15035.71        ksoftirqd/1
  10:15:27 AM     0       23      129769.61       12979.61        ksoftirqd/2
  10:15:27 AM     0       29      2238.38         238.38          ksoftirqd/3
  10:15:27 AM     0       43      1753            753             khugepaged
  10:15:27 AM     0       443     1659            165             usb-storage
  10:15:27 AM     0       456     1956.12         156.12          i915/signal:0
  10:15:27 AM     0       465     29550           29550           kworker/3:1H-xfs-log/dm-3
  10:15:27 AM     0       490     164700          14700           kworker/0:1H-kblockd
  10:15:27 AM     0       506     163741.24       16741.24        kworker/1:1H-xfs-log/dm-3
  10:15:27 AM     0       594     154742          154742          dmcrypt_write/2
  10:15:27 AM     0       629     162021.65       16021.65        kworker/2:1H-kblockd
  10:15:27 AM     0       715     147852.48       14852.48        xfsaild/dm-1
  10:15:27 AM     0       886     150706.86       15706.86        irq/131-iwlwifi
  10:15:27 AM     0       966     135597.92       13597.92        xfsaild/dm-3
  10:15:27 AM     81      1037    2325.25         225.25          dbus-daemon
  10:15:27 AM     998     1052    118755.1        11755.1         polkitd
  10:15:27 AM     70      1056    158248.51       15848.51        avahi-daemon
  10:15:27 AM     0       1061    133512.12       455.12          rngd
  10:15:27 AM     0       1110    156230          16230           cupsd
  10:15:27 AM     0       1192    152298.02       1598.02         sssd_nss
  10:15:27 AM     0       1247    166132.99       16632.99        systemd-logind
  10:15:27 AM     0       1265    165311.34       16511.34        cups-browsed
  10:15:27 AM     0       1408    10556.57        1556.57         wpa_supplicant
  10:15:27 AM     0       1687    3835            3835            splunkd
  10:15:27 AM     42      1773    3728            3728            Xorg
  10:15:27 AM     42      1996    3266.67         266.67          gsd-color
  10:15:27 AM     0       3166    32036.36        3036.36         sssd_kcm
  10:15:27 AM     119349  3194    151763.64       11763.64        dbus-daemon
  10:15:27 AM     119349  3199    158306          18306           Xorg
  10:15:27 AM     119349  3242    15.28           5.8             gnome-shell

  # pidstat -wt 3 10  > /tmp/pidstat-t.out

  Linux 4.18.0-80.11.2.el8_0.x86_64 (hostname)    09/08/2020  _x86_64_    (4 CPU)

  10:15:15 AM   UID      TGID       TID   cswch/s   nvcswch/s  Command
  10:15:19 AM     0         1         -   152656.7   16656.7   systemd
  10:15:19 AM     0         -         1   152656.7   16656.7   |__systemd
  10:15:19 AM     0         9         -   165451.04  15451.04  ksoftirqd/0
  10:15:19 AM     0         -         9   165451.04  15451.04  |__ksoftirqd/0
  10:15:19 AM     0        10         -   158628.87  15828.87  rcu_sched
  10:15:19 AM     0         -        10   158628.87  15828.87  |__rcu_sched
  10:15:19 AM     0        23         -   129769.61  12979.61  ksoftirqd/2
  10:15:19 AM     0         -        23   129769.61  12979.33  |__ksoftirqd/2
  10:15:19 AM     0        29         -   32424.5    2445      ksoftirqd/3
  10:15:19 AM     0         -        29   32424.5    2445      |__ksoftirqd/3
  10:15:19 AM     0        43         -   334        34        khugepaged
  10:15:19 AM     0         -        43   334        34        |__khugepaged
  10:15:19 AM     0       443         -   11465      566       usb-storage
  10:15:19 AM     0         -       443   6433       93        |__usb-storage
  10:15:19 AM     0       456         -   15.41      0.00      i915/signal:0
  10:15:19 AM     0         -       456   15.41      0.00      |__i915/signal:0
  10:15:19 AM     0       715         -   19.34      0.00      xfsaild/dm-1
  10:15:19 AM     0         -       715   19.34      0.00      |__xfsaild/dm-1
  10:15:19 AM     0       886         -   23.28      0.00      irq/131-iwlwifi
  10:15:19 AM     0         -       886   23.28      0.00      |__irq/131-iwlwifi
  10:15:19 AM     0       966         -   19.67      0.00      xfsaild/dm-3
  10:15:19 AM     0         -       966   19.67      0.00      |__xfsaild/dm-3
  10:15:19 AM    81      1037         -   6.89       0.33      dbus-daemon
  10:15:19 AM    81         -      1037   6.89       0.33      |__dbus-daemon
  10:15:19 AM     0      1038         -   11567.31   4436      NetworkManager
  10:15:19 AM     0         -      1038   1.31       0.00      |__NetworkManager
  10:15:19 AM     0         -      1088   0.33       0.00      |__gmain
  10:15:19 AM     0         -      1094   1340.66    0.00      |__gdbus
  10:15:19 AM   998      1052         -   118755.1   11755.1   polkitd
  10:15:19 AM   998         -      1052   32420.66   25545     |__polkitd
  10:15:19 AM   998         -      1132   0.66       0.00      |__gdbus

  Then with help of PID which is causing issue, one can get all system calls details:
  Raw

  # strace -c -f -p <pid of process/thread>

  Let this command run for a few minutes while the load/context switch rates are high. It is safe to run this on a production system so you could run it on a good system as well to provide a comparative baseline. Through strace, one can debug & troubleshoot the issue, by looking at system calls the process has made.
#+end_example
** [[https://disnetern.ru/how-linux-use-memory/][how worked RAM on Linux | IT Knowledge Base]]
–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–º–µ—Ç—å —á–∏—Ç–∞—Ç—å –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã free:

disetern@host:/# free
              total        used        free      shared  buff/cache   available
Mem:      131998392     4946584     1629068      607664   125422740   121985672
Swap:     134179836           0   134179836

    Mem-total ‚Äì –æ–±—â–∏–π –æ–±—ä—ë–º –∏–º–µ—é—â–µ–π—Å—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –±–µ–∑ —É—á—ë—Ç–∞ swap
    Mem cached ‚Äì –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–∏—Å–∫–æ–≤–æ–µ I/O. –û—á–∏—â–∞—Ç—å –∫—ç—à ‚Äì –∑–∞—Ç—Ä–∞—Ç–Ω–æ–µ –¥–µ–ª–æ (–æ–¥–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –∫–∞–∂–¥–æ–π –æ–±–ª–∞—Å—Ç–∏ –ø–∞–º—è—Ç–∏ —á–µ–≥–æ —Å—Ç–æ–∏—Ç) –∏ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äì —Å—Ç—Ä–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
    Mem used ‚Äì –ø–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏, –±—É—Ñ–µ—Ä–∞–º–∏, –∫—ç—à–∞–º–∏
    Mem free ‚Äì –≤–æ–æ–±—â–µ –Ω–∏–∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –ø–∞–º—è—Ç—å
    Swap-total ‚Äì –æ–±—â–∏–π –æ–±—ä—ë–º swap

–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è, –∞ –∫–æ–≥–¥–∞ –Ω–µ—Ç

    buffers/cache /Mem-total < 4/5 ‚Äì –º–æ–∂–Ω–æ —Å–ø–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ
    Swap used / Swap total > 1/2 ‚Äì –≤–æ–æ–±—â–µ, —Å–∏—Ç—É–∞—Ü–∏—è —Ç–∞–∫ —Å–µ–±–µ, —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∞—Ç—å —Å–∏–ª—å–Ω–æ —Ç–æ—Ä–º–æ–∑–∏—Ç—å
    Swap used > 2Gb (–ø—Ä–∏ –æ–±—ä—ë–º–∞—Ö –ø–∞–º—è—Ç–∏ –¥–æ 16Gb) –∏ —ç—Ç–∞ —Ü–∏—Ñ—Ä–∞ –†–ê–°–¢–Å–¢ –ù–ê –ì–õ–ê–ó–ê–• ‚Äì —Ç–æ–∂–µ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ –æ—á–µ–Ω—å.

** [[https://disnetern.ru/hw-view-linux/][–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ Linux —Å–∏—Å—Ç–µ–º–∞—Ö | IT Knowledge Base]]
*** –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ USB
: lsusb

*** –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ PCI —à–∏–Ω–µ
: lspci

*** –ë–ª–æ—á–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
: lsblk

*** –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —à–∏–Ω–µ DMI:
: dmidecode

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç–µ:
: dmidecode --type 2

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ:
: dmidecode --type 4

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ –ø–∞–º—è—Ç–∏:
: dmidecode --type 5,6

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –û–ó–£
: dmidecode --type 16

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –û–ó–£:
: dmidecode --type 17

** Videos

- [[https://www.youtube.com/c/GNULinuxPro/videos][GNU Linux Pro - YouTube]]

* Lockdown
- [[https://github.com/x08d/lockdown.sh][x08d/lockdown.sh: Lockdown your linux install. The simple zero config linux hardening script]]
- [[https://github.com/BetterWayElectronics/secure-wireguard-implementation][BetterWayElectronics/secure-wireguard-implementation: A guide on implementing a secure Wireguard server on OVH (or any other Debian VPS) with DNSCrypt, Port Knocking & an SSH-Honeypot]]

* Memory

- [[https://github.com/hakavlad/prelockd][hakavlad/prelockd: Lock executables and shared libraries in memory to improve system responsiveness under low-memory conditions]]

- [[https://www.carstengrohmann.de/oom/][OOM Analyser]]
- [[https://sr.ht/~carstengrohmann/OOMAnalyser/][OOMAnalyser: Linux OOM Analyser]]
- [[https://www.opennet.ru/opennews/art.shtml?num=57383][Facebook –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª –º–µ—Ö–∞–Ω–∏–∑–º TMO, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —ç–∫–æ–Ω–æ–º–∏—Ç—å 20-32% –ø–∞–º—è—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö]]

[[https://github.com/0x0f0f0f/memplot][0x0f0f0f/memplot: Generate image plots of processes' memory usage very quickly, within a single binary.]]

: echo 3 > /proc/sys/vm/drop_caches

- [[https://hoytech.com/vmtouch/][Hoytech vmtouch]]
- [[https://www.sobyte.net/post/2022-04/k8s-pod-shared-memory/][Setting up the shared memory of a kubernetes Pod - SoByte]]
- [[https://github.com/rfyiamcool/pgcacher][rfyiamcool/pgcacher: üî• pgcacher is used to get page cache stats for files on Linux. ( ÂàÜÊûê page cache ÁºìÂ≠ò‰∫ÜÂì™‰∫õÊñá‰ª∂ÔºåÊñá‰ª∂Âú® page cache ÁöÑÁºìÂ≠òÂç†ÊØî)]]

* Namespaces

- [[https://unix.stackexchange.com/questions/144794/why-would-the-kernel-drop-packets][Create an empty network namespace]]
#+begin_quote
Besides what the man page says, there appears to be some additional reason why
packets may be dropped by the kernel. I was experiencing 100% packet drop from
tcpdump where the only traffic on the network was one 512B packet of PRBS per
second. Clearly the buffer space explanation doesn't make sense here - I think
the kernel can handle 0.5kiB/s.

Something that came along with my distro (Ubuntu 14.04) may have been doing
some sort of smart filtering at the link layer that didn't like my test
packets. My workaround was to create a new network namespace as follows:

sudo -i
ip netns add debug
ip link set dev eth0 netns debug
ip netns exec debug bash
ifconfig eth0 1.2.3.4 up

In the inner netns shell, whatever OS processes that were causing problems
before are out of the picture and tcpdump shows me all of the packets I expect
to see.
#+end_quote

- [[https://github.com/JonathonReinhart/linux-netns-sysctl-verify][JonathonReinhart/linux-netns-sysctl-verify: Linux network namespace sysctl safety verifier.]]

* netconsole
[[https://debamax.com/fr/blog/2019/01/03/debugging-with-netconsole/][Debugging with netconsole | DEBAMAX]]

Why would one need netconsole?

Sometimes the Linux kernel crashes so badly that it leaves no traces in the logs. Even having a shell with a dmesg -w running in the background might prove to be insufficient.

There‚Äôs a nice tool in the kernel which makes it possible to send kernel logs over the network. It‚Äôs called netconsole. As far as limitations are concerned, one shall note that it‚Äôs UDP only, and over Ethernet (in other words: no wireless). The good news is that it can usually make the last crucial lines available, as it requires a rather limited set of features (as opposed to getting files written on a filesystem, which needs to get onto physical storage).

Example: netconsole made it possible to get a stacktrace of a kernel OOPS when writing to some USB mass storage devices, and to file #917206 in the Debian bug tracking system.

Terminology: Let‚Äôs call the crashing machine a patient and the logging machine a doctor.

The netconsole module needs to be loaded on the patient only, while the doctor just needs a user-space program to capture traces. If the module‚Äôs configuration needs to be updated or fixed, the module can be unloaded at any time through:

sudo modprobe -r netconsole

It is also highly recommended to ask the kernel to log all the things by setting this specific console log level:

sudo dmesg -n 8

The current console log level can be checked by dumping the contents of the /proc/sys/kernel/printk file, and reading the first value. With the default configuration on Debian 9 (Stretch), the console log level is 4, which isn‚Äôt sufficient to confirm netconsole is properly set up; it seems one needs at least console log level 7.
Easy case: on a local network

Here‚Äôs an example with both machines on a local network:

    Patient‚Äôs IP is 192.168.0.1;
    Doctor‚Äôs IP is 192.168.0.2;
    They can be wired together directly, or there can be switches on the path.

Local network
Doctor setup

A receiver is needed on the doctor side, which needs to accept UDP packets. There are several nc (short for "netcat") implementations, e.g. netcat-traditional and netcat-openbsd, with subtly different flags. Let‚Äôs use socat instead:

sudo apt-get install socat
socat UDP-LISTEN:6666,fork - | tee -a ~/netconsole.txt

Let‚Äôs dissect those lines:

    socat listens on port 6666 for the UDP protocol.
    With the fork option, one ensures there‚Äôs always a socat process left behind, instead of risking an early termination once a given input has been processed. This could generate "connection refused" issues otherwise.
    socat writes to the standard output (-) which is redirected to tee through the pipe (|).
    tee will itself print messages to its standard output but also log them in the specified file.
    With the -a flag, tee will happen new messages to the specified file instead of overwriting it, should the command be stopped and started again.
    Running as non-privileged user is sufficient as port 6666 is not privileged (because 6666 ‚â• 1024).

Of course the doctor needs to accept such packets, and its firewall might need an update accordingly. If it isn‚Äôt maintained through shorewall, ferm, or another dedicated firewall software, the following iptables command might serve as a basis to get packets through:

sudo iptables -A INPUT -p udp -m udp --dport 6666 -j ACCEPT

Patient setup

Now, to have the patient send stuff to the doctor, a simple modprobe call is needed:

sudo modprobe netconsole netconsole=@/eth0,6666@192.168.0.2/

What happens here? One requests the netconsole module to be loaded, and one specifies the parameters. Details can be read in the Linux kernel documentation (Documentation/networking/netconsole.txt), but concentrating on the points of interest here:

    eth0 is the output interface on the patient‚Äôs side. Specifying it might be useful if the patient machine has several Ethernet interfaces, it can be omitted otherwise.
    192.168.0.2 is the doctor‚Äôs IP.
    6666 is the UDP destination port. 6666 is the default and can be omitted.

That should be enough to get this output on the doctor side:

[ 1748.295633] netpoll: netconsole: local port 6665
[ 1748.295637] netpoll: netconsole: local IPv4 address 0.0.0.0
[ 1748.295639] netpoll: netconsole: interface 'eth0'
[ 1748.295640] netpoll: netconsole: remote port 6666
[ 1748.295642] netpoll: netconsole: remote IPv4 address 192.168.0.2
[ 1748.295644] netpoll: netconsole: remote ethernet address AA:BB:CC:DD:EE:FF
[ 1748.295647] netpoll: netconsole: local IP 192.168.0.1
[ 1748.295702] console [netcon0] enabled
[ 1748.295704] netconsole: network logging started

If nothing appears there, one might want to double check the current console log level (see introduction), and possible packet drops/rejects on the firewall side.
Slightly harder case: over internet

Because one might not have a second machine handy, it‚Äôs also possible to go through a router and send stuff across the internet. Let‚Äôs consider this case:

    Patient‚Äôs IP is 192.168.0.1;
    Patient is connected to internet through a router, which has IP 192.168.0.254;
    The doctor, available over the internet, has IP 93.184.216.34.

Over internet
Doctor setup

The instructions are the same as in the local case, even if it would probably make sense to be more selective regarding firewalling: filtering on the source IP would likely be a good idea.
Patient setup

The fundamental change compared to the "local network" use case is the need for routing. This is supported by netconsole but one needs to specify an extra parameter: the MAC address of the (first) router. To obtain it, one can use net-tools‚Äôs arp command or iproute2‚Äôs ip neighbour command:

arp 192.168.0.254
ip n show 192.168.0.254

Supposing it returned the 01:02:03:04:05:06 MAC address, loading the module becomes:

sudo modprobe netconsole netconsole=@/,6666@93.184.216.34/01:02:03:04:05:06

Now, if one is running into firewall-related issues, one can change the source port for the UDP packets. The default is 6665, but assuming one wants to send from an unfiltered 1234 port, that becomes:

sudo modprobe netconsole netconsole=1234@/,6666@93.184.216.34/01:02:03:04:05:06

Permanent debugging?

The approach presented here is temporary by nature, as no modifications of the patient‚Äôs system configuration are involved. If desired, one can set the various options to be passed to the netconsole module in a modprobe configuration file. Example with a dedicated modprobe.d snippet:

echo options netconsole netconsole=@/eth0,6666@192.168.0.2/ | sudo tee /etc/modprobe.d/netconsole-local-debugging.conf

Even with such an extra configuration file, those settings would only get applied when the netconsole module is loaded. To have it loaded automatically at boot-up, it can be listed in /etc/modules or in a separate modules-load.d snippet:

echo netconsole | sudo tee /etc/modules-load.d/netconsole.conf

Warning: That relies on having network set up early in the boot process (which won‚Äôt be documented here because that‚Äôs another topic and that would be require a long digression). If the network isn‚Äôt configured already at the time netconsole is set up, one can get:

sudo dmesg | grep netconsole
[   11.677066] netpoll: netconsole: local port 6665
[   11.677143] netpoll: netconsole: local IPv4 address 0.0.0.0
[   11.677216] netpoll: netconsole: interface 'eth0'
[   11.677287] netpoll: netconsole: remote port 6666
[   11.677356] netpoll: netconsole: remote IPv4 address 192.168.0.2
[   11.677430] netpoll: netconsole: remote ethernet address ff:ff:ff:ff:ff:ff
[   11.677514] netpoll: netconsole: device eth0 not up yet, forcing it
[   15.432381] netpoll: netconsole: no IP address for eth0, aborting
[   15.432540] netconsole: cleaning up

In any case, it might be a good idea to also automate setting a sufficiently high console log level. Passing loglevel=8 on the kernel command line could be a way, or a tiny start-up script calling dmesg -n 8 or updating the /proc/sys/kernel/printk file. <p>Enjoy tracking down kernel bugs!

* Netflow
- [[https://github.com/aabc/ipt-netflow][aabc/ipt-netflow: Netflow iptables module for Linux kernel (official)]]

* Networking

oleg@guixsd ~$ ss --numeric --tcp --listening --no-header --oneline --processes '( sport = :5901 )'

rp_filter https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt

- [[https://github.com/vi/netns_tcp_bridge][vi/netns_tcp_bridge: Linux CLI tool to forward TCP connections from one network namespace to another network namespace]]

* News
- Lxer :: http://lxer.com/
- Linux Today :: https://www.linuxtoday.com/
- Slash dot :: https://linux.slashdot.org/
- Alltop :: https://alltop.com/linux
- TuxURLs :: https://tuxurls.com/
- Hackernews :: https://news.ycombinator.com/
- Linux France :: [[https://linuxfr.org/][Accueil - LinuxFr.org]]

* nftables
- [[https://github.com/google/nftables][google/nftables: This package manipulates Linux nftables (the iptables successor)]]
- [[https://habr.com/ru/company/ruvds/blog/580648/][–ü–µ—Ä–µ—Ö–æ–¥ —Å iptables –Ω–∞ nftables. –ö—Ä–∞—Ç–∫–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ / –•–∞–±—Ä]]

* nice and ionice

- [[https://www.tiger-computing.co.uk/linux-tips-nice-and-ionice/][Linux Tips: nice and ionice - Tiger Computing]]

Most system administrators understand the nice command, which may be
used to change a process‚Äôs priority. Any user can change the priority
of processes running under their UID, but only root may change others‚Äô
processes.

The current nice value of a process can be shown in a variety of ways,
with perhaps the simplest being to use top where the nice value is
shown in the column labelled NI. We can also see the nice value with
some forms of the ps command; for example, here we see the PID, the
nice value and the command:

#+BEGIN_SRC bash
  ps -o pid,ni,comm 
#+END_SRC

#+RESULTS:
:   PID  NI COMMAND 
:  1477   0 bash 
: 18710   0 ps

Perhaps confusingly, the lower the nice value the higher the
priority. For most processes, the default nice value is zero. There
are two versions of the command: nice (to start a process with a
specific nice value), and renice (to alter the nice value of a running
process). If your complex calculation running as PID 12345 is taking a
lot of processing power, you can be a good server citizen by reducing
its priority using renice:

#+BEGIN_SRC bash
  renice 10 12345
#+END_SRC
#+RESULTS:
: 12345 (process ID) old priority 0, new priority 10

Or maybe your calculation is more important than everyone else‚Äôs work:

#+BEGIN_SRC bash
  renice -10 12345
#+END_SRC

#+RESULTS:
: renice: failed to set priority for 12345 (process ID): Permission denied

‚Äì but you‚Äôll need to be root to do that.
ionice

Not so well understood is the ionice command, which sets or shows both
the I/O class and, within that class, the priority. There are four
classes:

0) None
1) Realtime
2) Best-effort
3) Idle

Confusingly, on a modern kernel, ‚ÄúNone‚Äù and ‚ÄúBest-effort‚Äù are the same
thing, and they are also the default. The Idle class does as you might
expect: it executes I/O for the process in question when there is no
other I/O scheduled, and, as such, it does not take a priority.

Both ‚ÄúRealtime‚Äù and ‚ÄúBest-effort‚Äù take a priority level from zero to
7, with zero having the highest priority. ‚ÄúRealtime‚Äù tries to give
processes immediate access to the disk, ordered by priority.  Examples

Here we examine the class and priority used by PID 3467:

#+BEGIN_SRC bash
  ionice -p 3467
#+END_SRC

#+RESULTS:
: best-effort: prio 4

If we are root, we could switch that to the Realtime class with a
priority of 3:

#+BEGIN_SRC bash
  ionice -c 1 -n 3 -p 3467 
  ionice  -p 3467
#+END_SRC

#+RESULTS:
: realtime: prio 3

Application

So when might you use this? Maybe you have some rsync processes
running on a production server, and they‚Äôre impacting performance. You
don‚Äôt want to abort them, but you do want to reduce their impact, so
you set the I/O scheduling class to Idle. The rsyncs will take longer,
possibly a lot longer, but they will no longer cause a performance
degradation:

#+BEGIN_SRC bash
  for pid in $(pidof rsync); do ionice -c 3 -p $pid; done
#+END_SRC

* Performance
- [[https://github.com/igo95862/cfs-zen-tweaks][igo95862/cfs-zen-tweaks: Tweak Linux CPU scheduler for desktop responsiveness]]

* Privileges
: echo 1 > /proc/sys/kernel/unprivileged_userns_clone

* Proxy
- [[https://github.com/m0hithreddy/Proxifier-For-Linux][m0hithreddy/Proxifier-For-Linux: Simple C code with iptables make this tool proxifier which tunnels whole system traffic through the proxy server, without configuring individual application]]
- [[https://github.com/vi/tcpsocks][vi/tcpsocks: Redirect traffic to SOCKS5 server with iptables, epoll based, single threaded.]]
- [[https://github.com/heiher/hev-socks5-tproxy][heiher/hev-socks5-tproxy: A simple, lightweight socks5 transparent proxy for Linux. (IPv4/IPv6/TCP/UDP over TCP)]]

* QoS
- [[https://github.com/aabc/ipt-ratelimit][aabc/ipt-ratelimit: An implementation of committed access rate, or simply rate limiting, or policing for Linux iptables, implemented with high performance in mind.]]
- [[https://github.com/rosywrt/nft-qos][rosywrt/nft-qos: QoS over Nftables (This packages is merged upstream, please visit openwrt/packages and openwrt/luci for more detail)]]

* reboot

** proc

$ sudo echo 1 > /proc/sys/kernel/sysrq

To reboot, you can use either Alt+Sysrq+B or type:

$ sudo echo b > /proc/sysrq-trigger

This method is not a reasonable way to reboot your machine on a regular basis, but it gets the job done in a pinch.

** sysctl

sysctl --all
sysctl --value kernel.panic

If you get a 0 back, then the kernel you‚Äôre running has no special setting, at
least by default, to reboot upon a kernel panic. That situation is fairly
typical since rebooting immediately on a catastrophic system crash makes it
difficult to diagnose the cause of the crash. Then again, systems that need to
stay on no matter what might benefit from an automatic restart after a kernel
failure, so it‚Äôs an option that does get switched on in some cases.

You can activate this feature as an experiment (if you‚Äôre following along, try
this in a virtual machine rather than on your actual computer):

$ sudo sysctl kernel.reboot=1

Now, should your computer experience a kernel panic, it is set to reboot
instead of waiting patiently for you to diagnose the problem. You can test
this by simulating a catastrophic crash with sysrq. First, make sure that
Sysrq is enabled:

$ sudo echo 1 > /proc/sys/kernel/sysrq

And then simulate a kernel panic:

$ sudo echo c > /proc/sysrq-trigger

Your computer reboots immediately.

* scsi
- [[https://serverfault.com/questions/5336/how-do-i-make-linux-recognize-a-new-sata-dev-sda-drive-i-hot-swapped-in-without][How do I make Linux recognize a new SATA /dev/sda drive I hot swapped in without rebooting? - Server Fault]]
- [[https://github.com/koct9i/ioping][koct9i/ioping: simple disk I/0 latency measuring tool]]
- fio --name=randwrite --rw=randwrite --direct=1 --ioengine=libaio --bs=64k --numjobs=8 --size=512m --runtime=600 --group_reporting
** Utilities
- ioping
- fio

* Shebang

- [[https://www.in-ulm.de/~mascheck/various/shebang/#splitting][The #! magic, details about the shebang/hash-bang mechanism]]
  - fs/binfmt_script.c
  - [[https://web.archive.org/web/20150923090050/http://lkml.org/lkml/2004/2/16/74][LKML: Hansjoerg Lipp: [PATCH] Linux 2.6: shebang handling in fs/binfmt_script.c]]
  - [[https://linux.die.net/man/2/execve][execve(2): execute program - Linux man page]]

* source

/home/oleg/archive/src/linux/arch/x86/entry/syscalls/syscall_64.tbl

* sudo

  =sudo= doesn't create /run/user/<UID> directory, instead you could use
  =machinectl shell=, e.g:
  : [user1@host:~]$ machinectl shell user2@

* Tools
- [[https://github.com/alexellis/fstail][alexellis/fstail: Scan a directory for changed files and tail them]]
- [[https://github.com/BrenekH/smartreboot][BrenekH/smartreboot: Reboot a machine without interrupting ongoing work.]]
- [[https://github.com/google/schedviz][google/schedviz: A tool for gathering and visualizing kernel scheduling traces on Linux machines]]
- [[https://github.com/icculus/fatelf][icculus/fatelf: Universal binaries for Linux.]]
- [[https://github.com/jafarlihi/modreveal][jafarlihi/modreveal: Utility to find hidden Linux kernel modules]]
- [[https://github.com/JulienPalard/logtop][JulienPalard/logtop: Display real time statistics of whatever you want.]]
- [[https://github.com/koute/bytehound][koute/bytehound: A memory profiler for Linux.]]
- [[https://github.com/leahneukirchen/extrace][leahneukirchen/extrace: trace exec() calls system-wide]]
- [[https://github.com/leo-arch/clifm][leo-arch/clifm: The shell-like, command line terminal file manager: simple, fast, extensible, and lightweight as hell]]
- [[https://github.com/liamg/siphon][liamg/siphon: Intercept stdin/stdout/stderr for any process]]
- [[https://github.com/namazso/linux_injector][namazso/linux_injector: A simple ptrace-less shared library injector for x64 Linux]]
- [[https://github.com/nixcloud/ip2unix][nixcloud/ip2unix: Turn IP sockets into Unix domain sockets]]
- [[https://github.com/orhun/kmon][orhun/kmon: Linux Kernel Manager and Activity Monitor]]
- [[https://github.com/queer/boxxy][queer/boxxy: boxxy puts bad Linux applications in a box with only their files.]]
- [[https://github.com/shadow-maint/shadow][shadow-maint/shadow: Upstream shadow tree]]
- [[https://github.com/susam/uncap][susam/uncap: Map Caps Lock to Escape or any key to any key]]
- [[https://github.com/vikmik/scratch][vikmik/scratch: Tool that creates a shell environment where actions have no consequences]]
- [[https://www.opennet.ru/opennews/art.shtml?num=51542][–í —Å–æ—Å—Ç–∞–≤ —è–¥—Ä–∞ Linux –ø—Ä–∏–Ω—è—Ç dm-clone, –º–æ–¥—É–ª—å –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤]]

* udev
: udevadm info --attribute-walk --query-all --path=/class/block/sda1 | grep mysql

* unshare
  #+begin_src bash
    unshare -mrf strace -s 80 -o trace -ff  sh -c 'mount -t tmpfs -o ro none "/gnu/store"; /tmp/pack-dir/opt/bin/hello'
  #+end_src

* Video

- [[https://www.youtube.com/playlist?list=PLypxmOPCOkHXbJhUgjRaV2pD9MJkIArhg][C Programming in Linux Tutorial - YouTube]]

