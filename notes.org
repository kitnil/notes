#+TITLE: notes

* Tasks
** TODO Arch packaging tutorial on irc
   [2016-12-03 Sat]
   [[gnus:INBOX#91dac71e-4a12-4306-8f99-74ec6cd32167@dev.null.invalid][Email to go wigust: Any programmers here who don't]]
** TODO Watch Red Hat webinar
   [2016-12-03 Sat]
   [[gnus:INBOX#ff3304$ddjdj@smtp.theonlinexpo.com][Email from Red Hat Webcasts: Daily development with Docker,]]

* Notes
** Note read a book PAM Mastery by Michael W Lucas
 <2016-12-13 Tue 01:46>
** Note Checkout Unmark do something with your bookmarks 
 <2016-12-13 Tue 03:56>
** Note karboon                                              :drawing:vector: 
 <2016-12-13 Tue 04:08>
** Note Kodi announce official plex addon         :kodi:plex:addons:official: 
 <2016-12-13 Tue 04:42>
** Note linux enter group without logout ~newgrp~  :linux:group:enter:logout: 
 <2016-12-13 Tue 08:18>
** Note Find and Install missing build dependencies as found in debian/control :debian:develop:packaging:source:building: 
 <2016-12-13 Tue 12:55>
#+BEGIN_SRC bash
sudo mk-build-deps --install --remove
#+END_SRC
** Note Change token gitsome and ssh key       :security:token:github:update: 
 <2016-12-13 Tue 14:28>
** Note На сайте и на 2 этаде у диспетчерской в конце декабря появится наше расписание занятий :university:shedule: 
 <2016-12-30 Fri 20:57>
** Note use maybe                  :python:utilities:file:try:execute:github: 
 <2016-12-13 Tue 23:02>
[[https://github.com/p-e-w/maybe][p-e-w/maybe: :rabbit2: See what a program does before deciding whether you really want it to happen.]]
#+BEGIN_QUOTE
See what a program does before deciding whether you really want it to happen.
#+END_QUOTE
** [[https://github.com/etsy/logster][logster]] parse log files                 :python:system:log:metrics:parser: 
 <2016-12-14 Wed 00:51>
  Parse log files, generate metrics for Graphite and Ganglia
** [[https://github.com/micahflee/onionshare/blob/master/README.md][onionshare/README.md at master · micahflee/onionshare]] :onion:python:share:files:tor:github: 
 <2016-12-14 Wed 00:53>
 OnionShare lets you securely and anonymously share files of any size. It works by starting a web server, making it accessible as a Tor onion service, and generating an unguessable URL to access and download the files. It doesn't require setting up a server on the internet somewhere or using a third party filesharing service. You host the file on your own computer and use a Tor onion service to make it temporarily accessible over the internet. The other user just needs to use Tor Browser to download the file from you.

 Features include:

     A user-friendly drag-and-drop graphical user interface that works in Windows, Mac OS X, and Linux
     Ability to share multiple files and folders at once
     Support for multiple people downloading files at once
     Automatically copies the unguessable URL to your clipboard
     Shows you the progress of file transfers
     When file is done transferring, automatically closes OnionShare to reduce the attack surface
     Localized into several languages, and supports international unicode filenames

 If you're interested in exactly what OnionShare does and does not protect against, read the Security Design Document.
** [[https://github.com/maebert/jrnl#jrnl----][maebert/jrnl: A simple command line journal application that stores your journal in a plain text file.]] :python:journal:github:top: 
 <2016-12-14 Wed 00:56>
 jrnl Build Status Downloads Version

 For news on updates or to get help, read the docs, follow @maebert or submit an issue on Github.

 jrnl is a simple journal application for your command line. Journals are stored as human readable plain text files - you can put them into a Dropbox folder for instant syncing and you can be assured that your journal will still be readable in 2050, when all your fancy iPad journal applications will long be forgotten.

 jrnl also plays nice with the fabulous DayOne and can read and write directly from and to DayOne Journals.

 Optionally, your journal can be encrypted using the 256-bit AES.
 Why keep a journal?

 Journals aren't only for 13-year old girls and people who have too much time on their summer vacation. A journal helps you to keep track of the things you get done and how you did them. Your imagination may be limitless, but your memory isn't. For personal use, make it a good habit to write at least 20 words a day. Just to reflect what made this day special, why you haven't wasted it. For professional use, consider a text-based journal to be the perfect complement to your GTD todo list - a documentation of what and how you've done it.
** [[https://github.com/PressLabs/gitfs][PressLabs/gitfs: Version controlled file system]] :python:git:filesystem:github:top: 
 <2016-12-14 Wed 00:59>
 gitfs Build Status Coverage Status
 Welcome to GitFS

 gitfs is a FUSE file system that fully integrates with git. You can mount a remote repository's branch locally, and any subsequent changes made to the files will be automatically committed to the remote.
 What's its purpose?

 gitfs was designed to bring the full powers of git to everyone, no matter how little they know about versioning. A user can mount any repository and all the his changes will be automatically converted into commits. gitfs will also expose the history of the branch you're currently working on by simulating snapshots of every commit.

 gitfs is useful in places where you want to keep track of all your files, but at the same time you don't have the possibility of organizing everything into commits yourself. A FUSE filesystem for git repositories, with local cache
 Features

     Automatically commits changes: create, delete, update files and their metadata
     Browse through working index and commit history
     Merges with upstream by automatically accepting local changes
     Caching commits reduces the memory footprint and speeds up navigation
     Reduces the number of pushes by batching commits
** [[https://github.com/apenwarr/sshuttle][apenwarr/sshuttle: Transparent proxy server that works as a poor man's VPN. Forwards over ssh. Doesn't require admin. Works with Linux and MacOS. Supports DNS tunneling.]] :python:github:top:ssh:vpn:proxy:easy: 
 <2016-12-14 Wed 06:49>
  Transparent proxy server that works as a poor man's VPN. Forwards over ssh. Doesn't require admin. Works with Linux and MacOS. Supports DNS tunneling.
** [[https://github.com/jkbrzt/httpie][jkbrzt/httpie: Modern command line HTTP client — user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc. Follow https://twitter.com/CLIHTTP for tips and updates.]] :python:github:top:http:client: 
 <2016-12-14 Wed 06:50>
 HTTPie: a CLI, cURL-like tool for humans

 HTTPie (pronounced aitch-tee-tee-pie) is a command line HTTP client. Its goal is to make CLI interaction with web services as human-friendly as possible. It provides a simple http command that allows for sending arbitrary HTTP requests using a simple and natural syntax, and displays colorized output. HTTPie can be used for testing, debugging, and generally interacting with HTTP servers.
** [[https://github.com/kennethreitz/requests][kennethreitz/requests: Python HTTP Requests for Humans™]] :python:github:top:http:request:human:easy: 
 <2016-12-14 Wed 06:51>
 Requests is the only Non-GMO HTTP library for Python, safe for human consumption.

 Warning: Recreational use of other HTTP libraries may result in dangerous side-effects, including: security vulnerabilities, verbose code, reinventing the wheel, constantly reading documentation, depression, headaches, or even death.
** [[https://github.com/donnemartin/data-science-ipython-notebooks][donnemartin/data-science-ipython-notebooks: Continually updated data science Python notebooks: Deep learning (TensorFlow, Theano, Caffe), scikit-learn, Kaggle, big data (Spark, Hadoop MapReduce, HDFS), matplotlib, pandas, NumPy, SciPy, Python essentials, AWS, and various command lines.]] :python:github:top:data:science: 
 <2016-12-14 Wed 06:51>
  Continually updated data science Python notebooks: Deep learning (TensorFlow, Theano, Caffe), scikit-learn, Kaggle, big data (Spark, Hadoop MapReduce, HDFS), matplotlib, pandas, NumPy, SciPy, Python essentials, AWS, and various command lines.
** [[https://github.com/nvbn/thefuck][nvbn/thefuck: Magnificent app which corrects your previous console command.]] :python:github:top:shell:completion:fix:correct:spell: 
 <2016-12-14 Wed 06:52>
 Magnificent app which corrects your previous console command, inspired by a @liamosaur tweet.
** [[https://github.com/faif/python-patterns][faif/python-patterns: A collection of design patterns/idioms in Python]] :python:github:top:patterns:study:programming: 
 <2016-12-14 Wed 06:55>
 python-patterns

 A collection of design patterns and idioms in Python.

 When an implementation is added or modified, be sure to update this file and rerun append_output.sh (eg. ./append_output.sh borg.py) to keep the output comments at the bottom up to date.
** [[https://github.com/fchollet/keras][fchollet/keras: Deep Learning library for Python. Convnets, recurrent neural networks, and more. Runs on Theano or TensorFlow.]] :python:github:top:deep:learning: 
 <2016-12-14 Wed 06:56>
 You have just found Keras.

 Keras is a high-level neural networks library, written in Python and capable of running on top of either TensorFlow or Theano. It was developed with a focus on enabling fast experimentation. Being able to go from idea to result with the least possible delay is key to doing good research.

 Use Keras if you need a deep learning library that:

     Allows for easy and fast prototyping (through total modularity, minimalism, and extensibility).
     Supports both convolutional networks and recurrent networks, as well as combinations of the two.
     Supports arbitrary connectivity schemes (including multi-input and multi-output training).
     Runs seamlessly on CPU and GPU.

 Read the documentation at Keras.io.

 Keras is compatible with: Python 2.7-3.5.
** [[https://github.com/jonathanslenders/python-prompt-toolkit][jonathanslenders/python-prompt-toolkit: Library for building powerful interactive command lines in Python]] :python:github:top:commandline:cli:build:programming: 
 <2016-12-14 Wed 06:59>

 prompt_toolkit is a library for building powerful interactive command lines and terminal applications in Python.

 Read the documentation on readthedocs.
** [[https://github.com/binux/pyspider][binux/pyspider: A Powerful Spider(Web Crawler) System in Python.]] :python:github:top:spider:web: 
 <2016-12-14 Wed 07:00>

 A Powerful Spider(Web Crawler) System in Python. TRY IT NOW!

     Write script in Python
     Powerful WebUI with script editor, task monitor, project manager and result viewer
     MySQL, MongoDB, Redis, SQLite, Elasticsearch; PostgreSQL with SQLAlchemy as database backend
     RabbitMQ, Beanstalk, Redis and Kombu as message queue
     Task priority, retry, periodical, recrawl by age, etc...
     Distributed architecture, Crawl Javascript pages, Python 2&3, etc...

 Tutorial: http://docs.pyspider.org/en/latest/tutorial/
 Documentation: http://docs.pyspider.org/
 Release notes: https://github.com/binux/pyspider/releases
** [[https://github.com/soimort/you-get][soimort/you-get: Dumb downloader that scrapes the web]] :python:github:top:downloader:scrape:web:youtube: 
 <2016-12-14 Wed 07:17>

 You-Get is a tiny command-line utility to download media contents (videos, audios, images) from the Web, in case there is no other handy way to do it.

 Here's how you use you-get to download a video from this web page:

 $ you-get http://www.fsf.org/blogs/rms/20140407-geneva-tedx-talk-free-software-free-society
 Site:       fsf.org
 Title:      TEDxGE2014_Stallman05_LQ
 Type:       WebM video (video/webm)
 Size:       27.12 MiB (28435804 Bytes)

 Downloading TEDxGE2014_Stallman05_LQ.webm ...
 100.0% ( 27.1/27.1 MB) ├████████████████████████████████████████┤[0/0]   12 MB/s

 And here's why you might want to use it:

     You enjoyed something on the Internet, and just want to download them for your own pleasure.
     You watch your favorite videos online from your computer, but you are prohibited from saving them. You feel that you have no control over your own computer. (And it's not how an open Web is supposed to work.)
     You want to get rid of any closed-source technology or proprietary JavaScript code, and disallow things like Flash running on your computer.
     You are an adherent of hacker culture and free software.

 What you-get can do for you:

     Download videos / audios from popular websites such as YouTube, Youku, Niconico, and a bunch more. (See the full list of supported sites)
     Stream an online video in your media player. No web browser, no more ads.
     Download images (of interest) by scraping a web page.
     Download arbitrary non-HTML contents, i.e., binary files.

 Interested? Install it now and get started by examples.

 Are you a Python programmer? Then check out the source and fork it!
** [[https://github.com/miguelgrinberg/flasky][miguelgrinberg/flasky: Companion code to my O'Reilly book "Flask Web Development".]] :python:github:top:flasky:book: 
 <2016-12-14 Wed 07:18>

 Flasky

 This repository contains the source code examples for my O'Reilly book Flask Web Development.

 The commits and tags in this repository were carefully created to match the sequence in which concepts are presented in the book. Please read the section titled "How to Work with the Example Code" in the book's preface for instructions.
** [[https://github.com/alexjc/neural-doodle][alexjc/neural-doodle: Turn your two-bit doodles into fine artworks with deep neural networks, generate seamless textures from photos, transfer style from one image to another, perform example-based upscaling, but wait... there's more! (An implementation of Semantic Style Transfer.)]] :python:github:top:neural:image:drawing:ia: 
 <2016-12-14 Wed 07:19>

 Use a deep neural network to borrow the skills of real artists and turn your two-bit doodles into masterpieces! This project is an implementation of Semantic Style Transfer (Champandard, 2016), based on the Neural Patches algorithm (Li, 2016). Read more about the motivation in this in-depth article and watch this workflow video for inspiration.

 The doodle.py script generates a new image by using one, two, three or four images as inputs depending what you're trying to do: the original style and its annotation, and a target content image (optional) with its annotation (a.k.a. your doodle). The algorithm extracts annotated patches from the style image, and incrementally transfers them over to the target image based on how closely they match.

 NOTE: Making a #NeuralDoodle is a skill. The parameters in the script were adjusted to work well by default and with the examples below. For new images, you may need to adjust values and modify on your input data too. It takes practice, but you can reach almost photo-realistic results if you iterate! (Ask for advice here or see examples.)
** [[https://github.com/toastdriven/restless][toastdriven/restless: A lightweight REST miniframework for Python.]] :python:github:top:rest:api: 
 <2016-12-14 Wed 07:20>

 A lightweight REST miniframework for Python.

 Documentation is at http://restless.readthedocs.org/.

 Works great with Django, Flask, Pyramid, Tornado & Itty, but should be useful for many other Python web frameworks. Based on the lessons learned from Tastypie & other REST libraries.
 Features

     Small, fast codebase
     JSON output by default, but overridable
     RESTful
     Python 3.2+ (with shims to make broke-ass Python 2.6+ work)
     Flexible

 Anti-Features

 (Things that will never be added...)

     Automatic ORM integration
     Authorization (per-object or not)
     Extensive filtering options
     XML output (though you can implement your own)
     Metaclasses
     Mixins
     HATEOAS

 Why?

 Quite simply, I care about creating flexible & RESTFul APIs. In building Tastypie, I tried to create something extremely complete & comprehensive. The result was writing a lot of hook methods (for easy extensibility) & a lot of (perceived) bloat, as I tried to accommodate for everything people might want/need in a flexible/overridable manner.

 But in reality, all I really ever personally want are the RESTful verbs, JSON serialization & the ability of override behavior.

 This one is written for me, but maybe it's useful to you.
** [[https://github.com/coleifer/peewee][coleifer/peewee: a small, expressive orm -- supports postgresql, mysql and sqlite]] :python:github:top:database:mysql:sqlite:postgresql: 
 <2016-12-14 Wed 07:20>

 Peewee is a simple and small ORM. It has few (but expressive) concepts, making it easy to learn and intuitive to use.

     A small, expressive ORM
     Written in python with support for versions 2.6+ and 3.2+.
     built-in support for sqlite, mysql and postgresql
     tons of extensions available in the playhouse
         Postgresql HStore, JSON, arrays and more
         SQLite full-text search, user-defined functions, virtual tables and more
         Schema migrations and model code generator
         Connection pool
         Encryption
         and much, much more...
** [[https://github.com/nvie/rq][nvie/rq: Simple job queues for Python]] :python:github:top:job:processing:multitask: 
 <2016-12-14 Wed 07:21>

 RQ (Redis Queue) is a simple Python library for queueing jobs and processing them in the background with workers. It is backed by Redis and it is designed to have a low barrier to entry. It should be integrated in your web stack easily.

 RQ requires Redis >= 2.7.0.
** [[https://github.com/nicolargo/glances][nicolargo/glances: Glances an Eye on your system. A top/htop alternative.]] :python:github:top:system:info: 
 <2016-12-14 Wed 07:22>

 Follow Glances on Twitter: @nicolargo or @glances_system

 Glances is a cross-platform curses-based system monitoring tool written in Python.
** [[https://github.com/eliangcs/http-prompt][eliangcs/http-prompt: HTTPie + prompt_toolkit = an interactive command-line HTTP client featuring autocomplete and syntax highlighting]] :python:github:top:http:prompt:cli: 
 <2016-12-14 Wed 07:22>

 HTTP Prompt is an interactive command-line HTTP client featuring autocomplete and syntax highlighting, built on HTTPie and prompt_toolkit.
** [[https://github.com/a1studmuffin/SpaceshipGenerator][a1studmuffin/SpaceshipGenerator: A Blender script to procedurally generate 3D spaceships]] :python:github:top:blender:spaceship:script: 
 <2016-12-14 Wed 07:24>


     Start with a box.
     Build the hull: Extrude the front/rear faces several times, adding random translation/scaling/rotation along the way.
     Add asymmetry to the hull: Pick random faces and extrude them out in a similar manner, reducing in scale each time.
     Add detail to the hull: Categorize each face by its orientation and generate details on it such as engines, antenna, weapon turrets, lights etc.
     Sometimes apply horizontal symmetry.
     Add a Bevel modifier to angularize the shape a bit.
     Apply materials to the final result.
     Take over the universe with your new infinite fleet of spaceships.
** [[https://github.com/StijnMiroslav/top-starred-devs-and-repos-to-follow][StijnMiroslav/top-starred-devs-and-repos-to-follow: The Top-Starred Python GitHub Devs, Orgs, and Repos to Follow (All-Time and Trending)]] :python:github:top:starred: 
 <2016-12-14 Wed 07:24>

 top-starred-devs-and-repos-to-follow

     The Top-Starred Python GitHub Devs, Orgs, and Repos to Follow (All-Time and Trending)

 Why?

 Why follow the top-starred Python GitHub devs?

     Following influencers is usually a good practice. It has helped me in multiple ways:

         Whenever I run out of inspiration, I look at these influencers and see what they have achieved. This brings back the energy and I am back on my projects

         You can follow these influencers to see which events are they attending, what are they reading and what are they working on. This can quickly become a wealth of knowledge in itself.

         To some extent, it also provides a human touch to these influencers. By just looking at their profiles, they might come across as some one out of the world. But, when you start following them regularly, you tend to relate yourself with the influencers.

     Inspired by the following Reddit post.

 After reading through the post, I was curious to see a similar list for Python GitHub devs, orgs, and repos.
 'Top-Starred'?

 There's no definitive way to determine 'top' devs, orgs, and repos by language. Every metric has its flaws. The lists below look at total number of stars in Python repositories, which seems to be a decent metric that is readily available/easy to mine.

 Dev stats are for individual contributors. Org stats are also provided: viewing the org link shows the devs who are part of the org. Not sure how you'd measure stats for each dev part of an org, or similarly, devs contributing to other projects.

 GitHub is not perfect in classifying repos as Python. The lists below try to manually filter out mis-classified repos.

 I found it interesting to track 'all time' and 'trending' stats, so lists for each are included. Sources are provided after each list.
** [[https://github.com/reinderien/mimic][reinderien/mimic: {ab}using Unicode to create tragedy]] :python:github:top:mimic:problems:generate: 
 <2016-12-14 Wed 07:26>

 mimic

 [ab]using Unicode to create tragedy
 Introduction

 monster

 mimic provokes:

     fun
     frustration
     curiosity
     murderous rage

 It's inspired by this terrible idea floating around:

     MT: Replace a semicolon (;) with a greek question mark (;) in your friend's C# code and watch them pull their hair out over the syntax error
     — Peter Ritchie (@peterritchie) November 16, 2014

 There are many more characters in the Unicode character set that look, to some extent or another, like others – homoglyphs. Mimic substitutes common ASCII characters for obscure homoglyphs.

 Fun games to play with mimic:

     Pipe some source code through and see if you can find all of the problems
     Pipe someone else's source code through without telling them
     Be fired, and then killed
** [[https://github.com/pavelgonchar/colornet][pavelgonchar/colornet: Neural Network to colorize grayscale images]] :python:github:top:neuron:colorize:images: 
 <2016-12-14 Wed 07:26>

 colornet

 Neural Network to colorize grayscale images
** [[https://github.com/cyrus-and/gdb-dashboard][cyrus-and/gdb-dashboard: Modular visual interface for GDB in Python]] :python:github:top:gdb:debug:c: 
 <2016-12-14 Wed 07:32>

 Modular visual interface for GDB in Python.

 This comes as a standalone single-file .gdbinit which, among the other things, enables a configurable dashboard showing the most relevant information during the program execution. Its main goal is to reduce the number of GDB commands issued to inspect the current program status allowing the programmer to focus on the control flow instead.
** [[https://github.com/jayfk/statuspage][jayfk/statuspage: A statuspage generator that lets you host your statuspage for free on Github.]] :python:github:top:status:page: 
 <2016-12-14 Wed 07:34>

 A statuspage generator that lets you host your statuspage for free on GitHub. Uses issues to display incidents and labels for severity.
** [[https://github.com/nlintz/TensorFlow-Tutorials][nlintz/TensorFlow-Tutorials: Simple tutorials using Google's TensorFlow Framework]] :python:github:top:google:learn:study:deep: 
 <2016-12-14 Wed 07:35>

 Introduction to deep learning based on Google's TensorFlow framework. These tutorials are direct ports of Newmu's Theano Tutorials.
** [[https://github.com/ujjwalkarn/DataSciencePython][ujjwalkarn/DataSciencePython: common data analysis and machine learning tasks using python]] :python:github:top:collection:data:science:analysis: 
 <2016-12-14 Wed 07:35>

 Python Data Science Tutorials

     This repo contains a curated list of Python tutorials for Data Science, NLP and Machine Learning.

     Curated list of R tutorials for Data Science, NLP and Machine Learning.

     Comprehensive topic-wise list of Machine Learning and Deep Learning tutorials, codes, articles and other resources.
** [[https://github.com/scrapy/scrapy][scrapy/scrapy: Scrapy, a fast high-level web crawling & scraping framework for Python.]] :python:github:top:scrapy:web:spider:framework: 
 <2016-12-14 Wed 07:36>

 Scrapy is a fast high-level web crawling and web scraping framework, used to crawl websites and extract structured data from their pages. It can be used for a wide range of purposes, from data mining to monitoring and automated testing.

 For more information including a list of features check the Scrapy homepage at: http://scrapy.org
** [[https://github.com/certbot/certbot][certbot/certbot: Certbot, previously the Let's Encrypt Client, is EFF's tool to obtain certs from Let's Encrypt, and (optionally) auto-enable HTTPS on your server. It can also act as a client for any other CA that uses the ACME protocol.]] :python:github:top:ssl:encryption:web: 
 <2016-12-14 Wed 07:37>

  Certbot, previously the Let's Encrypt Client, is EFF's tool to obtain certs from Let's Encrypt, and (optionally) auto-enable HTTPS on your server. It can also act as a client for any other CA that uses the ACME protocol.
** [[https://github.com/reddit/reddit][reddit/reddit: the code that powers reddit.com]] :python:github:top:reddit:power: 
 <2016-12-14 Wed 07:38>

 Greetings!

 This is the primary codebase that powers reddit.com.

 For notices about major changes and general discussion of reddit development, subscribe to the /r/redditdev and /r/changelog subreddits.

 You can also chat with us via IRC in #reddit-dev on freenode.
** [[https://github.com/pandas-dev/pandas][pandas-dev/pandas: Flexible and powerful data analysis / manipulation library for Python, providing labeled data structures similar to R data.frame objects, statistical functions, and much more]] :python:github:top:data:analysis:library: 
 <2016-12-14 Wed 07:42>

 What is it

 pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with "relational" or "labeled" data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, real world data analysis in Python. Additionally, it has the broader goal of becoming the most powerful and flexible open source data analysis / manipulation tool available in any language. It is already well on its way toward this goal.
 Main Features

 Here are just a few of the things that pandas does well:

     Easy handling of missing data (represented as NaN) in floating point as well as non-floating point data
     Size mutability: columns can be inserted and deleted from DataFrame and higher dimensional objects
     Automatic and explicit data alignment: objects can be explicitly aligned to a set of labels, or the user can simply ignore the labels and let Series, DataFrame, etc. automatically align the data for you in computations
     Powerful, flexible group by functionality to perform split-apply-combine operations on data sets, for both aggregating and transforming data
     Make it easy to convert ragged, differently-indexed data in other Python and NumPy data structures into DataFrame objects
     Intelligent label-based slicing, fancy indexing, and subsetting of large data sets
     Intuitive merging and joining data sets
     Flexible reshaping and pivoting of data sets
     Hierarchical labeling of axes (possible to have multiple labels per tick)
     Robust IO tools for loading data from flat files (CSV and delimited), Excel files, databases, and saving/loading data from the ultrafast HDF5 format
     Time series-specific functionality: date range generation and frequency conversion, moving window statistics, moving window linear regressions, date shifting and lagging, etc.
** [[https://github.com/scikit-learn/scikit-learn][scikit-learn/scikit-learn: scikit-learn: machine learning in Python]] :python:github:top:machine:learning: 
 <2016-12-14 Wed 07:43>

 scikit-learn is a Python module for machine learning built on top of SciPy and distributed under the 3-Clause BSD license.

 The project was started in 2007 by David Cournapeau as a Google Summer of Code project, and since then many volunteers have contributed. See the AUTHORS.rst file for a complete list of contributors.

 It is currently maintained by a team of volunteers.

 Website: http://scikit-learn.org
** [[https://github.com/airbnb/superset][airbnb/superset: Superset is a data exploration platform designed to be visual, intuitive, and interactive]] :python:github:top:data:exploration:platform:visual: 
 <2016-12-14 Wed 07:45>

 Superset is a data exploration platform designed to be visual, intuitive and interactive.

 [this project used to be named Caravel, and Panoramix in the past]
** [[https://github.com/XX-net/XX-Net][XX-net/XX-Net: a web proxy tool]]      :python:github:top:proxy:google:free: 
 <2016-12-14 Wed 07:46>


     XX-Net is a free desktop application that delivers fast, reliable and secure access to the open Internet for users in censored regions. It uses google app engine (GAE) as a proxy server through the firewall.
** [[https://github.com/cmusatyalab/openface][cmusatyalab/openface: Face recognition with deep neural networks.]] :python:github:top:face:recognition:deep:neural: 
 <2016-12-14 Wed 07:47>

 Free and open source face recognition with deep neural networks.

     Website: http://cmusatyalab.github.io/openface/
     API Documentation
     Join the cmu-openface group or the gitter chat for discussions and installation issues.
     Development discussions and bugs reports are on the issue tracker.

 This research was supported by the National Science Foundation (NSF) under grant number CNS-1518865. Additional support was provided by the Intel Corporation, Google, Vodafone, NVIDIA, and the Conklin Kistler family fund. Any opinions, findings, conclusions or recommendations expressed in this material are those of the authors and should not be attributed to their employers or funding sources.
** [[https://github.com/mailpile/Mailpile][mailpile/Mailpile: A free & open modern, fast email client with user-friendly encryption and privacy features]] :python:github:top:mailLclient:web: 
 <2016-12-14 Wed 07:50>

 Mailpile (https://www.mailpile.is/) is a modern, fast web-mail client with user-friendly encryption and privacy features. The development of Mailpile is funded by a large community of backers and all code related to the project is and will be released under an OSI approved Free Software license.

 Mailpile places great emphasis on providing a clean, elegant user interface and pleasant user experience. In particular, Mailpile aims to make it easy and convenient to receive and send PGP encrypted or signed e-mail.

 Mailpile's primary user interface is web-based, but it also has a basic command-line interface and an API for developers. Using web technology for the interface allows Mailpile to function both as a local desktop application (accessed by visiting localhost in the browser) or a remote web-mail on a personal server or VPS.

 The core of Mailpile is a fast search engine, custom written to deal with large volumes of e-mail on consumer hardware. The search engine allows e-mail to be organized using tags (similar to GMail's labels) and the application can be configured to automatically tag incoming mail either based on static rules or bayesian classifiers.

 Note: We are currently "in beta", which means the app's basic features are (mostly) in place and packages are available for popular operating systems, for people who would like to help test and debug. For more details follow @MailpileTeam on Twitter or read our blog.
** [[https://github.com/mail-in-a-box/mailinabox][mail-in-a-box/mailinabox: Mail-in-a-Box helps individuals take back control of their email by defining a one-click, easy-to-deploy SMTP+everything else server: a mail server in a box.]] :python:github:top:mail:script: 
 <2016-12-14 Wed 07:53>

 Mail-in-a-Box helps individuals take back control of their email by defining a one-click, easy-to-deploy SMTP+everything else server: a mail server in a box.

 Please see https://mailinabox.email for the project's website and setup guide!

 Our goals are to:

     Make deploying a good mail server easy.
     Promote decentralization, innovation, and privacy on the web.
     Have automated, auditable, and idempotent configuration.
     Not make a totally unhackable, NSA-proof server.
     Not make something customizable by power users.

 Additionally, this project has a Code of Conduct, which supersedes the goals above. Please review it when joining our community.
** [[https://github.com/charlierguo/gmail][charlierguo/gmail: A Pythonic interface for Google Mail]] :python:github:top:gmail:interface: 
 <2016-12-14 Wed 07:54>

 GMail for Python

 A Pythonic interface to Google's GMail, with all the tools you'll need. Search, read and send multipart emails, archive, mark as read/unread, delete emails, and manage labels.

 This library is still under development, so please forgive some of the rough edges

 Heavily inspired by Kriss "nu7hatch" Kowalik's GMail for Ruby library
** [[https://github.com/laramies/theHarvester][laramies/theHarvester: E-mail, subdomain and people names harvester]] :python:github:top:analysis:penetration:mail:subdomain:people: 
 <2016-12-14 Wed 07:54>

 What is this?
 -------------

 theHarvester is a tool for gathering e-mail accounts, subdomain names, virtual
 hosts, open ports/ banners, and employee names from different public sources
 (search engines, pgp key servers).

 Is a really simple tool, but very effective for the early stages of a penetration
 test or just to know the visibility of your company in the Internet.

 The sources are:

 Passive:
 --------
 -google: google search engine  - www.google.com

 -googleCSE: google custom search engine

 -google-profiles: google search engine, specific search for Google profiles

 -bing: microsoft search engine  - www.bing.com

 -bingapi: microsoft search engine, through the API (you need to add your Key in
           the discovery/bingsearch.py file)

 -dogpile: Dogpile search engine - www.dogpile.com

 -pgp: pgp key server - mit.edu

 -linkedin: google search engine, specific search for Linkedin users


 -vhost: Bing virtual hosts search

 -twitter: twitter accounts related to an specific domain (uses google search)

 -googleplus: users that works in target company (uses google search)

 -yahoo: Yahoo search engine

 -baidu: Baidu search engine

 -shodan: Shodan Computer search engine, will search for ports and banner of the
          discovered hosts  (http://www.shodanhq.com/)
** [[https://github.com/tomekwojcik/envelopes][tomekwojcik/envelopes: Mailing for human beings]] :python:github:top:mail:human:easy: 
 <2016-12-14 Wed 07:55>

 Envelopes is a wrapper for Python's email and smtplib modules. It aims to make working with outgoing e-mail in Python simple and fun.
** [[https://github.com/EFForg/starttls-everywhere][EFForg/starttls-everywhere: A system for ensuring & authenticating STARTTLS encryption between mail servers]] :python:github:top:mail:ttls:security:ensure: 
 <2016-12-14 Wed 07:56>

 STARTTLS Everywhere
 Example usage

 WARNING: this is a pre-alpha codebase. Do not run it on production mailservers!!!

 If you have a Postfix server you're willing to endanger deliverability on, you can try obtain a certificate with the Let's Encrypt Python Client, note the directory it lives in below /etc/letsencrypt/live and then do:

 git clone https://github.com/EFForg/starttls-everywhere
 cd starttls-everywhere
 # Promise you don't care if deliverability breaks on this mail server
 letsencrypt-postfix/PostfixConfigGenerator.py examples/starttls-everywhere.json /etc/postfix /etc/letsencrypt/live/YOUR.DOMAIN.EXAMPLE.COM

 This will:

     Ensure your mail server initiates STARTTLS encryption
     Install the Let's Encrypt cert in Postfix
     Enforce mandatory TLS to some major email domains
     Enforce minimum TLS versions to some major email domains
** [[https://github.com/eugene-eeo/mailthon][eugene-eeo/mailthon: elegant email sending for Python]] :python:github:top:mail:send:lib: 
 <2016-12-14 Wed 07:57>

 Useful links: Documentation (outdated) | Issue Tracker | PyPI Page

 Mailthon is an MIT licensed email library for Python that aims to be highly extensible and composable. Mailthon is unicode aware and supports internationalised headers and email addresses. Also it aims to be transport agnostic, meaning that SMTP can be swapped out for other transports:
** [[https://github.com/pulb/mailnag][pulb/mailnag: An extensible mail notification daemon]] :python:github:top:mail:notification:gnome:gtk: 
 <2016-12-14 Wed 07:57>

 Mailnag is a daemon program that checks POP3 and IMAP servers for new mail.
 On mail arrival it performs various actions provided by plugins.
 Mailnag comes with a set of desktop-independent default plugins for
 visual/sound notifications, script execution etc. and can be extended
 with additional plugins easily.
** [[https://github.com/git-multimail/git-multimail][git-multimail/git-multimail: Send notification emails for pushes to a git repository (an improved version of post-receive-mail)]] :python:github:top:git:pushes:notification:mail: 
 <2016-12-14 Wed 07:58>

 git-multimail is a tool for sending notification emails on pushes to a Git repository. It includes a Python module called git_multimail.py, which can either be used as a hook script directly or can be imported as a Python module into another script.

 git-multimail is derived from the Git project's old contrib/hooks/post-receive-email, and is mostly compatible with that script. See README.migrate-from-post-receive-email for details about the differences and for how to migrate from post-receive-email to git-multimail.
** [[https://github.com/hmason/introbot][hmason/introbot: A python script to generate the text of intro e-mails.]] :python:github:mail:introductury:intro: 
 <2016-12-14 Wed 08:00>

 Introbot is a quick python script to write an introductory e-mail between n parties.

 To use, edit settings.py and swap in your info.
** [[https://github.com/kdeldycke/maildir-deduplicate][kdeldycke/maildir-deduplicate: :e-mail: CLI to deduplicate mails from maildir folders.]] :python:github:top:mail:deduplication:cli: 
 <2016-12-14 Wed 08:00>

 Command-line tool to deduplicate mails from a set of maildir folders.
** [[https://github.com/schweikert/mailgraph][schweikert/mailgraph: Mail plotting script]] :perl:github:top:mail:plotting:script:graph: 
 <2016-12-14 Wed 08:05>

 mailgraph is a very simple mail statistics RRDtool frontend for Postfix
 that produces daily, weekly, monthly and yearly graphs of received/sent 
 and bounced/rejected mail (SMTP traffic).
** [[https://github.com/Gilwyad/mailnesia.com][Gilwyad/mailnesia.com: Anonymous Email in Seconds]] :perl:github:top:anonymous:mail:com: 
 <2016-12-14 Wed 08:06>

 Mailnesia is a fully featured disposable email provider. Just like a real email service but without any password or the ability to send mail. Features at a glance:

     Automatically visits registration/activation links in emails, completing any registration process instantly
     Alternate mailbox names (aliases) for extra anonymity, use any name you want
     Alternative domain names (all mail is accepted regardless of domain name)
     Displaying HTML emails correctly including attached images, files
     Multiple encodings supported: Chinese, Japanese, Korean, Russian etc
     RSS feed for every mailbox
     New emails appear as they arrive, without needing to refresh the page
     Fast, easy to use interface
     Translated to 10+ languages

 This repository contains the source code of Mailnesia. What it includes:

     The website including everything: images, CSS, JavaScript etc
     The email receiving server
     Additional utilities for maintenance, testing etc
     How to set up the SQL tables

 What is not included:

     Configuration for web server, database server or any other external utility
     Scripts to start and monitor the website/RSS/email server processes
** [[https://www.youtube.com/watch?v=yzIMircGU5I&list=PL5-da3qGB5ICCsgW1MxlZ0Hq8LL5U3u9y][What is pandas? (Introduction to the Q&A series) - YouTube]] :youtube:channel: 
 <2016-12-14 Wed 08:28>


 What is pandas? (Introduction to the Q&A series)
** [[https://www.youtube.com/watch?v=POe1cufDWFs][Data Science with Python Pandas by Athena Kan - YouTube]] :youtube:python:pandas: 
 <2016-12-14 Wed 08:32>

 Harvard Business Review named data scientist "the sexiest job of the 21st century." Python pandas is a commonly-used tool in the industry to easily and efficiently clean, analyze, and visualize data of varying sizes and types. In this seminar, we'll learn how to use pandas to extract meaningful insights and recommendations from real-world datasets.
** [[http://orgmode.org/manual/index.html][The Org Manual]]                             :org:mode:manual:official:long: 
 <2016-12-14 Wed 08:35>

 This manual is a printed edition of the official Org reference documentation from the Org 7.3 distribution.
** [[https://github.com/jlevy/repren][jlevy/repren: Rename anything]] :python:github:top:rename:files:organization: 
 <2016-12-14 Wed 08:44>

 Repren is a simple but flexible, command-line tool for rewriting file contents according to a set of regular expression patterns, and renaming or moving files. Essentially, it is a general-purpose, brute-force text file refactoring tool.

 For example, repren can perform a Java refactor that involves renaming the Java class filename, as well as every occurrence of that class name in code or documentation. Or it can change the naming scheme for files, so every path like foo.1.jpg is renamed foo-1.jpg. Or it can move files by rewriting parent directories.

 It's strives to be more powerful and thoughtful than usual options like perl -pie, rpl, sed, or rename:

     It can do search-and-replace, file renaming, or both.
     It allows file renaming on full paths, including moving files, creating directories, or rewriting directory hierarchies.
     It supports fully expressive regular expressions, with capturing groups and back substitutions.
     It performs simultaneous group renamings, i.e. rename "foo" as "bar", and "bar" as "foo" at once, without requiring a temporary intermediate rename.
     It is careful. It has a nondestructive mode, and prints clear stats on its changes. It leaves backups. File operations are done atomically, so interruptions never leave a previously existing file truncated or partly edited.
     It supports helpful variations like an option to replace on word breaks, so you avoid splitting a word, and "case-preserving" renames that let you find and rename identifiers with case variants (lowerCamel, UpperCamel, lower_underscore, and UPPER_UNDERSCORE) consistently.
     It has this nice documentaion!
** [[https://github.com/wting/autojump][wting/autojump: A cd command that learns - easily navigate directories from the command line]] :python:github:top:cd:naviation:shell: 
 <2016-12-14 Wed 08:45>

 autojump - a faster way to navigate your filesystem
 DESCRIPTION

 autojump is a faster way to navigate your filesystem. It works by maintaining a database of the directories you use the most from the command line.

 Directories must be visited first before they can be jumped to.
** [[https://github.com/docopt/docopt][docopt/docopt: Pythonic command line arguments parser, that will make you smile]] :python:github:top:fun:smile:shell:cli:arguments: 
 <2016-12-14 Wed 08:48>

 Hell no! You know what's awesome? It's when the option parser is generated based on the beautiful help message that you write yourself! This way you don't need to write this stupid repeatable parser-code, and instead can write only the help message--the way you want it.

 docopt helps you create most beautiful command-line interfaces easily:
** [[https://github.com/gleitz/howdoi][gleitz/howdoi: howdoi - instant coding answers via the command line]] :python:github:top:hack:answers:questions:stackoverflowgoogle: 
 <2016-12-14 Wed 08:49>

 Are you a hack programmer? Do you find yourself constantly Googling for how to do basic programing tasks?

 Suppose you want to know how to format a date in bash. Why open your browser and read through blogs (risking major distraction) when you can simply stay in the console and ask howdoi:
** [[https://github.com/sivel/speedtest-cli][sivel/speedtest-cli: Command line interface for testing internet bandwidth using speedtest.net]] :python:github:top:speedtest:internet:cli: 
 <2016-12-14 Wed 08:51>

 Command line interface for testing internet bandwidth using speedtest.net
** [[https://github.com/chriskiehl/Gooey][chriskiehl/Gooey: Turn (almost) any Python command line program into a full GUI application with one line]] :python:github:top:cli:gui:convert:oneline: 
 <2016-12-14 Wed 08:51>

  Turn (almost) any Python command line program into a full GUI application with one line
** [[https://github.com/idank/explainshell][idank/explainshell: match command-line arguments to their help text]] :python:github:top:explain:cli:man:shell: 
 <2016-12-14 Wed 08:52>

 explainshell is a tool (with a web interface) capable of parsing man pages, extracting options and explain a given command-line by matching each argument to the relevant help text in the man page.
 How?

 explainshell is built from the following components:

     man page reader which converts a given man page from raw format to html (manpage.py)
     classifier which goes through every paragraph in the man page and classifies it as contains options or not (algo/classifier.py)
     an options extractor that scans classified paragraphs and looks for options (options.py)
     a storage backend that saves processed man pages to mongodb (store.py)
     a matcher that walks the command's AST (parsed by bashlex) and contextually matches each node to the relevant help text (matcher.py)

 When querying explainshell, it:

     parses the query into an AST
     visits interesting nodes in the AST, such as:
         command nodes - these nodes represent a simple command
         shell related nodes - these nodes represent something the shell interprets such as '|', '&&'
     for every command node we check if we know how to explain the current program, and then go through the rest of the tokens, trying to match each one to the list of known options
     returns a list of matches that are rendered with Flask
** [[https://github.com/chrippa/livestreamer][chrippa/livestreamer: Command-line utility that extracts streams from various services and pipes them into a video player of choice.]] :python:github:top:stream:live:youtube: 
 <2016-12-14 Wed 08:54>

 Livestreamer is a command-line utility that pipes video streams from various services into a video player, such as VLC. The main purpose of Livestreamer is to allow the user to avoid buggy and CPU heavy flash plugins but still be able to enjoy various streamed content. There is also an API available for developers who want access to the video stream data.

     Documentation: http://docs.livestreamer.io/
     Issue tracker: https://github.com/chrippa/livestreamer/issues
     PyPI: https://pypi.python.org/pypi/livestreamer
     Discussions: https://groups.google.com/forum/#!forum/livestreamer
     IRC: #livestreamer @ Freenode
     Free software: Simplified BSD license
** [[https://github.com/chrisallenlane/cheat][chrisallenlane/cheat: cheat allows you to create and view interactive cheatsheets on the command-line. It was designed to help remind *nix system administrators of options for commands that they use frequently, but not frequently enough to remember.]] :python:github:top:cheatsheat: 
 <2016-12-14 Wed 08:55>

 cheat allows you to create and view interactive cheatsheets on the command-line. It was designed to help remind *nix system administrators of options for commands that they use frequently, but not frequently enough to remember.
** [[https://github.com/Russell91/pythonpy][Russell91/pythonpy: the swiss army knife of the command line]] :python:github:top:swiss:knife:cli:shell: 
 <2016-12-14 Wed 09:13>

  the swiss army knife of the command line
** [[https://github.com/maebert/jrnl][maebert/jrnl: A simple command line journal application that stores your journal in a plain text file.]] :python:github:top:journal:cli:text: 
 <2016-12-14 Wed 09:14>

 For news on updates or to get help, read the docs, follow @maebert or submit an issue on Github.

 jrnl is a simple journal application for your command line. Journals are stored as human readable plain text files - you can put them into a Dropbox folder for instant syncing and you can be assured that your journal will still be readable in 2050, when all your fancy iPad journal applications will long be forgotten.

 jrnl also plays nice with the fabulous DayOne and can read and write directly from and to DayOne Journals.

 Optionally, your journal can be encrypted using the 256-bit AES.
 Why keep a journal?

 Journals aren't only for 13-year old girls and people who have too much time on their summer vacation. A journal helps you to keep track of the things you get done and how you did them. Your imagination may be limitless, but your memory isn't. For personal use, make it a good habit to write at least 20 words a day. Just to reflect what made this day special, why you haven't wasted it. For professional use, consider a text-based journal to be the perfect complement to your GTD todo list - a documentation of what and how you've done it.
** [[https://github.com/kennethreitz/clint][kennethreitz/clint: Python Command-line Application Tools]] :python:github:top:develop:cli:library: 
 <2016-12-14 Wed 09:15>

 Clint is awesome. Crazy awesome. It supports colors, but detects if the session is a TTY, so doesn't render the colors if you're piping stuff around. Automagically.

 Awesome nest-able indentation context manager. Example: (with indent(4): puts('indented text')). It supports custom email-style quotes. Of course, it supports color too, if and when needed.

 It has an awesome Column printer with optional auto-expanding columns. It detects how wide your current console is and adjusts accordingly. It wraps your words properly to fit the column size. With or without colors mixed in. All with a single function call.

 The world's easiest to use implicit argument system w/ chaining methods for filtering. Seriously.

 Run the various executables in examples to get a good feel for what Clint offers.

 You'll never want to not use it.
** [[https://github.com/donnemartin/haxor-news][donnemartin/haxor-news: Browse Hacker News like a haxor: A Hacker News command line interface (CLI).]] :python:github:top:cli:hacker:news: 
 <2016-12-14 Wed 09:15>

  Browse Hacker News like a haxor: A Hacker News command line interface (CLI).
** [[https://github.com/sympy/sympy][sympy/sympy: A computer algebra system written in pure Python]] :python:github:top:algebra:math:library: 
 <2016-12-14 Wed 09:19>

  A computer algebra system written in pure Python http://sympy.org/
** [[https://github.com/nylas/sync-engine][nylas/sync-engine: IMAP/SMTP sync system with modern APIs]] :python:github:top:sync:imap:stmp:engine:rest: 
 <2016-12-14 Wed 09:20>

 The Nylas Sync Engine provides a RESTful API on top of a powerful email sync platform, making it easy to build apps on top of email. See the full API documentation for more details.
** [[https://github.com/Supervisor/supervisor][Supervisor/supervisor: Supervisor process control system for UNIX]] :python:github:top:system:conrol:unix: 
 <2016-12-14 Wed 09:20>

 Supervisor is a client/server system that allows its users to control a number of processes on UNIX-like operating systems.
** [[https://github.com/facebookarchive/huxley][facebookarchive/huxley: A testing system for catching visual regressions in Web applications.]] :python:github:top:watch:browser: 
 <2016-12-14 Wed 09:21>

 Watches you browse, takes screenshots, tells you when they change

 Huxley is a test-like system for catching visual regressions in Web applications. It was built by Pete Hunt with input from Maykel Loomans at Instagram.
 Archived Repo

 This is an archived project and is no longer supported or updated by Facebook or Instagram. Please do not file issues or pull-requests against this repo. If you wish to continue to develop this code yourself, we recommend you fork it.
** [[https://github.com/tschellenbach/Stream-Framework][tschellenbach/Stream-Framework: Stream Framework is a Python library, which allows you to build newsfeed and notification systems using Cassandra and/or Redis.]] :python:github:top:stream:framework:android:newsfeed:notification:redis: 
 <2016-12-14 Wed 09:22>

 Stream Framework is a python library which allows you to build activity streams & newsfeeds using Cassandra and/or Redis. If you're not using python have a look at Stream, which supports Node, Ruby, PHP, Python, Go, Scala, Java and REST.

 Examples of what you can build are:

     Activity streams such as seen on Github
     A Twitter style newsfeed
     A feed like Instagram/ Pinterest
     Facebook style newsfeeds
     A notification system

 (Feeds are also commonly called: Activity Streams, activity feeds, news streams.)
** [[https://github.com/cuckoosandbox/cuckoo][cuckoosandbox/cuckoo: Cuckoo Sandbox is an automated dynamic malware analysis system]] :python:github:top:malware:system: 
 <2016-12-14 Wed 09:23>

 In three words, Cuckoo Sandbox is a malware analysis system.

 What does that mean? It simply means that you can throw any suspicious file at it and in a matter of seconds Cuckoo will provide you back some detailed results outlining what such file did when executed inside an isolated environment.

 If you want to contribute to development, please read this and this first. Make sure you check our Issues and Pull Requests and that you join our IRC channel.
** [[https://github.com/giampaolo/psutil][giampaolo/psutil: A cross-platform process and system utilities module for Python]] :python:github:top:system:information: 
 <2016-12-14 Wed 09:23>

 psutil (process and system utilities) is a cross-platform library for retrieving information on running processes and system utilization (CPU, memory, disks, network) in Python. It is useful mainly for system monitoring, profiling and limiting process resources and management of running processes. It implements many functionalities offered by command line tools such as: ps, top, lsof, netstat, ifconfig, who, df, kill, free, nice, ionice, iostat, iotop, uptime, pidof, tty, taskset, pmap. It currently supports Linux, Windows, OSX, Sun Solaris, FreeBSD, OpenBSD and NetBSD, both 32-bit and 64-bit architectures, with Python versions from 2.6 to 3.5 (users of Python 2.4 and 2.5 may use 2.1.3 version). PyPy is also known to work.
** [[https://github.com/Jahaja/psdash][Jahaja/psdash: A linux system information web dashboard using psutils and flask]] :python:github:top:web:system:information:dashboard: 
 <2016-12-14 Wed 09:24>

 psdash is a system information web dashboard for linux using data mainly served by psutil - hence the name.

     Features
     Installation
     Getting started
     Configuration
     Screenshots
     License

 Features

     Overview
     Dashboard overview of the system displaying data on cpu, disks, network, users, memory, swap and network.

     Processes
     List processes (top like) and view detailed process information about each process.

     Apart from a detailed process overview this is also available for each process:
         Open files
         Open connections
         Memory maps
         Child processes
         Resource limits
     Disks
     List info on all disks and partitions.
     Network
     List info on all network interfaces and the current throughput. System-wide open connections listing with filtering. Somewhat like netstat.
     Logs
     Tail and search logs. The logs are added by patterns (like /var/log/*.log) which are checked periodically to account for new or deleted files.
     Multi-node/Cluster Support for multiple agent nodes that is either specified by a config or will register themselves on start-up to a common psdash node that runs the web interface.
     All data is updated automatically, no need to refresh

 The GUI is pretty much a modified bootstrap example as I'm no designer at all. If you got a feel for design and like to improve the UI parts of psdash, please create a pull request with your changes. It would be much appreciated as there's much room for improvements.
** [[https://github.com/stamparm/maltrail][stamparm/maltrail: Malicious traffic detection system]] :python:github:top:traffic:malicious:detection:system: 
 <2016-12-14 Wed 09:24>

 Maltrail is a malicious traffic detection system, utilizing publicly available (black)lists containing malicious and/or generally suspicious trails, along with static trails compiled from various AV reports and custom user defined lists, where trail can be anything from domain name (e.g. zvpprsensinaix.com for Banjori malware), URL (e.g. http://109.162.38.120/harsh02.exe for known malicious executable), IP address (e.g. 185.130.5.231 for known attacker) or HTTP User-Agent header value (e.g. sqlmap for automatic SQL injection and database takeover tool). Also, it uses (optional) advanced heuristic mechanisms that can help in discovery of unknown threats (e.g. new malware).
** [[https://github.com/NVIDIA/DIGITS][NVIDIA/DIGITS: Deep Learning GPU Training System]] :python:github:top:nvidia:gpu:deep:learning:tool: 
 <2016-12-14 Wed 09:25>

  Deep Learning GPU Training System https://developer.nvidia.com/digits
** [[https://github.com/luispedro/BuildingMachineLearningSystemsWithPython][luispedro/BuildingMachineLearningSystemsWithPython: Source Code for the book Building Machine Learning Systems with Python]] :python:github:top:book:building:machine:learning:systems: 
 <2016-12-14 Wed 09:25>

 Source Code for the book Building Machine Learning Systems with Python by Luis Pedro Coelho and Willi Richert.

 The book was published in 2013 (second edition in 2015) by Packt Publishing and is available from their website.

 The code in the repository corresponds to the second edition. Code for the first edition is available in first_edition branch.
** [[https://github.com/Yelp/dumb-init][Yelp/dumb-init: A minimal init system for Linux containers]] :python:github:top:docker:container:minimal:init:system: 
 <2016-12-14 Wed 09:26>

 dumb-init is a simple process supervisor and init system designed to run as PID 1 inside minimal container environments (such as Docker). It is deployed as a small, statically-linked binary written in C.

 Lightweight containers have popularized the idea of running a single process or service without normal init systems like systemd or sysvinit. However, omitting an init system often leads to incorrect handling of processes and signals, and can result in problems such as containers which can't be gracefully stopped, or leaking containers which should have been destroyed.

 dumb-init enables you to simply prefix your command with dumb-init. It acts as PID 1 and immediately spawns your command as a child process, taking care to properly handle and forward signals as they are received.
** [[https://github.com/quokkaproject/quokka][quokkaproject/quokka: CMS (Content Management System) - Python, Flask and MongoDB]] :python:github:top:cms:django:flask:mongodb: 
 <2016-12-14 Wed 09:27>

  CMS (Content Management System) - Python, Flask and MongoDB http://www.quokkaproject.org
** [[https://github.com/ckan/ckan][ckan/ckan: CKAN is an open-source DMS (data management system) for powering data hubs and data portals. CKAN makes it easy to publish, share and use data. It powers datahub.io, catalog.data.gov and data.gov.uk among many other sites.]] :python:github:top:data:manage:system: 
 <2016-12-14 Wed 09:27>

 CKAN is the world’s leading open-source data portal platform. CKAN makes it easy to publish, share and work with data. It's a data management system that provides a powerful platform for cataloging, storing and accessing datasets with a rich front-end, full API (for both data and catalog), visualization tools and more. Read more at ckan.org.
** [[https://github.com/mathics/Mathics][mathics/Mathics: a general-purpose computer algebra system]] :python:github:top:math:compute:system: 
 <2016-12-14 Wed 09:28>

 Mathics is a general-purpose computer algebra system (CAS). It is meant to be a free, lightweight alternative to Mathematica.

 The home page of Mathics is http://mathics.github.io.

- [[https://mathics.angusgriffith.com/][Mathics]]

** [[https://github.com/sdg-mit/gitless][sdg-mit/gitless: A version control system built on top of Git]] :python:github:top:git:less:version:control:system: 
 <2016-12-14 Wed 09:28>

 Gitless is an experimental version control system built on top of Git. Many people complain that Git is hard to use. We think the problem lies deeper than the user interface, in the concepts underlying Git. Gitless is an experiment to see what happens if you put a simple veneer on an app that changes the underlying concepts. Because Gitless is implemented on top of Git (could be considered what Git pros call a "porcelain" of Git), you can always fall back on Git. And of course your coworkers you share a repository with need never know that you're not a Git aficionado.

- [[http://gitless.com/][Gitless]]
** [[https://github.com/PressLabs/gitfs][PressLabs/gitfs: Version controlled file system]] :python:github:top:git:filesystem: 
 <2016-12-14 Wed 09:31>

 gitfs is a FUSE file system that fully integrates with git. You can mount a remote repository's branch locally, and any subsequent changes made to the files will be automatically committed to the remote.
 What's its purpose?

 gitfs was designed to bring the full powers of git to everyone, no matter how little they know about versioning. A user can mount any repository and all the his changes will be automatically converted into commits. gitfs will also expose the history of the branch you're currently working on by simulating snapshots of every commit.

 gitfs is useful in places where you want to keep track of all your files, but at the same time you don't have the possibility of organizing everything into commits yourself. A FUSE filesystem for git repositories, with local cache
 Features

     Automatically commits changes: create, delete, update files and their metadata
     Browse through working index and commit history
     Merges with upstream by automatically accepting local changes
     Caching commits reduces the memory footprint and speeds up navigation
     Reduces the number of pushes by batching commits
** [[https://github.com/pinry/pinry][pinry/pinry: The open-source core of Pinry, a tiling image board system for people who want to save, tag, and share images, videos and webpages in an easy to skim through format.]] :python:github:top:image:tag:pinterest:tiling: 
 <2016-12-14 Wed 09:32>

 The open-source core of Pinry, a tiling image board system for people who want to save, tag, and share images, videos and webpages in an easy to skim through format.

 For more information and a working demo board visit getpinry.com.
** [[https://github.com/rasguanabana/ytfs][rasguanabana/ytfs: YouTube File System]] :python:github:top:youtube:filesystem: 
 <2016-12-14 Wed 09:33>

 YTFS - File system which enables you to search and play movies from YouTube as files - with tools of your choice. Based on FUSE, written in Python 3.
** [[https://github.com/python-diamond/Diamond][python-diamond/Diamond: Diamond is a python daemon that collects system metrics and publishes them to Graphite (and others). It is capable of collecting cpu, memory, network, i/o, load and disk metrics. Additionally, it features an API for implementing custom collectors for gathering metrics from almost any source.]] :python:github:top:system:information:graph:collect: 
 <2016-12-14 Wed 09:42>

  Diamond is a python daemon that collects system metrics and publishes them to Graphite (and others). It is capable of collecting cpu, memory, network, i/o, load and disk metrics. Additionally, it features an API for implementing custom collectors for gathering metrics from almost any source. http://diamond.readthedocs.org/
** [[https://github.com/dropbox/changes][dropbox/changes: A dashboard for your code. A build system.]] :python:github:top:code:dashboard:git: 
 <2016-12-14 Wed 09:44>

 Changes is a build coordinator and reporting solution written in Python.

 The project is primarily built on top of Jenkins, but efforts are underway to replace the underlying dependency. The current work-in-progress tooling exists under several additional repositories:

     https://github.com/dropbox/changes-client
     https://github.com/dropbox/changes-mesos-framework

 Note

 Changes is under extremely active and rapid development, and you probably shouldn't use it unless you like broken software.
** [[https://github.com/saffsd/langid.py][saffsd/langid.py: Stand-alone language identification system]] :python:github:top:language:eidentification:system: 
 <2016-12-14 Wed 09:45>

 langid.py is a standalone Language Identification (LangID) tool.

 The design principles are as follows:

     Fast
     Pre-trained over a large number of languages (currently 97)
     Not sensitive to domain-specific features (e.g. HTML/XML markup)
     Single .py file with minimal dependencies
     Deployable as a web service

 All that is required to run langid.py is >= Python 2.7 and numpy. The main script langid/langid.py is cross-compatible with both Python2 and Python3, but the accompanying training tools are still Python2-only.

** [[https://github.com/guardian/alerta][guardian/alerta: Alerta monitoring system]] :python:github:top:monitoring:system:alert: 
 <2016-12-14 Wed 09:47>

 The Alerta monitoring tool was developed with the following aims in mind:

     distributed and de-coupled so that it is SCALABLE
     minimal CONFIGURATION that easily accepts alerts from any source
     quick at-a-glance VISUALISATION with drill-down to detail
** [[https://github.com/danielmagnussons/orgmode][danielmagnussons/orgmode: orgmode is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.]] :python:github:top:sublimetext:org:mode: 
 <2016-12-14 Wed 09:47>

 Adds support for Org mode's .org syntax files to Sublime Text.

 Tested on Windows 7 and Ubuntu 12.04 and Mac OS X 10.7.5 with Sublime Text 2 & 3
** [[https://github.com/dzone/osqa][dzone/osqa: OSQA is a free, entry-level Q&A system from the makers of AnswerHub, the market-leading professional Q&A platform. Looking for Enterprise functionality? Checkout http://answerhub.com]] :python:github:top:question:answer:system: 
 <2016-12-14 Wed 09:49>

  OSQA is a free, entry-level Q&A system from the makers of AnswerHub, the market-leading professional Q&A platform. Looking for Enterprise functionality? Checkout http://answerhub.com
** [[https://github.com/lincolnloop/salmon][lincolnloop/salmon: A simple monitoring system.]] :python:github:top:system:monitoring:unmaintained: 
 <2016-12-14 Wed 09:49>

 This project is unmaintained

 My need for simple monitoring quickly became a need for more complex monitoring. I'm no longer using Salmon, as such, I'm no longer maintaining it. If you would like to continue developing Salmon, feel free to fork the repo and we can point this to your fork.
** [[https://github.com/jek/blinker][jek/blinker: A fast Python in-process signal/event dispatching system.]] :python:github:top:process:event:dispatching:system: 
 <2016-12-14 Wed 09:50>

  A fast Python in-process signal/event dispatching system. https://pythonhosted.org/blinker/
** [[https://github.com/klen/graphite-beacon][klen/graphite-beacon: Simple alerting system for Graphite metrics]] :python:github:top:alerting:system: 
 <2016-12-14 Wed 09:51>

 Simple alerting system for Graphite metrics.

 Features:

     Simplest installation (one python package dependency)
     No software dependencies (Databases, AMQP and etc)
     Light and full asyncronous
     SMTP, HipChat, Slack, PagerDuty, HTTP handlers (Please make a request for additional handlers)
     Easy configurable and supports historical values
** [[https://github.com/russss/Herd][russss/Herd: A single-command bittorrent distribution system, based on Twitter's Murder]] :python:github:top:torrent:distribution:system:twitter:murder:unmaintained: 
 <2016-12-14 Wed 09:51>

 DEPRECATED PROJECT: I (@russss) am no longer maintaining this code - in fact I've never actually deployed it in production myself, although others have. I won't be accepting any more pull requests for this project. If you're maintaining a fork, let me know and I'll link to it.
 About

 Herd is a torrent-based file distribution system based on Murder. It allows for quick and easy transfer of small and large files. You can probably use it for other things too.

 Herd requires no extra Python modules and includes everything needed for destinations including its own (lightly modified) copy of BitTornado.

 Herd has been updated from its fork Horde which removed limitations around large file transfers, peer seeding, and python integration. Herd now has the same capabilities as Horde in that regard.
** [[https://github.com/jensl/critic][jensl/critic: Critic code review system.]] :python:github:top:critic:review:system: 
 <2016-12-14 Wed 09:53>

 This is the code review system, Critic.

 Critic has a few concepts that might be useful to know.
** [[https://github.com/cms-dev/cms][cms-dev/cms: Contest Management System]]             :python:github:top:cms: 
 <2016-12-14 Wed 09:53>

 Contest Management System

 Homepage: http://cms-dev.github.io/

 Build Status Join the chat at https://gitter.im/cms-dev/cms
 Introduction

 CMS, or Contest Management System, is a distributed system for running and (to some extent) organizing a programming contest.

 CMS has been designed to be general and to handle many different types of contests, tasks, scorings, etc. Nonetheless, CMS has been explicitly build to be used in the 2012 International Olympiad in Informatics, held in September 2012 in Italy.
** [[https://github.com/b12io/orchestra][b12io/orchestra: Orchestra is a system for orchestrating project teams of experts and machines.]] :python:github:top:orchestration:team: 
 <2016-12-14 Wed 09:53>

 Orchestra is a system for orchestrating project teams of experts and machines. Projects can include everything from design teams working on a client's project to newsrooms bringing together reporters, photographers, and editors for a story. In Orchestra workflows, you can assign senior experts to review other experts in order to provide feedback and iteratively refine the work. Orchestra also brings machines and automation onto projects: a crawler can collect content from the web before an expert combs through it, or a classifier can filter out bad data so an analyst spends less time in the noise. New workflows can be added with some simple python glue and an html interface.

 To learn more about Orchestra with some examples and a getting started guide, or to reach out to the Orchestra team, take a look at some of these resources:

     Orchestra website
     A blog post introducing Orchestra v0.1.0 to the world
     Subscribe to the Orchestra mailing list
** [[https://github.com/michael-lazar/rtv][michael-lazar/rtv: Browse Reddit from your terminal]] :python:github:top:reddit:cli:client: 
 <2016-12-14 Wed 10:03>


 RTV provides an interface to view and interact with reddit from your terminal.
 It's compatible with most terminal emulators on Linux and OS X.
** [[https://github.com/rossem/RedditStorage][rossem/RedditStorage: Store files onto reddit subreddits.]] :python:github:top:reddit:store:files:subreddits: 
 <2016-12-14 Wed 10:03>

 RedditStorage is an application that allows you to store on reddit subreddits via raw bytes. The file is encoded into characters and encrypted using AES encryption, after which it can be stored on a subreddit of choice (ideally your own private subreddit). To retrieve the file, the process is simply reversed. Unfortunately, reddit comments have a character limit of 10000. If your file exceeds that amount, it will be split up among comments in the same thread which form links by replying to each other.
** [[https://github.com/ssimunic/Daily-Reddit-Wallpaper][ssimunic/Daily-Reddit-Wallpaper: Change your wallpaper to the most upvoted image of the day from /r/wallpapers or any other subreddit on system startup]] :python:github:top:reddit:wallpaper:changer:gnome:daily: 
 <2016-12-14 Wed 10:04>

 This script changes your wallpaper to most upvoted image of the day on /r/wallpapers or from any other subreddit.

 Run it on startup for new wallpaper on every session.

 Supported: Linux (gnome, kde, mate, lxde), Windows and OS X
** [[https://github.com/rhiever/reddit-analysis][rhiever/reddit-analysis: A Python script that parses post titles, self-texts, and comments on reddit and makes word clouds out of the word frequencies.]] :python:github:top:reddit:cloud:analysis:visualisation: 
 <2016-12-14 Wed 10:10>

  A Python script that parses post titles, self-texts, and comments on reddit and makes word clouds out of the word frequencies.
** [[https://github.com/sisimai/p5-Sisimai][sisimai/p5-Sisimai: Mail Analyzing Interface for email bounce: A Perl module to parse RFC5322 bounce mails and generating structured data as JSON from parsed results. Formerly known as bounceHammer 4: an error mail analyzer.]] :perl:github:top:mail:analyzing: 
 <2016-12-14 Wed 10:24>

  Mail Analyzing Interface for email bounce: A Perl module to parse RFC5322 bounce mails and generating structured data as JSON from parsed results. Formerly known as bounceHammer 4: an error mail analyzer. http://libsisimai.org
** [[https://github.com/HoverHell/RedditImageGrab][HoverHell/RedditImageGrab: Downloads images from sub-reddits of reddit.com.]] :python:github:top:reddit:image:download:script: 
 <2016-12-14 Wed 10:26>

 I created this script to download the latest (and greatest) wallpapers off of image subreddits like wallpaper to keep my desktop wallpaper fresh and interesting. The main idea is that the script would download any JPEG or PNG formatted image that it found listed in the specified subreddit and download them to a folder.
** [[https://github.com/myusuf3/octogit][myusuf3/octogit: giving git more tentacles]] :python:github:top:interface:client: 
 <2016-12-14 Wed 10:27>

 A free and open source interface to github from the command line. Avoid the usual copy and paste when creating repositories, keep up to date on issues, and much more.
** [[https://github.com/alixander/PyScribe][alixander/PyScribe: A Python library to make debugging with print statements simpler and more effective.]] :python:github:top:print:analysis: 
 <2016-12-14 Wed 10:28>

 A Python library to make debugging with print statements simpler and more effective.

 PyScribe.com for full documentation. (Work in progress)

 Warning: This project is currently in a pre-release state. Open to contributions and collaborators.
** [[https://github.com/liris/websocket-client][liris/websocket-client: websocket client for python]] :python:github:top:socket:client: 
 <2016-12-14 Wed 10:31>

 websocket-client module is WebSocket client for python. This provide the low level APIs for WebSocket. All APIs are the synchronous functions.

 websocket-client supports only hybi-13.
** [[https://github.com/guyzmo/git-repo][guyzmo/git-repo: Git-Repo: CLI utility to manage git services from your workspace]] :python:github:top:git:control:manage:gitlab:services: 
 <2016-12-14 Wed 10:31>

 Control your remote git hosting services from the git commandline. The usage is very simple. To clone a new project, out of GitHub, just issue:
** [[https://github.com/pimutils/khal][pimutils/khal: CLI calendar application]] :python:github:top:calendar:CalDAV: 
 <2016-12-14 Wed 10:33>

 Khal is a standards based CLI and terminal calendar program, able to synchronize with CalDAV servers through vdirsyncer.
** [[https://github.com/fagga/transmission-remote-cli][fagga/transmission-remote-cli: Curses interface for the daemon of the BitTorrent client Transmission]] :python:github:top:transmission:client:cli: 
 <2016-12-14 Wed 10:33>

  Curses interface for the daemon of the BitTorrent client Transmission
** [[https://github.com/andreafrancia/trash-cli][andreafrancia/trash-cli: Command line interface to the freedesktop.org trashcan.]] :python:github:top:freedesktop:trash:cli: 
 <2016-12-14 Wed 10:33>

  Command line interface to the freedesktop.org trashcan.
** [[https://github.com/TailorDev/Watson][TailorDev/Watson: A wonderful CLI to track your time!]] :python:github:top:project:management:time:track: 
 <2016-12-14 Wed 10:34>

 Watson is here to help you manage your time. You want to know how much time you are spending on your projects? You want to generate a nice report for your client? Watson is here for you.
** [[https://github.com/richrd/suplemon][richrd/suplemon: Console (CLI) text editor with multi cursor support. Suplemon replicates Sublime Text like functionality in the terminal. Try it out, give feedback, fork it!]] :python:github:top:editor:sublimetext:alternative: 
 <2016-12-14 Wed 10:35>

  :lemon: Console (CLI) text editor with multi cursor support. Suplemon replicates Sublime Text like functionality in the terminal. Try it out, give feedback, fork it!
** [[https://github.com/streamlink/streamlink][streamlink/streamlink: CLI for extracting streams from various websites to a video player of your choosing]] :python:github:top:livestreamer:fork:stream:cli: 
 <2016-12-14 Wed 10:36>

 Streamlink is a CLI utility that pipes flash videos from online streaming services to a variety of video players such as VLC, or alternatively, a browser.

 The main purpose of streamlink is to convert CPU-heavy flash plugins to a less CPU-intensive format.

 Streamlink is a fork of the livestreamer project.
** [[https://github.com/j-bennet/wharfee][j-bennet/wharfee: A CLI with autocompletion and syntax highlighting for Docker commands.]] :python:github:top:docker:cli:autocompletion: 
 <2016-12-14 Wed 10:37>

 A shell for Docker that can do autocompletion and syntax highlighting.
** [[https://github.com/rcaloras/bashhub-client][rcaloras/bashhub-client: Bash history in the cloud. Indexed and searchable.]] :python:github:git:bash:cloud:sync: 
 <2016-12-14 Wed 10:38>

 Bashhub saves every terminal command entered across all sessions and systems and provides powerful querying across all commands.
** [[https://github.com/iamale/bashhub-server][iamale/bashhub-server: Unofficial Bashhub server (and also a REST API example in Kyoukai)]] :python:github:top:bashhub:unofficial:client: 
 <2016-12-14 Wed 10:40>

  Unofficial Bashhub server (and also a REST API example in Kyoukai)
** [[https://github.com/dvorka/hstr][dvorka/hstr: Bash and Zsh shell history suggest box - easily view, navigate, search and manage your command history.]] :c:lang:github:top:bash:history: 
 <2016-12-14 Wed 10:48>

  Bash and Zsh shell history suggest box - easily view, navigate, search and manage your command history. http://www.mindforger.com
** [[https://github.com/crazy-max/ftp-sync][crazy-max/ftp-sync: A shell script to synchronize files between a remote FTP server and your local server/computer.]] :shell:github:top:ftp:sync:automatically: 
 <2016-12-14 Wed 10:50>

  A shell script to synchronize files between a remote FTP server and your local server/computer.
** [[https://github.com/trengrj/recent][trengrj/recent: log bash history to an sqlite database]] :python:github:top:bash:history:recent: 
 <2016-12-14 Wed 10:51>

  log bash history to an sqlite database
** [[https://github.com/sanjujosh/auto-image-renamer][sanjujosh/auto-image-renamer: Rename images using deep learning]] :python:github:top:deep:learning:rename:images: 
 <2016-12-14 Wed 10:52>

 Rename images using deep learning
** [[https://github.com/serialoverflow/demimove][serialoverflow/demimove: A cross-platform file browser for mass renaming]] :python:github:top:qt:rename:mass: 
 <2016-12-14 Wed 10:54>

 Demimove is a mass renaming file browser for Linux and Windows, written with python2.7 and PyQt4.

 A couple of features you might find interesting:

     Interactivity: Demimove allows adding/removing of (multiple) targets quickly by mouse interaction (instead of or complementary to matching via regex/globbing patterns).
     Automatic Previews: Demimove provides an automatic and immediate preview of any change.
     Performance: Demimove is fast, thanks to Qt and its QFileSystemModel. Even thousands of files are no problem (although there's a ceiling, as always).
     Commit History: You can undo any commit, although currently only in order of last to first.
     Multiple Pattern Support: You can have any number of match and filter patterns by separating them with a slash ("/").
     Recursive support: Demimove supports recursive lookups and renames. You can specify the depth of the recursion.
     Config File: You can save and restore options to and from a file (~/.config/demimove/demimove.ini).

 Other than that, it hopefully comes with everything you'd expect from a standard mass renamer, including regex/globbing support and preconfigured actions.
** [[https://github.com/emanuelfeld/poirot][emanuelfeld/poirot: CLI to search a Git repo's revision history for text patterns (e.g. passwords, tokens, IP addresses, and names)]] :python:github:top:penetration:passwords:tokens:search:git:repositories: 
 <2016-12-14 Wed 10:55>

 Poirot helps you investigate your repositories. Give him a set of clues (e.g. strings or regular expressions) and he will report back any place they appear in your repository's revision history.

 When used as a pre-commit hook, Poirot can warn you if you're about to commit something you might not intend (think passwords, private keys, tokens, and other bits of sensitive or personally identifiable information).

 Poirot began as a fork of CFPB's fellow gumshoe, Clouseau.
** [[https://github.com/jlevy/the-art-of-command-line][jlevy/the-art-of-command-line: Master the command line, in one page]] :markdown:master:onepage:cli: 
 <2016-12-14 Wed 10:59>

  Master the command line, in one page
** [[https://github.com/marcusbuffett/command-line-chess][marcusbuffett/command-line-chess: A python program to play chess against an AI in the terminal.]] :python:github:top:chess:games:cli: 
 <2016-12-14 Wed 11:00>

  A python program to play chess against an AI in the terminal.
** [[https://github.com/zk-phi/sublimity][zk-phi/sublimity: emacs]] smooth-scrolling and minimap like sublime editor]] :emacs:sublime:minimap: 
 <2016-12-14 Wed 11:02>

 smooth-scrolling, minimap and distraction-free mode (inspired by the sublime editor)
** [[https://github.com/rakanalh/emacs-dashboard][rakanalh/emacs-dashboard: A shameless extraction of Spacemac's startup screen]] :emacs:dashboard: 
 <2016-12-14 Wed 11:05>

 A shameless extraction of Spacemacs’ startup screen.
 Features

     Displays an awesome Emacs banner!
     Recent files
     Bookmarks list
     Recent projectile projects list (Depends on `projectile` package)
** [[https://github.com/rejeep/drag-stuff.el][rejeep/drag-stuff.el: Drag stuff around in Emacs]]              :emacs:drag: 
 <2016-12-14 Wed 11:12>

 Drag Stuff is a minor mode for Emacs that makes it possible to drag stuff (words, region, lines) around in Emacs.
** [[https://github.com/emcrisostomo/fswatch][emcrisostomo/fswatch: A cross-platform file change monitor with multiple backends: Apple OS X File System Events, *BSD kqueue, Solaris/Illumos File Events Notification, Linux inotify, Microsoft Windows and a stat()-based backend.]] :cpp:file:change:watcher: 
 <2016-12-14 Wed 11:19>

  A cross-platform file change monitor with multiple backends: Apple OS X File System Events, *BSD kqueue, Solaris/Illumos File Events Notification, Linux inotify, Microsoft Windows and a stat()-based backend. http://emcrisostomo.github.io/fswatch/
** [[https://github.com/CleverRaven/Cataclysm-DDA][CleverRaven/Cataclysm-DDA: Cataclysm - Dark Days Ahead. A fork/variant of Cataclysm Roguelike by Whales.]] :github:top:game:roguelike: 
 <2016-12-14 Wed 11:21>

 Cataclysm: Dark Days Ahead is a roguelike set in a post-apocalyptic world. While some have described it as a "zombie game", there is far more to Cataclysm than that. Struggle to survive in a harsh, persistent, procedurally generated world. Scavenge the remnants of a dead civilization for food, equipment, or, if you are lucky, a vehicle with a full tank of gas to get you the hell out of Dodge. Fight to defeat or escape from a wide variety of powerful monstrosities, from zombies to giant insects to killer robots and things far stranger and deadlier, and against the others like yourself, that want what you have...
** [[https://github.com/orf/gping][orf/gping: Ping, but with a graph]]           :python:github:top:ping:graph: 
 <2016-12-14 Wed 11:23>

 My apartments internet is all 4g, and while it's normally pretty fast it can be a bit flakey. I often found myself running ping -t google.com in a command window to get a rough idea of the network speed, and I thought a graph would be a great way to visualize the data. I still wanted to just use the command line though, so I decided to try and write a cross platform one that I could use. And here we are.
** [[https://github.com/smira/aptly][smira/aptly: aptly - Debian repository management tool]] :go:lang:github:top:debian:repository:management: 
 <2016-12-14 Wed 11:27>

 Aptly is a swiss army knife for Debian repository management.
 http://www.aptly.info/img/aptly_logo.png

 Documentation is available at http://www.aptly.info/. For support use mailing list aptly-discuss.

 Aptly features: ("+" means planned features)

     make mirrors of remote Debian/Ubuntu repositories, limiting by components/architectures
     take snapshots of mirrors at any point in time, fixing state of repository at some moment of time
     publish snapshot as Debian repository, ready to be consumed by apt
     controlled update of one or more packages in snapshot from upstream mirror, tracking dependencies
     merge two or more snapshots into one
     filter repository by search query, pulling dependencies when required
     publish self-made packages as Debian repositories
     REST API for remote access
     mirror repositories "as-is" (without resigning with user's key) (+)
     support for yum repositories (+)

 Current limitations:

     translations are not supported yet
** [[https://notabug.org/koz.ross/awesome-c][koz.ross/awesome-c: A curated list of awesome C frameworks, libraries, resources and other shiny things. Inspired by all the other awesome-... projects out there. - NotABug.org: Free code hosting]] :c:lang:awesome:links: 
 <2016-12-14 Wed 11:36>

 A curated list of C good stuff. This list contains only free software for code, and sellers who aren't evil for physical resources.

 This is released under a Creative Commons-Attribution-ShareAlike license, version 4. You can find its text in the LICENSE file.

 This project is part of Peers - a community for growing our freedom. Support us today!

 An important note: This project does not index anything C++-related; only pure C stuff is considered.

 Note for contributors: If you want to make a pull request, please read CONTRIBUTING.md first.
** [[https://www.youtube.com/watch?v=DR3dBWZWaGg&list=PLG9dLrY9JZKgXfVYlg_0lq6s-i5r0Lw0w&index=14][Программирование на Си. #14. Указатели. - YouTube]] :c:lang:tutorial:youtube:video:russian: 
 <2016-12-14 Wed 11:41>

 В данном видео-уроке мы познакомимся с указателями. Одна из важнейших тем в программировании на C и C++.
** [[https://habrahabr.ru/post/265635/][Навигация в крупных проектах для Vim и Emacs / Хабрахабр]] :gtags:howto:russian: 
 <2016-12-14 Wed 13:16>

  Лучше всего установить плагин ggtags, взять его можно здесь или в elpa, melpa или marmalade. Потом откройте один из файлов проекта и нажмите M-x ggtags-mode, затем M-x ggtags-visit-project-root и выберите папку где тэги лежат. Все, дальше в рамках файлов проекта если вы нажмете M-., то сработает переход к определению символа, который в данный момент под курсором. Хотите ввести имя символа вручную — C-u M-.. Если у символа больше одного определения, то нажимайте M-n и M-p для переключения между определениями. Чтобы обновить файл тэгов нажмите M-x ggtags-update-tags находясь на одном из файлов проекта.
** [[https://github.com/vinszent/gnome-twitch][vinszent/gnome-twitch: Enjoy Twitch on your GNU/Linux desktop]] :gnome:twitch:video:stream:gaming: 
 <2016-12-14 Wed 13:52>

  Enjoy Twitch on your GNU/Linux desktop http://gnome-twitch.vinszent.com
** [[https://github.com/docker/docker/issues/23630][Bug: docker daemon failing to start · Issue #23630 · docker/docker]] :docker:error:systemd:fail:start:bug:networking: 
 <2016-12-14 Wed 14:07>

  rm -rf /var/lib/docker/network and restart daemon.
** [[https://github.com/Valloric/YouCompleteMe][Valloric/YouCompleteMe: A code-completion engine for Vim]] :python:github:top:vim:completion: 
 <2016-12-15 Thu 00:12>

 YouCompleteMe is a fast, as-you-type, fuzzy-search code completion engine for Vim. It has several completion engines:

     an identifier-based engine that works with every programming language,
     a Clang-based engine that provides native semantic code completion for C/C++/Objective-C/Objective-C++ (from now on referred to as "the C-family languages"),
     a Jedi-based completion engine for Python 2 and 3 (using the JediHTTP wrapper),
     an OmniSharp-based completion engine for C#,
     a combination of Gocode and Godef semantic engines for Go,
     a TSServer-based completion engine for TypeScript,
     a Tern-based completion engine for JavaScript,
     a racer-based completion engine for Rust,
     and an omnifunc-based completer that uses data from Vim's omnicomplete system to provide semantic completions for many other languages (Ruby, PHP etc.).
** [[https://github.com/abingham/emacs-ycmd][abingham/emacs-ycmd: Emacs client for ycmd, the code completion system.]] :emacs:github:top:completion:client: 
 <2016-12-15 Thu 00:13>

 emacs-ycmd is a client for ycmd, the code completion system. It takes care of managing a ycmd server and fetching completions from that server.

 emacs-ycmd comprises a core set of functionality for communicating with ycmd as well as integration with the Emacs completion framework company-mode.

 A lot of the concepts behind emacs-ycmd are actually concepts from ycmd itself, so if you feel lost you might read the ycmd documentation and/or the the original YouCompleteMe documentation.

 Important: The ycmd package itself doesn't provide a real UI for selecting and inserting completions into your files. For that you need to use company-ycmd or another "completion framework".
** [[https://github.com/Valloric/ycmd#building][Valloric/ycmd: A code-completion & code-comprehension server]] :cpp:github:top:compilation:server:emacs:vim: 
 <2016-12-15 Thu 00:16>

 ycmd is a server that provides APIs for code-completion and other code-comprehension use-cases like semantic GoTo commands (and others). For certain filetypes, ycmd can also provide diagnostic errors and warnings.

 ycmd was originally part of YouCompleteMe's codebase, but has been split out into a separate project so that it can be used in editors other than Vim.

 The best way to learn how to interact with ycmd is by reading through (and running) the example_client.py file. See the README for the examples folder for details on how to run the example client.
** [[https://github.com/jorgenschaefer/elpy][jorgenschaefer/elpy: Emacs Python Development Environment]] :emacs:github:top:python: 
 <2016-12-15 Thu 06:49>

 Elpy is an Emacs package to bring powerful Python editing to Emacs. It combines and configures a number of other packages, both written in Emacs Lisp as well as Python.
** [[https://github.com/jorgenschaefer/Config][jorgenschaefer/Config: Personal configuration files]] :emacs:config:jorgenschaefer:elpy: 
 <2016-12-15 Thu 06:51>

 These are my configuration files for UNIX home directories. If you clone this, be aware that I break stuff randomly and will happily use git push --force. You’ve been warned.
** [[https://www.packtpub.com/networking-and-servers/extending-ansible][Extending Ansible | PACKT Books]]        :ansible:book:official:recommended: 
 <2016-12-15 Thu 08:38>


 Extending Ansible
 Learning
 Rishabh Das
 March 2016
 2 customer reviews
 Discover how to efficiently deploy and customize Ansible in the way your platform demands
** [[https://github.com/chaica/feed2tweet][chaica/feed2tweet: Parse rss feed and tweet new posts to Twitter]] :python:github:top:feed:tweet:rss:atom: 
 <2016-12-15 Thu 08:44>

 Feed2tweet automatically parses rss feeds, identifies new posts and posts them on Twitter. For the full documentation, read it online.
** [[https://github.com/chaica][chaica]]                           :python:github:user:developer:feed2tweet: 
 <2016-12-15 Thu 08:47>


     feed2tweet

     Parse rss feed and tweet new posts to Twitter

     Python 63 3
     retweet

     Retweet automatically retweets tweets from a Twitter user

     Python 56 15
     db2twitter

     Build and send tweets with data from your database

     Python 30 1
     twitterwatch

     Twitter bot to watch the activity of a Twitter user timeline

     Python 11 2
     persistentlist

     Python 5 1
** [[https://github.com/cloudson/gitql][cloudson/gitql: A git query language]] :go:github:top:git:query:language:sql: 
 <2016-12-15 Thu 09:10>

 Gitql is a Git query language.
 In a repository path ...
** [[https://github.com/zeit/hyper][zeit/hyper: A terminal built on web technologies]] :javascript:github:top:shell:terminal:web: 
 <2016-12-15 Thu 09:10>

  A terminal built on web technologies https://hyper.is
** [[https://github.com/mawww/kakoune][mawww/kakoune: mawww's experiment for a better code editor]] :cpp:gihtub:top:vim:editor:inspired: 
 <2016-12-15 Thu 09:11>



 Kakoune is a code editor heavily inspired by Vim, as such most of its commands are similar to vi’s ones, and it shares Vi’s "keystrokes as a text editing language" model.

 Kakoune can operate in two modes, normal and insertion. In insertion mode, keys are directly inserted into the current buffer. In normal mode, keys are used to manipulate the current selection and to enter insertion mode.

 Kakoune has a strong focus on interactivity, most commands provide immediate and incremental results, while still being competitive (as in keystroke count) with Vim.

 Kakoune works on selections, which are oriented, inclusive range of characters, selections have an anchor and a cursor character. Most commands move both of them, except when extending selection where the anchor character stays fixed and the cursor one moves around.
** [[https://github.com/tensorflow/tensorflow][tensorflow/tensorflow: Computation using data flow graphs for scalable machine learning]] :python:cpp:github:top:computation:math: 
 <2016-12-15 Thu 09:12>

 TensorFlow is an open source software library for numerical computation using data flow graphs. Nodes in the graph represent mathematical operations, while the graph edges represent the multidimensional data arrays (tensors) that flow between them. This flexible architecture lets you deploy computation to one or more CPUs or GPUs in a desktop, server, or mobile device without rewriting code. TensorFlow also includes TensorBoard, a data visualization toolkit.

 TensorFlow was originally developed by researchers and engineers working on the Google Brain team within Google's Machine Intelligence research organization for the purposes of conducting machine learning and deep neural networks research. The system is general enough to be applicable in a wide variety of other domains, as well.
** [[https://github.com/firehol/netdata][firehol/netdata: Get control of your servers. Simple. Effective. Awesome. https://my-netdata.io/]] :c:github:top:web:system:monitoring:web: 
 <2016-12-15 Thu 09:14>

 netdata is a system for distributed real-time performance and health monitoring. It provides unparalleled insights, in real-time, of everything happening on the system it runs (including applications such as web and database servers), using modern interactive web dashboards.

 netdata is fast and efficient, designed to permanently run on all systems (physical & virtual servers, containers, IoT devices), without disrupting their core function.
** [[https://github.com/Bilibili/ijkplayer][Bilibili/ijkplayer: Android/iOS video player based on FFmpeg n3.2, with MediaCodec, VideoToolbox support.]] :cpp:android:github:top:video:player:ffmpeg: 
 <2016-12-15 Thu 09:21>

  Android/iOS video player based on FFmpeg n3.2, with MediaCodec, VideoToolbox support.
** [[https://github.com/antirez/redis][antirez / redis]]                              :c:github:top:database:redis: 
 <2016-12-15 Thu 09:22>



 Redis is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes, HyperLogLogs, Bitmaps.
** [[https://github.com/swilly22/redis-module-graph][swilly22/redis-module-graph]]            :c:github:top:redis:graph:database: 
 <2016-12-15 Thu 09:22>

 This project is an attempt to build a graph database ontop of Redis using Redis modules, where the nodes in the graph represents entities such as a person or a place and connections such as 'visit' are made between the different entities.

 As entities might have several attributes Redis hashes seems ideal to hold them, as such a node in the graph is named after an entity's key, for example supose we had a persone entity representing Barack Obama, our entity's key within redis would be "Barack Obama" and two of its attributes could be Age (55) and profession, we could also have another entity under the key Hawaii. with an attribute population (1,442,949). Finally we could construct a simple graph by connecting Barak Obama with an edge representing the relation born to Hawaii.

 This is one of the key ideas behind this project; a node in the graph is simply a reference to an entity stored as Redis hash.
** [[https://github.com/jp9000/obs-studio][jp9000 / obs-studio]]                           :c:github:top:obs:streaming: 
 <2016-12-15 Thu 09:23>



 OBS - Free and open source software for live streaming and screen recording
** [[https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System][SamyPesse/How-to-Make-a-Computer-Operating-System: How to Make a Computer Operating System in C++]] :c:github:top:book:programming:operatingsystem: 
 <2016-12-15 Thu 09:25>

 Online book about how to write a computer operating system in C/C++ from scratch.

 Caution: This repository is a remake of my old course. It was written several years ago as one of my first projects when I was in High School, I'm still refactoring some parts. The original course was in French and I'm not an English native. I'm going to continue and improve this course in my free-time.

 Book: An online version is available at http://samypesse.gitbooks.io/how-to-create-an-operating-system/ (PDF, Mobi and ePub). It was generated using GitBook.

 Source Code: All the system source code will be stored in the src directory. Each step will contain links to the different related files.

 Contributions: This course is open to contributions, feel free to signal errors with issues or directly correct the errors with pull-requests.

 Questions: Feel free to ask any questions by adding issues or commenting sections.

 You can follow me on Twitter @SamyPesse or GitHub.
** [[https://github.com/jameysharp/corrode][jameysharp/corrode: C to Rust translator]] :haskell:c:rust:github:top:translation: 
 <2016-12-15 Thu 09:27>

 This program reads a C source file and prints an equivalent module in Rust syntax. It's intended to be useful for two different purposes:

     Partial automation for migrating legacy code that was implemented in C. (This tool does not fully automate the job because its output is only as safe as the input was; you should clean up the output afterward to use Rust features and idioms where appropriate.)

     A new, complementary approach to static analysis for C programs. If this program can't translate your C source to equivalent Rust, you might consider whether your program is too complicated and hiding bugs. Or, if translation succeeds, the Rust compiler may report warnings and errors that your C compiler misses, or you may be able to use a custom Rust linter to detect project-specific problems.
** [[https://github.com/koalaman/shellcheck][koalaman/shellcheck: ShellCheck, a static analysis tool for shell scripts]] :haskell:shell:gihtub:top:spell:check: 
 <2016-12-15 Thu 09:27>

 ShellCheck is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts:

 Screenshot of a terminal showing problematic shell script lines highlighted.

 The goals of ShellCheck are

     To point out and clarify typical beginner's syntax issues that cause a shell to give cryptic error messages.

     To point out and clarify typical intermediate level semantic problems that cause a shell to behave strangely and counter-intuitively.

     To point out subtle caveats, corner cases and pitfalls that may cause an advanced user's otherwise working script to fail under future circumstances.

 See the gallery of bad code for examples of what ShellCheck can help you identify!
** [[https://github.com/lukasmartinelli/hadolint][lukasmartinelli/hadolint: Dockerfile linter written in Haskell]] :haskell:github:top:dockerfile:linter: 
 <2016-12-15 Thu 09:30>

 A smarter Dockerfile linter that helps you build best practice Docker images. The linter is parsing the Dockerfile into an AST and performs rules on top of the AST. It is standing on the shoulders of Shellcheck to lint the Bash code inside RUN instructions.

 :globe_with_meridians: Check the online version on hadolint.lukasmartinelli.ch
** [[https://github.com/gitql/gitql][gitql/gitql: SQL interface to Git repositories, written in Go.]] :go:github:top:git:interface:sql: 
 <2016-12-15 Thu 09:31>

 gitql is a SQL interface to Git repositories, written in Go.

 WARNING: gitql is still in a very early stage of development. It is considered experimental.
** [[https://github.com/o1egl/govatar][o1egl/govatar: Avatar generator library for GO language]] :go:github:top:avatar:generator: 
 <2016-12-15 Thu 09:32>

 GOvatar image
 Overview

 GOvatar is an avatar generator writen in GO
** [[https://github.com/gogits/gogs][gogits/gogs: Gogs (Go Git Service) is a painless self-hosted Git service.]] :go:github:top:web:git:web:interface: 
 <2016-12-15 Thu 09:33>

  Gogs (Go Git Service) is a painless self-hosted Git service. https://gogs.io
** [[https://github.com/getlantern/lantern][getlantern/lantern: Open Internet for everyone. Lantern is a free application that delivers fast, reliable and secure access to the open Internet for users in censored regions. It uses a variety of techniques to stay unblocked, including domain fronting, p2p, and pluggable transports.]] :go:github:top:p2p:internet:tor:freedom: 
 <2016-12-15 Thu 09:35>

  :izakaya_lantern: Open Internet for everyone. Lantern is a free application that delivers fast, reliable and secure access to the open Internet for users in censored regions. It uses a variety of techniques to stay unblocked, including domain fronting, p2p, and pluggable transports. https://getlantern.org
** [[https://github.com/astaxie/build-web-application-with-golang][astaxie/build-web-application-with-golang: A golang ebook intro how to build a web with golang]] :go:github:top:web:book:programming: 
 <2016-12-15 Thu 09:36>

  A golang ebook intro how to build a web with golang
** [[https://github.com/rancher/rancher][rancher/rancher: A Platform for Operating Docker in Production]] :shell:github:top:docker:management: 
 <2016-12-15 Thu 09:38>

 Rancher is an open source project that provides a complete platform for operating Docker in production. It provides infrastructure services such as multi-host networking, global and local load balancing, and volume snapshots. It integrates native Docker management capabilities such as Docker Machine and Docker Swarm. It offers a rich user experience that enables devops admins to operate Docker in production at large scale.
** [[https://github.com/laradock/laradock][laradock/laradock: A Docker PHP development environment.]] :shell:github:top:docker:php:environment: 
 <2016-12-15 Thu 09:38>

 Laradock is a Docker PHP development environment. It facilitate running PHP Apps on Docker.

 Laradock is configured to run Laravel Apps by default, and it can be modified to run all kinds of PHP Apps (Symfony, CodeIgniter, Wordpress, Drupal...).
** [[https://github.com/icefox/git-map][icefox/git-map: Executes git commands in multiple Git repositories at the same time.]] :shell:github:top:git:multiple:repositories:manage: 
 <2016-12-15 Thu 09:39>

 git map is a tool to execute a Git command in multiple Git directories at the same time.

 WHY?
 =======

 Occasionally I have projects made up of several Git repositories.  Running 'git map branch' quickly confirms everyone is on the correct branch, 'git map clean -dxf' to clean them all, and 'git map fetch' to make sure they all have the latest objects before going off line is very handy.  This tool will work on all the Git repositories that are at the same level in the file system relative to the current directory or current repository you are in.
** [[https://github.com/nicolashery/mac-dev-setup][nicolashery/mac-dev-setup: A beginner's guide to setting up a development environment on Mac OS X]] :shell:github:top:mac:development:environment: 
 <2016-12-15 Thu 09:41>

  A beginner's guide to setting up a development environment on Mac OS X
** [[https://github.com/sstephenson/bats][sstephenson/bats: Bash Automated Testing System]] :shell:github:top:bash:automated:system: 
 <2016-12-15 Thu 09:42>

 Bats is a TAP-compliant testing framework for Bash. It provides a simple way to verify that the UNIX programs you write behave as expected.

 A Bats test file is a Bash script with special syntax for defining test cases. Under the hood, each test case is just a function with a description.
** [[https://github.com/jwilder/nginx-proxy][jwilder/nginx-proxy: Automated nginx proxy for Docker containers using docker-gen]] :shell:github:top:docker:nginx:proxy: 
 <2016-12-15 Thu 09:43>

 nginx-proxy sets up a container running nginx and docker-gen. docker-gen generates reverse proxy configs for nginx and reloads nginx when containers are started and stopped.
** [[https://github.com/thoughtbot/dotfiles][thoughtbot/dotfiles: A set of vim, zsh, git, and tmux configuration files.]] :shell:github:top:configurations: 
 <2016-12-15 Thu 09:44>

  A set of vim, zsh, git, and tmux configuration files. https://thoughtbot.com/open-source
** [[https://github.com/soimort/translate-shell][soimort/translate-shell: Command-line translator using Google Translate, Bing Translator, Yandex.Translate, etc.]] :awk:github:top:translate: 
 <2016-12-15 Thu 09:46>

 Translate Shell (formerly Google Translate CLI) is a command-line translator powered by Google Translate (default), Bing Translator, Yandex.Translate and Apertium. It gives you easy access to one of these translation engines your terminal:
** [[https://github.com/dumblob/mysql2sqlite][dumblob/mysql2sqlite: Converts MySQL dump to SQLite3 compatible dump]] :awk:github:top:mysql:sqlite:converts: 
 <2016-12-15 Thu 09:47>

 Converts MySQL dump to SQLite3 compatible dump (including MySQL KEY xxxxx statements from the CREATE block).
** [[https://github.com/step-/JSON.awk][step-/JSON.awk: Practical JSON parser written in awk]] :awk:github:top:json:parser: 
 <2016-12-15 Thu 09:48>

 A practical JSON parser written in awk.
 Quick Start

 This software is based on JSON.sh, a pipeable JSON parser written in Bash, retrieved on 2013-03-13 and herein ported to awk. JSON.awk is a self-contained script with no external dependencies.
** [[https://github.com/archan937/jsonv.sh][archan937/jsonv.sh: A Bash command line tool for converting JSON to CSV]] :awk:github:top:json:csv:converting: 
 <2016-12-15 Thu 09:48>

 A Bash command line tool for converting JSON to CSV
** [[https://github.com/PaulReiber/Log-Dissector][PaulReiber/Log-Dissector: awk-based tool for extracting knowledge from logfiles]] :awk:github:top:log:parse: 
 <2016-12-15 Thu 09:49>

 LogDissector is an AWK script for making sense of very large logfiles.

 It creates a bunch of other files from the data it collects as it passes over the logfile.

 Make sure you have sufficient disk space before running it.

 LogDissector was written both to showcase the power of AWK's associative arrays, and as a tool for daily use in systems administration.
** [[https://github.com/deuill/fawkss][deuill/fawkss: Fawkss is a CSS preprocessor for people who dislike CSS preprocessors]] :awk:github:top:css:preprocessor: 
 <2016-12-15 Thu 09:50>

 Fawkss [fɔːks] is a simple CSS preprocessor built as a single AWK (nawk/gawk/mawk) script. Syntactically, it borrows as much as possible from the SASS language, for convenience and familiarity.

 This is more of a fun project than a production-ready piece of software, though it may find some use for people needing simple additions to CSS without pulling in the massive ecosystem that comes with Less.js/SASS etc.
** [[https://github.com/miloyip/game-programmer][miloyip/game-programmer: A Study Path for Game Programmer]] :makefile:github:top:gaming:programmer:study:path: 
 <2016-12-15 Thu 09:52>

  A Study Path for Game Programmer
** [[https://github.com/Kickball/awesome-selfhosted][Kickball/awesome-selfhosted: This is a list of Free Software network services and web applications which can be hosted locally. Selfhosting is the process of locally hosting and managing applications instead of renting from SaaS providers.]] :makefile:github:top:list:selfhosting:services: 
 <2016-12-15 Thu 09:52>

  This is a list of Free Software network services and web applications which can be hosted locally. Selfhosting is the process of locally hosting and managing applications instead of renting from SaaS providers. https://reddit.com/r/selfhosted
** [[https://github.com/gitbucket/gitbucket][gitbucket/gitbucket: A Git platform powered by Scala with easy installation, high extensibility & github API compatibility]] :cpp:github:top:clone:service:repository:local: 
 <2016-12-15 Thu 09:53>


     easy installation
     high extensibility by plugins
     API compatibility with Github

 Features

 The current version of GitBucket provides a basic features below:

     Public / Private Git repository (http and ssh access)
     Repository viewer and online file editing
     Wiki
     Issues / Pull request
     Email notification
     Simple user and group management with LDAP integration
     Plug-in system

 If you want to try the development version of GitBucket, see Developer's Guide.
** [[https://github.com/ccrisan/motioneyeos][ccrisan/motioneyeos: A Video Surveillance OS For Single-board Computers]] :makefile:github:top:surveillance:video:os: 
 <2016-12-15 Thu 09:55>

 motionEyeOS is a Linux distribution that turns your single board computer into a video surveillance system. Check out the wiki for more details.

 Follow us on facebook: https://www.facebook.com/motioneyeos.
** [[https://github.com/phodal/developer][phodal/developer: developer roadmap. use growth https://github.com/phodal/growth replace this]] :makefile:github:top:developer:roadmap:path: 
 <2016-12-15 Thu 09:56>

  developer roadmap. use growth https://github.com/phodal/growth replace this http://developer.phodal.com/
** [[https://github.com/Polytonic/Glitter][Polytonic/Glitter: Dead Simple OpenGL (Graphics)]] :cmake:github:top:OpenGL: 
 <2016-12-15 Thu 09:58>

 Glitter is a dead simple boilerplate for OpenGL, intended as a starting point for the tutorials on learnopengl.com and open.gl. Glitter compiles and statically links every required library, so you can jump right into doing what you probably want: how to get started with OpenGL.
** [[https://github.com/rpavlik/cmake-modules][rpavlik/cmake-modules: My collection of CMake modules]] :cmake:github:top:collection:modules: 
 <2016-12-15 Thu 09:59>

 Ryan A. Pavlik, Ph.D.

 ryan.pavlik@gmail.com abiryan@ryand.net http://academic.cleardefinition.com
 Introduction

 This is a collection of CMake modules that I've produced during the course of a variety of software development. There are a number of find modules, especially for virtual reality and physical simulation packages, some utility modules of more general interest, and some patches or workarounds for CMake itself.

 Each module is generally documented, and depending on how busy I was when I created it, the documentation can be fairly complete.

 By now, it also includes contributions both from open-source projects I work on, as well as friendly strangers on the Internet contributing their modules. I am very grateful for improvements/fixes/pull requests!
** [[https://github.com/Akagi201/learning-cmake][Akagi201/learning-cmake: learning cmake]]        :cmake:github:top:learning: 
 <2016-12-15 Thu 10:00>

 This is a simple CMake practice project which contains some different scenarios.

     hello-world

     Demo a simplest CMake project.

     hello-world-clear

     Separate the output files and src files.

     hello-world-lib

     Demo how to make a static/shared library.

     hello-world-shared

     Demo how to utilize external static/shared library.

     curl

     Demo how to use cmake with curl.

     hello-module

     Demo how to use cmake find module.

     config-file

     Demo how to work with config.h.
** [[https://github.com/webmin/webmin][webmin/webmin: Webmin source code]] :perl:github:top:webmin:system:manage:web:interface: 
 <2016-12-15 Thu 10:01>

 Webmin is a web-based interface for system administration for Unix. 
 Using any browser that supports tables and forms, you can setup user
 accounts, Apache, internet services, DNS, file sharing and so on. 

 Webmin consists of a simple web server, and a number of CGI programs
 which directly update system files like /etc/inetd.conf and /etc/passwd.
 The web server and all CGI programs are written in Perl version 5, and use
 only the standard perl modules.
** [[https://github.com/mozilla-bteam/bmo][mozilla-bteam/bmo: bugzilla.mozilla.org source]]  :perl:github:top:bugzilla: 
 <2016-12-15 Thu 10:02>

 Bugzilla is a free bug-tracking system that is developed by an active
 community of volunteers in the Mozilla community. You can install and
 use it without having to pay any license fee.
** [[https://github.com/sitaramc/gitolite][sitaramc/gitolite: Hosting git repositories -- Gitolite allows you to setup git hosting on a central server, with very fine-grained access control and many (many!) more powerful features.]] :perl:github:top:git:hosting:local: 
 <2016-12-15 Thu 10:04>

  Hosting git repositories -- Gitolite allows you to setup git hosting on a central server, with very fine-grained access control and many (many!) more powerful features. http://wiki.github.com/sitaramc/gitol…
** [[https://github.com/major/MySQLTuner-perl][major/MySQLTuner-perl: MySQLTuner is a script written in Perl that will assist you with your MySQL configuration and make recommendations for increased performance and stability.]] :perl:github:top:mysql:assist:suggest: 
 <2016-12-15 Thu 10:08>

  MySQLTuner is a script written in Perl that will assist you with your MySQL configuration and make recommendations for increased performance and stability. http://mysqltuner.com
** [[https://github.com/thoughtbot/rcm][thoughtbot/rcm: rc file (dotfile) management]] :perl:github:top:dotfiles:management: 
 <2016-12-15 Thu 10:23>

 This is a management suite for dotfiles. See the tutorial to get started quickly.

 It assumes that you have a separate dotfiles directory, or are interested in creating one.

 The programs provided are rcup(1), mkrc(1), rcdn(1), and lsrc(1). They are explained in the tutorial and configured using rcrc(5).
** [[https://github.com/sullo/nikto][sullo/nikto: Nikto web server scanner]] :perl:github:top:web:server:scanner: 
 <2016-12-15 Thu 10:23>

 Nikto web server scanner - https://cirt.net/Nikto2

 Full documentation - https://cirt.net/nikto2-docs/

 Basic usage:
** [[https://github.com/k4rthik/git-cal][k4rthik/git-cal: github like contributions calendar on terminal]] :perl:github:top:contributions:visualization: 
 <2016-12-15 Thu 10:24>

  github like contributions calendar on terminal
** [[https://github.com/baedert/corebird][baedert/corebird: Native Gtk+ Twitter Client]] :vala:github:top:gtk:twitter:client: 
 <2016-12-15 Thu 10:27>

  Native Gtk+ Twitter Client http://corebird.baedert.org
** [[https://github.com/codito/gnome-pomodoro][codito/gnome-pomodoro: A time management utility for GNOME based on the pomodoro technique!]] :vala:github:top:gtk:gnome:pomodoro: 
 <2016-12-15 Thu 10:28>

  A time management utility for GNOME based on the pomodoro technique! http://gnomepomodoro.org/
** [[https://github.com/phw/peek][phw/peek: Simple animated Gif screen recorder for Linux]] :vala:github:top:gtk:gnome:record:gif: 
 <2016-12-15 Thu 10:28>

 A simple tool that allows you to record short animated GIF images from your screen.

 Currently only Linux with X11 is supported. Other Unix like systems using X11 should work as well. It is planned to also support Wayland and maybe other operating systems in the future.
** [[https://github.com/GNOME/vala][GNOME/vala: vala]]                                  :vala:github:top:source: 
 <2016-12-15 Thu 10:29>

 Vala is a programming language that aims to bring modern programming
 language features to GNOME developers without imposing any additional
 runtime requirements and without using a different ABI compared to
 applications and libraries written in C.

 valac, the Vala compiler, is a self-hosting compiler that translates
 Vala source code into C source and header files. It uses the GObject
 type system to create classes and interfaces declared in the Vala source
 code.
** [[https://github.com/pdfpc/pdfpc][pdfpc/pdfpc: A presenter console with multi-monitor support for PDF files.]] :vala:github:top:gnome:gtk:presentation:viewer: 
 <2016-12-15 Thu 10:30>

 pdfpc is a GTK based presentation viewer application for GNU/Linux which uses Keynote like multi-monitor output to provide meta information to the speaker during the presentation. It is able to show a normal presentation window on one screen, while showing a more sophisticated overview on the other one providing information like a picture of the next slide, as well as the left over time till the end of the presentation. The input files processed by pdfpc are PDF documents, which can be created using nearly any of today's presentation software.

 More information, including screenshots and a demo presentation, can be found at https://pdfpc.github.io/
** [[https://github.com/jessevdk/gitg][jessevdk/gitg: A GitX clone for gtk+/GNOME (**moved to git.gnome.org**)]] :vala:github:top:git:interface:gnome:gui: 
 <2016-12-15 Thu 10:31>

 gitg is a graphical user interface for git. It aims at being a small,
 fast and convenient tool to visualize the history of git repositories.
 Besides visualization, gitg also provides several utilities to manage your
 repository and commit your work.
** [[https://github.com/tiliado/nuvolaplayer][tiliado/nuvolaplayer: The third generation of Nuvola Player - cloud music integration for your Linux desktop]] :vala:github:top:player:cloud: 
 <2016-12-15 Thu 10:32>

  The third generation of Nuvola Player - cloud music integration for your Linux desktop https://tiliado.eu/nuvolaplayer/
** [[https://github.com/jangernert/FeedReader][jangernert/FeedReader: Modern desktop application designed to complement existing web-based RSS accounts.]] :vala:github:top:feed:rss:atom:gnome:reader: 
 <2016-12-15 Thu 10:32>

 FeedReader is a modern desktop application designed to complement existing web-based RSS accounts. It combines all the advantages of web based services like synchronisation across all your devices with everything you expect from a modern desktop application.
** [[https://github.com/holylobster/nuntius-linux][holylobster/nuntius-linux: Nuntius delivers notifications from your phone or tablet to your computer]] :vala:github:top:gnome:nautilus:phone:notifications: 
 <2016-12-15 Thu 10:33>

 Nuntius delivers notifications from your phone or tablet to your computer over Bluetooth.

 Nuntius is an Open Source project from HolyLobster.

 To use Nuntius you will need to install a companion tool on your phone or tablet and pair it via Bluetooth. You will also need to restart your session to auto-start nuntius.

 For more information on the project and the companion tools to install on the computer check https://github.com/holylobster
** [[https://github.com/Valama/valama][Valama/valama: Next generation Vala IDE]]              :vala:github:top:ide: 
 <2016-12-15 Thu 10:34>

  Next generation Vala IDE
** [[https://github.com/GNOME/geary][GNOME/geary: email client]]              :vala:github:top:mail:client:gnome: 
 <2016-12-15 Thu 10:34>

     Geary Email Client
     ------------------

   * Introduction

     Geary is an IMAP email client built for the GNOME desktop environment.  It
     allows you to read and send email with a simple, modern interface.

     Visit https://wiki.gnome.org/Apps/Geary to read about the current state of
     Geary's development and to make sure you're running the latest version.
** [[https://github.com/voldyman/MarkMyWords][voldyman/MarkMyWords: Markdown editor]] :vala:github:top:editor:markdown:gnome: 
 <2016-12-15 Thu 10:35>

 A minimal markdown editor
** [[https://github.com/valum-framework/valum][valum-framework/valum: Web micro-framework written in Vala]] :vala:github:top:web:micro:framework: 
 <2016-12-15 Thu 10:37>

 Valum is a Web micro-framework entirely written in the Vala programming language.
** [[https://github.com/vhf/free-programming-books][vhf/free-programming-books: Freely available programming books]] :markdown:github:top:books:free:programming: 
 <2016-12-15 Thu 10:45>

 This list initially was a clone of stackoverflow - List of Freely Available Programming Books by George Stocker. Now updated, with dead links gone and new content.
** [[https://github.com/karan/Projects][karan/Projects: A list of practical projects that anyone can solve in any programming language.]] :markdown:github:top:list:projects:solve: 
 <2016-12-15 Thu 10:47>

 A list of practical projects that anyone can solve in any programming language (See solutions). These projects are divided in multiple categories, and each category has its own folder.
** [[https://github.com/Developer-Y/cs-video-courses][Developer-Y/cs-video-courses: List of Computer Science courses with video lectures.]] :markdown:github:top:courses:video: 
 <2016-12-15 Thu 10:50>

  List of Computer Science courses with video lectures.
** [[https://github.com/JoshCheek/seeing_is_believing#editor-integration][JoshCheek/seeing_is_believing: Displays the results of every line of code in your file]] :ruby:github:top:evaluates:debug: 
 <2016-12-15 Thu 10:53>

 Evaluates Ruby code, recording the results of each line. Integrates with any extensible editor (I've integrated it with many already, see the list). If you like Swift Playgrounds, you'll like SiB.
** [[https://github.com/tldr-pages/tldr][tldr-pages/tldr: Simplified and community-driven man pages]] :tex:github:top:man: 
 <2016-12-15 Thu 10:55>

 A collection of simplified and community-driven man pages.
** [[https://github.com/AllenDowney/ThinkPython2][AllenDowney/ThinkPython2: LaTeX source and supporting code for Think Python, 2nd edition, by Allen Downey.]] :tex:github:top:python:book: 
 <2016-12-15 Thu 10:56>

 LaTeX source, code examples, and exercise solutions for Think Python, 2nd edition, by Allen Downey.
** [[https://github.com/dennis714/RE-for-beginners][dennis714/RE-for-beginners: "Reverse Engineering for Beginners" free book]] :tex:github:top:reverse:engineering:book: 
 <2016-12-15 Thu 10:57>

  "Reverse Engineering for Beginners" free book http://beginners.re
** [[https://github.com/cplusplus/draft][cplusplus/draft: C++ standards drafts]] :tex:cpp:github:top:book:drafts:standards: 
 <2016-12-15 Thu 10:57>

  C++ standards drafts http://www.open-std.org/jtc1/sc22/wg21/
** [[https://github.com/matze/mtheme][matze/mtheme: A modern LaTeX Beamer theme]]    :tex:beamer:theme:github:top: 
 <2016-12-15 Thu 10:58>

 Metropolis is a simple, modern Beamer theme suitable for anyone to use. It tries to minimize noise and maximize space for content; the only visual flourish it offers is an (optional) progress bar added to each slide. The core design principles of the theme were described in a blog post here.
** [[https://github.com/crypto101/book][crypto101/book: Crypto 101, the introductory book on cryptography.]] :tex:github:top:cryptography:book: 
 <2016-12-15 Thu 10:58>

  Crypto 101, the introductory book on cryptography. https://www.crypto101.io/
** [[https://github.com/soulmachine/machine-learning-cheat-sheet][soulmachine/machine-learning-cheat-sheet: Classical equations and diagrams in machine learning]] :tex:github:top:machine:learning:cheatsheets: 
 <2016-12-15 Thu 10:59>

  Classical equations and diagrams in machine learning http://soulmachine.me
** [[https://github.com/jbrownlee/CleverAlgorithms][jbrownlee/CleverAlgorithms: An open source book that describes a large number of algorithmic techniques from the the fields of Biologically Inspired Computation, Computational Intelligence and Metaheuristics in a complete, consistent, and centralized manner such that they are accessible, usable, and understandable.]] :tex:github:top:book:algorithmic: 
 <2016-12-15 Thu 10:59>

  An open source book that describes a large number of algorithmic techniques from the the fields of Biologically Inspired Computation, Computational Intelligence and Metaheuristics in a complete, consistent, and centralized manner such that they are accessible, usable, and understandable. http://CleverAlgorithms.com
** [[https://github.com/Microsoft/checkedc][Microsoft/checkedc: Checked C is an extension of C that adds bounds checking to C. This repo contains the specification for the extension, test code, and samples.]] :tex:c:github:book:checking:prevent:programming:errors: 
 <2016-12-15 Thu 11:01>

 Checked C is an extension to C that adds static and dynamic checking to detect or prevent common programming errors such as buffer overruns, out-of-bounds memory accesses, and incorrect type casts. This repo contains the specification for the extension, test code, and samples. For the latest version of the specification and the draft of the next version, see the Checked C releases page.

 We are creating a modified version of LLVM/clang that supports Checked C. The code for the modified version of LLVM/clang lives in the Checked C clang repo and the Checked C LLVM repo.
** [[https://github.com/karlseguin/the-little-mongodb-book][karlseguin/the-little-mongodb-book: The Little MongoDB Book]] :tex:github:top:MongoDB:book: 
 <2016-12-15 Thu 11:01>

  The Little MongoDB Book http://openmymind.net/2011/3/28/The-L…
** [[https://github.com/mavam/stat-cookbook][mavam/stat-cookbook: The probability and statistics cookbook]] :tex:github:top:probability:statistics:cookbook: 
 <2016-12-15 Thu 11:02>

 The probability and statistics cookbook contains a succinct representation of various topics in probability theory and statistics. It provides a comprehensive mathematical reference reduced to its essence, rather than aiming for elaborate explanations.

 Feel encouraged to extend the cookbook by forking it and submitting pull requests
** [[https://github.com/HoTT/book][HoTT/book: A textbook on informal homotopy type theory]] :tex:github:top:math:homotopy:book: 
 <2016-12-15 Thu 11:02>

 This is a textbook on informal homotopy type theory. It is part of the Univalent foundations of mathematics project that took place at the Institute for Advanced Study in 2012/13.
** [[https://github.com/karlseguin/the-little-redis-book][karlseguin/the-little-redis-book]]               :tex:github:top:book:redis: 
 <2016-12-15 Thu 11:03>

 The Little Redis Book is a free book introducing Redis.

 The book was written by Karl Seguin, with Perry Neal's assistance.

 If you liked this book, maybe you'll also like The Little MongoDB Book.
** [[https://github.com/soulmachine/acm-cheat-sheet][soulmachine/acm-cheat-sheet: Acm Cheat Sheet]] :tex:github:top:c:cpp:acm:cheatsheets: 
 <2016-12-15 Thu 11:03>

  Acm Cheat Sheet
** [[https://github.com/ieure/sicp][ieure/sicp: Structure and Interpretation of Computer Programs, Second Edition]] :tex:github:top:computer:programs:structure:book: 
 <2016-12-15 Thu 11:03>

  Structure and Interpretation of Computer Programs, Second Edition http://mitpress.mit.edu/sicp/
** [[https://github.com/manuels/texlive.js][manuels/texlive.js: Compiling LaTeX (TeX live) in your browser]] :tex:github:top:LaTeX:browser:compiling: 
 <2016-12-15 Thu 11:04>

  Compiling LaTeX (TeX live) in your browser http://manuels.github.com/texlive.js/
** [[https://github.com/airbnb/javascript][airbnb/javascript: JavaScript Style Guide]] :JavaScript:github:top:style:guide: 
 <2016-12-15 Thu 11:05>

  JavaScript Style Guide
** [[https://github.com/isocpp/CppCoreGuidelines][isocpp/CppCoreGuidelines: The C++ Core Guidelines are a set of tried-and-true guidelines, rules, and best practices about coding in C++]] :cpp:github:top:guidelines: 
 <2016-12-15 Thu 11:06>

 The C++ Core Guidelines are a collaborative effort led by Bjarne Stroustrup, much like the C++ language itself. They are the result of many person-years of discussion and design across a number of organizations. Their design encourages general applicability and broad adoption but they can be freely copied and modified to meet your organization's needs.
** [[https://github.com/raywenderlich/objective-c-style-guide][raywenderlich/objective-c-style-guide: A style guide that outlines the coding conventions for raywenderlich.com]] :c:github:top:style:guide: 
 <2016-12-15 Thu 11:06>

 This style guide outlines the coding conventions for raywenderlich.com.
** [[https://github.com/trending/jupyter-notebook][Trending Jupyter Notebook repositories on GitHub today]] :jupyter:github:top:trending: 
 <2016-12-15 Thu 11:07>
** [[https://github.com/rougier/numpy-100][rougier/numpy-100: 100 numpy exercises (100% complete)]] :jupyter:github:top:numpy:exercises: 
 <2016-12-15 Thu 11:08>

  100 numpy exercises (100% complete)
** [[https://github.com/gentoo/gentoo][gentoo/gentoo: The official mirror the Gentoo ebuild repository]] :gentoo:github:top:ebuild:repository:official: 
 <2016-12-15 Thu 11:09>

  The official mirror the Gentoo ebuild repository https://wiki.gentoo.org/wiki/Gentoo_G…
** [[https://github.com/gentoo/portage][gentoo/portage: Portage Package Manager - this is just a mirror, send patches to <gentoo-portage-dev@lists.gentoo.org>]] :python:gentoo:github:top:portage:source: 
 <2016-12-15 Thu 11:10>

  Portage Package Manager - this is just a mirror, send patches to <gentoo-portage-dev@lists.gentoo.org>

Portage is a package management system based on ports collections. The
Package Manager Specification Project (PMS) standardises and documents
the behaviour of Portage so that the Portage tree can be used by other
package managers.
** [[https://github.com/fabric/fabric][fabric/fabric: Simple, Pythonic remote execution and deployment.]] :python:github:top:ssh:multiple:remote:executing: 
 <2016-12-15 Thu 11:11>

 Fabric is a Python (2.5-2.7) library and command-line tool for streamlining the use of SSH for application deployment or systems administration tasks.

 It provides a basic suite of operations for executing local or remote shell commands (normally or via sudo) and uploading/downloading files, as well as auxiliary functionality such as prompting the running user for input, or aborting execution.

 Typical use involves creating a Python module containing one or more functions, then executing them via the fab command-line tool. Below is a small but complete "fabfile" containing a single task:
** [[https://github.com/joke2k/faker][joke2k/faker: Faker is a Python package that generates fake data for you.]] :python:github:top:fake:data:generates: 
 <2016-12-15 Thu 11:12>

 Faker is a Python package that generates fake data for you. Whether you need to bootstrap your database, create good-looking XML documents, fill-in your persistence to stress test it, or anonymize data taken from a production service, Faker is for you.
** [[https://github.com/ryanoasis/nerd-fonts][ryanoasis/nerd-fonts: Collection of 35+ patched fonts (over 74.5k possible variations) with a FontForge font patcher python script for Powerline, Font Awesome, Octicons, Devicons, and other icon fonts. Includes fonts: SourceCodePro, Hack, Droid Sans, Meslo, AnonymousPro, ProFont, Inconsolata, and more]] :python:github:top:fonts: 
 <2016-12-15 Thu 11:13>

  :abcd: Collection of 35+ patched fonts (over 74.5k possible variations) with a FontForge font patcher python script for Powerline, Font Awesome, Octicons, Devicons, and other icon fonts. Includes fonts: SourceCodePro, Hack, Droid Sans, Meslo, AnonymousPro, ProFont, Inconsolata, and more http://ryanlmcintyre.com/nerd-fonts/

Nerd Fonts is a project that patches developer targeted fonts with a high number of glyphs (icons). Specifically to add a high number of extra glyphs from popular 'iconic fonts' such as Font Awesome, Devicons, Octicons, and others.
** [[https://github.com/seatgeek/fuzzywuzzy][seatgeek/fuzzywuzzy: Fuzzy String Matching in Python]] :python:github:top:string:differences:matching: 
 <2016-12-15 Thu 11:14>

 Fuzzy string matching like a boss. It uses Levenshtein Distance to calculate the differences between sequences in a simple-to-use package.
 Requirements

     Python 2.4 or higher
     difflib
     python-Levenshtein (optional, provides a 4-10x speedup in String Matching, though may result in [differing results for certain cases](https://github.com/seatgeek/fuzzywuzzy/issues/128))
** [[https://github.com/ClusterHQ/flocker][ClusterHQ/flocker: Container data volume manager for your Dockerized application]] :python:github:top:docker:container:data:manage: 
 <2016-12-15 Thu 11:15>

 Flocker is an open-source Container Data Volume Manager for your Dockerized applications.

 By providing tools for data migrations, Flocker gives ops teams the tools they need to run containerized stateful services like databases in production.

 Unlike a Docker data volume which is tied to a single server, a Flocker data volume, called a dataset, is portable and can be used with any container, no matter where that container is running.

 Flocker manages Docker containers and data volumes together. When you use Flocker to manage your stateful microservice, your volumes will follow your containers when they move between different hosts in your cluster.

 You can also use Flocker to manage only your volumes, while continuing to manage your containers however you choose.
** [[https://github.com/ajalt/fuckitpy][ajalt/fuckitpy: The Python error steamroller.]] :python:github:top:error:fuck: 
 <2016-12-15 Thu 11:15>

 FuckIt.py uses state-of-the-art technology to make sure your Python code runs whether it has any right to or not. Some code has an error? Fuck it.
** [[https://github.com/lengstrom/fast-style-transfer][lengstrom/fast-style-transfer: Fast Style Transfer in TensorFlow ⚡🖥🎨🖼]] :python:github:top:image:video:styles: 
 <2016-12-15 Thu 11:17>

 Add styles from famous paintings to any photo in a fraction of a second! You can even style videos!

 It takes 100ms on a 2015 Titan X to style the MIT Stata Center (1024×680) like Udnie, by Francis Picabia.

 Our implementation is based off of a combination of Gatys' A Neural Algorithm of Artistic Style, Johnson's Perceptual Losses for Real-Time Style Transfer and Super-Resolution, and Ulyanov's Instance Normalization.
** [[https://github.com/emacs-mirror/emacs][emacs-mirror/emacs: Mirror of GNU Emacs]]   :emacs:github:top:source:mirror: 
 <2016-12-15 Thu 11:21>

  Mirror of GNU Emacs http://www.gnu.org/software/emacs/
** [[https://github.com/jorgenschaefer/elpy][jorgenschaefer/elpy: Emacs Python Development Environment]] :emacs:github:top:python:ide: 
 <2016-12-15 Thu 11:22>

 Elpy is an Emacs package to bring powerful Python editing to Emacs. It combines and configures a number of other packages, both written in Emacs Lisp as well as Python.
** [[https://github.com/gabrielelanaro/emacs-for-python][gabrielelanaro/emacs-for-python: Collection of emacs extensions specifically collected for python development, with workflow guidelines!]] :emacs:github:top:python:collection: 
 <2016-12-15 Thu 11:22>

  Collection of emacs extensions specifically collected for python development, with workflow guidelines! http://gabrielelanaro.github.com/emac…
** [[https://github.com/ch11ng/exwm][ch11ng/exwm: Emacs X Window Manager]] :emacs:github:top:window:manager:xorg: 
 <2016-12-15 Thu 11:23>

  Emacs X Window Manager
** [[https://github.com/pashky/restclient.el][pashky/restclient.el: HTTP REST client tool for emacs]] :emacs:github:top:http:rest:web:client: 
 <2016-12-15 Thu 11:24>

 This is a tool to manually explore and test HTTP REST webservices. Runs queries from a plain-text query sheet, displays results as a pretty-printed XML, JSON and even images.
** [[https://github.com/magnars/dash.el][magnars/dash.el: A modern list library for Emacs]] :emacs:github:top:library:list: 
 <2016-12-15 Thu 11:25>

  A modern list library for Emacs
** [[https://github.com/wking/rss2email][wking/rss2email: open-source tool for Windows, Mac OS and UNIX for getting news from RSS feeds in email]] :python:github:top:rss:email:atom:feed: 
 <2016-12-15 Thu 11:41>

  open-source tool for Windows, Mac OS and UNIX for getting news from RSS feeds in email http://pypi.python.org/pypi/rss2email/
** [[https://github.com/JakeWharton/pidcat][JakeWharton/pidcat: Colored logcat script which only shows log entries for a specific application package.]] :python:github:top:log:pid:process:color:logcat: 
 <2016-12-15 Thu 11:51>

 An update to Jeff Sharkey's excellent logcat color script which only shows log entries for processes from a specific application package.

 During application development you often want to only display log messages coming from your app. Unfortunately, because the process ID changes every time you deploy to the phone it becomes a challenge to grep for the right thing.

 This script solves that problem by filtering by application package. Supply the target package as the sole argument to the python script and enjoy a more convenient development process.
** [[https://github.com/etsy/logster][etsy/logster: Parse log files, generate metrics for Graphite and Ganglia]] :python:github:top:log:read:metrics:Graphite:Ganglia: 
 <2016-12-15 Thu 11:51>

 Logster is a utility for reading log files and generating metrics to configurable outputs. It is ideal for visualizing trends of events that are occurring in your application/system/error logs. For example, you might use logster to graph the number of occurrences of HTTP response code that appears in your web server logs.

 Logster maintains a cursor, via a tailer, on each log file that it reads so that each successive execution only inspects new log entries. In other words, a 1 minute crontab entry for logster would allow you to generate near real-time trends in the configured output for anything you want to measure from your logs.

 This tool is made up of a framework script, logster, and parsing classes that are written to accommodate your specific log format. Sample parsers are included in this distribution. The parser classes essentially read a log file line by line, apply a regular expression to extract useful data from the lines you are interested in, and then aggregate that data into metrics that will be submitted to the configured output. The sample parsers should give you some idea of how to get started writing your own. A list of available parsers can be found on the Parsers page.

 Graphite, Ganglia, Amazon CloudWatch, Nagios, StatsD and stdout outputs are provided, and Logster also supports the use of third-party output classes. A list of available output classes can be found on the Outputs page.
** [[https://github.com/karandesai-96/yolog][karandesai-96/yolog: Beautify your Git Logs ! { v0.3.0 pre release! Better features upcoming soon- "Watch" to keep a track }]] :python:github:top:git:log:beautify:color: 
 <2016-12-15 Thu 12:25>

  Beautify your Git Logs ! { v0.3.0 pre release! Better features upcoming soon- "Watch" to keep a track }
** [[https://pr0git.blogspot.ru/2015/02/git_4.html][Pro Git: Настройка русских шрифтов в Git]] :git:configuration:russian:files:encoding: 
 <2016-12-15 Thu 15:02>

 Вот как выводит консоль имена файлов на русском языке.

 Чтобы это подправить дадим команду

 $ git config --local core.quotepath false
** [[https://weblate.org/en/][Weblate - web-based translation]] :web:translation:tool:version:control:checks:linking: 
 <2016-12-16 Fri 02:43>

  Weblate is a free web-based translation tool with tight version control integration. It features simple and clean user interface, propagation of translations across components, quality checks and automatic linking to source files.
** [[https://weblate.org/en/hosting/][Hosting Weblate]]                                     :weblate:hosting:free: 
 <2016-12-16 Fri 02:48>

  We can host translations for your commercial or free software projects. You can see summary of hosting plans below. Should you have any questions or look for hosting of bigger projects, don't hesitate to get in touch with us.
** [[http://dirk.eddelbuettel.com/code/anytime.html][anytime: Convert Any Input to Parsed Date or Datetime]] :R:time:date:conversion: 
 <2016-12-16 Fri 02:49>

 anytime

 Convert Any Input to Parsed Date or Datetime
 Motivation

 R excels at computing with dates, and times. Using typed representation for your data is highly recommended not only because of the functionality offered but also because of the added safety stemming from proper representation.

 But there is a small nuisance cost in interactive work as well as in programming. Users must have told as.POSIXct() about a million times that the origin is (of course) the epoch. Do we really have to say it a million more times? Similarly, when parsing dates that are some recogniseable form of YYYYMMDD format, do we really have to manually convert from integer or numeric or factor or ordered to character first? Having one of several common separators and/or date / time month forms (YYYY-MM-DD, YYYY/MM/DD, YYYYMMDD, YYYY-mon-DD and so on, with or without times), do we really need a format string?

 Or could a smart converter function do this? anytime() aims to be that general purpose converter returning a proper POSIXct (or Date) object nomatter the input (provided it was somewhat parseable), relying on Boost date_time for the (efficient, performant) conversion.
** [[https://wammu.eu/][Wammu and Gammu]]    :python:phone:manage:system:contacts:calendar:messages: 
 <2016-12-16 Fri 02:52>



 Wammu is a program to manage data in your cell phone such as contacts, calendar or messages. Gammu SMSD is a service to mass send and receive SMS messages. Both these are built on top of Gammu library, which provides abstraction layer to work with different cell phones from different vendors (including Nokia, Sony-Ericsson, Motorola, Samsung, Siemens, Huawei and others).

** [[https://github.com/ecpolley/SuperLearner][ecpolley/SuperLearner: Current version of the SuperLearner R package]] :R:github:top:algorithms: 
 <2016-12-16 Fri 04:35>

 This is the current version of the SuperLearner R package (version 2.*).

 Features

     Automatic optimal predictor ensembling via cross-validation.
     Includes dozens of algorithms including Random Forest, GBM, XGBoost, BART, Elastic Net, and Neural Networks.
     Integrates with caret to support even more algorithms.
     Includes framework to quickly add custom algorithms to the ensemble
     Visualize the performance of each algorithm using built-in plotting.
     Easily incorporate multiple hyperparameter configurations for each algorithm into the ensemble.
     Add new algorithms or change the default parameters for existing ones.
     Screen variables (feature selection) based on univariate association, Random Forest, Elastic Net, et al. or a custom screening algorithms.
     Multi-core and multi-node parallelization for scalability.
     External cross-validation to estimate the performance of the ensembling predictor.
     Ensemble can optimize for any target metric: mean-squared error, AUC, log likelihood, etc.
     Includes framework to provide custom loss functions and stacking algorithms
** [[https://github.com/csgillespie/efficientR][csgillespie/efficientR: Efficient R programming: a book]] :tex:R:github:top:book:programming: 
 <2016-12-16 Fri 04:36>

  Efficient R programming: a book https://csgillespie.github.io/efficie…
** [[https://github.com/johnmyleswhite/ML_for_Hackers][johnmyleswhite/ML_for_Hackers: Code accompanying the book "Machine Learning for Hackers"]] :R:github:top:book:addon: 
 <2016-12-16 Fri 04:37>

  Code accompanying the book "Machine Learning for Hackers" http://shop.oreilly.com/product/06369…
** [[https://github.com/hadley/devtools][hadley/devtools: Tools to make an R developer's life easier]] :R:github:top:begin:easy: 
 <2016-12-16 Fri 04:38>

 The aim of devtools is to make package development easier by providing R functions that simplify common tasks.

 An R package is actually quite simple. A package is a template or set of conventions that structures your code. This not only makes sharing code easy, it reduces the time and effort required to complete you project: following a template removes the need to have to think about how to organize things and paves the way for the creation of standardised tools that can further accelerate your progress.

 While package development in R can feel intimidating, devtools does every thing it can to make it less so. In fact, devtools comes with a small guarantee: if you get an angry e-mail from an R-core member because of a bug in devtools, forward me the email and your address and I'll mail you a card with a handwritten apology.

 devtools is opinionated about package development. It requires that you use roxygen2 for documentation and testthat for testing. Not everyone would agree with this approach, and they are by no means perfect. But they have evolved out of the experience of writing over 30 R packages.

 I'm always happy to hear about what doesn't work for you and where devtools gets in your way. Either send an email to the rdevtools mailing list or file an issue at the GitHub repository.
** [[https://github.com/gnunn1/terminix][gnunn1/terminix: A tiling terminal emulator for Linux using GTK+ 3]] :D:github:top:gnome:terminal:alternative: 
 <2016-12-16 Fri 04:39>

 Terminix is a tiling terminal emulator which uses the VTE GTK+ 3 widget with the following features:

     Layout terminals in any fashion by splitting them horizontally or vertically
     Terminals can be re-arranged using drag and drop both within and between windows
     Terminals can be detached into a new window via drag and drop
     Input can be synchronized between terminals so commands typed in one terminal are replicated to the others
     The grouping of terminals can be saved and loaded from disk
     Terminals support custom titles
     Color schemes are stored in files and custom color schemes can be created by simply creating a new file
     Transparent background
     Background images
     Quake mode support (i.e. drop-down terminal)
     Custom hyperlinks
     Automatic (triggered) profile switches based on hostname and directory
     Supports notifications when processes are completed out of view. Requires the Fedora notification patches for VTE
     Experimental trigger support (Requires patched VTE, see wiki )
     Experimental badge support (Requires patched VTE, see wiki
** [[https://github.com/revolunet/PythonBooks][revolunet/PythonBooks: Directory of free Python ebooks]] :python:github:top:book: 
 <2016-12-16 Fri 04:40>

 PythonBooks is a showcase of the best free ebooks about Python.

 Learn Python, discover new fields, and muscle your brain for free !

 check it out : http://pythonbooks.revolunet.com

 We also have a javascript version : http://jsbooks.revolunet.com
** [[https://github.com/AndreyAkinshin/Russian-Phd-LaTeX-Dissertation-Template][AndreyAkinshin/Russian-Phd-LaTeX-Dissertation-Template: LaTeX-template for russian Phd thesis]] :tex:github:top:template:russian: 
 <2016-12-16 Fri 04:44>

  LaTeX-template for russian Phd thesis
** [[https://github.com/jdavis/latex-homework-template][jdavis/latex-homework-template: The LaTeX file that I use as the base for all my homeworks in university.]] :tex:github:top:homeworks:university: 
 <2016-12-16 Fri 04:45>

 The LaTeX file that I use as the base for all my homeworks in university.
 Features

 Here are just a few features of this homework template.

     Title page.
     Problem markers.
     Configurable problem numbers (see the last 3 problems for an example).
     Some commonly used math macros.
** [[http://www.latextemplates.com/][LaTeX Templates]]                                        :tex:templates:com: 
 <2016-12-16 Fri 04:47>

 The best source of free quality LaTeX templates
** [[https://github.com/alexjc/neural-enhance][alexjc/neural-enhance: Super Resolution for images using deep learning.]] :python:github:top:resolution:increase: 
 <2016-12-16 Fri 06:02>

  Super Resolution for images using deep learning.
** [[https://github.com/phusion/baseimage-docker][phusion/baseimage-docker: A minimal Ubuntu base image modified for Docker-friendliness]] :python:github:top:ubuntu:minimal:docker:image: 
 <2016-12-16 Fri 06:02>

  A minimal Ubuntu base image modified for Docker-friendliness http://phusion.github.io/baseimage-do…
** [[https://github.com/david-gpu/srez][david-gpu/srez: Image super-resolution through deep learning]] :python:github:top:image:resolution:increase: 
 <2016-12-16 Fri 06:04>

 Image super-resolution through deep learning. This project uses deep learning to upscale 16x16 images by a 4x factor. The resulting 64x64 images display sharp features that are plausible based on the dataset that was used to train the neural net.

 Here's an random, non cherry-picked, example of what this network can do. From left to right, the first column is the 16x16 input image, the second one is what you would get from a standard bicubic interpolation, the third is the output generated by the neural net, and on the right is the ground truth.
** [[https://github.com/saiprashanths/dl-docker][saiprashanths/dl-docker: An all-in-one Docker image for deep learning. Contains all the popular DL frameworks (TensorFlow, Theano, Torch, Caffe, etc.)]] :docker:github:top:neural:learning: 
 <2016-12-16 Fri 06:05>

 Here are Dockerfiles to get you up and running with a fully functional deep learning machine. It contains all the popular deep learning frameworks with CPU and GPU support (CUDA and cuDNN included). The CPU version should work on Linux, Windows and OS X. The GPU version will, however, only work on Linux machines. See OS support for details

 If you are not familiar with Docker, but would still like an all-in-one solution, start here: What is Docker?. If you know what Docker is, but are wondering why we need one for deep learning, see this
** [[https://github.com/ascribe/image-match][ascribe/image-match: Quickly search over billions of images]] :python:github:top:image:search: 
 <2016-12-16 Fri 06:07>

 image-match is a simple (now Python 3!) package for finding approximate image matches from a corpus. It is similar, for instance, to pHash, but includes a database backend that easily scales to billions of images and supports sustained high rates of image insertion: up to 10,000 images/s on our cluster!

 Based on the paper An image signature for any kind of image, Wong et al. There is an existing reference implementation which may be more suited to your needs.

 The folks over at Pavlov have released an excellent containerized version of image-match for easy scaling and deployment.
** [[https://github.com/paarthneekhara/text-to-image][paarthneekhara/text-to-image: Text to image synthesis using thought vectors]] :python:github:top:text:to:image: 
 <2016-12-16 Fri 06:08>

 This is an experimental tensorflow implementation of synthesizing images from captions using Skip Thought Vectors. The images are synthesized using the GAN-CLS Algorithm from the paper Generative Adversarial Text-to-Image Synthesis. This implementation is built on top of the excellent DCGAN in Tensorflow. The following is the model architecture. The blue bars represent the Skip Thought Vectors for the captions.
** [[https://github.com/ParhamP/altify][ParhamP/altify: Uses deep learning to caption images in an HTML file and fills out its alternative text attributes with the related caption]] :python:github:top:image:auto:search:alt:text: 
 <2016-12-16 Fri 06:09>

 Altify automizes the task of inserting alternative text attributes for image tags. Altify uses Microsoft Computer Vision API's deep learning algorithms to caption images in an HTML file and returns a new HTML file in which alt attributes are filled out with their corresponding captions.

 Notice: Altify will now ignore any image tag whose alt attribute has content or is just an empty string. (In compliance with standard web practices)
** [[https://github.com/Pythonity/icon-font-to-png][Pythonity/icon-font-to-png: Python script (and library) for exporting icons from icon fonts (e.g. Font Awesome, Octicons) as PNG images.]] :python:github:top:fonts:to:images:extracts: 
 <2016-12-16 Fri 06:10>

 Python script (and library) for easy and simple export of icons from web icon fonts (e.g. Font Awesome, Octicons) as PNG images. The best part is the provided shell script, but you can also use it's functionality directly in your (probably awesome) Python project.

 There's also font-awesome-to-png script for backwards compatibility with the first iteration of the concept.
** [[https://github.com/agschwender/pilbox][agschwender/pilbox: An image procesing application server]] :python:github:top:image:thumbnailer:service: 
 <2016-12-16 Fri 06:11>

 Pilbox is an image processing application server built on Python's Tornado web framework using the Python Imaging Library (Pillow). It is not intended to be the primary source of images, but instead acts as a proxy which requests images and resizes them as desired.
** [[https://github.com/jrosebr1/imutils][jrosebr1/imutils: A series of convenience functions to make basic image processing operations such as translation, rotation, resizing, skeletonization, and displaying Matplotlib images easier with OpenCV and Python.]] :python:github:top:image:manipulation:library: 
 <2016-12-16 Fri 06:12>

  A series of convenience functions to make basic image processing operations such as translation, rotation, resizing, skeletonization, and displaying Matplotlib images easier with OpenCV and Python.
** [[https://github.com/atizo/PyTagCloud][atizo/PyTagCloud: Create beautiful tag clouds as images or HTML]] :python:github:top:cloud:of:text:image:html: 
 <2016-12-16 Fri 06:13>

 PyTagCloud let you create simple tag clouds inspired by http://www.wordle.net/

 Currently, the following output formats have been written and are working:

     PNG images
     HTML/CSS code

 If you have ideas for other formats please let us know.
** [[https://github.com/fengsp/color-thief-py][fengsp/color-thief-py: Grabs the dominant color or a representative color palette from an image. Uses Python and Pillow.]] :python:github:top:image:dominant:color: 
 <2016-12-16 Fri 06:14>

  Grabs the dominant color or a representative color palette from an image. Uses Python and Pillow. http://lokeshdhakar.com/projects/colo…
** [[https://github.com/blang/latex-docker][blang/latex-docker: Docker-based latex compilation]] :docker:github:top:latex:image: 
 <2016-12-16 Fri 06:26>

 This container helps compiling latex sources without the need to install all latex packages on your system.

 Check out my blog post.
** Свободная литература по программированию    :rosa:journal:missing:article: 
 <2016-12-16 Fri 07:51>

 Свободная литература по программированию
** Приказать нельзя искать кнопочки            :rosa:journal:missing:article:
 <2016-12-16 Fri 07:52>

 Приказать нельзя
 искать кнопочки
** Рабочее окружение — фундамент комфортной работы :rosa:journal:missing:article:
 <2016-12-16 Fri 07:54>

 Рабочее окружение —
 фундамент комфортной работы
** [[https://github.com/laurent22/massren][laurent22/massren: massren - easily rename multiple files using your text editor]] :go:github:top:mass:rename:files:text:editor: 
 <2016-12-16 Fri 07:59>

  massren - easily rename multiple files using your text editor
** [[https://github.com/jlevy/repren][jlevy/repren: Rename anything]] :python:github:top:rename:files:regular:expression: 
 <2016-12-16 Fri 08:00>



 Repren is a simple but flexible, command-line tool for rewriting file contents according to a set of regular expression patterns, and renaming or moving files. Essentially, it is a general-purpose, brute-force text file refactoring tool.

 For example, repren can perform a Java refactor that involves renaming the Java class filename, as well as every occurrence of that class name in code or documentation. Or it can change the naming scheme for files, so every path like foo.1.jpg is renamed foo-1.jpg. Or it can move files by rewriting parent directories.

 It's strives to be more powerful and thoughtful than usual options like perl -pie, rpl, sed, or rename:

     It can do search-and-replace, file renaming, or both.
     It allows file renaming on full paths, including moving files, creating directories, or rewriting directory hierarchies.
     It supports fully expressive regular expressions, with capturing groups and back substitutions.
     It performs simultaneous group renamings, i.e. rename "foo" as "bar", and "bar" as "foo" at once, without requiring a temporary intermediate rename.
     It is careful. It has a nondestructive mode, and prints clear stats on its changes. It leaves backups. File operations are done atomically, so interruptions never leave a previously existing file truncated or partly edited.
     It supports helpful variations like an option to replace on word breaks, so you avoid splitting a word, and "case-preserving" renames that let you find and rename identifiers with case variants (lowerCamel, UpperCamel, lower_underscore, and UPPER_UNDERSCORE) consistently.
     It has this nice documentaion!
** What is asrm                                       :reading:trending:asrm: 
 <2016-12-16 Fri 15:34>

 |image0|\
** [[https://www.youtube.com/watch?v=3T00X_sNg4Q][Learn You Some Lisp for Great Good - YouTube]] :emacs:video:youtube:lisp:programming:tutorial: 
 <2016-12-16 Fri 15:42>

 Slides and audio from a presentation given by Howard Abrams at the Open Source Bridge (@osbridge) on 24 Jun 2014 in Portland, Oregon.

 The thesis for the presentation encouraged programmers to learn Lisp in order to be a better programmer.
** [[https://github.com/google/lisp-koans][google/lisp-koans: Common Lisp Koans is a language learning exercise in the same vein as the ruby koans, python koans and others. It is a port of the prior koans with some modifications to highlight lisp-specific features. Structured as ordered groups of broken unit tests, the project guides the learner progressively through many Common Lisp language features.]] :clisp:github:top:tutorial: 
 <2016-12-16 Fri 15:58>

  Common Lisp Koans is a language learning exercise in the same vein as the ruby koans, python koans and others. It is a port of the prior koans with some modifications to highlight lisp-specific features. Structured as ordered groups of broken unit tests, the project guides the learner progressively through many Common Lisp language features.
** [[https://github.com/rlister/org-present][rlister/org-present: Ultra-minimalist presentation minor-mode for Emacs org-mode.]] :emacs:github:top:org:mode:presentation:mode: 
 <2016-12-16 Fri 16:29>

 This is meant to be an extremely minimalist presentation tool for Emacs org-mode. Simply layout your presentation with each slide under a top-level header, start the minor mode with 'org-present', and page through each slide with left/right keys.
** [[https://www.gnu.org/software/emacs/manual/html_mono/eintr.html][Programming in Emacs Lisp]]         :emacs:github:top:lisp:introduction:gnu: 
 <2016-12-16 Fri 16:44>

 The homepage for GNU Emacs is at http://www.gnu.org/software/emacs/.
 To view this manual in other formats, click here.

 This is an Introduction to Programming in Emacs Lisp, for people who are not programmers.
** Emacs Lisp features                                  :emacs:lisp:features: 
 <2016-12-16 Fri 16:50>

    Because Emacs Lisp is designed for use in an editor, it has special
 features for scanning and parsing text as well as features for handling
 files, buffers, displays, subprocesses, and so on.  Emacs Lisp is
 closely integrated with the editing facilities; thus, editing commands
 are functions that can also conveniently be called from Lisp programs,
 and parameters for customization are ordinary Lisp variables.
** An Introduction to Emacs Lisp Programming :emacs:lisp:introduction:beginner: 
 <2016-12-16 Fri 16:52>
** [[https://github.com/seanirby/evalator][seanirby/evalator: Emacs package for interactive evaluation and transformation of data.]] :emacs:github:top:debugging:keybindings:functions: 
 <2016-12-17 Sat 02:00>

 Evalator is a new kind of REPL for Emacs.

 What makes it different from a normal REPL? With evalator you can:

     Evaluate expressions using any language*
     See the results of an expression as it is typed
     Transform data in a stepwise fashion
     Generate code
     Interact with Emacs using a language other than Elisp

** Provided you've installed the appropriate extension package.
 Language Support

 By default, evalator uses Elisp as its evaluation language, but it supports other languages through extension packages. These packages define an evaluation context that can be passed to the evalator command in order to set the evaluation language for that particular session.
 Currently available evaluation contexts

     Clojure - via evalator-clojure

 Don't see a context package for your favorite language? Write one! See evalator-elisp.el and evalator-clojure.el for examples. Open an issue in this repo with any questions and I'll be happy to help.

 Here's a practical example to demonstrate what evalator's capable of:
** M-x view-lossage                       :emacs:keybind:debugging:functions: 
 <2016-12-17 Sat 03:48>

 то есть chroot
** [[https://github.com/fniessen/emacs-leuven-theme][fniessen/emacs-leuven-theme: Awesome Emacs color theme for white backgrounds --- Added in Emacs 24.4]] :emacs:org:mode:color:theme:amazing: 
 <2016-12-17 Sat 04:05>

 Looking for an awesome Emacs color theme? Looking for one of the best light themes for Org mode, and for other modes too? Here’s the place to find one!

 Welcome to the custom Leuven theme, an elegant and popular color theme for light backgrounds, with built-in style for many components such as Org mode, Gnus, Dired+ and EDiff. Make it yours!
** [[https://www.youtube.com/watch?v=-wPfxuxIfeU&t=1s][Using Emacs 23 - capture - YouTube]]     :emacs:org:mode:howto:encrypt:file: 
 <2016-12-17 Sat 04:19>

 emacs also works great with gpg, filename.org.gpg will encrypt/dencrypt first then load org-mode, i use this to encrypt my journal.﻿
** [[https://www.youtube.com/watch?v=-wPfxuxIfeU&t=1s][Using Emacs 23 - capture - YouTube]]           :emacs:howto:livecoding:mode: 
 <2016-12-17 Sat 05:02>

 Neat! didn't know most of this, so great video! Remember when I told you about my live-coding setup? I will help with the small font in the mode-line :) (defun live-coding () (interactive) (set-face-attribute 'default nil :font "Hack-16") (add-hook 'prog-mode-hook 'command-log-mode))﻿
** [[https://github.com/abo-abo/avy][abo-abo/avy: Jump to things in Emacs tree-style]] :emacs:github:top:avy:jump:visible:text:char:based:desision:tree: 
 <2016-12-17 Sat 05:14>

 avy is a GNU Emacs package for jumping to visible text using a char-based decision tree. See also ace-jump-mode and vim-easymotion - avy uses the same idea.
** [[https://www.youtube.com/watch?v=8RwQNXOjSis][Using Emacs 19 - moving to a live config - YouTube]] :emacs:youtube:video:howto:load:file: 
 <2016-12-17 Sat 05:23>


 Using Emacs 19 - moving to a live config
** [[https://www.youtube.com/watch?v=MfhjkfocRR0][What is a HashTable Data Structure - Introduction to Hash Tables , Part 0 - YouTube]] :video:youtube:tutorial:programming:hash:table: 
 <2016-12-17 Sat 05:42>

 This tutorial is an introduction to hash tables. A hash table is a data structure that is used to implement an associative array. This video explains some of the basic concepts regarding hash tables, and also discusses one method (chaining) that can be used to avoid collisions.

 Wan't to learn C++? I highly recommend this book http://amzn.to/1PftaSt
** [[https://www.youtube.com/watch?v=pSjrwSI4OHk][Emacs and Remote Shell - YouTube]] :emacs:youtube:video:tutorial:function:wrapping:tramp: 
 <2016-12-17 Sat 06:44>

 Quick demonstration of some wrapper functions around Tramp and Shell commands that allow me to kick off commands on multiple remote hosts.

 To grab the source code, hop over to https://github.com/howardabrams/dot-f...

 I promised that I would give the source to the function that populates the map of hosts and their IP address. Keep in mind, you could just hard-code those values if you wish (as it is just a hash-table). However, this is what I wrote to call to an OpenStack system to populate that hashmap, so to see that, check out this gist: https://gist.github.com/howardabrams/...
** [[https://www.youtube.com/watch?v=dljNabciEGg][Literate Devops with Emacs - YouTube]] :emacs:video:youtube:literate:programming:tutorial: 
 <2016-12-17 Sat 06:46>

 A demonstration originally given at EmacsConf 2015 that describes how I use org-mode's Babel project and Tramp to configure and work with remote servers in my data center, prior to copying code off into Chef cookbooks and whatnot.

** My initial essay that started this presentation: http://howardism.org/Technical/Emacs/...
** Github that contains the demonstration code and results Sprint Page: https://github.com/howardabrams/liter...
** Emacs code used to make this demonstration: http://github.com/howardabrams/demo-it
** My Emacs configuration files: http://github.com/howardabrams/dot-files
** [[https://github.com/howardabrams/demo-it][howardabrams/demo-it: An Emacs package for running demonstrations and presentations from within Emacs.]] :emacs:github:top:presentations: 
 <2016-12-17 Sat 07:01>

 At the end of each sprint, each of us demonstrate accomplishments. These reviews often incorporate the following trifecta:

     Presentations explaining the technology and other frobnications
     Source code, correctly highlighted and perhaps interactive
     Executing the code, preferably in a shell to maintain nerd cred

 During my sprint reviews, I noticed I used my org-mode-formatted files, eshell and source code buffers… always in Emacs. However, fat-fingering or mentally burping delayed the gratification for my audience while I laboriously typed. I solved this problem by predefining each “step” as an Emacs Lisp function, and had another function execute each step function when I hit an advance key (F12).

 After I had amassed a small army of helper functions, I packaged it as demo-it, because I lack the imagination to come up with anything more clever.

 See the following videos as examples of what can be done:

     Emacs: An Introduction for the Curious
     Literate DevOps Programming
     Learn You Some Lisp for Great Good

 Click the following image for a quicker example:
** [[https://addons.mozilla.org/en-US/firefox/addon/imtranslator/?src=search][Google Translate, ImTranslator, Dictionary, TTS :: Add-ons for Firefox]] :firefox:github:addons:google:translator: 
 <2016-12-17 Sat 07:21>

 COMPLETELY REDESIGNED TRANSLATOR FOR FIREFOX
 ImTranslator translates text, words, webpages between more than 90 languages.
 NEW: Inline Translator, Dictionary, access to Google Translate, Microsoft Translator. Unique on the fly localization.
** [[https://github.com/benbasson/contextsearch/][benbasson/contextsearch: Firefox Extension - Context Search transforms the "Web Search for..." context item into a menu containing your Firefox Search Providers. This is very convenient, since it allows you to decide which search engine you use. Firefox's default is to use the currently selected search provider only.]] :firefox:addon:search:context:menu:right:click: 
 <2016-12-17 Sat 07:23>

  Firefox Extension - Context Search transforms the "Web Search for..." context item into a menu containing your Firefox Search Providers. This is very convenient, since it allows you to decide which search engine you use. Firefox's default is to use the currently selected search provider only. http://www.basson.at/firefox-addons/c…
** [[https://www.youtube.com/watch?v=Y66j_BUCBMY&list=PL47oRh0-pTouthHPv6AbALWPvPJHlKiF7&index=2][American Authors - Best Day Of My Life - YouTube]] :youtube:top:tracks:alternative:rock: 
 <2016-12-17 Sat 07:27>

 Top Tracks - Alternative Rock
** Author of Emacs Elisp Introduction info page :emacs:author:elisp:introduction: 
 <2016-12-17 Sat 07:40>

 Thank You
 =========

 My thanks to all who helped me with this book.  My especial thanks to
 Jim Blandy, Noah Friedman, Jim Kingdon, Roland McGrath, Frank Ritter,
 Randy Smith, Richard M. Stallman, and Melissa Weisshaus.  My thanks also
 go to both Philip Johnson and David Stampe for their patient
 encouragement.  My mistakes are my own.

                                                      Robert J. Chassell
                                                           <bob@gnu.org>
** [[http://www.oed.com/][Home : Oxford English Dictionary]]        :english:dictionary:oxford:online: 
 <2016-12-17 Sat 09:26>

 Welcome to OED Online. If you or your library subscribes, dive straight in to the riches of the English language. If not, click on the images below to learn more about the OED, see What's new, or take a look at Aspects of English, our language feature section.
** What is side effect in Emacs Lisp                  :emacs:whatis:question: 
 <2016-12-17 Sat 09:58>

 side effect
** Emacs evaluate in scratch buffer         :emacs:scratch:buffer:evaluation: 
 <2016-12-17 Sat 10:32>

    Incidentally, if you are in the ‘*scratch*’ buffer and want the value
 returned by an expression to appear in the ‘*scratch*’ buffer itself
 rather than in the echo area, type ‘C-u C-x C-e’ instead of ‘C-x C-e’.
 This causes the value returned to appear after the expression.  The
 buffer will look like this:
** [[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][Mastering Eshell - Mastering Emacs]]                :emacs:mastering:eshell: 
 <2016-12-17 Sat 11:32>

 notebooks
** [[https://www.youtube.com/watch?v=kt-wLpz-9PA][Emacs transpose-words and defadvice - YouTube]] :video:youtube:tutorial:transpose:words:function:advice: 
 <2016-12-17 Sat 13:06>

 Hacking Emacs to change the behavior of existing functions. Essentially, I show a little trick, but then show how to use defadvice to change the behavior of transpose-words.
** [[https://www.youtube.com/watch?v=OjbkCEkboA8][C/C++ in Spacemacs - YouTube]] :emacs:video:tutorial:youtube:c:cpp:setup:configure:first:initial: 
 <2016-12-17 Sat 16:34>

 How to get a decent environment for C/C++ development in Spacemacs.
** GNU Licence short description from Emacs Lisp Introduction :emacs:licence:gnu:short:description: 
 <2016-12-17 Sat 16:58>

    Finally, if you have code that everyone who uses Emacs may want, you
 can post it on a computer network or send a copy to the Free Software
 Foundation.  (When you do this, please license the code and its
 documentation under a license that permits other people to run, copy,
 study, modify, and redistribute the code and which protects you from
 having your work taken from you.)  If you send a copy of your code to
 the Free Software Foundation, and properly protect yourself and others,
 it may be included in the next release of Emacs.  In large part, this is
 how Emacs has grown over the past years, by donations.
** [[https://stackoverflow.com/questions/8271022/using-elisp-how-to-start-send-keys-to-and-stop-a-command-in-emacs-terminal-em][linux - Using elisp, how to start, send-keys-to, and stop a command in emacs terminal emulator? - Stack Overflow]] :emacs:write:to:terminal:buffer: 
 <2016-12-17 Sat 18:10>

 (progn
   (set-buffer "*terminal*")
   (term-send-raw-string "ls -l\n"))
** [[https://github.com/kgshank/gse-sound-output-device-chooser][kgshank/gse-sound-output-device-chooser: Gnome Shell Extension to show a simple chooser to select Input & Output device based on gnome control center]] :emacs:github:top:extensions:audio:switching: 
 <2016-12-18 Sun 06:08>

 A simple selector to enabled selection of sound source and sink based on Gnome Control Center
 Install URL: extensions.gnome.org
 Gnome shell versions compatible

     3.18
     3.20
     3.22

 Notes:

     May conflict with extensions which modify volume menu.
     Extension works with Volume Mixer extension. Restart shell, if errors encountered.
** [[https://mkvtoolnix.download/][MKVToolNix news – Matroska tools for Linux/Unix and Windows]] :mkv:matroska:tool:unix: 
 <2016-12-18 Sun 06:44>

 MKVToolNix is a set of tools to create, alter and inspect Matroska files under Linux, other Unices and Windows.

 Since May 1st 2003, the Matroska libraries themselves and my Matroska tools are officially available. I urge you to download the software, use it and report any errors you encounter to me. I'm always grateful for good bug reports because I make mistakes and you guys normally find them. Your feedback is important to me :)
** [[https://github.com/koreader/koreader][koreader/koreader: An ebook reader application supporting PDF, DjVu, EPUB, FB2 and many more formats, running on Kindle, Kobo, PocketBook, Ubuntu Touch and Android devices]] :lua:github:top:pdf:DjVu:epub:fb2:reader:book: 
 <2016-12-18 Sun 11:09>

 KOReader is a document viewer application, originally created for Kindle e-ink readers. It currently runs on Kindle, Kobo, PocketBook, Ubuntu Touch and Android (2.3+) devices. Developers can also run KOReader emulator for development purpose on desktop PC with Linux and Windows and Mac OSX (experimental for now).
 Main features for users

     supports multi-format documents including:
         paged fixed-layout formats: PDF, DjVu and CBZ
         reflowable e-book formats: ePub, fb2, mobi, doc, chm and plain text
         scanned PDF/DjVu documents can also be reflowed with built-in K2pdfopt
     use StarDict dictionaries / Wikipedia to lookup words
     highlights can be exported to Evernote cloud account
     highly customizable reader view and typeset
         setting arbitrary page margins / line space
         choosing external fonts and styles
         built-in multi-lingual hyphenation dictionaries
     supports adding custom online OPDS catalogs
     calibre integration
         search calibre metadata on your koreader device
         send ebooks from calibre library to your koreader device wirelessly
         browser calibre library and download ebooks via calibre OPDS server
     can share ebooks with other koreader devices wirelessly
     various optimizations for e-ink devices
         paginated menus without animation
         adjustable text contrast
     multi-lingual user interface
     online Over-The-Air software update
** [[https://www.emacswiki.org/emacs/MakingPackages][EmacsWiki: Making Packages]]                    :emacs:wiki:howto:packaging: 
 <2016-12-18 Sun 11:19>

 ELPA packages come in two forms. The first is a relatively simple single file package, the second is a more complicated multi-file format. Most of this page discusses the multi-file format because it causes the most problems.
** [[https://www.emacswiki.org/emacs/ELPA][EmacsWiki: ELPA]]                                    :emacs:wiki:howto:elpa: 
 <2016-12-18 Sun 11:20>

     Whenever Emacs starts up, it automatically calls the function ‘package-initialize’ to load installed packages. This is done after loading the init file and abbrev file (if any) and before running ‘after-init-hook’ (see Startup Summary). Automatic package loading is disabled if the user option package-enable-at-startup is nil.
** [[https://github.com/nagadomi/waifu2x][nagadomi/waifu2x: Image Super-Resolution for Anime-Style Art]] :lua:github:top:anime:deep:learning:image:size: 
 <2016-12-18 Sun 11:30>

 Image Super-Resolution for Anime-style art using Deep Convolutional Neural Networks. And it supports photo.

 The demo application can be found at http://waifu2x.udp.jp/ .
** [[https://www.youtube.com/watch?v=LMNTBeVh_ZQ][{C++} Алгоритмы - Пузырьковая сортировка (Bubble sort) - YouTube]] :cpp:youtube:video:tutorial:howto:sorting: 
 <2016-12-18 Sun 12:29>

 В этом видео вы узнаете, что такое пузырьковая сортировка, как она работает, где и когда используется. Познакомитесь с основными принципами сортировки массива.
** [[https://www.youtube.com/watch?v=_VYWoIaJZpU][ЗОРмания - ТОП 10 лучших АНИМЕ осени 2016! (Metalrus) - YouTube]] :anime:top:anidub:autumn: 
 <2016-12-18 Sun 13:45>

 Аниме из ТОПа:
 10) Keijo!!!!!!!!
 09) Shuumatsu no Izetta
 08) Occultic;Nine
 07) Watashi ga Motete Dousunda / Я требую яоя!
 06) Mahou Shoujo Ikusei Keikaku
 05) Udon no Kuni no Kiniro Kemari
 04) Flip Flappers
 03) Yuri!!! on Ice
 02) 3-gatsu no Lion
 01) Drifters
** [[http://indexp.ru/][Почтовые индексы России: почтовые индексы Москвы, почтовые индексы Петербурга, почтовые индексы других городов, областей, поиск почтового индекса по адресу]] :russia:mail:index:zip: 
 <2016-12-18 Sun 14:02>



 Здесь представлена самая полная и точная база почтовых индексов России, в том числе индексы Москвы. Информация о почтовых индексах России представлена на основе последних версий базы почтовых индексов Почты России и Классификатора адресов России ФНС России. Вы можете воспользоваться как поиском индекса по адресу или адреса по индексу, так и иерархическим рубрикатором адресов России, чтобы найти необходимый индекс почтового адреса.

 Почтовые индексы Москвы, почтовые индексы Санкт-Петербурга и почтовые индексы большинства других городов России можно найти прямо для конкретного дома. То есть у нас представлены почтовые индексы областей, почтовые индексы районов, почтовые индексы городов, почтовые индексы улиц, почтовые индексы домов.

 Изменения почтовых индексов происходят регулярно. Хотим заметить, что в отличие от других сайтов с базами почтовых индексов у нас представлены только реально действующие индексы, нет устаревшей информации, и вы можете быть абсолютно точно уверены, что найденный на нашем сайте индекс будет точно действующим и соответствовать выбранному адресу.

 Последнее обновление базы почтовых индексов Почты России: 18.11.2016. Последнее обновление Классификатора адресов России ФНС России: 01.12.2016.
** [[https://github.com/roman-mazhut/emacs-vkontakte][roman-mazhut/emacs-vkontakte: Simple implementation of vk messaging for emacs]] :emacs:vk:client:elisp: 
 <2016-12-18 Sun 14:42>

 Simple implementation of vk messaging for emacs
** [[https://github.com/spegoraro/org-alert][spegoraro/org-alert: System notifications of org agenda items]] :emacs:github:top:org:mode:org:alert:notifications:desktop:clock: 
 <2016-12-18 Sun 15:49>

 Provides notifications for scheduled or deadlined agenda entries.

 Screenshot
** [[https://github.com/syl20bnr/spacemacs/issues/7038][UI freezes when you type in Emacs 25 · Issue #7038 · syl20bnr/spacemacs]] :emacs:bug:spacemacs:company:mode:freeze:elisp:comment:string: 
 <2016-12-18 Sun 15:58>

 Emacs-lisp mode in Emacs 25 freezes. I suspect it has something to do with company-mode.
 I do not see this in Emacs 24.
 I am not sure yet, but I think disabling company-mode "fixes" this. It might be an upstream issue with company.el

#+BEGIN_SRC emacs-lisp
(eval-after-load 'semantic
    (add-hook 'semantic-mode-hook
              (lambda ()
                (dolist (x (default-value 'completion-at-point-functions))
                  (when (string-prefix-p "semantic-" (symbol-name x))
                    (remove-hook 'completion-at-point-functions x))))))
#+END_SRC
** Debian IRC bot                                       :debian:irc:bot:dpkg: 
 <2016-12-18 Sun 16:08>

 <dpkg> Please visit http://wiki.debian.org/IRC/DpkgBot to learn how to
        effectively search the factoids database for FAQ, and not flood in the
        channel with !tell <who> about <what>.  Also ask me about <msg the
        bot>.  We ask that you learn to search for yourself first, unless it is
        a specific problem.  Many questions are asked repeatedly, and the
        factoid database can be of great help to you.  Ask me about <search
        dpkg>.
** How to ask questions properly in IRC    :irc:howto:ask:questions:properly: 
 <2016-12-18 Sun 16:52>

 <dpkg> If you have a question, just ask! For example: "I have a problem with
        ___; I'm running Debian version ___. When I try to do ___ I get the
        following output ___. I expected it to do ___." Don't ask if you can
        ask, if anyone uses it, or pick one person to ask. We're all
        volunteers; make it easy for us to help you. If you don't get an answer
        try a few hours later or on debian-user@lists.debian.org. See <smart
        questions><errors>.
** How to effectively use helm        :emacs:spacemacs:helm:howto:files:grep: 
 <2016-12-19 Mon 07:55>

 <quicknir> There's also a few special things you can use in SPC b b hthat
            don't work in most helm contets  [07:46]
 <quicknir> you can do * to match major mode
 <jamieaus88_twitter> yeah. I like how there's a recent list in there as well.
                  I barely have to use SPC f f 
 <quicknir> *Python will show you only python files
 <jamieaus88_twitter> neat
 <quicknir> and @ will show you things that contain that text  [07:49]
 <quicknir> `@hello` will filter down to buffers that contain hello somewhere
 <quicknir> ! is negation, works basically everywhere
 <jamieaus88_twitter> I can't get *Python to work
 <jamieaus88_twitter> do you literally type *Python?
 <quicknir> yah  [07:52]
 <quicknir> SPC b b
 <quicknir> *Python
 <quicknir> Should only show you your python buffers  [07:53]
 <quicknir> If you have any open
 <quicknir> it won't work in SPC f f etc
 <lijingjiang> Hey guys, I would love to know is there some way to always hide
               some specific buffer like `Async Shell Command buffer`  [07:54]
 <jamieaus88_twitter> yeah got it!
 <quicknir> @lijingjiang why do you want to hide it? Hide it from where, SPC b
            b?
 <gitter> [Github] angry-bird commented in syl20bnr/spacemacs on issue: Org
          mode hangs very sporadically when using mini-buffers
          https://github.com/syl20bnr/spacemacs/issues/5778#issuecomment-267881946
                                                                         [07:55]
 <quicknir> @jamieaus88_twitter yeah it's pretty cool. @as well. And !. ! works
            everywhere use it a lot when searching for files
** [[https://github.com/euske/pdfminer][euske/pdfminer: Python PDF Parser]]           :python:github:top:pdf:parser: 
 <2016-12-19 Mon 10:49>

 PDFMiner is a tool for extracting information from PDF documents. Unlike other PDF-related tools, it focuses entirely on getting and analyzing text data. PDFMiner allows one to obtain the exact location of text in a page, as well as other information such as fonts or lines. It includes a PDF converter that can transform PDF files into other text formats (such as HTML). It has an extensible PDF parser that can be used for other purposes than text analysis.

     Webpage: https://euske.github.io/pdfminer/
     Download (PyPI): https://pypi.python.org/pypi/pdfminer/
     Demo WebApp: http://pdf2html.tabesugi.net:8080/

 Features

     Written entirely in Python.
     Parse, analyze, and convert PDF documents.
     PDF-1.7 specification support. (well, almost)
     CJK languages and vertical writing scripts support.
     Various font types (Type1, TrueType, Type3, and CID) support.
     Basic encryption (RC4) support.
     Outline (TOC) extraction.
     Tagged contents extraction.
     Automatic layout analysis.
** [[http://alexarmstrong.net/2015/01/pushing-to-multiple-git-repos/][Pushing to multiple git repos - Alex Armstrong]] :git:multiple:remote:repositories: 
 <2016-12-19 Mon 11:19>

 How to push a git repo to multiple remote repositories, such as GitLab & BitBucket, with a single command.
 Background

 I’ve been using BitBucket, which offers unlimited private repositories for free, to backup my git repos in the cloud.

 Recently I switched to GitLab. They offer a similar service, also for free, but with a nicer UI. In particular, GitLab can search inside files, not just the filenames. This feature is curiously missing from BitBucket, although it was logged back in 2011.

 Unfortunately, GitLab’s shiny UI baulks when confronted with my notes repository: a single folder containing several hundred markdown files. BitBucket, meanwhile, handles it without a hitch.

 I wanted to keep both repos updated so that I can use whichever service is more useful for a given task. Having redundant copies of my files also offers some peace of mind.
** [[http://www.alexa.com/topsites/category/Computers/Internet/E-mail/Mailing_Lists][Alexa - Top Sites by Category: Computers/Internet/E-mail/Mailing Lists]] :alexa:top:mailing:lists: 
 <2016-12-19 Mon 11:25>

  This particular provider is free of cost and is available in three different languages.
** [[https://www.reddit.com/r/usenet/wiki/providers][providers - usenet]]          :usenet:mail:lists:archives:gmane:alternative: 
 <2016-12-19 Mon 11:32>

 Below is a list of usenet service providers. This list makes it easy to see which backbones are located in which geographic locations. The list also provides you with information on who runs the backbone, if the backbone provider sells direct to individuals through its own subsidiary providers and if they resell services through a third party. This allows you to see if your primary usenet account is in on the same backbone as your secondary account (see block accounts wiki for additional details). For more information, please see the FAQ
** [[https://www.reddit.com/r/emacs/comments/5f83cj/how_can_we_add_nongmane_newsgroups_to_gnus/][How can we add non-Gmane newsgroups to Gnus? : emacs]] :usenet:recommended:server: 
 <2016-12-19 Mon 11:33>

 There are many NNTP servers, a lot of them are listed in the Usenet Providers Wiki of /r/usenet!

 For a free one that seems to fit your requirements, check out Aioe.org:

     free
     supports SSL
     reasonable limits
     most importantly: supports comp.lang.prolog.
** How to sort org table                         :emacs:org:mode:sort:tables: 
 <2016-12-19 Mon 12:32>

 You can quickly sort tables in org-mode by using C-c ^ with the point inside a table. You’ll be prompted for a sorting type, where you can choose e.g. a for alphabetic or n for numeric. You can use capital letter
 versions of these options to reverse the sort. 

 The table is sorted based on the column that the point is in, and from the documentation: 

  The range of lines is the range between the nearest horizontal separator lines, or the entire table of no such lines exist.
** [[https://github.com/sabnzbd/sabnzbd][sabnzbd/sabnzbd: SABnzbd - The automated Usenet download tool]] :python:github:top:usenet:downloader:grabber: 
 <2016-12-19 Mon 14:18>

 SABnzbd - The automated Usenet download tool

 This Unicode release is not compatible with 0.7.x queues!

 There is also an issue with upgrading of the "sabnzbd.ini" file. Make sure that you have a backup!

 Saved queues may not be compatible after updates.

 SABnzbd is an Open Source Binary Newsreader written in Python.

 It's totally free, incredibly easy to use, and works practically everywhere.

 SABnzbd makes Usenet as simple and streamlined as possible by automating everything we can. All you have to do is add an .nzb. SABnzbd takes over from there, where it will be automatically downloaded, verified, repaired, extracted and filed away with zero human interaction.

 If you want to know more you can head over to our website: http://sabnzbd.org.
** [[https://github.com/jarun/googler][jarun/googler: Google Search, Google Site Search, Google News from the terminal.]] :python:github:top:google:search:cli: 
 <2016-12-19 Mon 14:32>

 googler is a power tool to Google (Web & News) and Google Site Search from the command-line. It shows the title, URL and abstract for each result, which can be directly opened in a browser from the terminal. Results are fetched in pages (with page navigation). Supports sequential searches in a single googler instance.

 googler was initially written to cater to headless servers without X. You can integrate it with a text-based browser. However, it has grown into a very handy and flexible utility that delivers much more. For example, fetch any number of results or start anywhere, limit search by any duration, define aliases to google search any number of websites, switch domains easily... all of this in a very clean interface without ads or stray URLs. The shell completion scripts make sure you don't need to remember any options.

 googler isn't affiliated to Google in any way.
** [[https://github.com/xiaoxu193/PyTeaser][xiaoxu193/PyTeaser: Summarizes news articles]] :python:github:top:news:summary: 
 <2016-12-19 Mon 14:32>

 PyTeaser takes any news article and extract a brief summary from it. It's based on the original Scala project.

 Summaries are created by ranking sentences in a news article according to how relevant they are to the entire text. The top 5 sentences are used to form a "summary". Each sentence is ranked by using four criteria:

     Relevance to the title
     Relevance to keywords in the article
     Position of the sentence
     Length of the sentence
** [[http://tools.kali.org/information-gathering/dmitry][DMitry | Penetration Testing Tools]] :kali:DMitry:dns:scan:discovery:lookup: 
 <2016-12-19 Mon 15:14>

 DMitry (Deepmagic Information Gathering Tool) is a UNIX/(GNU)Linux Command Line Application coded in C. DMitry has the ability to gather as much information as possible about a host. Base functionality is able to gather possible subdomains, email addresses, uptime information, tcp port scan, whois lookups, and more.

 The following is a list of the current features:

     An Open Source Project.
     Perform an Internet Number whois lookup.
     Retrieve possible uptime data, system and server data.
     Perform a SubDomain search on a target host.
     Perform an E-Mail address search on a target host.
     Perform a TCP Portscan on the host target.
     A Modular program allowing user specified modules

 Source: http://mor-pah.net/software/dmitry-deepmagic-information-gathering-tool/
 DMitry Homepage | Kali DMitry Repo
** [[https://github.com/darkoperator/dnsrecon][darkoperator/dnsrecon: DNS Enumeration Script]] :python:github:top:dns:lookup: 
 <2016-12-19 Mon 15:22>

  DNS Enumeration Script
** [[https://github.com/TheRook/subbrute][TheRook/subbrute: A DNS meta-query spider that enumerates DNS records, and subdomains.]] :python:github:top:subdomain:brute:force: 
 <2016-12-19 Mon 15:25>

 SubBrute is a community driven project with the goal of creating the fastest, and most accurate subdomain enumeration tool. Some of the magic behind SubBrute is that it uses open resolvers as a kind of proxy to circumvent DNS rate-limiting (https://www.us-cert.gov/ncas/alerts/TA13-088A). This design also provides a layer of anonymity, as SubBrute does not send traffic directly to the target's name servers.
** [[https://github.com/m57/dnsteal][m57/dnsteal: DNS Exfiltration tool for stealthily sending files over DNS requests.]] :python:github:top:dns:security:sendfiles: 
 <2016-12-19 Mon 15:26>

 This is a fake DNS server that allows you to stealthily extract files from a victim machine through DNS requests.

 Below are a couple of different images showing examples of multiple file transfer and single verbose file transfer:
** [[https://github.com/h5bp/Front-end-Developer-Interview-Questions][h5bp/Front-end-Developer-Interview-Questions: A list of helpful front-end related questions you can use to interview potential candidates, test yourself or completely ignore.]]                                        :front:end:github:top:questions: 
 <2016-12-19 Mon 18:55>

 This file contains a number of front-end interview questions that can be used when vetting potential candidates. It is by no means recommended to use every single question here on the same candidate (that would take hours). Choosing a few items from this list should help you vet the intended skills you require.

 Note: Keep in mind that many of these questions are open-ended and could lead to interesting discussions that tell you more about the person's capabilities than a straight answer would.
** [[https://github.com/vermiculus/sx.el][vermiculus/sx.el: Stack Exchange for Emacs]]                                        :emacs:github:top:stackexchange: 
 <2016-12-19 Mon 19:19>

 SX is a full-featured Stack Exchange mode for GNU Emacs 24+. Using the official API, it provides a versatile experience for the Stack Exchange network within Emacs itself.
** [[https://github.com/emacs-helm/helm-mu][emacs-helm/helm-mu: Helm sources for searching emails and contacts using mu]]                                     :emacs:github:top:mu4e:helm:search: 
 <2016-12-20 Tue 06:31>

 Mu is an indexer for maildirs and mu4e is a mutt-like MUA for Emacs build on top of mu. Mu is highly efficient, which makes it possible to get instant search results even for huge maildirs. It also provides search operators similar to Google mail, e.g:

 from:Titus to:Anne flag:attach vacation photos
** Check redhat testing program                              :redhat:testing: 
 <2016-12-20 Tue 06:42>

Приглашаем Вам пройти БЕСПЛАТНОЕ online тестирование по продуктам Red Hat,
котороепозволит более точно оценить уровень Вашего мастерства.

Online тестирование для специалистов, заинтересованных в повышении навыков и
сертификации по продуктам Red Hat, займет около 20 минут.

Мы предлагаем online тестирование по следующим продуктам:
- Red Hat Satellite
- Ansible by Red Hat
- Red Hat JBoss AEP
- Red Hat Gluster Storage
- Red Hat OpenShift    
- Red Hat OpenStack Platform
- Red Hat Enterprise Linux 7  

Это поможет вам:
- Проверить свои навыки и получить персональные рекомендации
- Определить свои сильные стороны и направления для развития
- Открыть новые возможности в своей карьере

Проверьте себя: [[http://app.engage.redhat.com/e/er?s=1795&lid=49975&elqTrackId=699e62c2aece4d85bcc33eda3a55e83d&elq=fd1825aaca8447ec82dbadb9491f6781&elqaid=33770&elqat=1][www.redhat.com/rhtapps/assessment/]]
** [[https://www.mail-archive.com/debian-bugs-dist%40lists.debian.org/][debian-bugs-dist]]                                              :mailing:list:debian:bugs: 
 <2016-12-20 Tue 06:49>
** mu4e bug report conventions                              :mu4e:bug:report: 
 <2016-12-20 Tue 06:58>

    Sometimes, you might encounter some unexpected behavior while using
 mu4e.  It could be a bug in mu4e, it could be an issue in other
 software.  Or it could just be a misunderstanding.  In any case, if you
 want to report this (either to the mailing list or to
 <https://github.com/djcb/mu/issues>, the latter is preferred), please
 always include the following information:

    • what did you expect that should happen?  what actually happened?
    • can you provide some exact steps to reproduce?
    • what version of mu4e and emacs were you using?  What operating
      system?
    • can you reproduce it with emacs -q and only loading mu4e?
    • if the problem is related to some specific message, please include
      the raw message file (appropriately anonimized, of course)

    (1) <http://groups.google.com/group/mu-discuss>
** How to search email with mu or mu4e            :emacs:mu4e:mu:mail:search: 
 <2016-12-20 Tue 07:04>

    which lists all messages that match hello.  For more examples of
 searches, see *note Queries::, or check the mu-find and mu-easy man
 pages.  If all of this worked well, we are well on our way setting
 things up; the next step is to do some basic configuration for mu4e.
** [[https://github.com/Alir3z4/html2text][Alir3z4/html2text: Convert HTML to Markdown-formatted text.]]                          :python:github:top:html:to:markdown:converter: 
 <2016-12-20 Tue 08:32>

 html2text is a Python script that converts a page of HTML into clean, easy-to-read plain ASCII text. Better yet, that ASCII also happens to be valid Markdown (a text-to-HTML format).
** [[https://github.com/theSage21/handwritten][theSage21/handwritten: Plain text to handwriting generator.]]                    :python:github:plain:text:to:handwriting:generation: 
 <2016-12-20 Tue 09:13>

 Homework could have been so much easier if only it could be submitted as a typed copy.
 Using Alex Graves' paper on handwriting generation is a step I liked. This script uses his amazing paper (actually the free service he has set up online) to generate handwritten homework for given text.
** [[http://etest.lspace.etu.ru/][Questionmark Perception -]]                                                 :leti:test:information: 
 <2016-12-20 Tue 11:11>

  Questionmark Perception licensed to St.-Petersburg Electrotechnical University
** [[https://github.com/jasonlong/cayman-theme][jasonlong/cayman-theme: A responsive theme for GitHub Pages]]                                                :pages:github:top:theme: 
 <2016-12-20 Tue 11:53>

 Cayman is a clean, responsive theme for GitHub Pages. This theme is available as an option if you use the Automatic Page Generator or you can copy the template and styles to use on your own.

 You can preview the theme at http://jasonlong.github.io/cayman-theme or with real content at http://jasonlong.github.io/geo_pattern.
** [[https://github.com/ArcticaProject/nx-libs][ArcticaProject/nx-libs: nx-libs]]                                 :c:cpp:github:top:remote:xorg:terminal: 
 <2016-12-20 Tue 13:58>

 This source tree started as a re-distribution of those NX packages needed to setup FreeNX and/or X2Go on a Linux server.

 In the past, the NX re-distribution (3.5.0.x) had been maintained by the X2Go Project: http://wiki.x2go.org

 In 2014, the QVD project run by the company Qindel joined the group of people being interested in NX maintenance and improvement.

 Since 2015, the Arctica Project has joined in the NX development. The core devs of X2Go, Arctica and TheQVD have agreed on stopping to redistribute NX and to continue the development of NX 3.x as the new upstream instead. The package will see a slight name change to nx-libs starting with version 3.5.99.0.

 Our intentions for nx-libs are:

     provide one tarball that builds NX projects via a common Makefile
     provide one tarball for distribution packagers
     provide support for security issues
     provide support for latest X11 extensions
     improve NX where possible

 This source tree is maintained on Github:

 https://github.com/ArcticaProject/nx-libs (3.6.x branch)

 For the the post-NoMachine era of nx-libs, we will focus on two release phases for the upcoming two years (06/2015 - 06/2017).
** [[http://ftp.acc.umu.se/pub/debian-meetings/][Index of /pub/debian-meetings]]                               :debian:meetings:archive:video:cambridge: 
 <2016-12-20 Tue 14:18>
** [[http://sachachua.com/blog/2016/12/using-categories-organize-org-agenda/][Using categories to organize your Org agenda - sacha chua :: living an awesome life]]                                        :emacs:org:mode:agenda:category: 
 <2016-12-20 Tue 15:08>

 I've just discovered that it helps to add a :CATEGORY: property to the top-level, non-TODO heading that identifies the project.  Using your example:
** [[https://github.com/haecker-felix/gradio][haecker-felix/gradio: A GTK3 app for finding and listening to internet radio stations]]                                           :gnome:vala:github:top:radio: 
 <2016-12-20 Tue 16:49>

 A GTK3 app for finding and listening to internet radio stations.
** [[http://wiki.calculate-linux.org/ru/nastroika_firefox][Настройка Firefox]]                           :ru:wiki:calculate:firefox:performance:boost: 
 <2016-12-20 Tue 17:10>

 Настройка Firefox
** [[https://github.com/abo-abo/define-word][abo-abo/define-word: Display the definition of word at point in Emacs]]                                          :emacs:github:word:definition: 
 <2016-12-20 Tue 17:17>

 define-word is a GNU Emacs package that lets you see the definition of a word or a phrase at point, without having to switch to a browser:
** [[http://ergoemacs.org/emacs/elisp_hash_table.html][Emacs Lisp: Hash Table]]                                            :emacs:tutorial:hash:tables: 
 <2016-12-20 Tue 19:12>

 This page is a tutorial on emacs lisp hash table.

 Emacs lisp has 2 types of list of key/value pairs.

     Association List (aka alist).
     Hash Table.

 What's the Difference Between Alist and Hash Table?

     Alist items are ordered, and can have duplicate keys.
     Hash Table entries are unique. Hash Table items are not ordered. Hash Table is usually faster for random access when there are huge number of items (tens of thousands).

 Alist is actually a list, with each element being a cons pair (cons key val). The element may repeat. The list is ordered. Emacs provides high level functions to let you use it as a key value pairs. See (info "(elisp) Association Lists")
** [[https://github.com/jordonbiondo/quake-mode][jordonbiondo/quake-mode: Quake/Unreal style text killing sprees for Emacs.]]                         :emacs:github:lol:unreal:quake:multikill:sound: 
 <2016-12-20 Tue 23:27>

 Minor mode providing Quake/Unreal-style killing sprees in Emacs.
** [[https://www.youtube.com/watch?v=97NcG8hj9WE][The History of Online Communication - YouTube]]                            :youtube:video:history:online:communication: 
 <2016-12-21 Wed 10:06>

 Before Google Hangouts and Snapchat were the norm, how did people communicate using computers and the Internet?

 TunnelBear message: TunnelBear is the easy-to-use VPN app for mobile and desktop. Visit http://tunnelbear.com/linus to try it free and save 10% when you sign up for unlimited TunnelBear data.

 Follow: http://twitter.com/linustech

 Join the community: http://linustech.com
** [[https://github.com/darktrojan/openwith][darktrojan/openwith: Open With add-on for Firefox]]                                          :firefox:githup:top:open:with: 
 <2016-12-21 Wed 10:15>

 Released versions can be downloaded from https://addons.mozilla.org/firefox/addon/open-with/

 See https://darktrojan.github.io/openwith/ for information about contributing code/translations/money.
** [[https://github.com/OctoLinker/browser-extension][OctoLinker/browser-extension: OctoLinker – Available on Chrome, Firefox and Opera]]                                     :firefox:github:top:git:OctoLinker: 
 <2016-12-21 Wed 10:21>

 First of all, it's a browser extension. Once installed, it allows you to navigate through projects on GitHub.com efficiently.

 Most projects consist of many files and third party dependencies. Files are referencing other files and / or dependencies by language specific statements like include or require. Dependencies are most likely declared in a file called manifest e.g. package.json or Gemfile. The OctoLinker browser extensions makes these references clickable. No more copy and search.
** [[https://github.com/stripe/gaps][stripe/gaps: Easy management of your Google Groups subscriptions.]]                              :ruby:github:top:google:groups:management: 
 <2016-12-21 Wed 10:46>

 At Stripe, we've long had many more Google Group mailing lists than employees. As the number of lists grew, so too did the complexity of managing your email setup: which lists were you on? Why are you receiving email for this list you're not subscribed to? How do you set up your filters to usually archive email to a list, but only if you're not present on the CC?

 Gaps is the main tool we've used to help make these questions manageable. The core functionality is surprisingly simple: a single list of all your Google Groups in one place, which lets you view your subscriptions (including whether you're receiving mail from a list being subscribed to another list), and subscribe or unsubscribe by the click of a button.

 More recently, we've also added filter generation and maintenance. Unfortunately Google's email settings API only allows you to create new filters, so it's up to the user to delete their old ones.
** [[https://github.com/benma/visual-regexp-steroids.el][benma/visual-regexp-steroids.el: Extends visual-regexp to support other regexp engines]]                                        :emacs:github:top:regexp:visual: 
 <2016-12-21 Wed 13:47>

 visual-regexp-steroids is an extension to visual-regexp which enables the use of modern regexp engines (no more escaped group parentheses, and other goodies!). In addition to that, you can optionally use the better regexp syntax to power isearch-forward-regexp and isearch-backward-regexp.

 For now, Python and pcre2el is supported out of the box (tested on Linux and Windows). If you want to add custom scripts to enable your favorite language, please get in touch.
** [[https://github.com/RaymiiOrg/NoPriv][RaymiiOrg/NoPriv: NoPriv.py is a python script to backup any IMAP capable email account to a HTML archive, nicely browsable, instead of weird folders (Maildir), one huge file (mbox), only needing a web browser to view (thunderbird) and no propritary code, so you can make sure I don't steal your password.]]                                        :python:github:top:mbox:to:html: 
 <2016-12-21 Wed 22:32>

  NoPriv.py is a python script to backup any IMAP capable email account to a HTML archive, nicely browsable, instead of weird folders (Maildir), one huge file (mbox), only needing a web browser to view (thunderbird) and no propritary code, so you can make sure I don't steal your password.
** [[https://github.com/python/mypy][python/mypy: Optional static typing for Python 2 and 3 (PEP484)]]                                       :python:github:top:type:checking: 
 <2016-12-22 Thu 00:41>

 We don't have a mailing list; but we are always happy to answer questions on gitter chat or filed as issues in our trackers:

     mypy tracker for mypy isues
     typeshed tracker for issues with specific modules
     typing tracker for discussion of new type system features (PEP 484 changes) and runtime bugs in the typing module

 What is mypy?

 Mypy is an optional static type checker for Python. You can add type hints to your Python programs using the standard for type annotations introduced in Python 3.5 (PEP 484), and use mypy to type check them statically. Find bugs in your programs without even running them!

 The type annotation standard has also been backported to earlier Python 3.x versions. Mypy supports Python 3.3 and later.

 For Python 2.7, you can add annotations as comments (this is also specified in PEP 484).

 You can mix dynamic and static typing in your programs. You can always fall back to dynamic typing when static typing is not convenient, such as for legacy code.

 Here is a small example to whet your appetite:
** [[https://github.com/YoSmudge/dnsyo][YoSmudge/dnsyo: Check your DNS against over 1000 global DNS servers]]                                      :python:github:top:dns:check:1000: 
 <2016-12-22 Thu 00:43>

 DNSYO is a little tool I built to help me keep track of DNS propagation.

 In short, it's dig, if dig queried over 1000 servers and collated their results.

 Here's what it does
** [[https://github.com/ValdikSS/blockcheck][ValdikSS/blockcheck: Checks Russian ISP blocking type]]                            :python:github:top:russia:blocking:internet: 
 <2016-12-22 Thu 00:44>

 Утилита для определения типа блокировок сайтов из единого реестра запрещенной информации на стороне провайдера.

 Данная утилита позволяет определить:

     Подмену DNS-ответов
     Перенаправление DNS-серверов
     Блокировку DNS-серверов
     Блокировку всей зоны (поддоменов) заблокированного домена
     "Обычный" DPI (фильтрация URL на определенных IP-адресах и портах)
     "Полный" DPI (фильтрация URL на всех IP-адресах и/или портах)
     Подмену SSL (HTTPS)-сертификата (прослушивание HTTPS-трафика)
     Блокировку по IP-адресу

 Также приложение выполняет тесты для обхода DPI, если он обнаружен на стороне провайдера. На данный момент реализованы следующие техники:

     Дополнительный пробел после GET
     Фрагментирование заголовка
     Точка в конце домена
     Заголовок host вместо Host
     Перенос строки в заголовках в UNIX-стиле

 Более подробно о видах DPI и типах подключения читайте в Wiki проекта: Типы DPI

 Приложение автоматически отправляет статистику об используемом типе блокировки на сервер.

 http://habrahabr.ru/post/229377/ — статистика по провайдерам
** [[https://github.com/amperser/proselint][amperser/proselint: A linter for prose.]]                                :python:github:top:prose:writing:linter: 
 <2016-12-22 Thu 00:46>

 Writing is notoriously hard, even for the best writers, and it's not for lack of good advice — a tremendous amount of knowledge about the craft is strewn across usage guides, dictionaries, technical manuals, essays, pamphlets, websites, and the hearts and minds of great authors and editors. But poring over Strunk & White hardly makes one a better writer — it turns you into neither Strunk nor White. And nobody has the capacity to apply all the advice from Garner’s Modern American Usage, a 975-page usage guide, to everything they write. In fact, the whole notion that one becomes a better writer by reading advice on writing rests on untenable assumptions about learning and memory. The traditional formats of knowledge about writing are thus essentially inert, waiting to be transformed.

 We devised a simple solution: proselint, a linter for prose. (A linter is a computer program that, like a spell checker, scans through a document and analyzes it.)

 proselint places the world’s greatest writers and editors by your side, where they whisper suggestions on how to improve your prose. You’ll be guided by advice inspired by Bryan Garner, David Foster Wallace, Chuck Palahniuk, Steve Pinker, Mary Norris, Mark Twain, Elmore Leonard, George Orwell, Matthew Butterick, William Strunk, E.B. White, Philip Corbett, Ernest Gowers, and the editorial staff of the world’s finest literary magazines and newspapers, among others. Our goal is to aggregate knowledge about best practices in writing and to make that knowledge immediately accessible to all authors in the form of a linter for prose.

 proselint is a command-line utility that can be integrated into existing tools.
** [[https://github.com/willthames/ansible-lint][willthames/ansible-lint: Best practices checker for Ansible]]                                      :python:github:top:ansible:linter: 
 <2016-12-22 Thu 01:02>

 ansible-lint checks playbooks for practices and behaviour that could potentially be improved
** [[https://github.com/twolfson/restructuredtext-lint][twolfson/restructuredtext-lint: reStructuredText linter]]                                         :python:github:top:rest:linter: 
 <2016-12-22 Thu 01:04>

 This was created out of frustration with PyPI; it sucks finding out your reST is invalid after uploading it. It is being developed in junction with a Sublime Text linter.
** [[https://github.com/pixelb/fslint][pixelb/fslint: Linux file system lint checker/cleaner]]                             :python:github:top:filesystem:linux:linter: 
 <2016-12-22 Thu 01:04>
** [[https://github.com/jorisroovers/gitlint][jorisroovers/gitlint: Linting for your git commit messages]]                                          :python:github:top:git:linter: 
 <2016-12-22 Thu 01:05>

 Git commit message linter written in python, checks your commit messages for style.
** [[https://github.com/sk-/git-lint][sk-/git-lint: improving source code one step at a time]]                                          :python:github:top:git:linter: 
 <2016-12-22 Thu 01:06>

 Git-lint is a tool for improving source code one step at a time.
 Motivation

 Often times enforcing coding styles to an existing project can be a nightmare. Some reasons may include:

     the codebase is already a mess and the output of the tools is overwhelming.
     developers don't feel confident changing lines they do not own.
     or they just don't know what tool to use.

 Features

 This tool tackles all the 3 problems mentioned above by providing just a single tool that lints all the modified files. For each filetype it may use even more than one linter or tool. Furthermore by default it only report problems of lines that were added or modified.
** [[https://github.com/btford/write-good][btford/write-good: Naive linter for English prose]]                                  :javascript:github:top:linter:english: 
 <2016-12-22 Thu 01:08>

 Naive linter for English prose for developers who can't write good and wanna learn to do other stuff good too.
** [[https://www.youtube.com/playlist?list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6][SciPy 2016: Scientific Computing with Python Conference - YouTube]]                                                 :python:meetings:conference:scipy: 
 <2016-12-22 Thu 01:12>

  SciPy 2016, the fifteenth annual Scientific Computing with Python conference, was held July 11-17, 2016 in Austin, Texas. SciPy is a community dedicated to the advancement of scientific computing through open source Python software for mathematics...
** [[https://github.com/wummel/linkchecker][wummel/linkchecker: check links in web documents or full websites]]                                          :python:github:top:link:check: 
 <2016-12-22 Thu 01:13>

 Check for broken links in web sites.
 Features

     recursive and multithreaded checking and site crawling
     output in colored or normal text, HTML, SQL, CSV, XML or a sitemap graph in different formats
     HTTP/1.1, HTTPS, FTP, mailto:, news:, nntp:, Telnet and local file links support
     restrict link checking with regular expression filters for URLs
     proxy support
     username/password authorization for HTTP, FTP and Telnet
     honors robots.txt exclusion protocol
     Cookie support
     HTML5 support
     a command line and web interface
     various check plugins available, eg. HTML syntax and antivirus checks.
** [[https://github.com/mattalcock/blog/blob/master/2012/12/5/python-spell-checker.rst][blog/python-spell-checker.rst at master · mattalcock/blog]]                           :python:github:top:development:spell:checker: 
 <2016-12-22 Thu 01:15>

 Have you ever been really impressed with Googles 'Did you mean....' spell checker? Have you ever just typed something into google to help you with your spelling?

 My answer to the above questions above would be Yes, all the time!

 In a fantastic post I read some years ago Peter Norvig outlined how Google’s ‘did you mean’ spelling corrector uses probability theory, large training sets and some elegant statistical language processing to be so effective. Type in a search like 'speling' and Google comes back in 0.1 seconds or so with Did you mean: 'spelling'. Below is a toy spelling corrector in python that achieves 80 to 90% accuracy and is very fast. It's written in a fanstically impressive 21 lines of code. It uses list comprehensions, and some of my favorite data structures (sets and default dictionaries).

 The code and supporting data files can be found in my hacks public repo under the spellcheck folder.

 The data seed comes from a big.txt file that consists of about a million words. The file is a concatenation of several public domain books from Project Gutenberg and lists of most frequent words from Wiktionary and the British National Corpus. It uses a simple training method of just counting the occurrences of each word in the big text file. Obviously Google has a lot more data to seed this spelling checker with but I was suprised at how effective this relatively small seed was.
** [[https://github.com/flycheck/flycheck][flycheck/flycheck: On the fly syntax checking for GNU Emacs]]                                               :emacs:github:top:linter: 
 <2016-12-22 Thu 11:28>

 Modern on-the-fly syntax checking extension for GNU Emacs. Try it!
** [[https://github.com/showcases/clean-code-linters][Clean code linters]]                                           :github:top:category:linters: 
 <2016-12-22 Thu 11:31>



 Make sure your code is style guide compliant with these essential code linters, many of which are already supported in your editor.
** [[https://github.com/pre-commit/pre-commit][pre-commit/pre-commit: A framework for managing and maintaining multi-language pre-commit hooks.]]                                   :python:github:top:git:commit:linter: 
 <2016-12-22 Thu 11:33>

  A framework for managing and maintaining multi-language pre-commit hooks.
** [[https://github.com/madisonmay/CommonRegex][madisonmay/CommonRegex: A collection of common regular expressions bundled with an easy to use interface.]]                                           :python:github:top:regex:lib: 
 <2016-12-22 Thu 11:37>

  A collection of common regular expressions bundled with an easy to use interface.
** [[https://github.com/StefanSchroeder/Golang-Regex-Tutorial][StefanSchroeder/Golang-Regex-Tutorial: Golang - Regular Expression Tutorial]]                                          :go:github:top:regex:tutorial: 
 <2016-12-22 Thu 11:38>

 Golang - Regular Expression Tutorial

 This is a regular expression tutorial for Go, the language.

     Introduction
     Part 1: The basics
     Part 2: Advanced
     Part 3: Cookbook
     Part 4: Alternatives

 Go to http://www.golang.org for more information about Go.

 This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License.

 I am planning to setup gh-pages: http://stefanschroeder.github.io/Golang-Regex-Tutorial/

 A Chinese version translated by B1nj0y.
** [[https://github.com/joaoricardo000/whatsapp-bot-seed][joaoricardo000/whatsapp-bot-seed: A small python framework to create a whatsapp bot, with regex-callback message routing.]]                                        :python:github:top:whatsapp:bot: 
 <2016-12-22 Thu 11:39>

 A small python seed to create a Whatsapp Bot, with regex-callback routes (just like a web framework).
 (practical extension of the examples on https://github.com/tgalal/yowsup)
 ⚠️ Warning ⚠️

 Unfortunately, after some updates in the whatsapp servers, bots are beeing banned real quickly. Some just last a couple hours.
 Whatsapp does not have an open protocol, so yowsup -- the core implementation behind this seed -- relies on reverse engineering to understand the messages exchange. Right now there is a lot of issues with this implementation.
 This project had a good run, was really useful and bots prior to the server update could run for months without any trouble. Right now is very unstable and unreliable due the ban problem.
 If a new library/protocol update solves this issue, the work will return. Until then, sadly, the project will be on hold.
** [[https://github.com/openresty/sregex][openresty/sregex: A non-backtracking NFA/DFA-based Perl-compatible regex engine matching on large data streams]]                                                :c:github:top:regex:lib: 
 <2016-12-22 Thu 11:39>

 This library is already quite usable and some people are already using it in production.

 Nevertheless this library is still under heavy development. The API is still in flux and may be changed quickly without notice.

 This is a pure C library that is designed to have zero dependencies.

 No pathological regexes exist for this regex engine because it does not use a backtracking algorithm at all.

 Already rewrote the code base of Russ Cox's re1 library using the nginx coding style (yes, I love it!), also incorporated a clone of the nginx memory pool into it for memory management.

 Already ported the Thompson and Pike VM backends to sregex. The former is just for yes-or-no matching, and the latter also supports sub-match capturing.

 Implemented the case-insensitive matching mode via the SRE_REGEX_CASELESS flag.

 The full streaming matching API for the sregex engine has already been implemented, for both the Pike and Thompson regex VMs. The sub-match capturing also supports streaming processing. When the state machine is yielded (that is, returning SRE_AGAIN on the current input data chunk), sregex will always output the current value range for the $& sub-match capture in the user-supplied ovector array.

 Almost all the relevant test cases for PCRE 8.32 and Perl 5.16.2 have been imported into sregex's test suite and all tests are passing right now.

 Already implemented an API for assembling multiple user regexes and returning an ID indicating exactly which regex is matched (first), as well as the corresponding sub-match captures.

 There is also a Just-in-Time (JIT) compiler targeting x86_64 for the Thompson VM.
** [[https://github.com/tartley/python-regex-cheatsheet][tartley/python-regex-cheatsheet: Python 2.7 Regular Expression cheatsheet, as a restructured text document and Makefile to convert it to PDF]]                                    :python:github:top:regex:cheatsheat: 
 <2016-12-22 Thu 11:39>

  Python 2.7 Regular Expression cheatsheet, as a restructured text document and Makefile to convert it to PDF
** [[https://github.com/laurikari/tre][laurikari/tre: The approximate regex matching library and agrep command line tool.]]                                                :c:github:top:regex:lib: 
 <2016-12-22 Thu 11:40>

 TRE is a lightweight, robust, and efficient POSIX compliant regexp matching library with some exciting features such as approximate (fuzzy) matching.

 The matching algorithm used in TRE uses linear worst-case time in the length of the text being searched, and quadratic worst-case time in the length of the used regular expression.

 In other words, the time complexity of the algorithm is O(M^2N), where M is the length of the regular expression and N is the length of the text. The used space is also quadratic on the length of the regex, but does not depend on the searched string. This quadratic behaviour occurs only on pathological cases which are probably very rare in practice.
** [[http://www.eltech.ru/ru/fakultety/otkrytyy-fakultet/obyavleniya1/obyavleniya3][http://www.eltech.ru/ru/fakultety/otkrytyy-fakultet/obyavleniya1/obyavleniya3]]                                                             :leti:duty: 
 <2016-12-22 Thu 11:57>

 in background bash
** [[https://www.emacswiki.org/emacs/CategoryWriting][EmacsWiki: Category Writing]]                                                :emacs:wiki:for:writers: 
 <2016-12-22 Thu 12:28>

 Clicking the title heading to search for pages about writing in natural languages with Emacs.
** [[https://www.reddit.com/r/emacs/comments/5jpyeu/fastest_way_to_jump_to_bookmarks/][Fastest way to jump to bookmarks : emacs]]                                  :emacs:reddit:fastest:bookmarks:jumps: 
 <2016-12-22 Thu 14:07>

 Fastest way to jump to bookmarks (
** [[https://github.com/tsgates/pylookup][tsgates/pylookup: Emacs mode for searching python documents with convenience]]                                  :emacs:python:github:top:documentation: 
 <2016-12-22 Thu 15:07>

 Pylookup stole idea from 'http://furius.ca/haddoc', one of my favorite emacs mode for python documentation lookup. I reimplemented python code and elisp code not just to support new version of python 2.7 but also to extend it for other documentation lookup interfaces with easy. Importantly, pylookup mode is much faster and supports fancy highlighting.

 Please check, Web : http://taesoo.org/proj/pylookup.html Repo : http://github.com/tsgates/pylookup
** [[https://github.com/gabrielelanaro/emacs-for-python][gabrielelanaro/emacs-for-python: Collection of emacs extensions specifically collected for python development, with workflow guidelines!]]                                               :emacs:python:github:top: 
 <2016-12-22 Thu 15:18>

 I’m collecting and customizing the perfect environment for python development, using the most beautiful emacs customization to obtain a really modern and exciting (yet stable) way to edit text files.

 In the package are included also a lot of other packages and configurations, it’s an upstart for clean emacs installations, these configuration however are very similar to emacs-starter-kit and I suggest you to give it a try, emacs-for-python is designed to work with it (instruction below).
** [[https://www.animemusic.me/senpaiscript][SenpaiScript - room script for AnimeMusic.me]]                                             :japan:music:check:plug:dj: 
 <2016-12-24 Sat 18:21>

 SenpaiScript.


 SenpaiScript is a script that will help you determine if your next song is against the rules or if it was played recently.
 

 It is important to note that the script will only have data on versions of the song that have been played.

 That means if a song has many youtube/soundcloud versions, we might not have information on every version, and we might not have all of the versions labeled correctly.

 It's especially important to check your song manually if it says "Unknown".

 Overplayed songs and songs that break the rules can easily have over 30 versions, with new versions being added all the time. It's important to check the overplayed list, check it wasn't played today and to read our rules!
** [[https://www.pine64.org/?page_id=3707][PINEBOOK – PINE64]]                                     :raspberry:netbook:pine64:pinebook: 
 <2016-12-24 Sat 23:18>

 PINEBOOK is a 11.6″ or 14″ notebook powered by the same Quad-Core ARM Cortex
 A53 64-Bit Processor used in our popular PINE A64 Single Board Computer. It is
 lightweight and comes with a full size keyboard and large multi-touch touchpad
 for students and makers.
** [[https://github.com/ChaosForge/doomrl][ChaosForge/doomrl: D**m, the Roguelike]]                                    :lua:github:top:game:doom:roguelike: 
 <2016-12-25 Sun 01:15>

 DRL a.k.a. doomrl, a.k.a, D**m, the Roguelike http://drl.chaosforge.org/

 This release is dedicated to *eniMax, and the Jupiter Hell Kickstarter:

 https://www.kickstarter.com/projects/2020043306/jupiter-hell-a-modern-turn-based-sci-fi-roguelike

 If you enjoy this Open Source release, please consider pledging!

 Parts of this codebase date back to 2002, please do not judge! :P

 This FreePascal source code release is provided as is. You can try compiling it using the latest version of Lazarus ( http://www.lazarus-ide.org/ ). You need to download the 32 bit version (64-bit is possible, but much more tricky). You will also need the FPC Valkyrie library ( https://github.com/ChaosForge/fpcvalkyrie/ ). You will also probably need the binary files of the full game downloadable from http://drl.chaosforge.org/ (in particular the sound, soundhq, music and mp3 folder contents, and the premade doomrl.wad and core.wad if you don't want to create it yourself).
** [[https://gaming.youtube.com/watch?v=PwuIEMUFUnQ][Beginner C++ Game Programming Tutorial 0 DirectX {Introduction/Setup} - YouTube Gaming]]                              :youtube:video:tutorial:programming:funny: 
 <2016-12-25 Sun 01:41>

 [[https://gaming.youtube.com/watch?v=PwuIEMUFUnQ][Beginner C++ Game Programming Tutorial 0 DirectX Introduction/Setup] - YouTube Gaming]]
** Why google groups or mailing list                                  :google:mailing:list:rosa:rulinux:why: 
 <2016-12-25 Sun 12:39>

 Специально сделали почтовую рассылку, чтобы:
 1. Информация не терялась
 2. Легко искалась
 3. Получали уведомления по почте
 4. Возможная интеграция на сайт
 Группы Google groups.google.com
 Писать можно как из любого почтового клиента на адрес rulinux@googlegroups.com так и с WEB интерфейса почтовой рассылки.

 Еще рекомендую на нее подписаться.
** [[http://iccup.com/][iCCup — Ладдер с низким пингом и статистикой]]                             :game:starcraft:dota:server:recommendation: 
 <2016-12-25 Sun 15:12>

 [[http://iccup.com/][iCCup — Ладдер с низким пингом и статистикой]]
** [[http://sachachua.com/blog/2013/04/why-and-how-im-relearning-japanese/][Why and how I’m (re)learning Japanese - sacha chua :: living an awesome life]]                                               :emacs:learning:japanese: 
 <2016-12-25 Sun 16:53>

 Clay Shirky has a great term for this: cognitive surplus, or what you can do when you have discretionary time and available brainspace. Hence Wikipedia and open source and I Can Has Cheezburger.
** [[https://github.com/editorconfig/editorconfig-emacs#readme][editorconfig/editorconfig-emacs: EditorConfig plugin for emacs]]                                 :multi:editor:style:code:configuration: 
 <2016-12-26 Mon 18:25>
** [[https://www.youtube.com/watch?v=mqpGuSWunuc][Оформление чертежей в Компас-3D. Урок 7.Разрезы и сечения - YouTube]]                                             :kompas:3d:разрезы:сечения: 
 <2016-12-26 Mon 21:04>
** [[https://stepik.org/course/%D0%9A%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F-%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%BA%D0%B0-1378/syllabus][Классическая механика - Stepik.org]]                                            :курс:классическая:механика: 
 <2016-12-26 Mon 22:02>


 Классическая механика
** [[https://github.com/kuanyui/moe-theme.el][kuanyui/moe-theme.el: A customizable colorful eye-candy theme for Emacser. Moe, moe, kyun!]]                                      :emacs:github:top:theme:easy:view: 
 <2016-12-26 Mon 22:22>


     Optimized for terminal's 256 color palettes.
     Black-on-white & white-on-black.
     Delightful and cheerful color palettes.
     Quite completed (and reasonable) font faces for each mode.
     Easy to customize!
         Colorful Mode-line / Powerline.
         Enlarge titles font sizes or not.
         Automatically switch between dark and light moe-theme by local time! (optional)
** [[https://www.youtube.com/watch?v=JUDYkxU6J0o][Coding Challenge #47: Pixel Sorting in Processing - YouTube]]                   :java:youtube:video:tutorial:sorting:pixel:algorithm: 
 <2016-12-26 Mon 22:59>

 In this Coding Challenge, I implement "Pixel Sorting" in Processing (Java). Using a "selection sort" algorithm, I sort the pixels of an image by brightness and hue.
** [[https://www.youtube.com/watch?v=KmNhHLx6yuw][Быстрое создание деталей в Компас 3D (практика 1) - YouTube]]                                                  :kompas:view:movement: 
 <2016-12-27 Tue 00:12>

 Привет, друзья и все те, кто в танке)) Я снова рад вас видеть на моих уроках по твердотельному моделированию в среде Компас 3D. В этом уроке мы на практике рассмотрим моделирование студенческой детали.
** [[https://manpages.debian.org/cgi-bin/man.cgi][Debian Hypertext Man Pages: Index Page]]                                               :debian:online:man:pages: 
 <2016-12-27 Tue 00:40>

  Man Page Lookup searches for man pages name and section as given in the selection menu and the query dialog. Apropos Keyword Search searches the database for the string given in the query dialog. There are also several hypertext links provided as short-cuts to various queries: Section Indexes is apropos listings of all man pages by section. Explanations of Man Sections contains pointers to the intro pages for various man sections.
** [[https://www.youtube.com/channel/UCf5qzZ1RcttbTaUl0WiojIg/about][Vlad Sh - YouTube]]                       :youtube:channel:newbie:kompas:tutorial:graphics: 
 <2016-12-27 Tue 00:44>



 КОМПАС 3D - моделирование и черчение
** [[https://www.youtube.com/watch?v=NEgSgVwWjlg][КОМПАС: Открыть 3D модель в новом окне из чертежа. - YouTube]]                                      :kompas:video:youtube:tips:window: 
 <2016-12-27 Tue 00:51>

 Спасибо огромное, очень полезное видео! Даже не знал, что можно в к.м. нажать "Выбрать компонент", и он выделится в дереве чертежа. А тем более про открытие детали из 2д в 3д. Супер! :)﻿
 1
 Denrobb
 Denrobb4 weeks ago (edited)
 Еще выяснилось следующее: чтобы открыть деталь в 3D - нужно поместить кнопку "Редактировать В Окне" на панель - из категории "Дополнительно" в настройках интерфейса (вместо категории "Все Команды"). Также есть похожая команда "В окне" в категории "Редактор" - но она не работает для данной задачи.﻿
 Alxumuk3D
 Alxumuk3D4 weeks ago
 ибо еще есть "Редактирование модели в отдельном окне" при вызове этой команды в 3д сборке. и еще не ведомо где оно есть)) и надо найти ту которая отвечает именно за открытие модели из дерева чертежа.﻿
** [[https://www.youtube.com/watch?v=dbgDMb7jAdU][Компас VS Python: Измерение всех выбранных отрезков - YouTube]]                                      :kompas:video:youtube:python:summ: 
 <2016-12-27 Tue 00:56>

 Скачать макрос можно по ссылке: https://vk.com/doc36610954_439823019
** [[https://www.youtube.com/user/cherteshi/about][Евгений Курицин - YouTube]]                             :youtube:channel:autocad:tutorials:russian: 
 <2016-12-27 Tue 01:01>



 Уроки черчения и систем автоматизированного проектирования (САПР)
 Начертательная геометрия.
 Инженерная графика.
 Машиностроительное черчение.
 Архитектурно-строительное черчение.
 Автокад/AutoCAD
 Автокад архитектура/AutoCAD Architecture
 Компас
 Инвентор/Inventor
 3D max
 Ревит/Revit

 Details
 For business inquiries:
 Country: Russia
 Links

     https://www.vatman16rus.ru/video-uroki/autocad.html Видео уроки (курс) Автокад 2D
     https://www.vatman16rus.ru/video-lessons-course-autocad-3d.html Курс Автокад 3D - часть 1
     https://www.vatman16rus.ru/house-plan-in-autocad.html План дома в Автокад 2D
     https://www.vatman16rus.ru/zadachi-nachertatelnoj-geometrii.html НГ в Автокад 2D
     https://www.vatman16rus.ru/task-engineering-garfike.html ИГ в Автокад 2D
     https://www.vatman16rus.ru/standarty-eskd.html Основные стандарты ЕСКД
     https://www.vatman16rus.ru/otzyvy.html Отзывы
     https://www.vatman16rus.ru/spravochnaya/list-commands-autocad.html Список/перечень команд Автокад
     https://www.vatman16rus.ru/cylindrical-gear.html Сборочный чертеж в Автокад 2D
     https://www.vatman16rus.ru/video-lessons-course-autocad-3d-2.html Курс Автокад 3D часть 2
     https://www.vatman16rus.ru/video-lessons-course-autocad-3d-3.html Курс Автокад 3D часть 3
     https://plus.google.com/u/0/102551123954347876685 Google+
** [[https://www.youtube.com/watch?v=fkC29sYG0yE&list=PLDeVwB8nOPP5NYbP6Fw4m-yGkAuDxPQaW][Уроки Автокад - Профессиональный видео курс Автокад 2D - YouTube]]                                 :youtube:video:tutorial:autocad:playlist: 
 <2016-12-27 Tue 01:51>

 Изометрия в Автокад или как чертить/сделать в Автокад изометрию от https://www.vatman16rus.ru
 Настройка изометрического режима (проектирования) в Автокад.
 Вычерчивание объектов в изометрии в Автокад. Изометрические плоскости.
 Статья на сайте: https://www.vatman16rus.ru/isometry-a...
** [[https://www.youtube.com/watch?v=7zWqeXqigTE][аксонометрия как чертить в компасе bandicam - YouTube]]                                                  :video:youtube:kompas: 
 <2016-12-27 Tue 14:42>

 как начертить аксонометрию в компасе
** [[https://github.com/novoid/lazyblorg][novoid/lazyblorg: Blogging with Org-mode for very lazy people]]                                        :emacs:github:top:org:mode:blog: 
 <2016-12-28 Wed 00:26>

 [[https://github.com/novoid/lazyblorg][novoid/lazyblorg: Blogging with Org-mode for very lazy people]]
** [[https://github.com/igrigorik/ga-beacon][igrigorik/ga-beacon: Google Analytics collector-as-a-service (using GA measurement protocol).]]                                            :go:github:google:analytics: 
 <2016-12-28 Wed 00:51>

 [[https://github.com/igrigorik/ga-beacon][igrigorik/ga-beacon: Google Analytics collector-as-a-service (using GA measurement protocol).]]
** [[https://github.com/matburt/mobileorg-android][matburt/mobileorg-android: An implementation of MobileOrg for the Android platform]]                                           :android:github:top:org:mode: 
 <2016-12-28 Wed 00:57>

 A new implementation of MobileOrg, an Org mode app for Android.

 The app is under heavy refactoring and is not out yet: a first release should be out in the following weeks.
** [[https://github.com/novoid/Memacs][novoid/Memacs: What did I do on February 14th 2007? Visualize your (digital) life in Org-mode]]                           :emacs:github:top:orgmode:history:time:stamp: 
 <2016-12-28 Wed 02:03>

 ## Time-stamp: <2015-03-29 13:20:39 vk> ## This file is best viewed with GNU Emacs Org-mode: http://orgmode.org/

 What were you doing on February 14th of 2007? On which tasks were you working on that very day you met your girl friend? When was the last appointments with your dentist? Who called you on telephone during that meeting with your customer last month?

 Most people can not answer such questions. With Memacs you can!

 Memacs extracts metadata (subjects, timestamps, contact information, …) from many different existing data sources (file names, emails, tweets, bookmarks, …) on your computer and generates files which are readable by GNU Emacs with Org-mode.
** [[https://github.com/coldnew/org-ioslide][coldnew/org-ioslide: Export org-mode to Google I/O HTML5 slide.]]                    :emacs:github:top:org:mode:export:presentation:html: 
 <2016-12-28 Wed 04:47>

 Export your Org document to Google I/O HTML5 slide. See DEMO slide.
** [[https://github.com/bjonnh/PyOrgMode][bjonnh/PyOrgMode: A python class for reading and writing orgmode files]]                            :python:github:top:org:mode:file:parse:read: 
 <2016-12-28 Wed 04:48>

 PyOrgMode is a small python library able to do simple tasks with your org files. It allows you to generate org files or treat them in an automated fashion.

 This project is not my top priority, but I’m more than happy to receive pull requests. Don’t worry, even if it takes some time, I go through all of them ;)

 I’d like to thank all the people that contributes (see AUTHORS file).
** [[https://github.com/bastibe/org-journal][bastibe/org-journal: A simple org-mode based journaling mode]]                                     :emacs:github:top:journal:org:mode: 
 <2016-12-28 Wed 04:49>

 Adapted from http://www.emacswiki.org/PersonalDiary

 Functions to maintain a simple personal diary / journal in Emacs. Feel free to use, modify and improve the code! — mtvoid, bastibe
** [[https://github.com/larstvei/dot-emacs/blob/master/init.org][dot-emacs/init.org at master · larstvei/dot-emacs]]                  :emacs:github:top:org:mode:configuration:init:example: 
 <2016-12-28 Wed 05:13>

 This is an Emacs configuration file written in Org mode. It is an attempt to keep my ~/.emacs.d tidy, but still be able to keep it all in one file. I aim to briefly explain all my configurations as I go along!

 I would not recommend using this configuration as-is, because it probably contains a lot you don’t really need. I do, however, hope people find some golden nuggets that they can smuggle into their own configs.
** [[https://github.com/savonet/liquidsoap][savonet/liquidsoap: Audio and video streaming language]]                                                    :streaming:language: 
 <2016-12-28 Wed 06:01>

 Our flagship is Liquidsoap, a swiss-army knife for multimedia streaming, notably used for netradios and webtvs. It has tons of features, it's free and it's open-source!

 Liquidsoap is a powerful and flexible language for describing your streams. It offers a rich collection of operators that you can combine at will, giving you more power than you need for creating or transforming streams. But liquidsoap is still very light and easy to use, in the Unix tradition of simple strong components working together.
** [[https://github.com/krisajenkins/ob-translate][krisajenkins/ob-translate: Allows you to translate blocks of text within org-mode.]]                                        :emacs:org:mode:translate:block: 
 <2016-12-28 Wed 06:52>

 Translate text in Emacs’ org-mode blocks, like so:
** Check out [[https://addons.mozilla.org/en-US/firefox/collections/risto/favorites/?page=5][add-ons coups de coeur (org-capture set)]]    :firefox:addons:set: 
 <2016-12-13 Tue 21:12>
** Check out [[https://addons.mozilla.org/en-US/firefox/addon/firetube/?src=collection&collection_id=9bf69cc4-60b7-4e7a-b2eb-0aa25603ef3a][FireTube]]                   :youtube:music:player:firefox:addons: 
 <2016-12-13 Tue 21:11>
** Use [[https://addons.mozilla.org/en-US/firefox/addon/google-search-link-fix/?src=collection&collection_id=9bf69cc4-60b7-4e7a-b2eb-0aa25603ef3a][Google search link fix]]         :firefox:addons:google:search:link:fix: 
 <2016-12-13 Tue 21:08>
#+BEGIN_QUOTE
This extension prevents Google and Yandex search pages from modifying search
result links when you click them. This is useful when copying links but it also
helps privacy by preventing the search engines from recording your clicks.
#+END_QUOTE
** Checkout new [[https://github.com/blog/2289-publishing-with-github-pages-now-as-easy-as-1-2-3][Publishing with GitHub Pages, now as easy as 1, 2, 3]] :github:pages:publishing:markdown:easy: 
 <2016-12-13 Tue 20:59>
** Check out [[https://github.com/masmu/pulseaudio-dlna][pulseaudio-dlna]] :pulseaudio:dlna:upnp:stream:server:lightweight:python: 
 <2016-12-13 Tue 14:46>
#+BEGIN_QUOTE
A lightweight streaming server which brings DLNA / UPNP and Chromecast support
to PulseAudio and Linux
#+END_QUOTE
** Use [[https://addons.mozilla.org/en-US/firefox/addon/org-mode-capture/][org-capture in Firefox]]      :emacs:org:mode:org:capture:firefox:notes: 
 <2016-12-13 Tue 13:10>

[[http://orgmode.org/worg/org-contrib/org-protocol.html#orgheadline1][org-protocol.el – Intercept calls from emacsclient to trigger custom actions]]

[[https://addons.mozilla.org/en-US/firefox/addon/org-mode-capture/reviews/799772/][by marcowahl on June 4, 2016]]
#+BEGIN_QUOTE
The capturing can be triggered by a key-sequence (default: C-M-r) or by clicking
the unicorn icon.
#+END_QUOTE

** Check out [[https://github.com/getpelican/pelican-plugins/tree/master/neighbors][Neighbor Articles Plugin for Pelican]]  :pelican:plugins:articles: 
 <2016-12-13 Tue 13:03>
** Use [[https://anonscm.debian.org/cgit/][Debian Git Alioth]]                          :debian:develop:git:alioth: 
 <2016-12-13 Tue 09:08>
** If docker failes to start at boot [[https://github.com/docker/docker/issues/23630#issue-160719709%0A][{Solved} Docker ERROR bridge have same name]] :systemd:docker:error:bridge:network:solved: 
 <2016-12-13 Tue 08:29>
shishir-a412ed commented on 16 Jun
#+BEGIN_QUOTE
rm -rf /var/lib/docker/network
#+END_QUOTE
** Watch tutorials [[https://www.google.ru/search?q=Maildir&num=30&newwindow=1&source=lnms&tbm=vid&sa=X&ved=0ahUKEwizypXKsvDQAhUI3SwKHW96CxkQ_AUICSgC&biw=1105&bih=628][Maildir Videos Google Search]] :google:search:videos:maildir: 
 <2016-12-13 Tue 08:05>
** Learn [[https://en.wikipedia.org/wiki/C_standard_library][C Standart Library Wikipedia]] :programming:c:lang:clang:lib:standart:wiki: 
 <2016-12-13 Tue 02:47>
** Check good configuration for mu4e [[https://github.com/xgarrido/emacs-starter-kit/blob/master/starter-kit-mu4e.org][xgarrido emacs-starter-kit]] :emacs:mu4e:config: 
 <2016-12-13 Tue 02:40>
** Check out [[http://bxr.su/][OpenGrok]]           :source:brach:git:freebsd:bsd:openbsd:kernel: 
 <2016-12-13 Tue 02:17>
** Check out [[http://fxr.watson.org/][Watson.org FreeBSD and Linux cross reference]] :source:freebsd:linux:cross:reference:git: 
 <2016-12-13 Tue 02:16>
** Watch programming tutorials from [[https://www.youtube.com/user/thenewboston][thenewboston]] :video:youtube:programming:everything:tutorial:c:python:django: 
 <2016-12-12 Mon 06:53>
** Read about strace autotools in article [[http://nibblestew.blogspot.ru/2016/12/what-does-configure-actually-run.html][What does configure actually run]] :make:autotools:gnu: 
 <2016-12-12 Mon 05:30>
** Watch [[https://www.youtube.com/watch?v=DJI_NXy2K1A][Open IoT Challenge 3.0 - Webinar for Participants #1]] :watch:webinar:eclipse: 
 <2016-12-09 Fri 21:19>
** Watch [[https://www.ansible.com/webinars-training/ansible-playbooks-using-network-modules?utm_content=45823722&utm_medium=social&utm_source=twitter][webinar Ansible playbook using network modules]] :ansible:playbook:modules:network: 
 <2016-12-09 Fri 14:09>
** Watch [[https://www.youtube.com/watch?v=aUf5GzD7xnM&index=27&list=RDkm8zL7VzBh0][TheNafig]]                                      :youtube:fun:ru:games: 
 <2016-12-09 Fri 02:34>

* Firefox
** TODO [[https://www.reddit.com/r/emacs/comments/5jhwlu/getting_things_from_outside_emacs_into/][Getting things from outside Emacs into org-mode/Emacs : emacs]]
** TODO [[https://stackoverflow.com/questions/11902620/org-mode-how-do-i-create-a-new-file-with-org-capture][emacs - Org-Mode - How do I create a new file with org-capture? - Stack Overflow]]
You'll have to use (read-string ...) in capture-report-data-file to generate the
filename on the fly.

#+BEGIN_SRC emacs-lisp
 (defun capture-report-data-file (path)
   (let ((name (read-string "Name: ")))
     (expand-file-name (format "%s-%s.txt"
                               (format-time-string "%Y-%m-%d")
                               name) path)))

 '(("t"
    "todo"
    entry
    (file (capture-report-date-file  "~/path/path/name"))
    "* TODO")))
#+END_SRC

This will prompt on capture for the file name, and then open the capture buffer
will be created.
** TODO [[https://blog.sleeplessbeastie.eu/2016/04/22/how-to-use-org-capture-from-system-tray/][How to use org-capture from system tray]]
 These shell scripts are designed to verify that emacs daemon process is running
 and then intercept call from emacsclient to trigger custom capture action.
