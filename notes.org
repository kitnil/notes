#+TITLE: notes

* Tasks
** TODO Arch packaging tutorial on irc
   [2016-12-03 Sat]
   [[gnus:INBOX#91dac71e-4a12-4306-8f99-74ec6cd32167@dev.null.invalid][Email to go wigust: Any programmers here who don't]]
** TODO Watch Red Hat webinar
   [2016-12-03 Sat]
   [[gnus:INBOX#ff3304$ddjdj@smtp.theonlinexpo.com][Email from Red Hat Webcasts: Daily development with Docker,]]

* Notes
** Note read a book PAM Mastery by Michael W Lucas
 <2016-12-13 Tue 01:46>
** Note Checkout Unmark do something with your bookmarks 
 <2016-12-13 Tue 03:56>
** Note karboon                                              :drawing:vector: 
 <2016-12-13 Tue 04:08>
** Note Kodi announce official plex addon         :kodi:plex:addons:official: 
 <2016-12-13 Tue 04:42>
** Note linux enter group without logout ~newgrp~  :linux:group:enter:logout: 
 <2016-12-13 Tue 08:18>
** Note Find and Install missing build dependencies as found in debian/control                         :debian:develop:packaging:source:building: 
 <2016-12-13 Tue 12:55>
#+BEGIN_SRC bash
sudo mk-build-deps --install --remove
#+END_SRC
** Note Change token gitsome and ssh key       :security:token:github:update: 
 <2016-12-13 Tue 14:28>
** Note На сайте и на 2 этаде у диспетчерской в конце декабря появится наше расписание занятий :university:shedule: 
 <2016-12-30 Fri 20:57>
** Note use maybe                  :python:utilities:file:try:execute:github: 
 <2016-12-13 Tue 23:02>
[[https://github.com/p-e-w/maybe][p-e-w/maybe: :rabbit2: See what a program does before deciding whether you really want it to happen.]]
#+BEGIN_QUOTE
See what a program does before deciding whether you really want it to happen.
#+END_QUOTE
** Adblocking [[https://github.com/StevenBlack/hosts][StevenBlack/hosts]]                             :python:hosts:adblock:github: 
 <2016-12-14 Wed 00:34>
#+BEGIN_QUOTE
Extending and consolidating hosts files from a variety of sources like
adaway.org, mvps.org, malwaredomainlist.com, someonewhocares.org, yoyo.org, and
potentially others. You can optionally invoke extensions to block additional
sites by category.
#+END_QUOTE
** [[https://www.getlektor.com/][lektor]] static site generator with cms:python:static:site:generator:lector:github:top:cms: 
 <2016-12-14 Wed 00:49>
** [[https://github.com/etsy/logster][logster]] parse log files                 :python:system:log:metrics:parser: 
 <2016-12-14 Wed 00:51>
  Parse log files, generate metrics for Graphite and Ganglia
** [[https://github.com/micahflee/onionshare/blob/master/README.md][onionshare/README.md at master · micahflee/onionshare]] :onion:python:share:files:tor:github: 
 <2016-12-14 Wed 00:53>
 OnionShare lets you securely and anonymously share files of any size. It works by starting a web server, making it accessible as a Tor onion service, and generating an unguessable URL to access and download the files. It doesn't require setting up a server on the internet somewhere or using a third party filesharing service. You host the file on your own computer and use a Tor onion service to make it temporarily accessible over the internet. The other user just needs to use Tor Browser to download the file from you.

 Features include:

     A user-friendly drag-and-drop graphical user interface that works in Windows, Mac OS X, and Linux
     Ability to share multiple files and folders at once
     Support for multiple people downloading files at once
     Automatically copies the unguessable URL to your clipboard
     Shows you the progress of file transfers
     When file is done transferring, automatically closes OnionShare to reduce the attack surface
     Localized into several languages, and supports international unicode filenames

 If you're interested in exactly what OnionShare does and does not protect against, read the Security Design Document.
** [[https://github.com/maebert/jrnl#jrnl----][maebert/jrnl: A simple command line journal application that stores your journal in a plain text file.]]                                             :python:journal:github:top: 
 <2016-12-14 Wed 00:56>
 jrnl Build Status Downloads Version

 For news on updates or to get help, read the docs, follow @maebert or submit an issue on Github.

 jrnl is a simple journal application for your command line. Journals are stored as human readable plain text files - you can put them into a Dropbox folder for instant syncing and you can be assured that your journal will still be readable in 2050, when all your fancy iPad journal applications will long be forgotten.

 jrnl also plays nice with the fabulous DayOne and can read and write directly from and to DayOne Journals.

 Optionally, your journal can be encrypted using the 256-bit AES.
 Why keep a journal?

 Journals aren't only for 13-year old girls and people who have too much time on their summer vacation. A journal helps you to keep track of the things you get done and how you did them. Your imagination may be limitless, but your memory isn't. For personal use, make it a good habit to write at least 20 words a day. Just to reflect what made this day special, why you haven't wasted it. For professional use, consider a text-based journal to be the perfect complement to your GTD todo list - a documentation of what and how you've done it.
** [[https://github.com/PressLabs/gitfs][PressLabs/gitfs: Version controlled file system]]                                      :python:git:filesystem:github:top: 
 <2016-12-14 Wed 00:59>
 gitfs Build Status Coverage Status
 Welcome to GitFS

 gitfs is a FUSE file system that fully integrates with git. You can mount a remote repository's branch locally, and any subsequent changes made to the files will be automatically committed to the remote.
 What's its purpose?

 gitfs was designed to bring the full powers of git to everyone, no matter how little they know about versioning. A user can mount any repository and all the his changes will be automatically converted into commits. gitfs will also expose the history of the branch you're currently working on by simulating snapshots of every commit.

 gitfs is useful in places where you want to keep track of all your files, but at the same time you don't have the possibility of organizing everything into commits yourself. A FUSE filesystem for git repositories, with local cache
 Features

     Automatically commits changes: create, delete, update files and their metadata
     Browse through working index and commit history
     Merges with upstream by automatically accepting local changes
     Caching commits reduces the memory footprint and speeds up navigation
     Reduces the number of pushes by batching commits
** [[https://github.com/apenwarr/sshuttle][apenwarr/sshuttle: Transparent proxy server that works as a poor man's VPN. Forwards over ssh. Doesn't require admin. Works with Linux and MacOS. Supports DNS tunneling.]]                                  :python:github:top:ssh:vpn:proxy:easy: 
 <2016-12-14 Wed 06:49>
  Transparent proxy server that works as a poor man's VPN. Forwards over ssh. Doesn't require admin. Works with Linux and MacOS. Supports DNS tunneling.
** [[https://github.com/jkbrzt/httpie][jkbrzt/httpie: Modern command line HTTP client — user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc. Follow https://twitter.com/CLIHTTP for tips and updates.]]                                         :python:github:top:http:client: 
 <2016-12-14 Wed 06:50>
 HTTPie: a CLI, cURL-like tool for humans

 HTTPie (pronounced aitch-tee-tee-pie) is a command line HTTP client. Its goal is to make CLI interaction with web services as human-friendly as possible. It provides a simple http command that allows for sending arbitrary HTTP requests using a simple and natural syntax, and displays colorized output. HTTPie can be used for testing, debugging, and generally interacting with HTTP servers.
** [[https://github.com/kennethreitz/requests][kennethreitz/requests: Python HTTP Requests for Humans™]]                             :python:github:top:http:request:human:easy: 
 <2016-12-14 Wed 06:51>
 Requests is the only Non-GMO HTTP library for Python, safe for human consumption.

 Warning: Recreational use of other HTTP libraries may result in dangerous side-effects, including: security vulnerabilities, verbose code, reinventing the wheel, constantly reading documentation, depression, headaches, or even death.
** [[https://github.com/donnemartin/data-science-ipython-notebooks][donnemartin/data-science-ipython-notebooks: Continually updated data science Python notebooks: Deep learning (TensorFlow, Theano, Caffe), scikit-learn, Kaggle, big data (Spark, Hadoop MapReduce, HDFS), matplotlib, pandas, NumPy, SciPy, Python essentials, AWS, and various command lines.]]                                        :python:github:top:data:science: 
 <2016-12-14 Wed 06:51>
  Continually updated data science Python notebooks: Deep learning (TensorFlow, Theano, Caffe), scikit-learn, Kaggle, big data (Spark, Hadoop MapReduce, HDFS), matplotlib, pandas, NumPy, SciPy, Python essentials, AWS, and various command lines.
** [[https://github.com/nvbn/thefuck][nvbn/thefuck: Magnificent app which corrects your previous console command.]]                  :python:github:top:shell:completion:fix:correct:spell: 
 <2016-12-14 Wed 06:52>
 Magnificent app which corrects your previous console command, inspired by a @liamosaur tweet.
** [[https://github.com/faif/python-patterns][faif/python-patterns: A collection of design patterns/idioms in Python]]                          :python:github:top:patterns:study:programming: 
 <2016-12-14 Wed 06:55>
 python-patterns

 A collection of design patterns and idioms in Python.

 When an implementation is added or modified, be sure to update this file and rerun append_output.sh (eg. ./append_output.sh borg.py) to keep the output comments at the bottom up to date.
** [[https://github.com/fchollet/keras][fchollet/keras: Deep Learning library for Python. Convnets, recurrent neural networks, and more. Runs on Theano or TensorFlow.]]                                       :python:github:top:deep:learning: 
 <2016-12-14 Wed 06:56>
 You have just found Keras.

 Keras is a high-level neural networks library, written in Python and capable of running on top of either TensorFlow or Theano. It was developed with a focus on enabling fast experimentation. Being able to go from idea to result with the least possible delay is key to doing good research.

 Use Keras if you need a deep learning library that:

     Allows for easy and fast prototyping (through total modularity, minimalism, and extensibility).
     Supports both convolutional networks and recurrent networks, as well as combinations of the two.
     Supports arbitrary connectivity schemes (including multi-input and multi-output training).
     Runs seamlessly on CPU and GPU.

 Read the documentation at Keras.io.

 Keras is compatible with: Python 2.7-3.5.
** [[https://github.com/jonathanslenders/python-prompt-toolkit][jonathanslenders/python-prompt-toolkit: Library for building powerful interactive command lines in Python]]                   :python:github:top:commandline:cli:build:programming: 
 <2016-12-14 Wed 06:59>

 prompt_toolkit is a library for building powerful interactive command lines and terminal applications in Python.

 Read the documentation on readthedocs.
** [[https://github.com/binux/pyspider][binux/pyspider: A Powerful Spider(Web Crawler) System in Python.]]                                          :python:github:top:spider:web: 
 <2016-12-14 Wed 07:00>

 A Powerful Spider(Web Crawler) System in Python. TRY IT NOW!

     Write script in Python
     Powerful WebUI with script editor, task monitor, project manager and result viewer
     MySQL, MongoDB, Redis, SQLite, Elasticsearch; PostgreSQL with SQLAlchemy as database backend
     RabbitMQ, Beanstalk, Redis and Kombu as message queue
     Task priority, retry, periodical, recrawl by age, etc...
     Distributed architecture, Crawl Javascript pages, Python 2&3, etc...

 Tutorial: http://docs.pyspider.org/en/latest/tutorial/
 Documentation: http://docs.pyspider.org/
 Release notes: https://github.com/binux/pyspider/releases
** [[https://github.com/soimort/you-get][soimort/you-get: Dumb downloader that scrapes the web]]                       :python:github:top:downloader:scrape:web:youtube: 
 <2016-12-14 Wed 07:17>

 You-Get is a tiny command-line utility to download media contents (videos, audios, images) from the Web, in case there is no other handy way to do it.

 Here's how you use you-get to download a video from this web page:

 $ you-get http://www.fsf.org/blogs/rms/20140407-geneva-tedx-talk-free-software-free-society
 Site:       fsf.org
 Title:      TEDxGE2014_Stallman05_LQ
 Type:       WebM video (video/webm)
 Size:       27.12 MiB (28435804 Bytes)

 Downloading TEDxGE2014_Stallman05_LQ.webm ...
 100.0% ( 27.1/27.1 MB) ├████████████████████████████████████████┤[0/0]   12 MB/s

 And here's why you might want to use it:

     You enjoyed something on the Internet, and just want to download them for your own pleasure.
     You watch your favorite videos online from your computer, but you are prohibited from saving them. You feel that you have no control over your own computer. (And it's not how an open Web is supposed to work.)
     You want to get rid of any closed-source technology or proprietary JavaScript code, and disallow things like Flash running on your computer.
     You are an adherent of hacker culture and free software.

 What you-get can do for you:

     Download videos / audios from popular websites such as YouTube, Youku, Niconico, and a bunch more. (See the full list of supported sites)
     Stream an online video in your media player. No web browser, no more ads.
     Download images (of interest) by scraping a web page.
     Download arbitrary non-HTML contents, i.e., binary files.

 Interested? Install it now and get started by examples.

 Are you a Python programmer? Then check out the source and fork it!
** [[https://github.com/miguelgrinberg/flasky][miguelgrinberg/flasky: Companion code to my O'Reilly book "Flask Web Development".]]                                         :python:github:top:flasky:book: 
 <2016-12-14 Wed 07:18>

 Flasky

 This repository contains the source code examples for my O'Reilly book Flask Web Development.

 The commits and tags in this repository were carefully created to match the sequence in which concepts are presented in the book. Please read the section titled "How to Work with the Example Code" in the book's preface for instructions.
** [[https://github.com/alexjc/neural-doodle][alexjc/neural-doodle: Turn your two-bit doodles into fine artworks with deep neural networks, generate seamless textures from photos, transfer style from one image to another, perform example-based upscaling, but wait... there's more! (An implementation of Semantic Style Transfer.)]]                             :python:github:top:neural:image:drawing:ia: 
 <2016-12-14 Wed 07:19>

 Use a deep neural network to borrow the skills of real artists and turn your two-bit doodles into masterpieces! This project is an implementation of Semantic Style Transfer (Champandard, 2016), based on the Neural Patches algorithm (Li, 2016). Read more about the motivation in this in-depth article and watch this workflow video for inspiration.

 The doodle.py script generates a new image by using one, two, three or four images as inputs depending what you're trying to do: the original style and its annotation, and a target content image (optional) with its annotation (a.k.a. your doodle). The algorithm extracts annotated patches from the style image, and incrementally transfers them over to the target image based on how closely they match.

 NOTE: Making a #NeuralDoodle is a skill. The parameters in the script were adjusted to work well by default and with the examples below. For new images, you may need to adjust values and modify on your input data too. It takes practice, but you can reach almost photo-realistic results if you iterate! (Ask for advice here or see examples.)
** [[https://github.com/toastdriven/restless][toastdriven/restless: A lightweight REST miniframework for Python.]]                                            :python:github:top:rest:api: 
 <2016-12-14 Wed 07:20>

 A lightweight REST miniframework for Python.

 Documentation is at http://restless.readthedocs.org/.

 Works great with Django, Flask, Pyramid, Tornado & Itty, but should be useful for many other Python web frameworks. Based on the lessons learned from Tastypie & other REST libraries.
 Features

     Small, fast codebase
     JSON output by default, but overridable
     RESTful
     Python 3.2+ (with shims to make broke-ass Python 2.6+ work)
     Flexible

 Anti-Features

 (Things that will never be added...)

     Automatic ORM integration
     Authorization (per-object or not)
     Extensive filtering options
     XML output (though you can implement your own)
     Metaclasses
     Mixins
     HATEOAS

 Why?

 Quite simply, I care about creating flexible & RESTFul APIs. In building Tastypie, I tried to create something extremely complete & comprehensive. The result was writing a lot of hook methods (for easy extensibility) & a lot of (perceived) bloat, as I tried to accommodate for everything people might want/need in a flexible/overridable manner.

 But in reality, all I really ever personally want are the RESTful verbs, JSON serialization & the ability of override behavior.

 This one is written for me, but maybe it's useful to you.
** [[https://github.com/coleifer/peewee][coleifer/peewee: a small, expressive orm -- supports postgresql, mysql and sqlite]]                    :python:github:top:database:mysql:sqlite:postgresql: 
 <2016-12-14 Wed 07:20>

 Peewee is a simple and small ORM. It has few (but expressive) concepts, making it easy to learn and intuitive to use.

     A small, expressive ORM
     Written in python with support for versions 2.6+ and 3.2+.
     built-in support for sqlite, mysql and postgresql
     tons of extensions available in the playhouse
         Postgresql HStore, JSON, arrays and more
         SQLite full-text search, user-defined functions, virtual tables and more
         Schema migrations and model code generator
         Connection pool
         Encryption
         and much, much more...
** [[https://github.com/nvie/rq][nvie/rq: Simple job queues for Python]]                            :python:github:top:job:processing:multitask: 
 <2016-12-14 Wed 07:21>

 RQ (Redis Queue) is a simple Python library for queueing jobs and processing them in the background with workers. It is backed by Redis and it is designed to have a low barrier to entry. It should be integrated in your web stack easily.

 RQ requires Redis >= 2.7.0.
** [[https://github.com/nicolargo/glances][nicolargo/glances: Glances an Eye on your system. A top/htop alternative.]]                                         :python:github:top:system:info: 
 <2016-12-14 Wed 07:22>

 Follow Glances on Twitter: @nicolargo or @glances_system

 Glances is a cross-platform curses-based system monitoring tool written in Python.
** [[https://github.com/eliangcs/http-prompt][eliangcs/http-prompt: HTTPie + prompt_toolkit = an interactive command-line HTTP client featuring autocomplete and syntax highlighting]]                                     :python:github:top:http:prompt:cli: 
 <2016-12-14 Wed 07:22>

 HTTP Prompt is an interactive command-line HTTP client featuring autocomplete and syntax highlighting, built on HTTPie and prompt_toolkit.
** [[https://github.com/a1studmuffin/SpaceshipGenerator][a1studmuffin/SpaceshipGenerator: A Blender script to procedurally generate 3D spaceships]]                            :python:github:top:blender:spaceship:script: 
 <2016-12-14 Wed 07:24>


     Start with a box.
     Build the hull: Extrude the front/rear faces several times, adding random translation/scaling/rotation along the way.
     Add asymmetry to the hull: Pick random faces and extrude them out in a similar manner, reducing in scale each time.
     Add detail to the hull: Categorize each face by its orientation and generate details on it such as engines, antenna, weapon turrets, lights etc.
     Sometimes apply horizontal symmetry.
     Add a Bevel modifier to angularize the shape a bit.
     Apply materials to the final result.
     Take over the universe with your new infinite fleet of spaceships.
** [[https://github.com/StijnMiroslav/top-starred-devs-and-repos-to-follow][StijnMiroslav/top-starred-devs-and-repos-to-follow: The Top-Starred Python GitHub Devs, Orgs, and Repos to Follow (All-Time and Trending)]]                                             :python:github:top:starred: 
 <2016-12-14 Wed 07:24>

 top-starred-devs-and-repos-to-follow

     The Top-Starred Python GitHub Devs, Orgs, and Repos to Follow (All-Time and Trending)

 Why?

 Why follow the top-starred Python GitHub devs?

     Following influencers is usually a good practice. It has helped me in multiple ways:

         Whenever I run out of inspiration, I look at these influencers and see what they have achieved. This brings back the energy and I am back on my projects

         You can follow these influencers to see which events are they attending, what are they reading and what are they working on. This can quickly become a wealth of knowledge in itself.

         To some extent, it also provides a human touch to these influencers. By just looking at their profiles, they might come across as some one out of the world. But, when you start following them regularly, you tend to relate yourself with the influencers.

     Inspired by the following Reddit post.

 After reading through the post, I was curious to see a similar list for Python GitHub devs, orgs, and repos.
 'Top-Starred'?

 There's no definitive way to determine 'top' devs, orgs, and repos by language. Every metric has its flaws. The lists below look at total number of stars in Python repositories, which seems to be a decent metric that is readily available/easy to mine.

 Dev stats are for individual contributors. Org stats are also provided: viewing the org link shows the devs who are part of the org. Not sure how you'd measure stats for each dev part of an org, or similarly, devs contributing to other projects.

 GitHub is not perfect in classifying repos as Python. The lists below try to manually filter out mis-classified repos.

 I found it interesting to track 'all time' and 'trending' stats, so lists for each are included. Sources are provided after each list.
** [[https://github.com/reinderien/mimic][reinderien/mimic: {ab}using Unicode to create tragedy]]                             :python:github:top:mimic:problems:generate: 
 <2016-12-14 Wed 07:26>

 mimic

 [ab]using Unicode to create tragedy
 Introduction

 monster

 mimic provokes:

     fun
     frustration
     curiosity
     murderous rage

 It's inspired by this terrible idea floating around:

     MT: Replace a semicolon (;) with a greek question mark (;) in your friend's C# code and watch them pull their hair out over the syntax error
     — Peter Ritchie (@peterritchie) November 16, 2014

 There are many more characters in the Unicode character set that look, to some extent or another, like others – homoglyphs. Mimic substitutes common ASCII characters for obscure homoglyphs.

 Fun games to play with mimic:

     Pipe some source code through and see if you can find all of the problems
     Pipe someone else's source code through without telling them
     Be fired, and then killed
** [[https://github.com/pavelgonchar/colornet][pavelgonchar/colornet: Neural Network to colorize grayscale images]]                              :python:github:top:neuron:colorize:images: 
 <2016-12-14 Wed 07:26>

 colornet

 Neural Network to colorize grayscale images
** [[https://github.com/cyrus-and/gdb-dashboard][cyrus-and/gdb-dashboard: Modular visual interface for GDB in Python]]                                         :python:github:top:gdb:debug:c: 
 <2016-12-14 Wed 07:32>

 Modular visual interface for GDB in Python.

 This comes as a standalone single-file .gdbinit which, among the other things, enables a configurable dashboard showing the most relevant information during the program execution. Its main goal is to reduce the number of GDB commands issued to inspect the current program status allowing the programmer to focus on the control flow instead.
** [[https://github.com/jayfk/statuspage][jayfk/statuspage: A statuspage generator that lets you host your statuspage for free on Github.]]                                         :python:github:top:status:page: 
 <2016-12-14 Wed 07:34>

 A statuspage generator that lets you host your statuspage for free on GitHub. Uses issues to display incidents and labels for severity.
** [[https://github.com/nlintz/TensorFlow-Tutorials][nlintz/TensorFlow-Tutorials: Simple tutorials using Google's TensorFlow Framework]]                             :python:github:top:google:learn:study:deep: 
 <2016-12-14 Wed 07:35>

 Introduction to deep learning based on Google's TensorFlow framework. These tutorials are direct ports of Newmu's Theano Tutorials.
** [[https://github.com/ujjwalkarn/DataSciencePython][ujjwalkarn/DataSciencePython: common data analysis and machine learning tasks using python]]                    :python:github:top:collection:data:science:analysis: 
 <2016-12-14 Wed 07:35>

 Python Data Science Tutorials

     This repo contains a curated list of Python tutorials for Data Science, NLP and Machine Learning.

     Curated list of R tutorials for Data Science, NLP and Machine Learning.

     Comprehensive topic-wise list of Machine Learning and Deep Learning tutorials, codes, articles and other resources.
** [[https://github.com/scrapy/scrapy][scrapy/scrapy: Scrapy, a fast high-level web crawling & scraping framework for Python.]]                         :python:github:top:scrapy:web:spider:framework: 
 <2016-12-14 Wed 07:36>

 Scrapy is a fast high-level web crawling and web scraping framework, used to crawl websites and extract structured data from their pages. It can be used for a wide range of purposes, from data mining to monitoring and automated testing.

 For more information including a list of features check the Scrapy homepage at: http://scrapy.org
** [[https://github.com/certbot/certbot][certbot/certbot: Certbot, previously the Let's Encrypt Client, is EFF's tool to obtain certs from Let's Encrypt, and (optionally) auto-enable HTTPS on your server. It can also act as a client for any other CA that uses the ACME protocol.]]                                  :python:github:top:ssl:encryption:web: 
 <2016-12-14 Wed 07:37>

  Certbot, previously the Let's Encrypt Client, is EFF's tool to obtain certs from Let's Encrypt, and (optionally) auto-enable HTTPS on your server. It can also act as a client for any other CA that uses the ACME protocol.
** [[https://github.com/reddit/reddit][reddit/reddit: the code that powers reddit.com]]                                        :python:github:top:reddit:power: 
 <2016-12-14 Wed 07:38>

 Greetings!

 This is the primary codebase that powers reddit.com.

 For notices about major changes and general discussion of reddit development, subscribe to the /r/redditdev and /r/changelog subreddits.

 You can also chat with us via IRC in #reddit-dev on freenode.
** [[https://github.com/pandas-dev/pandas][pandas-dev/pandas: Flexible and powerful data analysis / manipulation library for Python, providing labeled data structures similar to R data.frame objects, statistical functions, and much more]]                               :python:github:top:data:analysis:library: 
 <2016-12-14 Wed 07:42>

 What is it

 pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with "relational" or "labeled" data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, real world data analysis in Python. Additionally, it has the broader goal of becoming the most powerful and flexible open source data analysis / manipulation tool available in any language. It is already well on its way toward this goal.
 Main Features

 Here are just a few of the things that pandas does well:

     Easy handling of missing data (represented as NaN) in floating point as well as non-floating point data
     Size mutability: columns can be inserted and deleted from DataFrame and higher dimensional objects
     Automatic and explicit data alignment: objects can be explicitly aligned to a set of labels, or the user can simply ignore the labels and let Series, DataFrame, etc. automatically align the data for you in computations
     Powerful, flexible group by functionality to perform split-apply-combine operations on data sets, for both aggregating and transforming data
     Make it easy to convert ragged, differently-indexed data in other Python and NumPy data structures into DataFrame objects
     Intelligent label-based slicing, fancy indexing, and subsetting of large data sets
     Intuitive merging and joining data sets
     Flexible reshaping and pivoting of data sets
     Hierarchical labeling of axes (possible to have multiple labels per tick)
     Robust IO tools for loading data from flat files (CSV and delimited), Excel files, databases, and saving/loading data from the ultrafast HDF5 format
     Time series-specific functionality: date range generation and frequency conversion, moving window statistics, moving window linear regressions, date shifting and lagging, etc.
** [[https://github.com/scikit-learn/scikit-learn][scikit-learn/scikit-learn: scikit-learn: machine learning in Python]]                                    :python:github:top:machine:learning: 
 <2016-12-14 Wed 07:43>

 scikit-learn is a Python module for machine learning built on top of SciPy and distributed under the 3-Clause BSD license.

 The project was started in 2007 by David Cournapeau as a Google Summer of Code project, and since then many volunteers have contributed. See the AUTHORS.rst file for a complete list of contributors.

 It is currently maintained by a team of volunteers.

 Website: http://scikit-learn.org
** [[https://github.com/airbnb/superset][airbnb/superset: Superset is a data exploration platform designed to be visual, intuitive, and interactive]]                    :python:github:top:data:exploration:platform:visual: 
 <2016-12-14 Wed 07:45>

 Superset is a data exploration platform designed to be visual, intuitive and interactive.

 [this project used to be named Caravel, and Panoramix in the past]
** [[https://github.com/XX-net/XX-Net][XX-net/XX-Net: a web proxy tool]]                                   :python:github:top:proxy:google:free: 
 <2016-12-14 Wed 07:46>


     XX-Net is a free desktop application that delivers fast, reliable and secure access to the open Internet for users in censored regions. It uses google app engine (GAE) as a proxy server through the firewall.
** [[https://github.com/cmusatyalab/openface][cmusatyalab/openface: Face recognition with deep neural networks.]]                        :python:github:top:face:recognition:deep:neural: 
 <2016-12-14 Wed 07:47>

 Free and open source face recognition with deep neural networks.

     Website: http://cmusatyalab.github.io/openface/
     API Documentation
     Join the cmu-openface group or the gitter chat for discussions and installation issues.
     Development discussions and bugs reports are on the issue tracker.

 This research was supported by the National Science Foundation (NSF) under grant number CNS-1518865. Additional support was provided by the Intel Corporation, Google, Vodafone, NVIDIA, and the Conklin Kistler family fund. Any opinions, findings, conclusions or recommendations expressed in this material are those of the authors and should not be attributed to their employers or funding sources.
** [[https://github.com/mailpile/Mailpile][mailpile/Mailpile: A free & open modern, fast email client with user-friendly encryption and privacy features]]                                     :python:github:top:mailLclient:web: 
 <2016-12-14 Wed 07:50>

 Mailpile (https://www.mailpile.is/) is a modern, fast web-mail client with user-friendly encryption and privacy features. The development of Mailpile is funded by a large community of backers and all code related to the project is and will be released under an OSI approved Free Software license.

 Mailpile places great emphasis on providing a clean, elegant user interface and pleasant user experience. In particular, Mailpile aims to make it easy and convenient to receive and send PGP encrypted or signed e-mail.

 Mailpile's primary user interface is web-based, but it also has a basic command-line interface and an API for developers. Using web technology for the interface allows Mailpile to function both as a local desktop application (accessed by visiting localhost in the browser) or a remote web-mail on a personal server or VPS.

 The core of Mailpile is a fast search engine, custom written to deal with large volumes of e-mail on consumer hardware. The search engine allows e-mail to be organized using tags (similar to GMail's labels) and the application can be configured to automatically tag incoming mail either based on static rules or bayesian classifiers.

 Note: We are currently "in beta", which means the app's basic features are (mostly) in place and packages are available for popular operating systems, for people who would like to help test and debug. For more details follow @MailpileTeam on Twitter or read our blog.
** [[https://github.com/mail-in-a-box/mailinabox][mail-in-a-box/mailinabox: Mail-in-a-Box helps individuals take back control of their email by defining a one-click, easy-to-deploy SMTP+everything else server: a mail server in a box.]]                                         :python:github:top:mail:script: 
 <2016-12-14 Wed 07:53>

 Mail-in-a-Box helps individuals take back control of their email by defining a one-click, easy-to-deploy SMTP+everything else server: a mail server in a box.

 Please see https://mailinabox.email for the project's website and setup guide!

 Our goals are to:

     Make deploying a good mail server easy.
     Promote decentralization, innovation, and privacy on the web.
     Have automated, auditable, and idempotent configuration.
     Not make a totally unhackable, NSA-proof server.
     Not make something customizable by power users.

 Additionally, this project has a Code of Conduct, which supersedes the goals above. Please review it when joining our community.
** [[https://github.com/charlierguo/gmail][charlierguo/gmail: A Pythonic interface for Google Mail]]                                     :python:github:top:gmail:interface: 
 <2016-12-14 Wed 07:54>

 GMail for Python

 A Pythonic interface to Google's GMail, with all the tools you'll need. Search, read and send multipart emails, archive, mark as read/unread, delete emails, and manage labels.

 This library is still under development, so please forgive some of the rough edges

 Heavily inspired by Kriss "nu7hatch" Kowalik's GMail for Ruby library
** [[https://github.com/laramies/theHarvester][laramies/theHarvester: E-mail, subdomain and people names harvester]]          :python:github:top:analysis:penetration:mail:subdomain:people: 
 <2016-12-14 Wed 07:54>

 What is this?
 -------------

 theHarvester is a tool for gathering e-mail accounts, subdomain names, virtual
 hosts, open ports/ banners, and employee names from different public sources
 (search engines, pgp key servers).

 Is a really simple tool, but very effective for the early stages of a penetration
 test or just to know the visibility of your company in the Internet.

 The sources are:

 Passive:
 --------
 -google: google search engine  - www.google.com

 -googleCSE: google custom search engine

 -google-profiles: google search engine, specific search for Google profiles

 -bing: microsoft search engine  - www.bing.com

 -bingapi: microsoft search engine, through the API (you need to add your Key in
           the discovery/bingsearch.py file)

 -dogpile: Dogpile search engine - www.dogpile.com

 -pgp: pgp key server - mit.edu

 -linkedin: google search engine, specific search for Linkedin users


 -vhost: Bing virtual hosts search

 -twitter: twitter accounts related to an specific domain (uses google search)

 -googleplus: users that works in target company (uses google search)

 -yahoo: Yahoo search engine

 -baidu: Baidu search engine

 -shodan: Shodan Computer search engine, will search for ports and banner of the
          discovered hosts  (http://www.shodanhq.com/)
** [[https://github.com/tomekwojcik/envelopes][tomekwojcik/envelopes: Mailing for human beings]]                                     :python:github:top:mail:human:easy: 
 <2016-12-14 Wed 07:55>

 Envelopes is a wrapper for Python's email and smtplib modules. It aims to make working with outgoing e-mail in Python simple and fun.
** [[https://github.com/EFForg/starttls-everywhere][EFForg/starttls-everywhere: A system for ensuring & authenticating STARTTLS encryption between mail servers]]                           :python:github:top:mail:ttls:security:ensure: 
 <2016-12-14 Wed 07:56>

 STARTTLS Everywhere
 Example usage

 WARNING: this is a pre-alpha codebase. Do not run it on production mailservers!!!

 If you have a Postfix server you're willing to endanger deliverability on, you can try obtain a certificate with the Let's Encrypt Python Client, note the directory it lives in below /etc/letsencrypt/live and then do:

 git clone https://github.com/EFForg/starttls-everywhere
 cd starttls-everywhere
 # Promise you don't care if deliverability breaks on this mail server
 letsencrypt-postfix/PostfixConfigGenerator.py examples/starttls-everywhere.json /etc/postfix /etc/letsencrypt/live/YOUR.DOMAIN.EXAMPLE.COM

 This will:

     Ensure your mail server initiates STARTTLS encryption
     Install the Let's Encrypt cert in Postfix
     Enforce mandatory TLS to some major email domains
     Enforce minimum TLS versions to some major email domains
** [[https://github.com/eugene-eeo/mailthon][eugene-eeo/mailthon: elegant email sending for Python]]                                       :python:github:top:mail:send:lib: 
 <2016-12-14 Wed 07:57>

 Useful links: Documentation (outdated) | Issue Tracker | PyPI Page

 Mailthon is an MIT licensed email library for Python that aims to be highly extensible and composable. Mailthon is unicode aware and supports internationalised headers and email addresses. Also it aims to be transport agnostic, meaning that SMTP can be swapped out for other transports:
** [[https://github.com/pulb/mailnag][pulb/mailnag: An extensible mail notification daemon]]                         :python:github:top:mail:notification:gnome:gtk: 
 <2016-12-14 Wed 07:57>

 Mailnag is a daemon program that checks POP3 and IMAP servers for new mail.
 On mail arrival it performs various actions provided by plugins.
 Mailnag comes with a set of desktop-independent default plugins for
 visual/sound notifications, script execution etc. and can be extended
 with additional plugins easily.
** [[https://github.com/git-multimail/git-multimail][git-multimail/git-multimail: Send notification emails for pushes to a git repository (an improved version of post-receive-mail)]]                        :python:github:top:git:pushes:notification:mail: 
 <2016-12-14 Wed 07:58>

 git-multimail is a tool for sending notification emails on pushes to a Git repository. It includes a Python module called git_multimail.py, which can either be used as a hook script directly or can be imported as a Python module into another script.

 git-multimail is derived from the Git project's old contrib/hooks/post-receive-email, and is mostly compatible with that script. See README.migrate-from-post-receive-email for details about the differences and for how to migrate from post-receive-email to git-multimail.
** [[https://github.com/hmason/introbot][hmason/introbot: A python script to generate the text of intro e-mails.]]                                 :python:github:mail:introductury:intro: 
 <2016-12-14 Wed 08:00>

 Introbot is a quick python script to write an introductory e-mail between n parties.

 To use, edit settings.py and swap in your info.
** [[https://github.com/kdeldycke/maildir-deduplicate][kdeldycke/maildir-deduplicate: :e-mail: CLI to deduplicate mails from maildir folders.]]                              :python:github:top:mail:deduplication:cli: 
 <2016-12-14 Wed 08:00>

 Command-line tool to deduplicate mails from a set of maildir folders.
** [[https://github.com/schweikert/mailgraph][schweikert/mailgraph: Mail plotting script]]                            :perl:github:top:mail:plotting:script:graph: 
 <2016-12-14 Wed 08:05>

 mailgraph is a very simple mail statistics RRDtool frontend for Postfix
 that produces daily, weekly, monthly and yearly graphs of received/sent 
 and bounced/rejected mail (SMTP traffic).
** [[https://github.com/Gilwyad/mailnesia.com][Gilwyad/mailnesia.com: Anonymous Email in Seconds]]                                    :perl:github:top:anonymous:mail:com: 
 <2016-12-14 Wed 08:06>

 Mailnesia is a fully featured disposable email provider. Just like a real email service but without any password or the ability to send mail. Features at a glance:

     Automatically visits registration/activation links in emails, completing any registration process instantly
     Alternate mailbox names (aliases) for extra anonymity, use any name you want
     Alternative domain names (all mail is accepted regardless of domain name)
     Displaying HTML emails correctly including attached images, files
     Multiple encodings supported: Chinese, Japanese, Korean, Russian etc
     RSS feed for every mailbox
     New emails appear as they arrive, without needing to refresh the page
     Fast, easy to use interface
     Translated to 10+ languages

 This repository contains the source code of Mailnesia. What it includes:

     The website including everything: images, CSS, JavaScript etc
     The email receiving server
     Additional utilities for maintenance, testing etc
     How to set up the SQL tables

 What is not included:

     Configuration for web server, database server or any other external utility
     Scripts to start and monitor the website/RSS/email server processes
** [[https://www.youtube.com/watch?v=yzIMircGU5I&list=PL5-da3qGB5ICCsgW1MxlZ0Hq8LL5U3u9y][What is pandas? (Introduction to the Q&A series) - YouTube]]                                                       :youtube:channel: 
 <2016-12-14 Wed 08:28>


 What is pandas? (Introduction to the Q&A series)
** [[https://www.youtube.com/watch?v=POe1cufDWFs][Data Science with Python Pandas by Athena Kan - YouTube]]                                                 :youtube:python:pandas: 
 <2016-12-14 Wed 08:32>

 Harvard Business Review named data scientist "the sexiest job of the 21st century." Python pandas is a commonly-used tool in the industry to easily and efficiently clean, analyze, and visualize data of varying sizes and types. In this seminar, we'll learn how to use pandas to extract meaningful insights and recommendations from real-world datasets.
** [[http://orgmode.org/manual/index.html][The Org Manual]]                                                  :org:mode:manual:official:long: 
 <2016-12-14 Wed 08:35>

 This manual is a printed edition of the official Org reference documentation from the Org 7.3 distribution.
