
* Utils
** Audit
- [[https://github.com/stampery/mongoaudit][stampery/mongoaudit: üî• A powerful MongoDB auditing and pentesting tool üî•]]
** Clients
- [[https://github.com/mrsarm/mongotail][mrsarm/mongotail: Command line tool to log all MongoDB queries in a "tail"able way]]
- [[https://github.com/mongodb-haskell/mongodb][mongodb-haskell / mongodb]]

* Cheatsheet

https://habr.com/en/post/134590/
#+BEGIN_SRC js
  db.getCollection('processingBusinessAction').find({"personalAccountId":"73728", "state": {$ne: "PROCESSED"}});
  db.getCollection('processingBusinessAction').find({"personalAccountId":"208112", $and: [{"state": {$ne: "PROCESSED"}}, {"state": {$ne: "ERROR"}}]});
  db.getCollection('accountHistory').find({$and: [{"created":{"$gte": ISODate("2019-11-01")}}, {"operator":"pyhalov"}]})
#+END_SRC
db.getCollection('processingBusinessOperation').find({"createdDate" : {"$gte": ISODate("2020-06-13")}})
–∑–∞–≤–∏—Å—à–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã - processing business operations —Å–º–µ–Ω–∏—Ç—å state –Ω–∞ PROCESSED

db.getCollection('processingBusinessOperation').find({$and: [{"createdDate" : {"$gte": ISODate("2020-06-13")}}, {"state": "PROCESSING"}, {"name": {$ne: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞"}}]})

- updateMany example
: db.getCollection('processingBusinessOperation').updateMany({$and: [{"createdDate" : {"$gte": ISODate("2020-06-13")}}, {"state": "PROCESSING"}, {"name": {$ne: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞"}}]}, {$set: {"state": "PROCESSED"}})
  #+begin_example
    /* 1 */
    {
        "acknowledged" : true,
        "matchedCount" : 42.0,
        "modifiedCount" : 42.0
    }
  #+end_example

- search by date
: db.getCollection('request').find({"created" : {$gte : new ISODate("2020-06-29T15:14:02.233Z")}})

- pipe to mongo
: (set -ex; PATH=/gnu/store/b161g812k8mhch6qamvrjjgk04zn6wr7-youtube-dl-2020.06.16/bin:$PATH; for url in https://www.youtube.com/c/StrangeLoopConf https://www.youtube.com/user/fosdemtalks https://www.youtube.com/user/hitbsecconf https://www.youtube.com/c/CloudBeesTV https://www.youtube.com/user/dockerrun; do youtube-dl --ignore-errors --dump-single-json $url | jq '.entries' | mongoimport --db=video --collection youtube --type json --jsonArray; done)

- mongo to json
: mongo --quiet video --eval 'DBQuery.shellBatchSize = 300; db.getCollection("youtube").find({"uploader_id" : "UCvRRgjjKvyLNB9yx3oGu2Xw"}, {_id:0, "title":1, "webpage_url":1, "description":1}).pretty()' | jq --raw-output '[.webpage_url, .title, .description] | @tsv' | sort -k 2

- backup and restore
[[https://github.com/arshadkazmi42/ak-cli#mongo][Mongo]]

#+BEGIN_SRC python
#!/usr/bin/env python3

from bson.objectid import ObjectId
from pprint import pprint as pp
import ipaddress
import json
import pymongo
import sys

myclient = pymongo.MongoClient("MONGO")
websites = myclient["usersResourceController"]["webSites"].find({})
service = myclient["staffResourceController"]["service"]

def get_service(website):
    try:
        s = service.find_one({"_id": ObjectId(website["serviceId"])})
        return [website["_id"], s.get("instanceProps").get("security_level")]
    except:
        sys.stderr.write("ERROR: {}".format(website["_id"]))

for website in websites:
    try:
        s = get_service(website)
        if s[1] is not None and s[1] != "default":
            sys.stdout.write("{} {}\n".format(s[0], s[1]))
    except:
        sys.stderr.write("ERROR: {}".format(website["_id"]))

#+END_SRC

- [[https://www.shellhacks.com/ru/mongodb-create-user-database-admin-root/][MongoDB: –°–æ–∑–¥–∞—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –î–ª—è –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö, Admin, Root - ShellHacks]]
- [[https://github.com/variety/variety][variety/variety: A schema analyzer for MongoDB]]
