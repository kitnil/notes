:PROPERTIES:
:ID:       0ae1d837-d632-483e-8b66-b853f5e46a93
:END:
#+title: MongoDB

* Alternatives
- [[https://github.com/scottrogowski/mongita][scottrogowski/mongita: "Mongita is to MongoDB as SQLite is to SQL"]]
- [[https://github.com/MangoDB-io/MangoDB][MangoDB-io/MangoDB: A truly Open Source MongoDB alternative]]
- [[https://github.com/JewishLewish/PolygonDB][JewishLewish/PolygonDB: Polygon is a Json Database that is designed to be more minimal and less resource hungry compared to MongoDB.]]

* Cheatsheet

- https://habr.com/en/post/134590/

- list all collections from all databases'
  : db.getMongo().getDBNames().forEach(function(v, i){print(v + '\n\t' + db.getSiblingDB(v).getCollectionNames().join('\n\t'))})

- Search in nested object
  : db.getCollection('template').find({"foo.bar": "something"})

- Find inside array
: db.getCollection('template').find({"resourceFilter": {$in: ["cgiFileExtensions"]}})

- find examples
: db.getCollection('processingBusinessOperation').find({"createdDate" : {"$gte": ISODate("2020-06-13")}})
: db.getCollection('processingBusinessOperation').find({$and: [{"createdDate" : {"$gte": ISODate("2020-06-13")}}, {"state": "PROCESSING"}, {"name": {$ne: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞"}}]})
: db.getCollection('processingBusinessAction').find({"personalAccountId":"73728", "state": {$ne: "PROCESSED"}});
: db.getCollection('processingBusinessAction').find({"personalAccountId":"208112", $and: [{"state": {$ne: "PROCESSED"}}, {"state": {$ne: "ERROR"}}]});
: db.getCollection('accountHistory').find({$and: [{"created":{"$gte": ISODate("2019-11-01")}}, {"operator":"pyhalov"}]})
: db.getCollection('alerts').find({"service" : [ "RESOURCE_ARCHIVE_UPDATE"]})

- remove example
: db.getCollection('alerts').remove({"service" : [ "RESOURCE_ARCHIVE_UPDATE"]})

- updateMany example
: db.getCollection('processingBusinessOperation').updateMany({$and: [{"createdDate" : {"$gte": ISODate("2020-06-13")}}, {"state": "PROCESSING"}, {"name": {$ne: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞"}}]}, {$set: {"state": "PROCESSED"}})
  #+begin_example
    /* 1 */
    {
        "acknowledged" : true,
        "matchedCount" : 42.0,
        "modifiedCount" : 42.0
    }
  #+end_example
  : db.getCollection('template').updateMany({"language": "PYTHON"}, {$addToSet: {"resourceFilter": "staticRoot"}})
  { "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

  : db.getCollection('template').updateMany({"language": "PHP"}, {$addToSet: {"resourceFilter": "staticRoot"}})
  { "acknowledged" : true, "matchedCount" : 23, "modifiedCount" : 23 }

  : db.getCollection('template').updateMany({"language": "PERL"}, {$addToSet: {"resourceFilter": "staticRoot"}})
  { "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 2 }

- search by date
: db.getCollection('request').find({"created" : {$gte : new ISODate("2020-06-29T15:14:02.233Z")}})

- pipe to mongo
: (set -ex; PATH=/gnu/store/b161g812k8mhch6qamvrjjgk04zn6wr7-youtube-dl-2020.06.16/bin:$PATH; for url in https://www.youtube.com/c/StrangeLoopConf https://www.youtube.com/user/fosdemtalks https://www.youtube.com/user/hitbsecconf https://www.youtube.com/c/CloudBeesTV https://www.youtube.com/user/dockerrun; do youtube-dl --ignore-errors --dump-single-json $url | jq '.entries' | mongoimport --db=video --collection youtube --type json --jsonArray; done)

- mongo to json
: mongo --quiet video --eval 'DBQuery.shellBatchSize = 300; db.getCollection("youtube").find({"uploader_id" : "UCvRRgjjKvyLNB9yx3oGu2Xw"}, {_id:0, "title":1, "webpage_url":1, "description":1}).pretty()' | jq --raw-output '[.webpage_url, .title, .description] | @tsv' | sort -k 2

- mongo create readAnyDatabase user
#+begin_example
  hms-rs0:PRIMARY> db.createUser({user: "junior", pwd: "secret", roles: [{role: "readAnyDatabase", db: "admin"}]})
  Successfully added user: {
          "user" : "junior",
          "roles" : [
                  {
                          "role" : "readAnyDatabase",
                          "db" : "admin"
                  }
          ]
  }
#+end_example

- mongo add user
: hms-rs0:PRIMARY> db.createUser({user: "tracker", pwd: "secretPassword", roles: [{role: "readWrite", db: "tracker"}]})
+begin_example
2021-07-28T16:35:32.870+0300 E QUERY    [thread1] Error: couldn't add user: User "tracker@tracker" already exists :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
DB.prototype.createUser@src/mongo/shell/db.js:1292:15
@(shell):1:1
hms-rs0:PRIMARY> show users;
{
        "_id" : "tracker.tracker",
        "user" : "tracker",
        "db" : "tracker",
        "roles" : [
                {
                        "role" : "readWrite",
                        "db" : "tracker"
                }
        ]
}
#+end_example

- change user password
  : db.changeUserPassword("USERNAME", "PASSWORD")

- make a primary be secondary

  #+begin_example
    hms-rs0:PRIMARY> rs.stepDown(120)
    2021-11-17T17:03:10.979+0300 E QUERY    [thread1] Error: error doing query: failed: network error while attempting to run command 'replSetStepDown' on host 'hms03-mr.intr:27017'  :
    DB.prototype.runCommand@src/mongo/shell/db.js:132:1
    DB.prototype.adminCommand@src/mongo/shell/db.js:149:1
    rs.stepDown@src/mongo/shell/utils.js:1351:12
    @(shell):1:1
    2021-11-17T17:03:10.981+0300 I NETWORK  [thread1] trying reconnect to hms03-mr.intr:27017 (172.16.103.154) failed
    2021-11-17T17:03:11.038+0300 I NETWORK  [thread1] reconnect hms03-mr.intr:27017 (172.16.103.154) ok
  #+end_example

- backup and restore
[[https://github.com/arshadkazmi42/ak-cli#mongo][Mongo]]

#+BEGIN_SRC python
#!/usr/bin/env python3

from bson.objectid import ObjectId
from pprint import pprint as pp
import ipaddress
import json
import pymongo
import sys

myclient = pymongo.MongoClient("MONGO")
websites = myclient["usersResourceController"]["webSites"].find({})
service = myclient["staffResourceController"]["service"]

def get_service(website):
    try:
        s = service.find_one({"_id": ObjectId(website["serviceId"])})
        return [website["_id"], s.get("instanceProps").get("security_level")]
    except:
        sys.stderr.write("ERROR: {}".format(website["_id"]))

for website in websites:
    try:
        s = get_service(website)
        if s[1] is not None and s[1] != "default":
            sys.stdout.write("{} {}\n".format(s[0], s[1]))
    except:
        sys.stderr.write("ERROR: {}".format(website["_id"]))

#+END_SRC

- [[https://www.shellhacks.com/ru/mongodb-create-user-database-admin-root/][MongoDB: –°–æ–∑–¥–∞—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –î–ª—è –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö, Admin, Root - ShellHacks]]
- [[https://github.com/variety/variety][variety/variety: A schema analyzer for MongoDB]]
- [[https://merrick-krg.medium.com/%D0%B1%D0%BE%D0%BB%D1%8C%D1%88%D0%BE%D0%B9-%D1%82%D1%83%D1%82%D0%BE%D1%80%D0%B8%D0%B0%D0%BB-mongodb-616c92de2235][–ë–æ–ª—å—à–æ–π —Ç—É—Ç–æ—Ä–∏–∞–ª MongoDB. –†–µ–ø–ª–∏–∫–∞—Ü–∏—è | by Merrick | Medium]]

* GUI
- [[https://github.com/mongo-express/mongo-express][mongo-express/mongo-express: Web-based MongoDB admin interface, written with Node.js and express]]

* Learning
- [[https://dev.to/tuanlc/mongoerror-e11000-duplicate-key-error-collection-587l][MongoError: E11000 duplicate key error collection ?? - DEV Community üë©‚Äçüíªüë®‚Äçüíª]]

* Libraries
- [[https://github.com/aminalaee/mongox][aminalaee/mongox: Familiar async Python MongoDB ODM]]
* Tools
- [[https://github.com/simagix/hatchet][simagix/hatchet: MongoDB JSON Log Analyzer]]
- [[https://github.com/simagix/keyhole][simagix/keyhole: Survey Your Mongo Land - MongoDB Performance Analytics]]

* Utils
- [[https://github.com/mdirolf/nginx-gridfs][mdirolf/nginx-gridfs: Nginx module for serving files from MongoDB's GridFS]]
- [[https://github.com/mongodb-labs/pymongoexplain/][mongodb-labs/pymongoexplain: Explainable CRUD API for PyMongo]]
** Backup
- [[https://github.com/stefanprodan/mgob][stefanprodan/mgob: MongoDB dockerized backup agent. Runs schedule backups with retention, S3 & SFTP upload, notifications, instrumentation with Prometheus and more.]]
** Audit
- [[https://github.com/stampery/mongoaudit][stampery/mongoaudit: üî• A powerful MongoDB auditing and pentesting tool üî•]]
** Clients
- [[https://github.com/mrsarm/mongotail][mrsarm/mongotail: Command line tool to log all MongoDB queries in a "tail"able way]]
- [[https://github.com/mongodb-haskell/mongodb][mongodb-haskell / mongodb]]

** Proprietary
- [[http://www.datensen.com/][Moon Modeler | Data Modeling Tool]]
