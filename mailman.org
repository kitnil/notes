#+TITLE: Mailman

Mailman is written in Python which is available for all platforms that Mailman
is supported on, including GNU/Linux and most other Unix-like operating systems
(e.g. Solaris, *BSD, MacOSX, etc.). Mailman is not supported on Windows,
although web and mail clients on any platform should be able to interact with
Mailman just fine.

* [[Home page][http://www.list.org]]
* [[Wiki][http://wiki.list.org]]

* [[http://docs.mailman3.org/projects/postorius/en/latest/][Postorius - The New Mailman Web UI]]

This is Postorius, the new official web interface for the GUN Mailman 3 list
management system.

* Email

** Email Protocols

Today, email is delivered using a client/server architecture.

An email message is created using a mail client program.

This program then sends the message to a server.

The server then forwards the message to the recipient's email server.

Then the message is supplied to the recipient's email client.

To enable this process,
a variety of standard network protocols allow different machines,
often running different operating systems and using different email programs,
to send and receive email.

The following protocols discussed are the most commonly used in the transfer of
email.

*** Mail Transport Protocols

Mail delivery from a client application to the server,
and from an originating server to the destination server,
is handled by the Simple Mail Transfer Protocol (SMTP).

**** SMTP

The primary purpose of SMTP is to transfer email between mail servers.

However, it is critical for email clients as well.

To send email, the client sends the message to an outgoing mail server,
which in turn contacts the destination mail server for delivery.

For this reason, it is necessary to specify an SMTP server
when configuring an email client.

Under Red Hat Enterprise Linux,
a user can configure an SMTP server on the local machine to handle mail delivery.

However, it is also possible to configure remote SMTP servers for outgoing mail.

***** Spam

One important point to make about the SMTP protocol
is that it does not require authentication.

This allows anyone on the Internet to send email to anyone else
or even to large groups of people.

It is this characteristic of SMTP that makes junk email or spam possible.

Imposing relay restrictions limits random users on the Internet
from sending email through your SMTP server, to other servers on the internet.

Servers that do not impose such restrictions are called open relay servers.

**** Recommended SMTP programs

Red Hat Enterprise Linux 7 provides the Postfix and Sendmail SMTP programs.

*** ⁠Mail Access Protocols

There are two primary protocols used by email client applications to retrieve
email from mail servers:
- the Post Office Protocol (POP)
- Internet Message Access Protocol (IMAP).

**** ⁠POP

The default POP server under Red Hat Enterprise Linux is Dovecot
and is provided by the dovecot package.

In order to use Dovecot,
first ensure the dovecot package is installed on your system.

When using a POP server,
email messages are downloaded by email client applications.

By default, most POP email clients are automatically configured
to delete the message on the email server
after it has been successfully transferred,
however this setting usually can be changed.

POP is fully compatible with important Internet messaging standards,
such as Multipurpose Internet Mail Extensions (MIME),
which allow for email attachments.

POP works best for users who have one system on which to read email.

It also works well for users who do not have a persistent connection to the
Internet or the network containing the mail server.

Unfortunately for those with slow network connections,
POP requires client programs upon authentication
to download the entire content of each message.

This can take a long time if any messages have large attachments.

The most current version of the standard POP protocol is POP3.

There are, however, a variety of lesser-used POP protocol variants.

***** APOP — POP3 with MD5 authentication. An encoded hash of the user's
Password is sent from the email client to the server
rather than sending an unencrypted password.

***** KPOP — POP3 with Kerberos authentication.

***** RPOP — POP3 with RPOP authentication.

This uses a per-user ID, similar to a password, to authenticate POP requests.

However, this ID is not encrypted, so RPOP is no more secure than standard POP.

***** Security

For added security, it is possible to use Secure Socket Layer (SSL) encryption
for client authentication and data transfer sessions.

This can be enabled by using the pop3s service,
or by using the stunnel application.

For more information on securing email communication, “Securing Communication”.

**** IMAP

The default IMAP server under Red Hat Enterprise Linux is Dovecot
and is provided by the dovecot package.

When using an IMAP mail server,
email messages remain on the server where users can read or delete them.

IMAP also allows client applications
to create, rename, or delete mail directories
on the server to organize and store email.

IMAP is particularly useful for users who access their email using multiple
machines.

The protocol is also convenient for users connecting to the mail server
via a slow connection,
because only the email header information is downloaded for messages
until opened, saving bandwidth.

The user also has the ability to delete messages without
viewing or downloading them.

For convenience, IMAP client applications are capable of caching copies of
messages locally,
so the user can browse previously read messages when not directly connected to the IMAP server.

IMAP, like POP, is fully compatible with important Internet messaging standards,
such as MIME, which allow for email attachments.

For added security, it is possible to use SSL encryption
for client authentication and data transfer sessions.

This can be enabled by using the imaps service,
or by using the stunnel program.

Other free, as well as commercial, IMAP clients and servers are available,
many of which extend the IMAP protocol and provide additional functionality.

**** Dovecot

The imap-login and pop3-login processes which implement the IMAP and
POP3 protocols are spawned by the master dovecot daemon included in the
dovecot package.

The use of IMAP and POP is configured through the
/etc/dovecot/dovecot.conf configuration file.

By default dovecot runs IMAP and POP3 together with their secure versions using SSL.

***** Configure dovecot

To configure dovecot to use POP, complete the following steps:

****** Make sure the protocols variable is uncommented

Edit the /etc/dovecot/dovecot.conf configuration file.

Remove the hash sign (#) at the beginning of the line.

Insure that file contains the pop3 argument.

For example:
~protocols = imap pop3 lmtp~

When the protocols variable is left commented out,
dovecot will use the default values as described above.

****** Make the change operational for the current session

By running the following command as root:
#+BEGIN_SRC bash
systemctl restart dovecot
#+END_SRC

****** Make the change operational after the next reboot

Run the command:
#+BEGIN_SRC bash
systemctl enable dovecot
ln -s '/usr/lib/systemd/system/dovecot' '/etc/systemd/system/multi-user.target.wants/dovecot'
#+END_SRC

****** Note

Please note that dovecot only reports that it started the IMAP server,
but also starts the POP3 server.

Unlike SMTP, both IMAP and POP3 require connecting clients to authenticate
using a user name and password.

By default, passwords for both protocols are passed over the network unencrypted.

****** Configure SSL on dovecot

******* Edit the /etc/dovecot/conf.d/10-ssl.conf configuration to make sure the

ssl_protocols variable is uncommented and contains the !SSLv2 !SSLv3
arguments:
~ssl_protocols = !SSLv2 !SSLv3~

These values ensure that dovecot avoids SSL versions 2 and also 3,
which are both known to be insecure.

This is due to the vulnerability described
in POODLE: SSLv3 vulnerability (CVE-2014-3566).

See Resolution for POODLE SSL 3.0 vulnerability (CVE-2014-3566)
in Postfix and Dovecot for details.

******* Edit the /etc/pki/dovecot/dovecot-openssl.cnf configuration file

Edit as you prefer.

However, in a typical installation, this file does not require modification.

******* Rename, move or delete the files

******** /etc/pki/dovecot/certs/dovecot.pem
******** /etc/pki/dovecot/private/dovecot.pem

******* Execute the /usr/libexec/dovecot/mkcert.sh script

It creates the dovecot self signed certificates.

These certificates are copied in the /etc/pki/dovecot/certs and /etc/pki/dovecot/private directories.

To implement the changes, restart dovecot by issuing the following command as root:
#+BEGIN_SRC bash
systemctl restart dovecot
#+END_SRC

****** More information

More details on dovecot can be found online at http://www.dovecot.org.

* Good links
- https://serverfault.com/questions/626803/why-use-dovecot-and-postfix-sendmail
- [[https://www.youtube.com/watch?v=b1VKGYgrgBk][Linux Mail Server - YouTube]]
- [[https://www.youtube.com/watch?v=uQ2tQuiJmxs][How to setup a Mail Server on Linux - YouTube]]

* [[https://mailman.readthedocs.io/en/release-3.0/src/mailman/docs/MTA.html][Hooking up your mail server]]

Mailman needs to communicate with your MTA
both to accept incoming mail and to deliver outgoing mail.

MTA - mail transport agent or mail server,
the software which handles sending mail across the Internet.

Mailman itself never delivers messages to the end user.

It sends them to its immediate upstream MTA, which delivers them.

In the same way, Mailman never receives mail directly.

Mail from outside always comes via the MTA.

Configuring Mailman to communicate with the MTA is straightforward,
and basically the same for all MTAs.

In your *mailman.cfg* file, add (or edit) a section like the following:
#+BEGIN_SRC
[mta]
incoming: mailman.mta.postfix.LMTP
outgoing: mailman.mta.deliver.deliver
lmtp_host: 127.0.0.1
lmtp_port: 8024
smtp_host: localhost
smtp_port: 25
configuration: python:mailman.config.postfix
#+END_SRC

** Postfix
You need to tell Mailman that you are using the Postfix mail server.

In your *mailman.cfg* file, add the following section:
#+BEGIN_SRC
[mta]
incoming: mailman.mta.postfix.LMTP
outgoing: mailman.mta.deliver.deliver
lmtp_host: mail.example.com
lmtp_port: 8024
smtp_host: mail.example.com
smtp_port: 25
#+END_SRC

* Help

The Mailman home page is:
http://www.list.org

with mirrors at:
- http://www.gnu.org/software/mailman
- http://mailman.sf.net

The community driven wiki (including the FAQ_) is at:
http://wiki.list.org

Other help resources, such as on-line documentation, links to the mailing
lists and archives, etc., are available at:
http://www.list.org/help.html

* Bits and pieces

Mailman 3 is really a suite of 5 projects:

** Core
The core message processing and delivery system, exposing a REST API
for administrative control.  Requires `Python 3.4`_ or newer.

** Postorius
The new web user interfaces built on `Django`_.

** HyperKitty
The new archiver, also built on `Django`_.

** mailman.client
A Python binding to the core's REST API.
Compatible with both Python 2 and Python 3.

** Bundler
A convenient installer.
