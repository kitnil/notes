From [[https://docs.google.com/spreadsheets/d/e/2PACX-1vSr58Xg4DVX2WdmAkv3hE2ITJ3fPeNUmRFe0Ekro53U-ACFrhcUkV8PlUm4ddcn53Uh-5UIezZtZZgc/pubhtml][Матрица компетентности программиста (hexlet версия)]].
* Languages
  - [[file:php.org][PHP]]
  - [[file:javascript.org][JavaScript]]
  - [[file:ruby.org][Ruby]]
  - [[file:python.org][Python]]
  - [[file:java.org][Java]]
  - [[file:c.org][C]]
  - [[file:kotlin.org][Kotlin]]
  - [[file:lisp.org][Lisp]]
    - [[file:clojure.org][Clojure]]
    - [[file:racket.org][Racket]]
  - [[file:haskell.org][Haskell]]
  - [[file:erlang.org][Erlang]]
  - [[file:prolog.org][Prolog]]
* Асинхронное программирование
  - Промисы
  - Сопрограммы
  - Async
  - Await
  - Модель акторов
  - Каналы
* В базу из кода
  - Работа с базой напрямую (через драйверы)
  - ORM
  - ActiveRecord
  - Repository
  - QueryBuilder
  - Data Mapper
* Web
  - [[file:http.org][HTTP]]
  - HTML
  - Микрофреймворки
  - Роутинг
  - Шаблонизация
  - Фреймворки
* Web-servers
  - Модели работы
    - Process
    - Thread
    - Event loop
  - Cgi
  - Fastcgi
* Эксплуатация/Деплой
  - Автоматизация
    - Ansible
  - Миграции
  - Мониторинг
  - Vagrant
  - Неизменяемая инфраструктура
  - Контейнерная виртуализация
    - Docker
  - https://12factor.net/	
* Структуры данных/типы
  - Массивы
  - Ассоциативные массивы/Словари
  - Связаные списки
  - Графы/Деревья
  - Очереди
* Алгоритмы
  - Сортировка массивов (любая)
  - Алгоритмическая сложность
  - Обход деревьев
  - Операции над списками
    - вставка
    - удаление
    - переворот
    - поиск циклов
    - …
  - Топологическая сортировка
* Информатика
  - Детерминированнось
  - Побочные эффекты
  - Идемпотентность
  - Чистые функции
  - Системы счисления и операции с ними
  - Рекурсивный процесс
  - Итеративный процесс
  - Императивный
  - Декларативный
  - Функции высшего порядка
  - Параметрический полиморфизм
  - Полиморфизм включения
  - Блокировка
    - Пессимистическая
    - Оптимистичская
* Архитектура ЭВМ
  - Общее устройство компьютеров
  - Понимание принципов работы процессора и исполнения машинного кода
    - Опкоды
    - Ассемблер
* Операционные системы
  - Процесс
    - Понятие
    - Состояния
    - Жизненный цикл
    - Сигналы
  - Поток
    - Понятие
    - Состояния
    - Жизненный цикл
    - Сигналы
  - IPC
    - Пайпы
    - Сокеты
  - Виртуальная память
* Сети
  - IP адрес/порты
  - MAC адрес
  - HTTP
  - TCP/IP общие принципы работы
  - UDP	Модель OCI
* *NIX
  - Владение командной строкой (bash)
  - Умение оценить состояние системы
    - ps
    - top
    - free
    - df
    - du
  - Понимание системы прав в linux
  - Просмотр логов
    - syslog
  - Перенаправления и потоки
  - Переменны окружения
  - Системы инициализации
    - Systemd
  - SSH
  - Генерация и использование ключей
  - mount
    - fstab
  - Сетевые интерфейсы	
* Качество
  - Юнит тесты
  - Автоматизированное тестирования
  - Непрерывная интеграция
  - Системные тесты
  - Непрерывная доставка	
* Организация работы
  - Система контроля версий
    - Git
  - Автоматизированная настройка рабочего окружения
* Математика
  - Теория множеств
  - Булева алгебра
  - Комбинаторика
  - Теория автоматов
  - Теория графов
  - Статистика
  - Теория категорий
* Базы данных
  - ANSI SQL
  - Индексы
  - Транзакционность (ACID)
  - MVCC
  - Уровни изоляции
* Проектирование/Разработка
  - Модули (неймспейсы)
  - Функциональная декомпозиция
  - Уровневое проектирование
  - Принцип одного уровня абстракции (барьеры абстракции)
  - Entity-Relationship model
  - Архитектурные шаблоны (в широком смысле)
  - DDD (Единый язык)
* Парадигмы
  - Процедурное программирование
  - Функциональное программирование
  - Автоматное программирование
  - Объектно-ориентированное программирование
  - Логическое программирование
* Распределенные системы
  - Семантика передачи сообщений
  - Очереди (rabbitmq)
  - Stateless/Statefull
  - Service Discovery (consul)
  - CAP теорема
* Процессы
  - Гибкая разработка (Agile)
  - Бережливое производство
  - Экстремальное программирование

* 

- [[https://github.com/amitness/learning][amitness/learning: Becoming better at data science every day]]
