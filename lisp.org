:PROPERTIES:
:ID:       0da5d4f2-d463-4079-b764-a77d3e800de7
:END:
#+title: Lisp

* Awesome
- [[https://github.com/Harleqin][Harleqin (Svante)]]

* Learn
- [[http://www.buildyourownlisp.com/][Learn C ‚Ä¢ Build Your Own Lisp]]
- [[http://www.crategus.com/books/cl-gtk/gtk-tutorial.html][GTK+ 3 Tutorial for Lisp]]
- [[https://github.com/ashok-khanna/common-lisp-by-example][ashok-khanna/common-lisp-by-example: Repo for Common Lisp by Example]]
- [[https://github.com/Apress/programming-algorithms-lisp][Apress/programming-algorithms-lisp: Source Code for 'Programming Algorithms in Lisp' by Vsevolod Domkin]]
- [[http://www.lispworks.com/documentation/lw50/CLHS/Front/Contents.htm][CLHS: Chapter Index]]
- [[https://www.youtube.com/channel/UC3m3hRIAYG2W0sa7ITsSNng][(11) Josh Betts - YouTube]]
- [[https://justine.lol/sectorlisp2/][LISP with GC in 436 bytes]]
- [[https://github.com/kanaka/mal/][kanaka/mal: mal - Make a Lisp]]

* Programs
- [[https://github.com/justinmeiners/srcweave][justinmeiners/srcweave: A literate programming system for any language.]]
- [[https://github.com/dnaeon/cl-wol][dnaeon/cl-wol: Wake on LAN (WoL) system for Common Lisp]]
- [[https://github.com/crategus/PassStorage][crategus/PassStorage: Password storing program]]
- [[https://github.com/thefossenjoyer/lisp-passwd][thefossenjoyer/lisp-passwd: A simple passwd manager written in Common Lisp.]]
- [[https://github.com/thefossenjoyer/todo-lisp][thefossenjoyer/todo-lisp: A todo app written in Common Lisp.]]

* Links

** Blog posts

- [[https://alhassy.github.io/TypedLisp.html][Typed Lisp, A Primer]]
- [[https://google.github.io/styleguide/lispguide.xml][Google Common Lisp Style Guide]]
- [[https://lisp-lang.org/][Common Lisp]]
- [[https://turtleware.eu/posts/Charming-CLIM-tutorial-part-2--Rethinking-The-Output.html][TurtleWare]]
- [[https://reader.tymoon.eu/article/413][An Overview of Kandria's Development with Lisp - Â¶ñÊÄ™‰∏ñÊç®„Å¶‰∫∫]]
  - [[https://www.youtube.com/user/Shinmera/videos][(3) Shinmera - YouTube]]

** Lib
- [[https://github.com/vindarel/fuzzy-match][vindarel/fuzzy-match: Fuzzy match candidates from an input string.]]
- [[https://github.com/y2q-actionman/with-c-syntax][y2q-actionman/with-c-syntax]]
- [[https://github.com/vindarel/format-colors][vindarel/format-colors: (format t "~/blue/ :)" "Hello")]]
- [[https://github.com/Virtual-Insurance-Products/monads][Virtual-Insurance-Products/monads]]
- [[https://github.com/mmontone/djula][mmontone/djula: Common Lisp port of the Django templating language]]
- [[https://github.com/qitab/grpc][qitab/grpc: gRPC implementation for Common Lisp]]
- [[https://github.com/crategus/cl-cffi-gtk][crategus/cl-cffi-gtk: cl-cffi-gtk is a Lisp binding to the GTK+ 3 library.]]
- [[https://github.com/FiV0/cl-elastic][FiV0/cl-elastic: Elasticsearch Client for Common Lisp]]
- [[https://github.com/fukamachi/pem][fukamachi/pem: PEM parser.]]
- [[https://github.com/fukamachi/woo][fukamachi/woo: A fast non-blocking HTTP server on top of libev]]
- [[https://github.com/ruricolist/cloture][ruricolist/cloture: Clojure in Common Lisp]]

** Tools
- [[https://github.com/40ants/recompile][40ants/recompile: This is a small helper to recompile given Common Lisp system, very useful if you wish to produce high quality software by demolution of all compiler's warnings.]]
- [[https://github.com/mmontone/lisp-system-browser][mmontone/lisp-system-browser: Smalltalk-like system browser for Common Lisp.]]
- [[https://github.com/mmontone/slime-doc-contribs][mmontone/slime-doc-contribs: Documentation contribs for SLIME (the Superior Lisp Interaction Mode for Emacs)]]
- [[https://github.com/jawadcode/htmlisp][jawadcode/htmlisp: Compiles lisp style html into normal html]]
- [[https://github.com/mmontone/quicklisp-systems][mmontone/quicklisp-systems: Search, browse and load Quicklisp systems from Emacs.]]
- [[https://github.com/mmontone/slime-star][mmontone/slime-star: SLIME configuration with some extensions pre-installed.]]
- [[https://github.com/rajasegar/cl-docker][rajasegar/cl-docker: Run your docker commands from your favorite Common Lisp REPLs]]

** Implementations
- [[https://github.com/adam-mcdaniel/wisp][adam-mcdaniel/wisp: A light lisp written in C++]]
- [[id:4a6c1e3e-833d-451c-9fb3-4ec06a8dd548][LISP implementation in Python]]
- [[https://github.com/orion-lang/orion][orion-lang/orion: Orion is a high level, purely functional programming language with a LISP based syntax.]]
- [[https://github.com/rd--/hsc3-lisp][rd--/hsc3-lisp: Haskell SuperCollider Lisp]]
- [[https://github.com/OpenProgger/LISP][OpenProgger/LISP: Minimal LISP Compiler for x86_64]]
- [[https://fennel-lang.org/][the Fennel programming language]]
- [[https://github.com/Robert-van-Engelen/tinylisp][Robert-van-Engelen/tinylisp: Lisp in 99 lines of C and how to write one yourself. Includes 20 Lisp primitives, garbage collection and REPL.]]

** Misc
- [[https://github.com/ianthehenry/bauble][ianthehenry/bauble: a playground for making art with lisp and math]]
- [[https://github.com/inconvergent/weird][inconvergent/weird: Generative art in Common Lisp]]
- [[https://github.com/coalton-lang/coalton][coalton-lang/coalton: Coalton is an efficient, statically typed functional programming language that supercharges Common Lisp.]]common
- [[https://github.com/coleslaw-org/coleslaw][coleslaw-org/coleslaw: Flexible Lisp Blogware]]
- [[https://github.com/tsoding/ebisp][tsoding/ebisp: Embedded Lisp]]
- [[https://github.com/screenshotbot/screenshotbot-oss][screenshotbot/screenshotbot-oss: Screenshotbot is a Screenshot Testing service. This code powers https://screenshotbot.io]]
- [[https://github.com/TheSingingFox/editor][TheSingingFox/editor: A simple text editor in Common Lisp, using McClim]]
- [[https://github.com/40ants/lw-multiplication][40ants/lw-multiplication: A math game for children to help them learning multiplication]]
- [[https://github.com/anlsh/pacman-cl][anlsh/pacman-cl: Pacman written in Common Lisp for, um, reasons]]
- [[https://github.com/LingDong-/wax][LingDong-/wax: A tiny programming language that transpiles to C, C++, Java, TypeScript, Python, C#, Swift, Lua and WebAssembly üöÄ]]
- [[https://github.com/jart/sectorlisp][jart/sectorlisp: Bootstrapping LISP in a Boot Sector]]
- [[https://github.com/kssytsrk/invidious-handler][kssytsrk/invidious-handler: invidious-handler, a redirector from Youtube to Invidious for Nyxt browser]]
- [[https://github.com/codereport/SICP-2020][codereport/SICP-2020: Repository for material related to Programming Languages Virtual Meetup coverage of the Structure and Interpretation of Computer Programs textbook.]]
- [[https://github.com/ryukinix/trivial-snake][ryukinix/trivial-snake: A trivial snake game written in Common Lisp built on top of trivial-gamekit]]
- [[https://github.com/janestreet/sexplib][janestreet/sexplib: Automated S-expression conversion]]
- [[https://github.com/ccqpein/Github-API-CL][ccqpein/Github-API-CL: Common Lisp Github API Client]]
- [[http://lisper.ru/][–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ Common Lisp —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤]]
- [[https://github.com/franzinc/imap][franzinc/imap: POP, IMAP and SMTP client support for Common Lisp]]
- [[https://github.com/metawilm/cl-python][metawilm/cl-python: An implementation of Python in Common Lisp]]
- [[https://github.com/fons/cl-mongo][fons/cl-mongo: lisp interface to mongo db]]
- [[https://github.com/vseloved/cl-redis][vseloved/cl-redis: Redis client for Common Lisp]]
- [[https://github.com/kovisoft/slimv][kovisoft/slimv: Official mirror of Slimv versions released on vim.org]]a
- [[https://github.com/shinh/sedlisp][shinh/sedlisp: Lisp implementation in sed]]
- [[https://github.com/joaotavora/sly][joaotavora/sly: Sylvester the Cat's Common Lisp IDE]]
- [[https://github.com/cl21/cl21][cl21/cl21: Common Lisp in the 21st Century.]]
- [[https://github.com/Wukix/LambdaLite][Wukix / LambdaLite A functional, relational database in about 250 lines of Common Lisp]]
- [[https://github.com/roswell/roswell][roswell / roswell intended to be a launcher for a major lisp environment that just works.]]
- [[https://github.com/froggey/Mezzano][froggey/Mezzano: An operating system written in Common Lisp]]
- [[https://github.com/SquircleSpace/shcl][SquircleSpace/shcl: SHell in Common Lisp]]
- [[https://github.com/SquidDev/urn][SquidDev/urn: Yet another Lisp variant which compiles to Lua]]
- [[https://github.com/cl-adams/adams][cl-adams/adams: UNIX system administration in Common Lisp]]
- [[https://github.com/numcl/numcl][numcl/numcl: Numpy clone in Common Lisp]]
- [[https://github.com/justinethier/husk-scheme][justinethier / husk-scheme A full implementation of the Scheme programming language for the Haskell Platform.]]
- [[https://github.com/haskell-lisp/lisk][haskell-lisp / lisk]]
- [[https://github.com/carp-lang/Carp][carp-lang/Carp: A statically typed lisp, without a GC, for real-time applications.]]
- [[https://github.com/write-you-a-scheme-v2/scheme][write-you-a-scheme-v2/scheme: Write You a Scheme]]
- [[https://github.com/axellang/axel][axellang/axel: Haskell + Lisp]]
- [[https://github.com/0x0f0f0f/yasih][0x0f0f0f/yasih: Yet another Scheme implemented in Haskell]]
- [[https://github.com/finkel-lang/finkel][finkel-lang/finkel: Haskell in S-expression]]
- [[https://github.com/robpike/lisp][robpike/lisp: Toy Lisp 1.5 interpreter]]
- http://lispcookbook.github.io/cl-cookbook/
- [[https://github.com/ahungry/puny-gui][ahungry/puny-gui: A Puny GUI System]]
- elsconf 2020-04-27
- [[https://www.twitch.tv/awkravchuk/][Diablo in Lisp]]
  - [[https://gitlab.com/lockie/darkness-looming-the-dawn]]
  - [[https://www.youtube.com/c/AndrewKravchuk][(10) Andrew Kravchuk - YouTube]]
- [[https://www.youtube.com/watch?v=5xprY8GCxFQ][Integrating independent condition systems - Online Lisp Meeting #1, 12.05.2020 - YouTube]]
- [[https://github.com/screenshotbot/screenshotbot-oss][screenshotbot/screenshotbot-oss: Screenshotbot is a Screenshot Testing service. This code powers https://screenshotbot.io]]
- [[https://github.com/Zulu-Inuoe/jzon][Zulu-Inuoe/jzon: A correct and safe JSON parser.]]
- [[http://jmc.stanford.edu/articles/lisp/lisp.pdf][History of Lisp - Stanford.pdf]]
- [[https://github.com/rajasegar/cl-trello-clone][rajasegar/cl-trello-clone: A Trello clone demo app in Common Lisp]]
- [[https://github.com/SteelSeries/golisp][SteelSeries/golisp: A Scheme-flavored Lisp implemented in Go.]]
- [[https://www.xach.com/lisp/vecto/][Vecto - Simple Vector Drawing with Common Lisp]]
- [[https://github.com/s-clerc/slyblime][s-clerc/slyblime: Interactive Lisp IDE with REPL, Inspector, Debugger and more for Sublime Text 4.]]
- [[https://lisp-journey.gitlab.io/blog/gui-programming-in-common-lisp-part-1-of-5-tk/][GUI Programming in Common Lisp, part 1/5: Tk - Lisp journey]]
  - [[https://peterlane.netlify.app/ltk-examples/][Peter's Scrapbook: LTk Examples]]
  - [[https://peterlane.netlify.app/ltk-plotchart/][Peter's Scrapbook: LTk Plotchart]]
- [[https://common-lisp.net/project/asdf/asdf/Configuring-ASDF-to-find-your-systems.html][Configuring ASDF to find your systems (ASDF Manual)]]
- [[https://lispcookbook.github.io/cl-cookbook/getting-started.html#creating-a-new-project][Getting started Creating a new project]]
- [[https://common-lisp.net/project/py-configparser/][py-configparser INI file]]
- [[https://payments.common-lisp.net/printshop/sessions/57E509769A/index.html][Print Shop the Y Combinator Codex by Micha≈Ç (phoe) Herda]]
- [[http://www.ulisp.com/][uLisp]]
- [[https://www.cs.umd.edu/~nau/cmsc421/norvig-lisp-style.pdf][norvig-lisp-style.pdf]]
- [[http://clqr.boundp.org/download.html][Common Lisp Quick Reference: Download]]
- [[https://typeable.io/blog/2021-10-04-lisp-usage.html][Do You Know Where Lisp Is Used Nowadays?]]

In Common Lisp, use =every= (that's the equivalent of =all=) and =some=
(that's the equivalent of =any=).

** Community

- [[https://common-lisp.net/][Welcome to Common-Lisp.net!]]
- [[https://gitlab.common-lisp.net/explore/projects?sort=latest_activity_desc][Projects ¬∑ Explore ¬∑ GitLab]]

** Implementations
- [[https://github.com/dnmfarrell/Lepr][dnmfarrell/Lepr: A tiny Lisp like written in Perl]]
- [[https://github.com/fragglet/yoctolisp][fragglet/yoctolisp: Tiny Scheme-like Lisp interpreter written in a weekend]]
- [[https://github.com/axolotl-lang/axolotl][axolotl-lang/axolotl: üåä a statically typed lisp-like (currently) programming language. Test builds from the CI will be up at https://files.uditkaro.de/axolotl]]
- [[https://github.com/tomhrr/dale][tomhrr/dale: Lisp-flavoured C]]

* Cheatsheet

Kill thread
#+BEGIN_SRC lisp
  (sb-thread:terminate-thread (cadr (sb-thread:list-all-threads)))
 #+END_SRC

