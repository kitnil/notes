#+title: Lisp

* Awesome
- [[https://github.com/Harleqin][Harleqin (Svante)]]

* Learn
- [[http://www.crategus.com/books/cl-gtk/gtk-tutorial.html][GTK+ 3 Tutorial for Lisp]]
- [[https://github.com/ashok-khanna/common-lisp-by-example][ashok-khanna/common-lisp-by-example: Repo for Common Lisp by Example]]

* Links

** Blog posts

- [[https://alhassy.github.io/TypedLisp.html][Typed Lisp, A Primer]]
- [[https://google.github.io/styleguide/lispguide.xml][Google Common Lisp Style Guide]]
- [[https://lisp-lang.org/][Common Lisp]]
- [[https://turtleware.eu/posts/Charming-CLIM-tutorial-part-2--Rethinking-The-Output.html][TurtleWare]]

** Lib
- [[https://github.com/vindarel/fuzzy-match][vindarel/fuzzy-match: Fuzzy match candidates from an input string.]]
- [[https://github.com/y2q-actionman/with-c-syntax][y2q-actionman/with-c-syntax]]
- [[https://github.com/vindarel/format-colors][vindarel/format-colors: (format t "~/blue/ :)" "Hello")]]
- [[https://github.com/Virtual-Insurance-Products/monads][Virtual-Insurance-Products/monads]]

** Tools
- [[https://github.com/40ants/recompile][40ants/recompile: This is a small helper to recompile given Common Lisp system, very useful if you wish to produce high quality software by demolution of all compiler's warnings.]]

** Implementations
- [[https://github.com/adam-mcdaniel/wisp][adam-mcdaniel/wisp: A light lisp written in C++]]
- [[file:python.org][LISP implementation in Python]]
- [[https://github.com/orion-lang/orion][orion-lang/orion: Orion is a high level, purely functional programming language with a LISP based syntax.]]
- [[https://github.com/rd--/hsc3-lisp][rd--/hsc3-lisp: Haskell SuperCollider Lisp]]

** Misc
- [[https://github.com/tsoding/ebisp][tsoding/ebisp: Embedded Lisp]]
- [[https://github.com/TheSingingFox/editor][TheSingingFox/editor: A simple text editor in Common Lisp, using McClim]]
- [[https://github.com/40ants/lw-multiplication][40ants/lw-multiplication: A math game for children to help them learning multiplication]]
- [[https://github.com/anlsh/pacman-cl][anlsh/pacman-cl: Pacman written in Common Lisp for, um, reasons]]
- [[https://github.com/LingDong-/wax][LingDong-/wax: A tiny programming language that transpiles to C, C++, Java, TypeScript, Python, C#, Swift, Lua and WebAssembly üöÄ]]
- [[https://github.com/jart/sectorlisp][jart/sectorlisp: Bootstrapping LISP in a Boot Sector]]
- [[https://github.com/kssytsrk/invidious-handler][kssytsrk/invidious-handler: invidious-handler, a redirector from Youtube to Invidious for Nyxt browser]]
- [[https://github.com/codereport/SICP-2020][codereport/SICP-2020: Repository for material related to Programming Languages Virtual Meetup coverage of the Structure and Interpretation of Computer Programs textbook.]]
- [[https://github.com/ryukinix/trivial-snake][ryukinix/trivial-snake: A trivial snake game written in Common Lisp built on top of trivial-gamekit]]
- [[https://github.com/janestreet/sexplib][janestreet/sexplib: Automated S-expression conversion]]
- [[https://github.com/ccqpein/Github-API-CL][ccqpein/Github-API-CL: Common Lisp Github API Client]]
- [[http://lisper.ru/][–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ Common Lisp —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤]]
- [[https://github.com/franzinc/imap][franzinc/imap: POP, IMAP and SMTP client support for Common Lisp]]
- [[https://github.com/metawilm/cl-python][metawilm/cl-python: An implementation of Python in Common Lisp]]
- [[https://github.com/fons/cl-mongo][fons/cl-mongo: lisp interface to mongo db]]
- [[https://github.com/vseloved/cl-redis][vseloved/cl-redis: Redis client for Common Lisp]]
- [[https://github.com/kovisoft/slimv][kovisoft/slimv: Official mirror of Slimv versions released on vim.org]]a
- [[https://github.com/shinh/sedlisp][shinh/sedlisp: Lisp implementation in sed]]
- [[https://github.com/joaotavora/sly][joaotavora/sly: Sylvester the Cat's Common Lisp IDE]]
- [[https://github.com/cl21/cl21][cl21/cl21: Common Lisp in the 21st Century.]]
- [[https://github.com/Wukix/LambdaLite][Wukix / LambdaLite A functional, relational database in about 250 lines of Common Lisp]]
- [[https://github.com/roswell/roswell][roswell / roswell intended to be a launcher for a major lisp environment that just works.]]
- [[https://github.com/froggey/Mezzano][froggey/Mezzano: An operating system written in Common Lisp]]
- [[https://github.com/SquircleSpace/shcl][SquircleSpace/shcl: SHell in Common Lisp]]
- [[https://github.com/SquidDev/urn][SquidDev/urn: Yet another Lisp variant which compiles to Lua]]
- [[https://github.com/cl-adams/adams][cl-adams/adams: UNIX system administration in Common Lisp]]
- [[https://github.com/numcl/numcl][numcl/numcl: Numpy clone in Common Lisp]]
- [[https://github.com/justinethier/husk-scheme][justinethier / husk-scheme A full implementation of the Scheme programming language for the Haskell Platform.]]
- [[https://github.com/haskell-lisp/lisk][haskell-lisp / lisk]]
- [[https://github.com/carp-lang/Carp][carp-lang/Carp: A statically typed lisp, without a GC, for real-time applications.]]
- [[https://github.com/write-you-a-scheme-v2/scheme][write-you-a-scheme-v2/scheme: Write You a Scheme]]
- [[https://github.com/axellang/axel][axellang/axel: Haskell + Lisp]]
- [[https://github.com/0x0f0f0f/yasih][0x0f0f0f/yasih: Yet another Scheme implemented in Haskell]]
- [[https://github.com/finkel-lang/finkel][finkel-lang/finkel: Haskell in S-expression]]
- [[https://github.com/robpike/lisp][robpike/lisp: Toy Lisp 1.5 interpreter]]
- http://lispcookbook.github.io/cl-cookbook/
- [[https://github.com/ahungry/puny-gui][ahungry/puny-gui: A Puny GUI System]]
- elsconf 2020-04-27
- [[https://www.twitch.tv/awkravchuk/][Diablo in Lisp]]
  - [[https://gitlab.com/lockie/darkness-looming-the-dawn]]
- [[https://www.youtube.com/watch?v=5xprY8GCxFQ][Integrating independent condition systems - Online Lisp Meeting #1, 12.05.2020 - YouTube]]
- [[http://jmc.stanford.edu/articles/lisp/lisp.pdf][History of Lisp - Stanford.pdf]]

In Common Lisp, use =every= (that's the equivalent of =all=) and =some=
(that's the equivalent of =any=).

** Community

- [[https://common-lisp.net/][Welcome to Common-Lisp.net!]]
- [[https://gitlab.common-lisp.net/explore/projects?sort=latest_activity_desc][Projects ¬∑ Explore ¬∑ GitLab]]

** Implementations
- [[https://github.com/dnmfarrell/Lepr][dnmfarrell/Lepr: A tiny Lisp like written in Perl]]

* Cheatsheet

Kill thread
#+BEGIN_SRC lisp
  (sb-thread:terminate-thread (cadr (sb-thread:list-all-threads)))
 #+END_SRC

