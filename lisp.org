Kill thread
#+BEGIN_SRC lisp
  (sb-thread:terminate-thread (cadr (sb-thread:list-all-threads)))
 #+END_SRC

- [[https://github.com/vseloved/cl-redis][vseloved/cl-redis: Redis client for Common Lisp]]
- [[https://github.com/kovisoft/slimv][kovisoft/slimv: Official mirror of Slimv versions released on vim.org]]a
- [[https://github.com/shinh/sedlisp][shinh/sedlisp: Lisp implementation in sed]]
- [[https://github.com/joaotavora/sly][joaotavora/sly: Sylvester the Cat's Common Lisp IDE]]
- [[https://github.com/cl21/cl21][cl21/cl21: Common Lisp in the 21st Century.]]
- [[https://github.com/Wukix/LambdaLite][Wukix / LambdaLite A functional, relational database in about 250 lines of Common Lisp]]
- [[https://github.com/roswell/roswell][roswell / roswell intended to be a launcher for a major lisp environment that just works.]]
- [[https://github.com/froggey/Mezzano][froggey/Mezzano: An operating system written in Common Lisp]]
- [[https://github.com/SquircleSpace/shcl][SquircleSpace/shcl: SHell in Common Lisp]]
- [[https://github.com/SquidDev/urn][SquidDev/urn: Yet another Lisp variant which compiles to Lua]]
- [[https://github.com/cl-adams/adams][cl-adams/adams: UNIX system administration in Common Lisp]]
- [[https://github.com/numcl/numcl][numcl/numcl: Numpy clone in Common Lisp]]
- [[https://github.com/justinethier/husk-scheme][justinethier / husk-scheme A full implementation of the Scheme programming language for the Haskell Platform.]]
- [[https://github.com/haskell-lisp/lisk][haskell-lisp / lisk]]
- [[https://github.com/carp-lang/Carp][carp-lang/Carp: A statically typed lisp, without a GC, for real-time applications.]]
- [[https://github.com/write-you-a-scheme-v2/scheme][write-you-a-scheme-v2/scheme: Write You a Scheme]]
- [[https://github.com/axellang/axel][axellang/axel: Haskell + Lisp]]
- [[https://github.com/0x0f0f0f/yasih][0x0f0f0f/yasih: Yet another Scheme implemented in Haskell]]
- [[https://github.com/finkel-lang/finkel][finkel-lang/finkel: Haskell in S-expression]]
- [[https://github.com/robpike/lisp][robpike/lisp: Toy Lisp 1.5 interpreter]]
- http://lispcookbook.github.io/cl-cookbook/
- [[https://github.com/ahungry/puny-gui][ahungry/puny-gui: A Puny GUI System]]
- elsconf 2020-04-27
- [[https://www.twitch.tv/awkravchuk/][Diablo in Lisp]]
  - [[https://gitlab.com/lockie/darkness-looming-the-dawn]]
- [[https://www.youtube.com/watch?v=5xprY8GCxFQ][Integrating independent condition systems - Online Lisp Meeting #1, 12.05.2020 - YouTube]]
- [[http://jmc.stanford.edu/articles/lisp/lisp.pdf][History of Lisp - Stanford.pdf]]

In Common Lisp, use =every= (that's the equivalent of =all=) and =some=
(that's the equivalent of =any=).
