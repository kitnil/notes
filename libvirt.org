:PROPERTIES:
:ID:       34e20a86-6b2e-4508-88cf-8a091be96ef5
:END:
- [[https://github.com/libguestfs/libguestfs][libguestfs/libguestfs: library and tools for accessing and modifying virtual machine disk images. PLEASE DO NOT USE GITHUB FOR ISSUES OR PULL REQUESTS. See the website for how to file a bug or contact us.]]
- [[https://github.com/BigAnteater/KVM-GPU-Passthrough][BigAnteater/KVM-GPU-Passthrough: This is a simple, mostly automated guide to pass a GPU through to a VM.]]
- [[https://github.com/virt-manager/virt-manager/pull/233][Undecorated window by bazsi · Pull Request #233 · virt-manager/virt-manager]]
- [[https://github.com/abbbi/virtnbdbackup][abbbi/virtnbdbackup: Backup utiliy for Libvirt / qemu / kvm supporting incremental and differencial backups.]]
- [[https://github.com/JonathonReinhart/spice-record][JonathonReinhart/spice-record: Record SPICE session output to MP4 video]]
- [[https://github.com/Jiab77/libvirt-web][Jiab77/libvirt-web: A simple web interface based on libVirt and PHP.]]
- [[https://github.com/saschpe/libvirt-hook-qemu][saschpe/libvirt-hook-qemu: Libvirt hook for setting up iptables port-forwarding rules when using NAT-ed networking.]]
- [[https://github.com/aruhier/virt-backup][aruhier/virt-backup: Backup your kvm guests managed by libvirt]]
- [[https://www.tune-it.ru/web/ifsolo/blog/-/blogs/druzim-pulseaudio-s-windows-10-v-qemu-kvm?_com_liferay_blogs_web_portlet_BlogsPortlet_redirect=https%3A%2F%2Fwww.tune-it.ru%2Fweb%2Fifsolo%2Fblog%3Fp_p_id%3Dcom_liferay_blogs_web_portlet_BlogsPortlet%26p_p_lifecycle%3D0%26p_p_state%3Dnormal%26p_p_mode%3Dview%26_com_liferay_blogs_web_portlet_BlogsPortlet_mvcRenderCommandName%3D%252Fblogs%252Fview%26_com_liferay_blogs_web_portlet_BlogsPortlet_mvcRenderCommandName%3D%252Fblogs%252Fview%26_com_liferay_blogs_web_portlet_BlogsPortlet_cur%3D1%26_com_liferay_blogs_web_portlet_BlogsPortlet_delta%3D20][Дружим PulseAudio с Windows 10 в QEMU/KVM - Блог - Tune IT]]

* Cheat sheet
- [[https://computingforgeeks.com/virsh-commands-cheatsheet/][Virsh commands cheatsheet to manage KVM guest virtual machines | ComputingForGeeks]]

- remove virtual machine with all storage
  : virsh undefine --domain mysql-server --remove-all-storage --delete-snapshots 

* virt-manager

#+begin_example
  qemu+tcp://kvm15.intr/system
#+end_example

* Add cdrom

  #+begin_src bash
    virsh -c qemu+tcp://HOST/system edit vm12345
  #+end_src

  #+begin_src xml
    <disk type='file' device='cdrom'>
      <driver name='qemu' type='raw'/>
      <source file='/kvm/artix-xfce-s6-20200506-x86_64.iso'/>
      <target dev='hdc' bus='ide'/>
      <readonly/>
      <address type='drive' controller='0' bus='1' unit='0'/>
    </disk>
    <!-- ... -->
    <boot dev='hd'/>
    <boot dev='cdrom'/>
  #+end_src

  #+begin_src bash
    virsh -c qemu+tcp://HOST/system shutdown vm12345
    virsh -c qemu+tcp://HOST/system start vm12345
  #+end_src

** VNC
#+begin_src xml
  <graphics type='vnc' port='11935' autoport='no' listen='127.0.0.1' keymap='en-us'>
    <listen type='address' address='127.0.0.1'/>
  </graphics>
#+end_src

** Disk configuration
   #+begin_src xml
     <disk type='file' device='disk'>
       <driver name='qemu' type='qcow2'/>
       <source file='/kvm/disks/nixops-dd310333-9f51-11ea-a6e4-0242c6b2ca1a-web98.qcow2'/>
       <target dev='hda' bus='ide'/>
       <address type='drive' controller='0' bus='0' target='0' unit='0'/>
     </disk>
   #+end_src

* Migrate

#+begin_example
  #!/bin/bash
  # KVM-SSD migrate script

  LANG=en_US.UTF8
  PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin
  ACCT=$1
  SERV=$2

  f_help() {
    echo "Specify account name and destination host, example:"
    echo "migr_kvm p123456 kvm-ssd1"
    exit 1;
  }

  f_print_err() {
    local message=$1
    [ -n "$message" ] || message="Unknown error"
    echo "=================="
    echo "$message"
    echo "=================="
    exit 255
  }

  ( [ -z $ACCT ] || [ -z $SERV ] ) && f_help

  random_name=$(< /dev/urandom tr -dc A-Za-z0-9_ | head -c8)

  # create backup
  cat /etc/libvirt/qemu/$ACCT.xml > "/usr/local/bin/backup_migrate/$ACCT.xml.$random_name"


  HOST="root@$SERV"
  SIZE=$(lvdisplay /dev/vm/$ACCT | awk '/LV Size/ {print $3}'|sed 's/\,/\./g')
  SSH_OPTS='-o StrictHostKeyChecking=no -o PasswordAuthentication=no '
  MIGR_OPTS="--live --copy-storage-all --verbose --persistent --undefinesource"

  echo "Create disk image on destination server"
  ssh $SSH_OPTS $HOST -t "[ -b /dev/vm/$ACCT ] || /usr/sbin/lvcreate -V${SIZE}G -T vm/pool -n$ACCT" || f_print_err "Error: creation lvm"
  echo "Start migrate CT $ACCT to $SERV"
  virsh migrate $MIGR_OPTS $ACCT qemu+ssh://$SERV/system  tcp://$SERV/ || f_print_err "Error on steep: virsh migrate"
  echo "Waiting for trim start..."
  sleep 10
  ssh $SSH_OPTS $HOST -t "/usr/bin/virsh qemu-agent-command $ACCT --timeout 60 '{\"execute\":\"guest-fstrim\"}' >/dev/null 2>&1"
  echo "Migration completed"

#+end_example

#+begin_example
  #!/bin/bash

  for i in `/usr/bin/virsh list|grep run|awk '{print $2}'`; do
      /usr/bin/virsh qemu-agent-command $i --timeout 60 '{"execute":"guest-fstrim"}';
  done
#+end_example

#+begin_src xml
  <disk type='block' device='disk'>
    <driver name='qemu' type='raw' cache='none' io='threads' discard='unmap'/>
    <source dev='/dev/vm/p510033'/>
    <backingStore/>
    <target dev='sda' bus='scsi'/>
    <iotune>
      <write_bytes_sec>104857600</write_bytes_sec>
      <write_bytes_sec_max>524288000</write_bytes_sec_max>
      <write_bytes_sec_max_length>120</write_bytes_sec_max_length>
    </iotune>
    <address type='drive' controller='0' bus='0' target='0' unit='0'/>
  </disk>
#+end_src

#+begin_src xml
  <disk type='file' device='cdrom'>
    <driver name='qemu' type='raw'/>
    <target dev='sdb' bus='sata'/>
    <readonly/>
    <address type='drive' controller='0' bus='0' target='0' unit='0'/>
  </disk>
#+end_src

#+begin_src xml
  <domain type='kvm'>
    <name>pxxxxxx</name>
    <uuid>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</uuid>
    <memory unit='KiB'>8388608</memory>
    <currentMemory unit='KiB'>8388608</currentMemory>
    <vcpu placement='static'>2</vcpu>
    <iothreads>1</iothreads>
    <resource>
      <partition>/machine</partition>
    </resource>
    <os>
      <type arch='x86_64' machine='pc-q35-6.0'>hvm</type>
      <boot dev='cdrom'/>
      <boot dev='hd'/>
      <bootmenu enable='yes'/>
    </os>
    <features>
      <acpi/>
      <apic/>
      <pae/>
      <hyperv>
        <relaxed state='on'/>
        <vapic state='on'/>
        <spinlocks state='on' retries='4096'/>
        <vpindex state='on'/>
        <runtime state='on'/>
        <synic state='on'/>
        <stimer state='on'/>
        <frequencies state='on'/>
        <reenlightenment state='on'/>
        <tlbflush state='on'/>
      </hyperv>
      <msrs unknown='ignore'/>
    </features>
    <cpu mode='host-model' check='full'>
      <feature policy='disable' name='topoext'/>
      <feature policy='disable' name='svm'/>
    </cpu>
    <clock offset='utc'>
      <timer name='rtc' tickpolicy='catchup'/>
      <timer name='pit' tickpolicy='delay'/>
      <timer name='hpet' present='yes'/>
      <timer name='hypervclock' present='yes'/>
    </clock>
    <on_poweroff>destroy</on_poweroff>
    <on_reboot>restart</on_reboot>
    <on_crash>restart</on_crash>
    <devices>
      <emulator>/usr/bin/qemu-system-x86_64</emulator>
      <disk type='block' device='disk'>
        <driver name='qemu' type='raw' cache='none' io='threads' discard='unmap'/>
        <source dev='/dev/vm/pxxxxxx'/>
        <backingStore/>
        <target dev='sda' bus='scsi'/>
        <iotune>
          <write_bytes_sec>104857600</write_bytes_sec>
          <write_bytes_sec_max>524288000</write_bytes_sec_max>
          <write_bytes_sec_max_length>120</write_bytes_sec_max_length>
        </iotune>
        <address type='drive' controller='0' bus='0' target='0' unit='0'/>
      </disk>
      <disk type='file' device='cdrom'>
        <driver name='qemu' type='raw'/>
        <target dev='sdb' bus='sata'/>
        <readonly/>
        <address type='drive' controller='0' bus='0' target='0' unit='0'/>
      </disk>
      <controller type='usb' index='0' model='ich9-ehci1'>
        <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x7'/>
      </controller>
      <controller type='usb' index='0' model='ich9-uhci1'>
        <master startport='0'/>
        <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0' multifunction='on'/>
      </controller>
      <controller type='usb' index='0' model='ich9-uhci2'>
        <master startport='2'/>
        <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x1'/>
      </controller>
      <controller type='usb' index='0' model='ich9-uhci3'>
        <master startport='4'/>
        <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x2'/>
      </controller>
      <controller type='virtio-serial' index='0'>
        <address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0'/>
      </controller>
      <controller type='scsi' index='0' model='virtio-scsi'>
        <driver iothread='1'/>
        <address type='pci' domain='0x0000' bus='0x00' slot='0x09' function='0x0'/>
      </controller>
      <controller type='pci' index='0' model='pcie-root'/>
      <controller type='pci' index='1' model='pcie-root-port'>
        <model name='pcie-root-port'/>
        <target chassis='1' port='0x10'/>
        <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0' multifunction='on'/>
      </controller>
      <controller type='pci' index='2' model='pcie-root-port'>
        <model name='pcie-root-port'/>
        <target chassis='2' port='0x11'/>
        <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x1'/>
      </controller>
      <controller type='sata' index='0'>
        <address type='pci' domain='0x0000' bus='0x00' slot='0x1f' function='0x2'/>
      </controller>
      <interface type='bridge'>
        <mac address='xx:xx:xx:xx:xx:xx'/>
        <source bridge='br0'/>
        <bandwidth>
          <inbound average='25000' peak='25000' burst='1024'/>
          <outbound average='25000' peak='25000' burst='1024'/>
        </bandwidth>
        <model type='virtio'/>
        <filterref filter='xxxxx-xxxxxxx-xxx'>
          <parameter name='CTRL_IP_LEARNING' value='none'/>
          <parameter name='IP' value='xxx.xxx.xxx.xx'/>
        </filterref>
        <address type='pci' domain='0x0000' bus='0x01' slot='0x00' function='0x0'/>
      </interface>
      <serial type='pty'>
        <target type='isa-serial' port='0'>
          <model name='isa-serial'/>
        </target>
      </serial>
      <console type='pty'>
        <target type='serial' port='0'/>
      </console>
      <channel type='unix'>
        <source mode='bind' path='/var/lib/libvirt/qemu/pxxxxxx.agent'/>
        <target type='virtio' name='org.qemu.guest_agent.0'/>
        <address type='virtio-serial' controller='0' bus='0' port='1'/>
      </channel>
      <input type='mouse' bus='ps2'/>
      <input type='keyboard' bus='ps2'/>
      <graphics type='vnc' port='11055' autoport='no' listen='0.0.0.0' passwd='xxxxxxxxxx'>
        <listen type='address' address='0.0.0.0'/>
      </graphics>
      <audio id='1' type='none'/>
      <video>
        <model type='cirrus' vram='16384' heads='1' primary='yes'/>
        <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x0'/>
      </video>
      <memballoon model='virtio'>
        <address type='pci' domain='0x0000' bus='0x00' slot='0x08' function='0x0'/>
      </memballoon>
    </devices>
    <seclabel type='none' model='none'/>
  </domain>
#+end_src

* qemu-agent

: virsh qemu-agent-command ubuntu22.04 --timeout 60 '{"execute":"guest-network-get-interfaces"}' | jq

* trim

[[https://anteru.net/blog/2020/qemu-kvm-and-trim/][QEMU, KVM and trim | Anteru's Blog]]

Add to =<driver>=:
#+begin_example
  discard='unmap' detect_zeroes='unmap'
#+end_example

Run:
: virsh qemu-agent-command ubuntu22.04 --timeout 60 '{"execute":"guest-fstrim"}'

* Migration

: virsh migrate --live --copy-storage-all --verbose --persistent --undefinesource p510306 qemu+ssh://kvm-nvme103.majordomo.ru/system tcp://kvm-nvme103.majordomo.ru/

[[https://galaxydata.ru/community/kvm-live-migration-bez-obshhego-khranilishha-403][KVM Live Migration без общего хранилища - GalaxyData Community]]

#+begin_example

  KVM Live Migration без общего хранилища
  6 июня, 2017
  Eduard Yamaltdinov

  Я решил написать эту статью, потому что так и не сумел найти ничего более менее внятного на эту тему в интернет, а уж тем более на великом и могучем. Итак задача: настроить систему миграции виртуальной машины с одного сервера KVM на другой, без выключения виртуального сервера (тоесть live migration), и без общего хранилища (non-shared storage), это значит, что вместе с виртуальной машиной будет передан и образ ее жесткого диска с одного сервера на другой. Звучит здорово, поэтому приступаем. Мы имеем 2 сервера с Ubuntu 10.04 LTS (установка minimal), ибо LTS, а всякий мусор на сервере нам ни к чему. В качестве жестких дисков для виртуальных машин будут выступать LVM разделы, это обеспечивает лучшую скорость работы и большую гибкость. Наверняка в качестве дисков можно использовать и файлы, разница я думаю не велика, но у меня под рукой именно LVM. Для удобства именования, первый сервер назовем vm1 второй соответственно vm2, LVM на обоих серверах имеет Volume Group с именем «vg», и это важно, что бы имя было одинаковым. Итак приступим. Сразу скажу что миграция виртуальной машины в qemu-kvm доступна с версии 0.12.1, а libvirt поддерживает миграцию без общего хранилища с версии 0.8.3, тем не менее до сих пор такая востребованная функция как живая миграция без общего хранилища kvm с машины на машину нигде толком не описана, поэтому исправляю эту ошибку. Так как Ubuntu у нас имеет версию 10.04, то сооствественно она имеет старые версии и qemu-kvm и libvirt, которые не позволят нам сделать все что нужно, но не отчаивайтесь. Просто подключаем вот этот репозиторий https://launchpad.net/~nutznboltz/+archive/kvm-libvirt-lts после чего устанавливаем свежие версии libvirt и kvm

      # echo «deb http://ppa.launchpad.net/nutznboltz/kvm-libvirt-lts/ubuntu lucid main» >> /etc/apt/sources.list.d/libvirt.list # echo «deb-src http://ppa.launchpad.net/nutznboltz/kvm-libvirt-lts/ubuntu» >> /etc/apt/sources.list.d/libvirt.list # aptitude update # aptitude install kvm libvirt-bin

  Теперь мы имеем все необходимое что бы побаловать себя живой миграцией. Я не буду тут описывать как создается и настраивается виртуальная машина. Лучше сразу предположим, что она у нас есть. Пусть это будет Debian 6.0.1a, размещенный на Logical Volume с именем «debian», соответственно путь до данного раздела у нас /dev/vg/debian, хотя это итак понятно. Итак на vm1 у нас виртуальная машина с именем «debian6» и мы ее сейчас будет мигрировать. Живая миграция требовательна к нюансам. Окружение вирутальной машины должно полностью совпадать у источника и приемника данной машины. Например, если виртуалкой используется раздел /dev/vg/debian, но на целевой системе этот раздел должен присутствовать. Если к машине подключены ISO образы, то и на целевой машине они так же должны быть, и по тому же самому пути, а лучше ISO образы вообще отключить на время миграции. Тоже самое и с сетевыми настройками: названия бриджа в который подключена виртуалка должны совпадать на источнике и приемнике. Вообщем капризная эта KVM, но если вы хотите живую миграцию — будьте так любезны. Допустим мы отключили все ISO и бридж приемника у нас имеет тоже самое название, теперь сделаем так, что бы root одной машины мог безприпятственно заходить по SSH в качестве root другой машины. Это вообщем то не обязательно, тем не менее желательно. По умолчанию пароль root в Ubuntu отсутствует, поэтому будем использовать ключи SSH. Для этого делаем следующее.

      [vm1]# ssh-keygen [vm1]# ssh-copy-id user@vm2 [vm2]# tail -1 /home/user/.ssh/authorized_keys >> /root/.ssh/authorized_keys

  Обращаю пристальное внимание на то, что команды выполняются НА РАЗНЫХ машинах vm1 и vm2, если объяснить по простому, то мы просто генерируем SSH RSA ключ для пользователя root на машине vm1, после чего инсталируем его пользователю «user» машины vm2, а дальше на машине vm2 переносим последний добавленный ключ пользователя user, пользователю root. После этой процедуры пользователь root с vm1 будет входить по SSH как root@vm2 без запроса пароля. Такую же операцию проделываем и в обратную сторону. Теперь смотрим на нашу запущенную виртуалку на vm1

      [vm1]# virsh list ID Имя               Статус ———————————- 1 Debian6           выполнение

  Значит машина запущена и работает, создаем на vm2 раздел того же размера что ни на vm1 и называем его так же, тоесть «debian», пусть у нас образ будет 8 Gb, на обеих хостах vm1 и vm2. Важно что бы раздел в который мигрирует виртаульная машина не был МЕНЬШЕ исходного.

      [vm2]# lvcreate vg -ndebian -L8G

  После чего можно начать миграцию

      [vm1]# virsh migrate —live Debian6 qemu+ssh://root@vm2/system —copy-storage-all

  Сразу скажу что переносимая виртуалка в процессе миграции резко теряет свою отзывчивость, и сеть между двумя хостами серьезно загружается. Так что имейте это в виду. Данная команда говорит о том что необходимо мигрировать, причем в живую (ключь —live), виртуалку с именем Debian6, и скопировать хранилище на удаленную машину (—copy-storage-all), если хранилище уже есть на хосте и достаточно свежо, то вместо копирования всего раздела, можно указать команду (—copy-storage-inc) и копирование будет инкиментальное, тоесть будет передана только измененная часть хранилища, что может существенно сэкономить время. Очень важно, так же не забыть ключь —live, потому как без него, система будет приостановлена, и запущена после миграции на другой системе. Вот собственно и вся наука.
#+end_example

#+begin_example
  root@kvm26:~# virsh migrate --live --copy-storage-all --verbose --persistent vm43597 qemu+ssh://root@kvm15.intr/system
  Migration: [ 73 %]
#+end_example

* Sound
- scream -i br154.154 -u -p 16400

* 

root@guixsd /sys/bus/pci/devices# echo 1 > /sys/bus/pci/devices/0000:12:00.1/remove
root@guixsd /sys/bus/pci/devices# echo 1 > ../../../devices/pci0000:00/0000:00:01.1/0000:10:00.0/0000:11:00.0/0000:12:00.0/remove
root@guixsd /sys/bus/pci/devices# echo 1 > /sys/bus/pci/rescan

* Fix bluetooth

[[https://old.reddit.com/r/VFIO/comments/sdctt2/bluetooth_device_passthrough_intel_bluetooth/][Bluetooth device passthrough: Intel Bluetooth Driver Errors Need Help! : VFIO]]

Was facing the same issue. USB controller passthrough workouaround was not feasable, since i had RAM in the same IOMMU group as the USB controller.

Found solution in this thread: https://www.reddit.com/r/VFIO/comments/wbsqy1/how_to_fix_onboard_intel_bluetooth_error_code_10/

Needed to add the <qemu:capabilities> , however also update the domain (add the `xmlns:qemu` schema to it) at the same, otherwise virt-manager xml-editor wouldn't have any of it.

#+begin_src xml
  <domain xmlns:qemu="http://libvirt.org/schemas/domain/qemu/1.0" type="kvm">  
    <devices>    
      <!-- ...     -->
    </devices>    
    <qemu:capabilities>    
      <qemu:del capability="usb-host.hostdevice"/>
    </qemu:capabilities>    
  </domain>
#+end_src
