:PROPERTIES:
:ID:       d5f3cdb2-b4c2-46fa-9763-50d0783d2013
:END:
#+title: PostgreSQL

- [[https://github.com/aarroyoc/postgresql-prolog][aarroyoc/postgresql-prolog: A Prolog library to connect to PostgreSQL databases]]
- [[https://github.com/akarki15/dbdot][akarki15/dbdot: Generate DOT description for postgres db schema]]
- [[https://github.com/ankane/pgslice][ankane/pgslice: Postgres partitioning as easy as pie]]
- [[https://github.com/ankane/pgsync][ankane/pgsync: Sync data from one Postgres database to another]]
- [[https://github.com/ankane/pgvector][ankane/pgvector: Open-source vector similarity search for Postgres]]
- [[https://github.com/ApsaraDB/PolarDB-for-PostgreSQL][ApsaraDB/PolarDB-for-PostgreSQL: A cloud-native database based on PostgreSQL developed by Alibaba Cloud.]]
- [[https://github.com/benbjohnson/postlite][benbjohnson/postlite: Postgres wire compatible SQLite proxy.]]
- [[https://github.com/citusdata/citus][citusdata/citus: Distributed PostgreSQL as an extension]]
- [[https://github.com/digitallyinduced/thin-backend][digitallyinduced/thin-backend: üî• Thin Backend is a Blazing Fast, Universal Web App Backend for Making Realtime Single Page Apps]]
- [[https://github.com/dimitri/pgcharts][dimitri/pgcharts: Turn your PostgreSQL queries into Charts]]
- [[https://github.com/dimitri/pgcopydb][dimitri/pgcopydb: Copy a Postgres database to a target Postgres server (pg_dump | pg_restore on steroids)]]
- [[https://github.com/dimitri/pgloader][dimitri/pgloader: Migrate to PostgreSQL in a single command!]]
- [[https://github.com/dimitri/pgloader][dimitri/pgloader: Migrate to PostgreSQL in a single command!]]
- [[https://github.com/ed-o-saurus/PLHaskell][ed-o-saurus/PLHaskell: A Haskell extension for PostgreSQL that allows embedded Haskell code.]]
- [[https://github.com/fabianlindfors/reshape][fabianlindfors/reshape: An easy-to-use, zero-downtime schema migration tool for Postgres]]
- [[https://github.com/hasura/pgdeltastream][hasura/pgdeltastream: Streaming Postgres logical replication changes atleast-once over websockets]]
- [[https://retool.com/blog/how-we-upgraded-postgresql-database/][How we upgraded our 4 TB main application Postgres database]]
- [[https://www.zombodb.com/][Integrate Postgresql and Elasticsearch | ZomboDB]]
- [[https://github.com/levkk/pgcat][levkk/pgcat: Meow. PgBouncer rewritten in Rust, with sharding, load balancing and failover support.]]
- [[https://github.com/monacoremo/postgrest-sessions-example][monacoremo/postgrest-sessions-example: An example on how to implement session-based authentication with PostgREST]]
- [[https://github.com/MovingLake/pg_webhook][MovingLake/pg_webhook: This repo plugs to a replication slot of a Postgres database, and sends webhooks for any change that happens in the database.]]
- [[https://github.com/orioledb/orioledb][orioledb/orioledb: OrioleDB ‚Äì building a modern cloud-native storage engine (... and solving some PostgreSQL wicked problems)]]
- [[https://github.com/Paxa/postbird][Paxa/postbird: Open source PostgreSQL GUI client for macOS, Linux and Windows]]
- [[https://github.com/pgbouncer/pgbouncer][pgbouncer/pgbouncer: lightweight connection pooler for PostgreSQL]]
- [[https://github.com/pllua/pllua][pllua/pllua: Re-implementation of pllua, Lua embedded for postgresql]]
- [[https://github.com/postgres-ai/database-lab-engine][postgres-ai/database-lab-engine: Thin PostgreSQL clones. DLE provides blazing-fast database cloning to build powerful development, test, QA, staging environments. Follow to stay updated.]]
- [[https://gitlab.com/postgres-ai/postgres-checkup][Postgres.ai / postgres-checkup ‚Äì automated PostgreSQL health checks ¬∑ GitLab]]
- [[https://github.com/postgresml/postgresml][postgresml/postgresml: PostgresML is an end-to-end machine learning system. It enables you to train models and make online predictions using only SQL, without your data ever leaving your favorite database.]]
- [[https://www.postgresql.org/about/news/plhaskell-v10-released-2519/][PostgreSQL: PL/Haskell v1.0 Released]]
- [[https://github.com/PostgREST/postgrest][PostgREST/postgrest: REST API for any Postgres database]]
- [[https://www.postgres-xl.org/][Postgres-XL | Open Source Scalable SQL Database Cluster]]
- [[https://github.com/prest/prest][prest/prest: PostgreSQL REST, low-code, simplify and accelerate development, ‚ö° instant, realtime, high-performance on any Postgres application, existing or new]]
- [[https://prudnitskiy.pro/2018/08/22/repmgr/][Repmgr: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–µ–π postgresql]]
- [[https://github.com/sanpii/explain][sanpii/explain: Transform postgresql explain to a graph]]
- [[https://github.com/shayonj/pg-osc][shayonj/pg-osc: Easy CLI tool for making zero downtime schema changes and backfills in PostgreSQL]]
- [[https://github.com/sorintlab/stolon][sorintlab/stolon: PostgreSQL cloud native High Availability and more.]]
- [[https://github.com/supabase/pg_netstat][supabase/pg_netstat: PostgreSQL extension to monitor database network traffic]]
- [[https://github.com/supabase/realtime][supabase/realtime: Listen to your to PostgreSQL database in realtime via websockets. Built with Elixir.]]
- [[https://github.com/tcdi/pgx][tcdi/pgx: Build Postgres Extensions with Rust!]]
- [[https://github.com/wal-g/wal-g][wal-g/wal-g: Archival and Restoration for Postgres]]
- [[https://habr.com/ru/post/584660/][–•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –≤ JSONB, –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤? / –•–∞–±—Ä]]

* [[https://postgrespro.com/list/thread-id/1525878][Thread: DB fails to start: "Could not read from file "pg_clog/0003" at offset 212992: No error. : Postgres Professional]]

Please perform below steps:

1. Backup the current pg_clog/0003 file in different directory
2. Create a file  by assumption of  make the uncommitted record as they haven't been committed. command as follows: 

dd if=/dev/zero of=<data directory location>/pg_clog/0003   bs=256K count=1

This is just a 256k zero-byte file. Here's one I made earlier:
http://www.postnewspapers.com.au/~craig/0003.zip

* out of memory query
–í–æ—Ç –ø—Ä–∏–º–µ—Ä:
SELECT x, COUNT(x), array_agg(x)
  FROM (
       SELECT ((i << 20) | (j << 10) | k)::text::xid AS x
         FROM generate_series(0,1023) AS i,
              generate_series(0,1023) AS j,
              generate_series(0,1023) AS k
       ) s
 GROUP BY x;
–ò –ø–æ—è—Å–Ω–µ–Ω–∏–µ (–≤—Å—ë ¬© RhodiumToad):
Hashaggregate currently has no way to spill to disk. Hashagg won't be planned if the estimated hashtable size exceeds work_mem,
but at runtime, it'll blow past work_mem and use as much memory as it needs.
xid is a useful built-in example of a non-sortable type for sortable types, the query will usually use a sort and therefore be subject to
work_mem limits. But xid can only be grouped by hashing, so it forces a hashagg plan regardless of work_mem. So the query will try and create a hashtable with a billion entries each of which includes an array build state.

* Guix

: sudo -u postgres psql peertube

peertube=# create user peertube with encrypted password 'SECRET';
CREATE ROLE

peertube=# grant all privileges on database peertube to peertube;
GRANT
