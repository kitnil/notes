:PROPERTIES:
:ID:       d5f3cdb2-b4c2-46fa-9763-50d0783d2013
:END:
#+title: PostgreSQL

- [[https://github.com/aarroyoc/postgresql-prolog][aarroyoc/postgresql-prolog: A Prolog library to connect to PostgreSQL databases]]
- [[https://github.com/akarki15/dbdot][akarki15/dbdot: Generate DOT description for postgres db schema]]
- [[https://github.com/ankane/pgslice][ankane/pgslice: Postgres partitioning as easy as pie]]
- [[https://github.com/ankane/pgsync][ankane/pgsync: Sync data from one Postgres database to another]]
- [[https://github.com/ankane/pgvector][ankane/pgvector: Open-source vector similarity search for Postgres]]
- [[https://github.com/ApsaraDB/PolarDB-for-PostgreSQL][ApsaraDB/PolarDB-for-PostgreSQL: A cloud-native database based on PostgreSQL developed by Alibaba Cloud.]]
- [[https://github.com/benbjohnson/postlite][benbjohnson/postlite: Postgres wire compatible SQLite proxy.]]
- [[https://github.com/centerofci/mathesar][centerofci/mathesar: Web application providing an intuitive user experience to databases.]]
- [[https://github.com/citusdata/citus][citusdata/citus: Distributed PostgreSQL as an extension]]
- [[https://github.com/digitallyinduced/thin-backend][digitallyinduced/thin-backend: üî• Thin Backend is a Blazing Fast, Universal Web App Backend for Making Realtime Single Page Apps]]
- [[https://github.com/dimitri/pgcharts][dimitri/pgcharts: Turn your PostgreSQL queries into Charts]]
- [[https://github.com/dimitri/pgcopydb][dimitri/pgcopydb: Copy a Postgres database to a target Postgres server (pg_dump | pg_restore on steroids)]]
- [[https://github.com/dimitri/pgloader][dimitri/pgloader: Migrate to PostgreSQL in a single command!]]
- [[https://github.com/dimitri/pgloader][dimitri/pgloader: Migrate to PostgreSQL in a single command!]]
- [[https://github.com/ed-o-saurus/PLHaskell][ed-o-saurus/PLHaskell: A Haskell extension for PostgreSQL that allows embedded Haskell code.]]
- [[https://github.com/fabianlindfors/reshape][fabianlindfors/reshape: An easy-to-use, zero-downtime schema migration tool for Postgres]]
- [[https://greenplum.org/][Greenplum Database]]
- [[https://github.com/hasura/pgdeltastream][hasura/pgdeltastream: Streaming Postgres logical replication changes atleast-once over websockets]]
- [[https://retool.com/blog/how-we-upgraded-postgresql-database/][How we upgraded our 4 TB main application Postgres database]]
- [[https://www.zombodb.com/][Integrate Postgresql and Elasticsearch | ZomboDB]]
- [[https://github.com/levkk/pgcat][levkk/pgcat: Meow. PgBouncer rewritten in Rust, with sharding, load balancing and failover support.]]
- [[https://github.com/monacoremo/postgrest-sessions-example][monacoremo/postgrest-sessions-example: An example on how to implement session-based authentication with PostgREST]]
- [[https://github.com/MovingLake/pg_webhook][MovingLake/pg_webhook: This repo plugs to a replication slot of a Postgres database, and sends webhooks for any change that happens in the database.]]
- [[https://github.com/neondatabase/neon][neondatabase/neon: Neon: Serverless Postgres. We separated storage and compute to offer autoscaling, branching, and bottomless storage.]]
- [[https://github.com/oguimbal/pg-mem][oguimbal/pg-mem: An in memory postgres DB instance for your unit tests]]
- [[https://github.com/orioledb/orioledb][orioledb/orioledb: OrioleDB ‚Äì building a modern cloud-native storage engine (... and solving some PostgreSQL wicked problems)]]
- [[https://github.com/Paxa/postbird][Paxa/postbird: Open source PostgreSQL GUI client for macOS, Linux and Windows]]
- [[https://github.com/pgbouncer/pgbouncer][pgbouncer/pgbouncer: lightweight connection pooler for PostgreSQL]]
- [[https://github.com/pllua/pllua][pllua/pllua: Re-implementation of pllua, Lua embedded for postgresql]]
- [[https://github.com/postgres-ai/database-lab-engine][postgres-ai/database-lab-engine: Thin PostgreSQL clones. DLE provides blazing-fast database cloning to build powerful development, test, QA, staging environments. Follow to stay updated.]]
- [[https://gitlab.com/postgres-ai/postgres-checkup][Postgres.ai / postgres-checkup ‚Äì automated PostgreSQL health checks ¬∑ GitLab]]
- [[https://github.com/postgresml/postgresml][postgresml/postgresml: PostgresML is an end-to-end machine learning system. It enables you to train models and make online predictions using only SQL, without your data ever leaving your favorite database.]]
- [[https://www.postgresql.org/about/news/plhaskell-v10-released-2519/][PostgreSQL: PL/Haskell v1.0 Released]]
- [[https://github.com/PostgREST/postgrest][PostgREST/postgrest: REST API for any Postgres database]]
- [[https://www.postgres-xl.org/][Postgres-XL | Open Source Scalable SQL Database Cluster]]
- [[https://github.com/prest/prest][prest/prest: PostgreSQL REST, low-code, simplify and accelerate development, ‚ö° instant, realtime, high-performance on any Postgres application, existing or new]]
- [[https://prudnitskiy.pro/2018/08/22/repmgr/][Repmgr: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–µ–π postgresql]]
- [[https://github.com/sanpii/explain][sanpii/explain: Transform postgresql explain to a graph]]
- [[https://github.com/shayonj/pg-osc][shayonj/pg-osc: Easy CLI tool for making zero downtime schema changes and backfills in PostgreSQL]]
- [[https://github.com/shortishly/pgec][shortishly/pgec: A realtime replica of your PostgreSQL data with Redis, Memcached and REST APIs]]
- [[https://github.com/sorintlab/stolon][sorintlab/stolon: PostgreSQL cloud native High Availability and more.]]
- [[https://github.com/supabase/pg_netstat][supabase/pg_netstat: PostgreSQL extension to monitor database network traffic]]
- [[https://github.com/supabase/realtime][supabase/realtime: Listen to your to PostgreSQL database in realtime via websockets. Built with Elixir.]]
- [[https://github.com/supabase/supabase][supabase/supabase: The open source Firebase alternative. Follow to stay updated about our public Beta.]]
- [[https://github.com/supabase/supa_type][supabase/supa_type: The Missing PostgreSQL Data Types]]
- [[https://github.com/supabase/supavisor][supabase/supavisor: A cloud-native, multi-tenant Postgres connection pooler.]]
- [[https://github.com/tcdi/pgx][tcdi/pgx: Build Postgres Extensions with Rust!]]
- [[https://github.com/wal-g/wal-g][wal-g/wal-g: Archival and Restoration for Postgres]]
- [[https://github.com/zalando/pg_view][zalando/pg_view: Get a detailed, real-time view of your PostgreSQL database and system metrics]]
- [[https://github.com/zalando/postgres-operator][zalando/postgres-operator: Postgres operator creates and manages PostgreSQL clusters running in Kubernetes]]
- [[https://habr.com/ru/post/584660/][–•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –≤ JSONB, –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤? / –•–∞–±—Ä]]

* [[https://postgrespro.com/list/thread-id/1525878][Thread: DB fails to start: "Could not read from file "pg_clog/0003" at offset 212992: No error. : Postgres Professional]]

Please perform below steps:

1. Backup the current pg_clog/0003 file in different directory
2. Create a file  by assumption of  make the uncommitted record as they haven't been committed. command as follows: 

dd if=/dev/zero of=<data directory location>/pg_clog/0003   bs=256K count=1

This is just a 256k zero-byte file. Here's one I made earlier:
http://www.postnewspapers.com.au/~craig/0003.zip

* out of memory query
–í–æ—Ç –ø—Ä–∏–º–µ—Ä:
SELECT x, COUNT(x), array_agg(x)
  FROM (
       SELECT ((i << 20) | (j << 10) | k)::text::xid AS x
         FROM generate_series(0,1023) AS i,
              generate_series(0,1023) AS j,
              generate_series(0,1023) AS k
       ) s
 GROUP BY x;
–ò –ø–æ—è—Å–Ω–µ–Ω–∏–µ (–≤—Å—ë ¬© RhodiumToad):
Hashaggregate currently has no way to spill to disk. Hashagg won't be planned if the estimated hashtable size exceeds work_mem,
but at runtime, it'll blow past work_mem and use as much memory as it needs.
xid is a useful built-in example of a non-sortable type for sortable types, the query will usually use a sort and therefore be subject to
work_mem limits. But xid can only be grouped by hashing, so it forces a hashagg plan regardless of work_mem. So the query will try and create a hashtable with a billion entries each of which includes an array build state.

* Guix

: sudo -u postgres psql peertube

peertube=# create user peertube with encrypted password 'SECRET';
CREATE ROLE

peertube=# grant all privileges on database peertube to peertube;
GRANT

* ChatGPT

** 

PostgreSQL uses TCP (Transmission Control Protocol) protocol for communication. By default, PostgreSQL listens on port 5432 for incoming connections. However, this port number can be changed in the PostgreSQL configuration file if necessary.

It's worth noting that PostgreSQL also supports SSL encryption for secure communication, which requires a different port number (usually 5433 by default). Additionally, PostgreSQL supports the use of Unix domain sockets, which are an alternative to TCP sockets for communication between local processes on the same machine.

Overall, PostgreSQL primarily uses TCP for network communication, but also supports SSL and Unix domain sockets as alternative methods.

** Replace underscore with space in a column in postgresql.

To replace underscores with spaces in a column in PostgreSQL, you can use the REPLACE function. Here's an example query:

sql

UPDATE table_name
SET column_name = REPLACE(column_name, '_', ' ')
WHERE column_name LIKE '%\_%';

In this query, replace table_name and column_name with the actual names of your table and column, respectively. The REPLACE function takes three arguments: the column name to replace values in, the character to be replaced (underscore in this case), and the character to replace it with (space in this case).

The WHERE clause filters the rows that contain an underscore character in the column_name, so only those rows are updated.

Note that this query will replace all instances of underscores in the column with spaces. If you only want to replace the first instance, you can use the REGEXP_REPLACE function with a regular expression.

** Dump postgres database to file.

To dump a PostgreSQL database to a file, you can use the pg_dump utility provided by PostgreSQL. Here's an example command:

bash

pg_dump -U username -h hostname -p portnumber databasename > dumpfile.sql

In this command, replace username with your PostgreSQL username, hostname with the hostname or IP address of the server, portnumber with the port number used by the PostgreSQL server (usually 5432), databasename with the name of the database you want to dump, and dumpfile.sql with the name of the file you want to save the dump to.

For example, if your PostgreSQL username is postgres, the hostname is localhost, the port number is 5432, the database name is mydatabase, and you want to save the dump to a file named mydatabase_dump.sql, the command would be:

bash

pg_dump -U postgres -h localhost -p 5432 mydatabase > mydatabase_dump.sql

When you run this command, pg_dump will connect to the PostgreSQL server and generate a SQL script that contains all the data and schema definitions for the specified database. This script will be saved to the specified file (mydatabase_dump.sql in this example). You can then use this file to restore the database at a later time using the psql utility.
