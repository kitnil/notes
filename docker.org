* Cheat sheet

- Remote docker host
  : export DOCKER_HOST=ssh://sammy@your_server_ip

- Compose
  : docker-compose --project-name pxe --file pxe.yml up -d --force

- List running docker containers with image hashes
  : docker inspect --format='{{.Id}} {{.Name}} {{.Image}}' $(docker ps -aq)

- exit from interactive shell without killing container
  : c-p-q

- xorg
  #+BEGIN_SRC sh
    docker run -it \
           -w /opt/tome4 \
           -v /tmp/.X11-unix:/tmp/.X11-unix \
           -v /opt/tome4/rootfs/opt/tome4:/opt/tome4 \
           -v /opt/tome4/rootfs/home/user:/home/user \
           -v /home/oleg/.t-engine:/root/.t-engine \
           -v /etc/localtime:/etc/localtime:ro \
           -v "/srv/lib/Tales of Maj'Eyal - GOG Linux":/install \
           -e DISPLAY \
           --rm -u1000: \
           --network=host \
           --name tome4 \
           --hostname tome4 \
           --device /dev/snd \
           --device /dev/input \
           --device /dev/dri \
           --env PULSE_SERVER=unix:/tmp/pulseaudio.socket \
           --env PULSE_COOKIE=/tmp/pulseaudio.cookie \
           --volume /tmp/pulseaudio.socket:/tmp/pulseaudio.socket \
           --volume /tmp/pulseaudio.client.conf:/etc/pulse/client.conf \
           tome4:1.6.0 ./start.sh
  #+END_SRC

* Awesome

- https://github.com/hadolint/hadolint

* Katacoda

** What is Swarm Mode
   
In this scenario, you will learn how to initialise a Docker Swarm Mode cluster and deploy networked containers using the built-in Docker Orchestration. The environment has been configured with two Docker hosts.

In 1.12, Docker introduced Swarm Mode. Swarm Mode enables the ability to deploy containers across multiple Docker hosts, using overlay networks for service discovery with a built-in load balancer for scaling the services.

Swarm Mode is managed as part of the Docker CLI, making it a seamless experience to the Docker ecosystem.

Key Concepts
Docker Swarm Mode introduces three new concepts which we'll explore in this scenario.

Node: A Node is an instance of the Docker Engine connected to the Swarm. Nodes are either managers or workers. Managers schedules which containers to run where. Workers execute the tasks. By default, Managers are also workers.

Services: A service is a high-level concept relating to a collection of tasks to be executed by workers. An example of a service is an HTTP Server running as a Docker Container on three nodes.

Load Balancing: Docker includes a load balancer to process requests across all containers in the service.

This scenario will help you learn how to deploy these new concepts.

** Step 1 - Initialise Swarm Mode
Turn single host Docker host into a Multi-host Docker Swarm Mode. Becomes Manager By default, Docker works as an isolated single-node. All containers are only deployed onto the engine. Swarm Mode turns it into a multi-host cluster-aware engine.

The first node to initialise the Swarm Mode becomes the manager. As new nodes join the cluster, they can adjust their roles between managers or workers. You should run 3-5 managers in a production environment to ensure high availability.

Task: Create Swarm Mode Cluster
Swarm Mode is built into the Docker CLI. You can find an overview the possibility commands via docker swarm --help

The most important one is how to initialise Swarm Mode. Initialisation is done via init.

docker swarm init

After running the command, the Docker Engine knows how to work with a cluster and becomes the manager. The results of an initialisation is a token used to add additional nodes in a secure fashion. Keep this token safe and secure for future use when scaling your cluster.

In the next step, we will add more nodes and deploy containers across these hosts.
