- [[https://github.com/nihaldivyam/docker_using_ansible][nihaldivyam/docker_using_ansible: Script to Deploy docker and container using ansible]]
- [[https://github.com/ansible-community/toolset][ansible-community/toolset: Ansible Toolset combines all ansible development tools in a single container: ansible, ansible-lint and molecule]]
- [[https://github.com/roles-ansible/role-grafana-kiosk][roles-ansible/role-grafana-kiosk: Ansible role to deploy the grafana-kiosk]]

- ip address
#+begin_src yaml
      - tags: docker
        name: Generate /etc/default/docker file
        copy:
          dest: '/etc/default/docker'
          content: |
            DOCKER_OPTS="-H tcp://{{ ansible_all_ipv4_addresses | ipaddr('172.16.103.0/24') | first }}:2375 -H unix:///var/run/docker.sock"
#+end_src

- ubuntu 14.04 interfaces
#+begin_src yaml
  - hosts: web_ubuntu
    tasks:
      - set_fact: interfaces="{{ ansible_interfaces | select('match', '^(em|p|eth|br)[0-9]+') | map('regex_replace', '^(.*)$', 'ansible_\\1') | list | unique }}"
      - debug: var=interfaces
      - debug: msg="{{ interfaces | map('extract', hostvars[inventory_hostname], 'macaddress') | select('defined') | list | unique }}"
      - debug: msg="{{ interfaces | map('extract', hostvars[inventory_hostname], 'ipv4') | select('defined') | list }}"
      - debug: msg="{{ interfaces | map('extract', hostvars[inventory_hostname], 'ipv4_secondaries') | select('defined') | list }}"
#+end_src

- netplan
#+begin_src yaml
  - hosts: kubernetes
    tasks:
      - copy:
          dest: /etc/netplan/01-netcfg.yaml
          content: |
            network:
              version: 2
              renderer: networkd
              ethernets:
                {{ ansible_default_ipv4.alias }}:
                 dhcp4: no
                 addresses: [{{ ansible_all_ipv4_addresses | first }}/23]
                 gateway4: {{ ansible_default_ipv4.gateway }}
                 nameservers:
                   addresses: [8.8.8.8,8.8.4.4]
#+end_src

- docker memory
#+BEGIN_SRC yaml
  #!/usr/bin/env ansible-playbook

  - hosts: web30.intr
    # vars:
    #   ansible_become_pass: "{{ lookup('passwordstore', 'majordomo/ssh/eng') }}"
    #   slack_token: "{{ lookup('passwordstore', 'majordomo/mjru.slack.com/tokens/ansible') }}"
    tasks:
      - shell: "{% raw %}docker stats --format '{{ .Name }} {{ .MemUsage }}' --no-stream | awk '/mariadb/ { print $2 }' | cut -d. -f 1{% endraw %}"
        become: yes
        register: docker

      - debug: var=docker.stdout

      - slack:
          token: "{{ slack_token }}"
          msg: "MySQL container memory took more than 22GB on web30.intr"
          channel: "#test"
        when: docker.stdout|int > 22
#+END_SRC

- Run docker playbook
  : ANSIBLE_HOST_KEY_CHECKING=false ansible-playbook -uroot -i78.108.86.238, -e 'host=78.108.86.238' docker.yml

- source ./hacking/env-setup

- https://pagure.io/Fedora-Infra/ansible

- https://docs.ansible.com/ansible/latest/plugins/callback/log_plays.html#log-plays-callback
  : ANSIBLE_STDOUT_CALLBACK=log_plays ANSIBLE_LOAD_CALLBACK_PLUGINS=1 ansible localhost -a 'df -h'

- http://tonkersten.com/2019/02/150-ansible-with-loops-or-lookup/

    # - shell: find '/etc/letsencrypt/live' -type f
    #   register: files

    # - fetch: src='{{ item }}' dest='/tmp'
    #   loop: '{{ files.stdout_lines }}'


- https://hodovi.ch/posts/extending-ansible-with-callback-plugins/

* Cheat sheet
  - https://en.wikiversity.org/wiki/DevOps/Ansible
    : debug msg='sshpass -p{{ ansible_ssh_pass }} ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no {{ ansible_ssh_user }}@{{ ansible_host }}'

#+BEGIN_SRC yaml
      - name: send a message with a report link using Slack markup
        slack:
          token: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          msg: |
            goaccess report is available at <https://malscan.intr/reports/access-{{ site }}.html> and you could generate it again by invoking:
            ```curl "http://malscan:8052/api/v2/job_templates/10/launch/" -H "Authorization: Bearer xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" -H "Content-Type: application/json" --data '{"extra_vars":{"host":"{{ host }}","home":"{{ home }}","site":"{{ site }}"}}'```
        delegate_to: localhost
#+END_SRC

* Articles
- [[https://habr.com/ru/post/522702/][Agreements as Code: как отрефакторить инфраструктуру и не сломаться / Хабр]]

* Roles
- [[https://github.com/geerlingguy/ansible-role-jenkins][geerlingguy/ansible-role-jenkins: Ansible Role - Jenkins CI]]
