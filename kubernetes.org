:PROPERTIES:
:ID:       169228af-10b2-4a7e-b9fa-0619733b14ed
:END:

* Learning
- [[https://github.com/run-x/awesome-kubernetes][run-x/awesome-kubernetes: A curated list for awesome kubernetes projects, tools and resources.]]
- [[https://github.com/golang-design/under-the-hood][golang-design/under-the-hood: üìö Go: Under The Hood | https://golang.design/under-the-hood]]
- [[http://itisgood.ru/2019/11/18/raspredelennoe-hranenie-dannyh-v-kubernetes/][‚ò∏Ô∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Kubernetes ‚Äî IT is good]]
- Pin pod to specific node:
  - Affinity
  - Toleration
  - Taint
- Show documentation
  - =kubectl explain deployment=
  - =kubectl explain deployment.spec=
- Port forwarding
  - =kubectl port-forward my-deployment-xxxxxxxxxx-xxxxx 8005:80 &=
- [[https://github.com/erebe/personal-server][erebe/personal-server: Personal server configuration with k3s]]
- [[https://github.com/Vinum-Security/kubernetes-security-checklist][Vinum-Security/kubernetes-security-checklist: Kubernetes Security Checklist and Requirements - All in One (authentication, authorization, logging, secrets, configuration, network, workloads, dockerfile)]]
- [[https://habr.com/ru/company/netologyru/blog/580902/][–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–≤ –¥–ª—è —É–∑–ª–æ–≤ Kubernetes: —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ / –•–∞–±—Ä]]
- [[https://serveradmin.ru/kubernetes-ingress/][–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Ingress controller –≤ Kubernetes ‚Äî Server Admin]]
- [[https://habr.com/ru/company/otus/blog/653973/][–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–ª–∏—Ç–∏–∫ —Å –ø–æ–º–æ—â—å—é Minikube / –•–∞–±—Ä]]
- [[https://habr.com/ru/post/657641/][–ö–∞–∫ Kubernetes —Å–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: –ò–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ / –•–∞–±—Ä]]
- [[https://wiki.archlinux.org/title/Kubernetes][Kubernetes - ArchWiki]]
- [[https://kubernetes.io/docs/reference/glossary/?fundamental=true][Glossary | Kubernetes]]
- [[https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/][Set Kubelet parameters via a config file | Kubernetes]]
- [[https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/][Creating a cluster with kubeadm | Kubernetes]]
- [[https://kubernetes.io/docs/concepts/cluster-administration/addons/][Installing Addons | Kubernetes]]

* Tools
- [[https://github.com/furiko-io/furiko][furiko-io/furiko: Cloud-native, enterprise-level cron job platform for Kubernetes]]
- [[https://github.com/cloud-native-skunkworks/ubuntu-operator][cloud-native-skunkworks/ubuntu-operator: Control Ubuntu from Kubernetes.]]
- [[https://werf.io/][Giterministic CLI tool | werf]]
- [[https://github.com/kei6u/kubectl-explore][kei6u/kubectl-explore: A better kubectl explain with the fuzzy finder]]
- [[https://github.com/openebs/openebs][openebs/openebs: Leading Open Source Container Attached Storage, built using Cloud Native Architecture, simplifies running Stateful Applications on Kubernetes.]]
- [[https://github.com/datreeio/datree][datreeio/datree: Prevent Kubernetes misconfigurations from reaching production (again üò§ )! The CLI integration provides a policy enforcement solution to run automatic checks for rule violations. See our docs: https://hub.datree.io]]
- [[https://github.com/reactive-tech/kubegres][reactive-tech/kubegres: Kubegres is a Kubernetes operator allowing to create a cluster of PostgreSql instances and manage databases replication, failover and backup.]]
- [[https://github.com/Trois-Six/k8s-diagrams][Trois-Six/k8s-diagrams: Create diagrams from the Kubernetes API with go-diagrams.]]
- [[https://github.com/saschagrunert/kubernix][saschagrunert/kubernix: Single dependency Kubernetes clusters for local testing, experimenting and development]]
- [[https://github.com/deislabs/krustlet][deislabs/krustlet: Kubernetes Rust Kubelet]]
- [[https://github.com/darkbitio/k8s-mirror][darkbitio/k8s-mirror: Creates a local mirror of a Kubernetes cluster in a docker container to support offline reviewing]]
- [[https://github.com/k0sproject/k0s][k0sproject/k0s: k0s - Zero Friction Kubernetes]]
- [[https://github.com/kvaps/kubectl-build][kvaps/kubectl-build: Build dockerfiles directly in your Kubernetes cluster.]]
- [[https://habr.com/ru/company/flant/blog/524196/#][–û–±–∑–æ—Ä k9s ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è Kubernetes]]
- [[https://habr.com/ru/company/southbridge/blog/523790/][12 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –¥–µ–ª–∞—é—â–∏—Ö Kubernetes –ª–µ–≥—á–µ / –ë–ª–æ–≥ –∫–æ–º–ø–∞–Ω–∏–∏ Southbridge / –•–∞–±—Ä]]
- [[https://habr.com/ru/company/southbridge/blog/523358/][11 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –¥–µ–ª–∞—é—â–∏—Ö Kubernetes –ª—É—á—à–µ / –ë–ª–æ–≥ –∫–æ–º–ø–∞–Ω–∏–∏ Southbridge / –•–∞–±—Ä]]
- [[https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml][YAML and Kubernetes syntax support - Visual Studio Marketplace]]
- [[https://github.com/troytop/cfk8sterm][troytop/cfk8sterm: A ttyd web terminal image on Alpine with cf, kubectl, and other tools]]
- [[https://github.com/omrikiei/ktunnel][omrikiei/ktunnel: A cli that exposes your local resources to kubernetes]]
- [[https://github.com/dty1er/kubecolor][dty1er/kubecolor: colorizes kubectl output]]
- [[https://github.com/lensapp/lens][lensapp/lens: Lens - The Kubernetes IDE]]
- [[https://github.com/devspace-cloud/devspace][devspace-cloud/devspace: DevSpace - The Fastest Developer Tool for Kubernetes ‚ö° Automate your deployment workflow with DevSpace and develop software directly inside Kubernetes.]]
- [[https://github.com/lastbackend/lastbackend][lastbackend/lastbackend: System for containerized apps management. From build to scaling.]]
- [[https://github.com/alexellis/arkade][alexellis/arkade: Your one-stop CLI for Kubernetes]]
- [[https://github.com/rancher/k3s][rancher/k3s: Lightweight Kubernetes]]
- [[https://k3s.io/][K3s: Lightweight Kubernetes]]
- [[https://github.com/c-bata/kube-prompt][c-bata/kube-prompt: An interactive kubernetes client featuring auto-complete.]]
- [[https://github.com/ContainerSolutions/kubernetes-examples][ContainerSolutions/kubernetes-examples: Minimal self-contained examples of standard Kubernetes features and patterns in YAML]]
- [[https://github.com/tdihp/dspcap][tdihp/dspcap: A humble bash script set that uses daemonset to capture tcpdump from all k8s nodes, then collect the captures.]]
- [[https://github.com/pulumi/kubespy][pulumi/kubespy: Tools for observing Kubernetes resources in real time, powered by Pulumi.]]
- [[https://github.com/sbstp/kubie][sbstp/kubie: A more powerful alternative to kubectx and kubens]]
- [[https://github.com/saschagrunert/kubernix][saschagrunert/kubernix: Single dependency Kubernetes clusters for local testing, experimenting and development]]
- [[https://github.com/kdash-rs/kdash][kdash-rs/kdash: A simple and fast dashboard for Kubernetes]]
- [[https://github.com/kris-nova/naml][kris-nova/naml: Not another markup language. Framework for replacing Kubernetes YAML with Go.]]
- [[https://github.com/armosec/kubescape][armosec/kubescape: kubescape is the first tool for testing if Kubernetes is deployed securely as defined in Kubernetes Hardening Guidance by to NSA and CISA (https://www.nsa.gov/News-Features/Feature-Stories/Article-View/Article/2716980/nsa-cisa-release-kubernetes-hardening-guidance/)]]
- [[https://github.com/pixie-io/pixie][pixie-io/pixie: Instant Kubernetes-Native Application Observability]]
- [[https://github.com/google/ko][google/ko: Build and deploy Go applications on Kubernetes]]
- [[https://kubevirt.io/][KubeVirt.io Building a virtualization API for Kubernetes]]
- [[https://kompose.io/][Kubernetes + Compose = Kompose]]
- [[https://github.com/kubenav/kubenav][kubenav/kubenav: kubenav is the navigator for your Kubernetes clusters right in your pocket.]]
- [[https://habr.com/ru/company/flant/blog/575972/][–û–±–∑–æ—Ä Kalm ‚Äî –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –¥–µ–ø–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–∏ –≤ Kubernetes / –•–∞–±—Ä]]
- [[https://github.com/kubevious/kubevious][kubevious/kubevious: Kubevious - application centric Kubernetes UI and continuous assurance provider]]
- [[https://habr.com/ru/post/575646/][Helmwave v0.12.8 / –•–∞–±—Ä]]
  - [[https://github.com/helmwave/helmwave][helmwave/helmwave: üåä Helmwave is like docker-compose for @helm]]
- [[https://github.com/ksync/ksync][ksync/ksync: Sync files between your local system and a kubernetes cluster.]]
- [[https://github.com/teamcode-inc/kubeorbit][teamcode-inc/kubeorbit: Test your application on Kubernetes in a brand new simple way‚ö°]]
- [[https://github.com/Ladicle/kubectl-rolesum][Ladicle/kubectl-rolesum: Summarize Kubernetes RBAC roles for the specified subjects.]]
- [[https://github.com/aquasecurity/starboard][aquasecurity/starboard: Kubernetes-native security toolkit]]
- [[https://github.com/up9inc/mizu][up9inc/mizu: API traffic viewer for Kubernetes enabling you to view all API communication between microservices. Think TCPDump and Wireshark re-invented for Kubernetes]]
- [[https://github.com/cloudnativelabs/kube-router][cloudnativelabs/kube-router: Kube-router, a turnkey solution for Kubernetes networking.]]
- [[https://github.com/box/kube-iptables-tailer][box/kube-iptables-tailer: A service for better network visibility for your Kubernetes clusters.]]

** minikube
- [[https://habr.com/ru/company/vk/blog/648117/][–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å Minikube: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã / –•–∞–±—Ä]]

* Installation
- [[https://github.com/miekg/vks][miekg/vks: Virtual Kubelet Provider for Systemd]]
- [[https://github.com/techno-tim/k3s-ansible][techno-tim/k3s-ansible: A fully automated HA k3s etcd install with kube-vip, MetalLB, and more]]
- [[https://kubernetes.io/docs/reference/setup-tools/kubeadm/][Kubeadm | Kubernetes]]
  - [[https://github.com/jpetazzo/ampernetacle][jpetazzo/ampernetacle deploy a Kubernetes cluster on Oracle Cloud Infrastructure]]
- [[https://github.com/kubealex/libvirt-k8s-provisioner][kubealex/libvirt-k8s-provisioner: Automate your k8s installation]]

** Rancher

- [[https://rancher.com/quick-start][Getting Started with Kubernetes | Rancher Quick Start]]

#+begin_example
  01 Prepare a Linux Host
  Prepare a Linux host with supported version of Docker on the host.

  02 Start the server
  To install and run Rancher, execute the following Docker command on your host:

  $ sudo docker run --privileged -d --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher

  To access the Rancher server UI, open a browser and go to the hostname or
  address where the container was installed. You will be guided through setting
  up your first cluster.
#+end_example

* Monitoring
- [[https://habr.com/ru/post/586206/][Kubernetes monitoring –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É (–ù–∏–∫–æ–ª–∞–π –•—Ä–∞–º—á–∏—Ö–∏–Ω) / –•–∞–±—Ä]]

* Operators
- [[https://github.com/flant/shell-operator][flant/shell-operator: Shell-operator is a tool for running event-driven scripts in a Kubernetes cluster]]

* Misc
- [[https://github.com/aquasecurity/kube-bench][aquasecurity/kube-bench: Checks whether Kubernetes is deployed according to security best practices as defined in the CIS Kubernetes Benchmark]]
- [[https://github.com/kubevirt/kubevirt][kubevirt/kubevirt: Kubernetes Virtualization API and runtime in order to define and manage virtual machines.]]
- [[https://github.com/kubernetes-sigs/kind][kubernetes-sigs/kind: Kubernetes IN Docker - local clusters for testing Kubernetes]]
- [[https://github.com/criticalstack/quake-kube][quake-kube Quake 3 on Kubernetes]]
- [[https://github.com/oneinfra/oneinfra][oneinfra/oneinfra: Kubernetes as a Service]]
- [[https://github.com/hjacobs/kubernetes-failure-stories][hjacobs/kubernetes-failure-stories: Compilation of public failure/horror stories related to Kubernetes]]
- [[https://github.com/kubernetes/kops][kubernetes/kops: Kubernetes Operations (kops) - Production Grade K8s Installation, Upgrades, and Management]]
- [[https://github.com/argoproj/argo-cd/][argoproj/argo-cd: Declarative continuous deployment for Kubernetes.]]
- [[https://github.com/criticalstack/quake-kube][criticalstack/quake-kube: Quake 3 on Kubernetes]]

* How-to
- [[https://habr.com/ru/post/569124/][C–∞–º —Å–µ–±–µ –æ–±–ª–∞–∫–æ: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ELK –∏ TICK —Å—Ç–µ–∫–æ–≤ –≤ Kubernetes / –•–∞–±—Ä]]

* Katacoda Kubernetes

Minikube is a tool that makes it easy to run Kubernetes locally. Minikube runs a single-node Kubernetes cluster inside a VM on your laptop for users looking to try out Kubernetes or develop with it day-to-day.

More details can be found at https://github.com/kubernetes/minikube

** Step 1 - Start Minikube
Minikube has been installed and configured in the environment. Check that it is properly installed, by running the minikube version command:

minikube version

Start the cluster, by running the minikube start command:

minikube start --wait=false

Great! You now have a running Kubernetes cluster in your online terminal. Minikube started a virtual machine for you, and a Kubernetes cluster is now running in that VM.

** Step 2 - Cluster Info
The cluster can be interacted with using the kubectl CLI. This is the main approach used for managing Kubernetes and the applications running on top of the cluster.

Details of the cluster and its health status can be discovered via kubectl cluster-info

To view the nodes in the cluster using kubectl get nodes

If the node is marked as NotReady then it is still starting the components.

This command shows all nodes that can be used to host our applications. Now we have only one node, and we can see that it‚Äôs status is ready (it is ready to accept applications for deployment).

** Step 3 - Deploy Containers
With a running Kubernetes cluster, containers can now be deployed.

Using kubectl run, it allows containers to be deployed onto the cluster - kubectl create deployment first-deployment --image=katacoda/docker-http-server

The status of the deployment can be discovered via the running Pods - kubectl get pods

Once the container is running it can be exposed via different networking options, depending on requirements. One possible solution is NodePort, that provides a dynamic port to a container.

kubectl expose deployment first-deployment --port=80 --type=NodePort

The command below finds the allocated port and executes a HTTP request.

export PORT=$(kubectl get svc first-deployment -o go-template='{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}{{"\n"}}{{end}}{{end}}')
echo "Accessing host01:$PORT"
curl host01:$PORT

The result is the container that processed the request.

** Step 4 - Dashboard
Enable the dashboard using Minikube with the command minikube addons enable dashboard

Make the Kubernetes Dashboard available by deploying the following YAML definition. This should only be used on Katacoda.

kubectl apply -f /opt/kubernetes-dashboard.yaml

The Kubernetes dashboard allows you to view your applications in a UI. In this deployment, the dashboard has been made available on port 30000 but may take a while to start.

To see the progress of the Dashboard starting, watch the Pods within the kube-system namespace using kubectl get pods -n kubernetes-dashboard -w

Once running, the URL to the dashboard is https://2886795308-30000-simba08.environments.katacoda.com/

* Cheat sheet

#+begin_example
  [root@vm30:~]# lsns | grep nginx
  4026532800 mnt         2  80051 root             nginx: master process nginx -g daemon off;
  4026532801 pid         2  80051 root             nginx: master process nginx -g daemon off;
  4026532802 cgroup      2  80051 root             nginx: master process nginx -g daemon off;
  4026532865 mnt        20  90081 101              /usr/bin/dumb-init -- /nginx-ingress-controller --publish-service=ingress-nginx/ingress-nginx-controller --election-id=ingress-controller-leader --controller-class=k8s.io/ingress-nginx --ingress-class=nginx --configmap=ingress-nginx/ingress-nginx-controller --validating-webhook=:8443 --validating-webhook-certificate=/usr/local/certificates/cert --validating-webhook-key=/usr/local/certificates/key
  4026532866 pid        20  90081 101              /usr/bin/dumb-init -- /nginx-ingress-controller --publish-service=ingress-nginx/ingress-nginx-controller --election-id=ingress-controller-leader --controller-class=k8s.io/ingress-nginx --ingress-class=nginx --configmap=ingress-nginx/ingress-nginx-controller --validating-webhook=:8443 --validating-webhook-certificate=/usr/local/certificates/cert --validating-webhook-key=/usr/local/certificates/key
  4026532867 cgroup     20  90081 101              /usr/bin/dumb-init -- /nginx-ingress-controller --publish-service=ingress-nginx/ingress-nginx-controller --election-id=ingress-controller-leader --controller-class=k8s.io/ingress-nginx --ingress-class=nginx --configmap=ingress-nginx/ingress-nginx-controller --validating-webhook=:8443 --validating-webhook-certificate=/usr/local/certificates/cert --validating-webhook-key=/usr/local/certificates/key

  [root@vm30:~]# nsenter -t 80051 -n curl localhost 
  <!DOCTYPE html>
  <html>
  ...
#+end_example
