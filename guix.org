:PROPERTIES:
:ID:       1a04d6b5-4a18-4e60-8dce-283389185347
:END:
#+title: Guix

* API

Subject: Re: Guix Data Service client module
Message-ID: <878rupgxsd.fsf@gnu.org>
#+begin_example
  scheme@(guile-user)> (define s (open-data-service "https://data.guix.gnu.org"))
  scheme@(guile-user)> (car (package-versions (lookup-package s "emacs")))
  $20 = #<<package-version> string: "27.2" branches: (#<<branch> name: "master" repository-id: 1>)>
  scheme@(guile-user)> (car (package-version-history s (car (package-version-branches $20)) "emacs"))
  $21 = #<<package-version-range> version: "27.2" first-revision: #<<revision> commit: "cc33f50d0e2a7835e99913226cb4c4b0e9e961ae" date: #<date nanosecond: 0 second: 54 minute: 30 hour: 20 day: 25 month: 3 year: 2021 zone-offset: 0>> last-revision: #<<revision> commit: "de38ccf2e0bb2fd21393925c296b65dca7499bd3" date: #<date nanosecond: 0 second: 37 minute: 48 hour: 13 day: 4 month: 2 year: 2022 zone-offset: 0>>>
#+end_example
* articles
- [[https://guix.gnu.org/blog/2020/running-a-ganeti-cluster-on-guix/][Running a Ganeti cluster on Guix]]

* Awesome

** Andrew Tropin (rde)
- [[https://www.youtube.com/c/TROP1N/featured][(156) Andrew Tropin - YouTube]]
- [[https://sr.ht/~abcdw/rde/][rde: Tools for managing reproducible development environments w/ guix]]
- [[https://diode.zone/c/andrewtropin/videos][Video channel videos - Diode Zone]]

** The GNU Guy
- [[https://video.hardlimit.com/video-channels/the_gnu_guy/videos][The GNU Guy Video channel videos - PeerTube]]

** kei
https://notabug.org/kei/kei_guix_packages

** ng0
https://git.krosos.org

** Alex Kost <alezost@gmail.com>
https://github.com/alezost/shepherd-config

** David
https://git.dthompson.us/dotfiles.git/blob/HEAD:/dotfiles/.config/shepherd/init.scm

** Christopher Baines <mail@cbaines.net> (aka Efraim)
https://gitlab.com/Efraim/guix/

** Ludovic (aka civodul)
http://web.fdn.fr/~lcourtes/

** Andy Wingo <wingo@igalia.com>
https://gitlab.com/users/wingo/

** Mike Gerwitz
https://mikegerwitz.com/projects/easejs/

** janneke
https://gitlab.com/janneke/guix.git

** jlicht
[[https://notabug.org/jlicht/guix-pkgs][jlicht/guix-pkgs: A repo containing my own set of guix packages. - NotABug.org: Free code hosting]]

** Marius Bakke
[[https://github.com/mbakke][mbakke (Marius Bakke)]]

** pantherx
[[https://git.pantherx.org/mirror][mirror · GitLab]]

** GitHub
- [[https://github.com/ethancedwards8/nixos-guix][ethancedwards8/nixos-guix]]
- [[https://github.com/ryanprior/emacs-guix-packaging][ryanprior/emacs-guix-packaging: Tools for writing and maintaining Guix packages]]
- [[https://gitlab.com/daym/guix-on-docker/][Danny Milosavljevic / guix-on-docker · GitLab]]
- [[https://github.com/guix-science/guix-science][guix-science/guix-science: Free scientific packages for GNU guix that cannot be upstreamed.]]
- [[https://github.com/meedstrom/guix-channel][meedstrom/guix-channel]]
- [[https://github.com/ipdb/bigchaindb-guix][ipdb/bigchaindb-guix]]
- [[https://github.com/alphagov/govuk-guix][alphagov/govuk-guix: Package, service and system definitions using GNU Guix for software and systems related to GOV.UK.]]
- [[https://github.com/giuliano108/guix-packages][giuliano108/guix-packages: Guix on WSL2, packages and notes]]
- [[https://github.com/encryption4genetics/HEGP-website][encryption4genetics/HEGP-website]]
- [[https://github.com/genetics-statistics/GEMMA][genetics-statistics/GEMMA: Genome-wide Efficient Mixed Model Association]]
- [[https://github.com/ipdb/bigchaindb-guix][ipdb/bigchaindb-guix]]
- [[https://github.com/foo-dogsquared/guixsd-config][foo-dogsquared/guixsd-config: My NixOS-config-inspired GuixSD config.]]
- [[https://github.com/MorganJamesSmith/morgan-guix-channel/tree/master/packages][morgan-guix-channel/packages at master · MorganJamesSmith/morgan-guix-channel (NVIDIA driver)]]
- [[https://github.com/aartaka/chur-guix][aartaka/chur-guix: A collection of pentesting packages for Guix package manager]]
- [[https://github.com/bqv/nixrc/blob/live/guix/default.nix][nixrc/default.nix at live · bqv/nixrc]]
- [[https://github.com/cr-jr/freikugel/blob/main/system/etc/config.scm][freikugel/config.scm at main · cr-jr/freikugel]]
- [[https://github.com/babariviere/guix-emacs][babariviere/guix-emacs: Guix channel for automatically generated emacs packages.]]
- [[https://github.com/SystemCrafters/guix-live-image][SystemCrafters/guix-live-image: Up-to-date live images for trying out GNU Guix!]]
- [[https://github.com/sash-kan/guix-on-freebsd][sash-kan/guix-on-freebsd]]
- [[https://github.com/sharad/guix-more/tree/master/more/packages][guix-more/more/packages at master · sharad/guix-more]]

** Channels
- [[https://github.com/gabrielbma/guix-channel][gabrielbma/guix-channel virtualbox]]
- [[https://github.com/weidtn/guix-channel][weidtn/guix-channel: My guix channel babashka]]
- [[https://github.com/alam0rt/guix-channel][alam0rt/guix-channel samba package and service]]
- [[https://github.com/minikN/minikn-guix][minikN/minikn-guix]]
  - terraform

** GitLab
- [[https://gitlab.com/guix-gaming-channels/games/-/tree/master/][Guix Gaming Channels / Games · GitLab]]

** Debian
<875z6atqic.fsf@yucca>
- https://tracker.debian.org/pkg/guix
- https://salsa.debian.org/debian/guix/-/tree/debian/devel/debian/patches
- https://ci.debian.net

** Translation
- [[https://translate.fedoraproject.org/projects/guix/][guix @ Fedora Weblate]]
  - [[https://issues.guix.gnu.org/26302#88][[website] translations]]

** Reports
- [[https://ngyro.com/pog-reports/2021-10-22/][Preservation of Guix Report]]

** Patches
- [[https://yhetil.org/guix-patches/][unofficial mirror of guix-patches@gnu.org]]
- [[https://debbugs.gnu.org/rrd/guix-patches.html][Guix-patches bug statistics]]
- [[https://guix-forge.systemreboot.net/manual/dev/en/][guix-forge]]

** Substitutes
- guix.cbaines.net
- [[https://www.mail-archive.com/guix-devel@gnu.org/msg55848.html][https://mirrors.sjtug.sjtu.edu.cn/guix SJTUG's Guix mirror is online now]]
- Made a guix site mirror/proxy. It's available both in clearnet and yggdrasil. 
  - http://167.172.37.172/
  - http://[204:cbf:3e07:e67a:424f:93bc:fc5c:b3dc]/

* Build from Scheme expression

  #+BEGIN_SRC sh
    guix build -e '(@@ (gnu packages commencement) glibc-utf8-locales-final)'
  #+END_SRC

* Build system monad

  #+begin_src scheme
    (use-modules (guix store)
                 (guix gexp)
                 (guix derivations)
                 (guix monads)
                 (json))

    (define %packer-operating-system
      `())

    (define store (open-connection))
    (pk
     (build-derivations
      store
      (list
       (run-with-store store
         (mlet %store-monad ((drv (text-file "packer-guix.json"
                                             (scm->json-string %packer-operating-system))))
           (lower-object
            (program-file "packer-build-guix"
                          #~(begin
                              (system* "/home/oleg/.nix-profile/bin/packer" "build" #$drv)))))))))

  #+end_src

  #+BEGIN_SRC scheme
    (use-modules (gnu)
                 (guix store))

    ;; Deriviation
    (define d
      (run-with-store (open-connection) (operating-system-derivation %system-magnolia-bare)))

    ;; Build deriviation
    (define s (open-connection))

    (build-derivations s (list d))
  #+END_SRC

* Cheat sheet

  - Tmux in a container
  : tmux: need UTF-8 locale (LC_CTYPE) but have ANSI_X3.4-1968

It is not a bug and you can run

  : guix environment --container --ad-hoc glibc-utf8-locales tmux …

and then:

  : export GUIX_LOCPATH=$GUIX_ENVIRONMENT/lib/locale

or use the option --preserve.

  - Show derivation output (Message-ID: <8735wnxiok.fsf@gnu.org>)
#+begin_example
scheme@(guix-user)> ,use(guix)
scheme@(guix-user)> (define s (open-connection ))
scheme@(guix-user)> ,use(gnu packages base)
scheme@(guix-user)> (package-derivation s coreutils #:graft? #f)
$1 = #<derivation /gnu/store/k0h3zahr74ky7z4hy5nklk5ar1b841nc-coreutils-8.32.drv => /gnu/store/yvsd53rkbvy9q8ak6681hai62nm6rf31-coreutils-8.32-debug /gnu/store/n8awazyldv9hbzb7pjcw76hiifmvrpvd-coreutils-8.32 7fc814f2e1e0>
scheme@(guix-user)> (derivation-outputs $1)
$2 = (("debug" . #<<derivation-output> path: "/gnu/store/yvsd53rkbvy9q8ak6681hai62nm6rf31-coreutils-8.32-debug" hash-algo: #f hash: #f recursive?: #f>) ("out" . #<<derivation-output> path: "/gnu/store/n8awazyldv9hbzb7pjcw76hiifmvrpvd-coreutils-8.32" hash-algo: #f hash: #f recursive?: #f>))
scheme@(guix-user)> (derivation->output-path $1 "out")
$3 = "/gnu/store/n8awazyldv9hbzb7pjcw76hiifmvrpvd-coreutils-8.32"

Why #:graft? #f?  Because if you enable graft, you’ll potentially have
to build/download the thing, and that wouldn’t buy you anything because
the set of file names is the same in the grafted package.
#+end_example

  - Extensions
#+begin_quote
From: zimoun
Subject: Re: guix environment --profile with --ad-hoc
Date: Mon, 15 Mar 2021 10:25:17 +0100 (1 hour, 7 minutes, 51 seconds ago)

Hi Lars.

On Sat, 13 Mar 2021 at 08:59, Lars-Dominik Braun wrote:

>> Instead, I'd like the following behaviour:
>> […]
> hm, I feel that’s unnecessarly complex with lots of if’s and else’s. If
> I could design the frontend from scratch, I’d have one command that does
> profile/environment manipulation (because they’re essentially the same)
> and one that can set them up for use. In that world you’d do
>
> $ guix environment $(guix profile -m manifest.scm -i additional-package)

For the record, such command (as “profile manager”) had been discussed,
for example:

<https://lists.gnu.org/archive/html/guix-devel/2019-10/msg00613.html>
<https://lists.gnu.org/archive/html/guix-devel/2019-11/msg00019.html>
<https://lists.gnu.org/archive/html/guix-devel/2020-04/msg00477.html>


Note that the (still experimental and) undocumented GUIX_EXTENSIONS_PATH
allows to test new commands design without writing them in stone.
Basically, set the variable GUIX_EXTENSIONS_PATH to the path containing
the Guix module ’(guix extensions profile)’ then “guix help” should list
the extension and “guix profile” should work.
#+end_quote

  - [[https://buildd.debian.org/status/package.php?p=guix&suite=experimental][Debian Buildd status for guix (experimental)]]

  - Upgrade packages in default profile
    : guix refresh $(guix package -I | cut -f1)

  - Clear DNS entries
    : sudo herd invalidate nscd hosts
    : sudo herd restart nscd

  - How can I have a static IP on one NIC and DHCP on the other?
    Message-ID: <8828ff9c6f2127f6210443046b9011f7276ae0a1.camel@divoplade.fr>

  - SBCL (StumpWM)
  #+begin_src lisp
    (let* ((guix-profile (pathname-as-directory (getenv "GUIX_PROFILE")))
           (module-dir (merge-pathnames "share/common-lisp/sbcl/" guix-profile)))
      (set-module-dir module-dir))

    (load-module "ttf-fonts")
  #+end_src

  - spell check
#+begin_quote
Subject: Re: Why Emacs config file disables Welcome message only if this line places to .emacs but not in .emacs.d/init.el
Date: Mon, 04 Jan 2021 19:16:33 +0300 (4 days, 47 minutes, 59 seconds ago)
Message-ID: <87zh1or82m.fsf@gmail.com>

> My next step is russian spell check. Need to have some basics of how to deal with this great instrument!

Here is my configuration:

1. I installed "aspell", "aspell-dict-en", and "aspell-dict-ru" packages.

2. I put the following into my ~/.bash_profile:
   (Perhaps, this step is not needed: I don't know if it is
   auto-configured by Guix nowadays; it was not in the past)

    aspell_dir="<my-guix-profile>/lib/aspell"
    if [ -d $aspell_dir ]; then
        export ASPELL_CONF="dict-dir $aspell_dir"
    fi

3. Now, you should be able to select "ru-..." languages after
   "M-x ispell-change-dictionary".
   You can even set it as default in your emacs config like this:

   (with-eval-after-load 'ispell
     (ispell-change-dictionary "ru-yeyo" 'global))

4. Finally, you can use commands like "ispell-word" (bound to "M-$") or
   "ispell-region".
#+end_quote

  - wayland sway via sddm
    #+begin_src scheme
      (service sddm-service-type
               ;; Logs to ~/.local/share/sddm/wayland-session.log.
               (sddm-configuration
                (auto-login-user "nckx") (relogin? #t)
                (auto-login-session "sway.desktop")
                (display-server "wayland")
                (minimum-vt 1)
                (xorg-configuration
                 (xorg-configuration
                  (keyboard-layout keyboard-layout)))))
    #+end_src

  - [[https://framagit.org/tyreunom/guix-android][Julien Lepiller / guix-android · GitLab]]

  - guix shell shebang
    : #!/usr/bin/env -S guix shell --

  - reconfigure or reboot (press Ctrl+C if reconfigure succeeded and machines is available via SSH)
    : sh -c '/var/guix/profiles/per-user/root/current-guix-9-link/bin/guix system reconfigure --load-path=/home/oleg/dotfiles/fiore/modules /home/oleg/dotfiles/spb.scm; echo DONE; sleep $((60 * 10)); echo b > /proc/sysrq-trigger'

  - debian chroot

#+begin_example
  There's a debootstrap package which allows you
  to create a chroot environment.

  Something like:

    guix shell debootstrap -- debootstrap --arch=amd64 bullseye my-bullseye-install

  and then:

    mount -t proc proc my-bullseye-install/proc
    mount -t devpts devpts my-bullseye-install/dev/pts
    chroot my-bullseye-install /bin/bash --login

  You'll probably need to run all these as root.
#+end_example

  - gexp
  #+begin_src bash
    #!/usr/bin/env bash

    cat > /tmp/script.awk <<'EOF'
    /building path/ { gsub("`",""); gsub("'", ""); print $NF }
    EOF

    out="$(guile --no-auto-compile /tmp/gexp/run.scm 2>&1)"

    if [[ $out == *"building path"* ]]
    then
        script="$(echo "$out" | awk -f /tmp/script.awk)"
        eval "$script"
    else
        echo "$out"
    fi
  #+end_src

  - COLUMNS=999 guix build -f ./40272.scm

  - guix graph -M2 -t reverse-package eigen | xdot -f fdp -

  - guix graph path
    #+begin_src bash
      $ guix graph --path guile-gnunet -e '(@@ (gnu packages tls) openssl-1.0)' -t bag-emerged
      guile-gnunet@0.0-1.d12167a
      gnunet@0.13.1
      libextractor@1.11
      ffmpeg@4.4
      rav1e@0.4.1
      rust@1.45.2
      rust@1.44.1
      rust@1.43.0
      rust@1.42.0
      rust@1.41.1
      rust@1.40.0
      rust@1.39.0
      rust@1.38.0
      rust@1.37.0
      rust@1.36.0
      rust@1.35.0
      rust@1.34.1
      rust@1.33.0
      rust@1.32.0
      rust@1.31.1
      rust@1.30.1
      rust@1.29.2
      rust@1.28.0
      rust@1.27.2
      rust@1.26.2
      rust@1.25.0
      openssl@1.0.2u
    #+end_src

  - program-file
  #+begin_src scheme
    (use-modules (guix gexp)
                 (guix store)
                 (guix derivations))
    (pk 
     (let ((store (open-connection)))
       (build-derivations store
                          (list (run-with-store store
                                  (lower-object
                                   (program-file "program-file-example-script-4"
                                                 #~(begin
                                                     (display "program-file-example start\n"))))))))
     )
  #+end_src

  - strace -c $(make as-derivation)/bin/guix

  - <86eek28i82.fsf@gmail.com> Re: Bugs squashing in Org-mode

  - guix-daemon C
eval "$(guix environment --search-paths guix)"
export C_INCLUDE_PATH="$HOME"/src/guix-master/nix:"$HOME"/src/guix-master/nix/libutil:"$C_INCLUDE_PATH"
export CPLUS_INCLUDE_PATH="$HOME"/src/guix-master/nix:"$HOME"/src/guix-master/nix/libutil:"$CPLUS_INCLUDE_PATH"

  - GUIX_DAEMON_SOCKET=ssh://example.com guix build hello

  - <87eekdrcrw.fsf@gnu.org> services: unattended-upgrade: 'search-paths' field.

  - <87k0u8v42a.fsf@ambrevar.xyz> Re: Workflow with mu4e + magit for sending patchsets to guix?

  - <87zh336opm.fsf@elephly.net> Music production on Guix https://guix.gnu.org/en/blog/2020/music-production-on-guix-system/

  - Xen hypervisor guix-devel@gnu.org Message-ID: <20201126123312.4f12b8e1@scratchpost.org>

  - [[https://gitlab.com/daym/guix-on-docker/][Guix Docker Image on docker-registry]]
    : docker run -d --name guix registry.gitlab.com/daym/guix-on-docker
    : docker exec guix guix pack hello

  - mailing list Message-ID: <87k0u9x075.fsf@ambrevar.xyz>
#+begin_example
(defvar ambrevar/known-mailing-list-archives
  '(("help-guix@gnu.org" . "guix-user")
    ("guix-devel@gnu.org" . "guix-devel")
    ("guix-bugs" . "guix-bugs")
    ("guix-patches" . "guix-patches"))
  "Alist of mail adresses and their Yhetil name.")

(defun ambrevar/guess-yhetil-link (message-id)
  (let* ((all-addresses
          (mapcar #'second
                  (mail-extract-address-components
                   (mapconcat #'identity
                              (list
                               (notmuch-show-get-header :To)
                               (notmuch-show-get-header :Cc))
                              ", ")
                   'all)))
         (mailing-list
          (cdr (seq-find
                (lambda (pair)
                  (member (car pair) all-addresses))
                ambrevar/known-mailing-list-archives))))
    (when mailing-list
      (concat "https://yhetil.org/"
              mailing-list "/" message-id))))

(add-to-list 'notmuch-show-stash-mlarchive-link-alist
             (cons "Yhetil" #'ambrevar/guess-yhetil-link))
#+end_example

  - geiser
#+begin_quote
> ELISP> (require 'guix-repl)
> guix-repl
> ELISP> (guix-eval-in-repl ",use(guix scripts build)")
> nil
> ELISP> (guix-eval-in-repl "(guix-build \"nyxt\" \"--no-grafts\" \"--check\")")
#+end_quote

  - guix processes
#+begin_example
  $ sudo guix processes | recsel -p SessionPID,LockHeld -e 'LockHeld ~ "chromium"'
  SessionPID: 31410
  LockHeld: /gnu/store/kdsp1pjj6znaxzs3d0vfwdcddc436g7f-ungoogled-chromium-86.0.4240.183-0.b68e17f.lock

  SessionPID: 3455
  LockHeld: /gnu/store/bhy3c5damrpzx7hdp8bam1lk2rk7789r-ungoogled-chromium-86.0.4240.183-0.b68e17f.lock
#+end_example

#+begin_example
$ guix processes -f normalized \
  | recsel \
    -t ChildProcess \
    -j Session \
    -p PID,Session.PID \
  | recfmt '{{PID}} {{Session.PID}}'
23607 2356724713 2356725002 23576
#+end_example

#+begin_example
$ guix processes \
  | recsel -p ChildPID,SessionPID \
  | recfmt '{{ChildPID}} {{SessionPID}}'
23607 23567
#+end_example

  - guix-daemon in a docker
    : guix pack guix -f docker -S /bin=bin --entry-point="bin/guix-daemon --disable-chroot"

  - Update po templates
    : po4a-updatepo -M UTF-8 -f texinfo -m doc/guix.texi -p po/doc/guix-manual.ru.po
    : msgmerge --no-wrap --update po/doc/guix-manual.ru.po /gnu/store/l7p9xxv3il82dw1dbbi1m3sli62nsxcl-guix-manual-1.2.0-pre2.pot

  - Build critical packages

  #+begin_src scheme
    (specifications->manifest
     '("libreoffice"
       "icecat" "epiphany" "ungoogled-chromium"       ;browsers
       "mpv" "vlc" "totem"                            ;video
       "linux-libre" "guix" "qemu" "qemu-minimal"))
  #+end_src

#+begin_src sh
  #!/bin/sh
  while true
  do
      date
      guix time-machine -- build --timeout=60000 --max-silent-time=5000 \
           -m "$HOME/critical-packages.scm" --keep-going --no-grafts -v1
      sleep 2h
  done
#+end_src

  - ~/.config/fontconfig/fonts.conf Message-ID: <87tuvfy9tk.fsf@ambrevar.xyz>
  #+begin_src xml
    <?xml version="1.0"?>
    <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
    <!-- /etc/fonts/fonts.conf file to configure system font access -->
    <fontconfig>
    <dir>~/.guix-extra-profiles/emacs/emacs/share/fonts</dir>
    </fontconfig>
  #+end_src

  - dbus-run-session
#+BEGIN_SRC sh
# Honor per-interactive-shell startup file
if [ -f ~/.bashrc ]; then . ~/.bashrc; fi

# shepherd

if [[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]]; then
    export MOZ_ENABLE_WAYLAND=1
    export GUIX_PACKAGE_PATH=/home/joshua/prog/gnu/guix/guix-packages/
    XDG_DATA_DIRS=/var/lib/flatpak/exports/share:/home/joshua/.local/share/flatpak/exports/share:$XDG_DATA_DIRS
    # this may fix a bug that I have with termite confusing backspace as space in guix environment
    # export TERM=linux
    shepherd -c /home/joshua/.config/shepherd/init.scm &
    exec dbus-run-session sway
fi
#+END_SRC

#+BEGIN_SRC sh
herd status
Started:
 + root
Stopped:
 - vpn
#+END_SRC

  - [[https://lists.nongnu.org/archive/html/guix-devel/2020-02/msg00002.html][Running service migrations during upgrades <874knrtgzk.fsf@gmail.com>]]

  - iso https://ci.guix.gnu.org/search/latest/ISO-9660?query=spec:guix-master+status:success+system:x86_64-linux+image.iso

  - updatedb

: Message-ID: <87y2ml429i.fsf@elephly.net>
#+begin_quote
For comparison, my laptop’s store contains 1,103,543 files, excluding
.links 691,994.  The updatedb database for all of them is 86MB and takes
~6 seconds to generate:
#+end_quote    

#+begin_example
    time updatedb \
         --localpaths=/gnu/store \
         --findoptions='( -path /gnu/store/.links -o -name *.drv -o -name *.chroot ) -prune -o -type f -print' \
         --output=/tmp/dbfile

    locate -d /tmp/dbfile ecxc0800
#+end_example

  - build deriviation without (guix store)
#+begin_quote
As I understand it, ‘gexp->derivation’ returns a value in the store
monad.  I’m not sure why ‘guix build’ doesn’t know how to use it
directly, but you can get at the derivation by wrapping it with
‘run-with-store’:

    (run-with-store (open-connection)
      (gexp->derivation "the-thing" build-exp))

Don’t forget to use the ‘(guix store)’ module for this.

But!  There’s a better way!!  :)

You can use the “declarative interface”.  Just replace
‘gexp->derivation’ with ‘computed-file’:

    (computed-file "the-thing" build-exp)

Now there’s no need for ‘(guix store)’.
#+end_quote

  - performance mesure <87a6xyhujp.fsf@inria.fr>
: perf timechart record guix archive --export …
produces the Gantt diagram where (grey = idle, blue = busy)

  - build package
#+BEGIN_EXAMPLE
  $ guix repl
  GNU Guile 3.0.4
  Copyright (C) 1995-2020 Free Software Foundation, Inc.

  Guile comes with ABSOLUTELY NO WARRANTY; for details type `,show w'.
  This program is free software, and you are welcome to redistribute it
  under certain conditions; type `,show c' for details.

  Enter `,help' for help.
  scheme@(guix-user)> ,use(guix)
  scheme@(guix-user)> ,use(guix scripts)
  scheme@(guix-user)> ,use(gnu packages base)
  scheme@(guix-user)> (build-package coreutils)
  $1 = #<procedure 7f2170c05540 at guix/scripts.scm:122:2 (state)>
  scheme@(guix-user)> ,run-in-store (build-package coreutils)
  /gnu/store/yvsd53rkbvy9q8ak6681hai62nm6rf31-coreutils-8.32-debug
  /gnu/store/n8awazyldv9hbzb7pjcw76hiifmvrpvd-coreutils-8.32
  $2 = #t
#+END_EXAMPLE

  - debug test
#+begin_example
  (for-each (lambda (command)
      (let* ((port   (open-pipe command OPEN_READ))
             (output (read-string port)))
        (close-port port)
        (display (string-trim-right output #\newline) (current-error-port))))
    (list (string-append #$shepherd "/bin/herd status")
          (string-append #$procps "/bin/ps auxwww")))
#+end_example

  - gexp script
#+BEGIN_SRC scheme
  #!/usr/bin/env -S guix repl --
  !#

  (use-modules (guix derivations)
               (guix gexp)
               (guix store)
               (guix build utils)
               (gnu packages package-management)
               (ice-9 format)
               (ice-9 match)
               (srfi srfi-1)
               (srfi srfi-26)
               (guix packages)
               (guix modules)
               (gnu services base))

  (define store
    (open-connection))

  (build-derivations store
                     (list (run-with-store store
                             (gexp->derivation "gexp"
                                               (with-imported-modules (source-module-closure
                                                                       '((guix build store-copy)))
                                                 #~(begin
                                                     (use-modules (guix build store-copy)
                                                                  )
                                                     (mkdir #$output)
                                                     (chdir #$output)
                                                     (with-output-to-file "gexp-output"
                                                       (lambda ()
                                                         (display #$(kvm-udev-rule))
                                                         (newline)))))
                                               #:local-build? #t))))
#+END_SRC

  - ssh
  : eval ""$(sed 's,-nic user[^ ]* ,,' "$(./pre-inst-env guix system vm --no-offload ./gnu/tests/monitoring.scm)" | tail -1 | sed 's/\sexec\s//')" -m 4096  -smp 2 -nic user,model=virtio-net-pci,hostfwd=tcp::10022-:22"
#+begin_example
  (service openssh-service-type
                     (openssh-configuration
                      (permit-root-login #t)
                      (allow-empty-passwords? #t)))
#+end_example

  - oleg@guixsd ~/src/guix$ grep -R 'define-public zlib\|define-public luajit\|define-public ncurses\|define-public jsoncpp\|define-public libb64\|define-public openssl\|define-public curl\|define-public jq\|define-public gcc\|define-public elfutils\|define-public tbb\|define-public c-ares\|define-public protobuf\|define-public grpc' gnu/packages/*.scm | cut -d: -f 1 | sort -u | xargs grep define-module  | cut -d: -f 2 | awk '{ print $2, $3, $4 }'


  - (set -x; for pkg in $(awk '/define-public/ { print $NF }' /home/oleg/src/music/music/j-fla.scm); do echo -e "\n\n@ $pkg"; ./pre-inst-env guix build -L ~/src/music --no-grafts -e "(@@ (music j-fla) $pkg)" --no-offload -S; done) |& less +F

  - Clean up store with find
#+BEGIN_SRC bash
  find /gnu/store/ -maxdepth 1 \
       -name '*-disk-image' \
       -o -name '*-qemu-image' \
       -o -name '*-os' \
       -o -name '*-os-encrypted' \
       -o -name '*-installation' \
       -o -name "*.squashfs" \
       -o -name "*-test" \
       -o -name "*docker-pack.tar.gz" \
       -o -name "*docker-image.tar.gz" | xargs -P1 -n60 guix gc -D

#+END_SRC

  - Grub custom image
#+BEGIN_SRC scheme

  (operating-system
  …
  (bootloader (bootloader-configuration
               (bootloader grub-efi-bootloader)
               (target "/boot/efi")
               (theme (grub-theme
                       ;; This probably makes little sense in
  practice,
                       ;; unless your image suits the default
  colours:
                       (inherit %default-theme)
                       (images (list (grub-image
                                      (aspect-ratio 4/3)
                                      (file (local-file
  "/home/…")))))))
               (timeout (seconds 1)))
  …)
#+END_SRC

  - alsa
#+begin_example
  > ALSA lib conf.c:3683:(snd_config_hooks_call) Cannot open shared
  > library libasound_module_conf_pulse.so
  > (/gnu/store/nyylgcnzmbw8wrn4sna2crl0g7zxxh33-alsa-lib-1.2.2/lib/alsa-lib/libasound_module_conf_pulse.so:
  > libasound_module_conf_pulse.so: cannot open shared object file: No
  > such file or directory)
  > ------
  >
  > But, this file exists in the "pulseaudio" output of alsa-plugins, not
  > alsa-lib:
  >
  > /gnu/store/pwsz9hf66na0s9x3ay9qk02vk8l4v8vi-alsa-plugins-1.2.2-pulseaudio/lib/alsa-lib/libasound_module_conf_pulse.so

  Could it be that the problem is in Audacity and not in alsa-lib?

  I can do this with mpg123:

  $ cat ~/.asoundrc
  pcm.!default {
      type pulse
  }
  $ mpg123 -o alsa …

  and the sound goes through PulseAudio.
#+end_example

  - Slim auto login
#+BEGIN_SRC scheme
  (services
   (cons* (service gnome-desktop-service-type)
          (service openssh-service-type)
          (set-xorg-configuration
           (xorg-configuration
            (keyboard-layout keyboard-layout))
           slim-service-type)
          (service slim-service-type (slim-configuration
                                      (auto-login? #t)
                                      (default-user "username")))
          (remove (lambda (service)
                    (eq? (service-kind service) gdm-service-type))
                  %desktop-services)))
#+END_SRC

  - guix system vm config.scm --nic=user,model=virtio-net-pci,hostfwd=tcp::10022-:22,hostfwd=tcp::8888-:80

  - flag for configure --enable-reproducible-build

  - The release process is documented at:

  https://git.savannah.gnu.org/cgit/guix/maintenance.git/tree/doc/release.org

As for nightly builds: CI currently builds things like:

  https://ci.guix.gnu.org/search?query=guix-binary  ;binary tarball
  https://ci.guix.gnu.org/search?query=disk-image   ;ISO9660 image

  - Guix prepare for a release

Now we can do:
  #+begin_example
ludo@ribbon ~/src/guix$ ./pre-inst-env guix weather -m etc/release-manifest.scm
#+end_example

There are build failures to look at (e.g., vim on armhf-linux).  You can
run ‘guix weather’ with ‘--display-missing’ to view the list of failing
items, and then you can try building them with, say:
#+begin_example
guix build $(guix gc --derivers /gnu/store/…-thing-that-fails)
#+end_example

  - guix weather --display-missing $(guix package -I |cut -f1)

  - System tests
Commit 5ec4156bbcaec8337f78411204d59e59e706103b adds a manifest for
system tests.  Now “make check-system” simply does:
: ./pre-inst-env guix build -m etc/system-tests.scm

  - System tests via pre-inst-env

: $ TESTS="postgresql zabbix guix-data-service" ./pre-inst-env guix build -m etc/system-tests.scm 

  - offload fix https://issues.guix.info/27386
    #+begin_src bash
      ~/.bashrc on magnolia.local
      if [ -n "$SSH_CLIENT" -a "`type -P guile`" ]
      then
          source /etc/profile
      fi
    #+end_src

  - See what fraction of the system tests is successful on ci.guix.gnu.org
    : ./pre-inst-env guix weather -m etc/system-tests.scm --display-missing
    Message-ID: <871rh6zl9j.fsf@inria.fr>

  - Guix on MicroSoft Surface Book
Message-Id: <5ADC658D-F9EC-435A-A4DB-1D6B2B646D8C@yasuaki.com>
#+begin_quote
BTW, I use Guix on my Microsoft Surface Book using Windows Subsystem for Linux
https://github.com/giuliano108/guix-packages/blob/master/notes/Guix-on-WSL2.md
, in addition to my desktop PC.
#+end_quote

  - Provenance tracking
#+begin_quote
$ cat /tmp/channels.scm
(cons (channel
       (name 'guix-hpc)
       (url "https://gitlab.inria.fr/guix-hpc/guix-hpc.git"))
      %default-channels)
$ guix time-machine -C /tmp/channels.scm -- repl
Updating channel 'guix-hpc' from Git repository at 'https://gitlab.inria.fr/guix-hpc/guix-hpc.git'...
Updating channel 'guix' from Git repository at 'https://git.savannah.gnu.org/git/guix.git'...

[...]

scheme@(guix-user)> ,use(guix)
scheme@(guix-user)> ,use(gnu)
scheme@(guix-user)> ,use(guix describe)
scheme@(guix-user)> ,use(inria storm)
scheme@(guix-user)> (package-provenance starpu)
$1 = ((repository (version 0) (url "https://git.savannah.gnu.org/git/guix.git") (branch "master") (commit "794928a9062529cb75c019454d7bd31b8cf83cb7") (introduction (channel-introduction (version 0) (commit "9edb3f66fd807b096b48283debdcddccfea34bad") (signer "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))) (repository (version 0) (url "https://gitlab.inria.fr/guix-hpc/ guix-hpc.git") (branch "master") (commit "bf3afdd85c68ee022b863da72b90e0c304b11bee")))
scheme@(guix-user)> ,use(gnu packages base)
scheme@(guix-user)> (package-provenance coreutils)
$2 = ((repository (version 0) (url "https://git.savannah.gnu.org/git/guix.git") (branch "master") (commit "794928a9062529cb75c019454d7bd31b8cf83cb7") (introduction (channel-introduction (version 0) (commit "9edb3f66fd807b096b48283debdcddccfea34bad") (signer "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))
#+end_quote

  - docker pack
    #+BEGIN_SRC bash
      guix pack --manifest=your-manifest.scm \
                         -f docker \
                         -S /etc/profile=etc/profile \
                         -S /bin=bin
    #+END_SRC

  - [[http://bayfront.guix.gnu.org/output/b9xkl8vbxbyblzkwp7xzwwmharswkbgy-guile-2.2.6-1][bayfront.guix.gnu.org/output/b9xkl8vbxbyblzkwp7xzwwmharswkbgy-guile-2.2.6-1]]

  - http://ci.guix.info/
    - icecat spec:guix-master system:x86_64-linux

  - http://data.guix.gnu.org/

  - https://hpc.guix.info/browse

  - eval `guix package --search-paths=prefix`

  - <87v9dos547.fsf@cbaines.net> More thoughts on Patchwork and Guix patch review/quality assurance https://patchwork.cbaines.net/

  - (service guix-publish-service-type (guix-publish-configuration (host "0.0.0.0") (port 3000) (advertise? #t) (cache #f) (ttl #f) (compression-level 9))) (service avahi-service-type (avahi-configuration (debug? #t)))

  - <874kl5dh7j.fsf@ambrevar.xyz> Workflow with mu4e + magit for sending patchsets to guix

  - https://patchwork.cbaines.net/

  - http://prototype-guix-weekly-news.cbaines.net/en_US/2019/44.html

  - But that's not too big an issue for Emacs when using Emacs-Guix,
    as one can do `guix-set-emacs-environment' and choose a profile to
    re-read and set (in Emacs itself) its environment variables.
    Re-running 'guix-emacs-autoload-packages' would then refresh the
    autoloads corectly, given that EMACSLOADPATH would have been
    refreshed with an updated profile.

  - Guix
    #+BEGIN_SRC scheme
      (lookup-inferior-packages (inferior-for-channels (cons (channel
                                                              (name 'guix-majordomo)
                                                              (url "file:///home/oleg/src/guix-majordomo"))
                                                             %default-channels))
                                "majordomo-ca")
    #+END_SRC

  - https://share.riseup.net

  - guix environment --ad-hoc imagemagick -- convert your-photo.jpg -quality 20% new-compressed-photo.jpg

  - env -i /bin/bash --login --noprofile --norc
    . ~/opt/my-tools-profile/etc/profile

  - guix graph -e '(load "/path/to/file.scm")'
    - https://lists.gnu.org/archive/html/guix-devel/2018-07/msg00212.html

  - Guix version
    #+BEGIN_EXAMPLE
      > +(define-public emacs-extempore-mode
      > +  (let ((version "20190917")            ; no proper tag, use date
      > of commit

      We can't do this, since upstream could decide to release 0.1 tomorrow
      and Guix would never consider it an upgrade: the number 20190917 is
      larger than almost anything.

      Hence we must use ‘0.0.0’ in such situations.
    #+END_EXAMPLE

  - Manifest
    #+BEGIN_SRC scheme
      (use-modules (guix channels)
                   (guix inferior)
                   (srfi srfi-1))

      (define channels
        (list (channel
               (name 'guix)
               (url "https://git.savannah.gnu.org/git/guix.git")
               (commit "dec845606d2d184da31065fa26cd951b84b3ce2d"))))

      (define inferior
        (inferior-for-channels channels))

      (packages->manifest (first (lookup-inferior-packages inferior "hello")))
    #+END_SRC

  - Create a NAR file without involving the Guix store
    : guix environment --ad-hoc nix -- nix-store --dump $PWD | sha256sum

  - guix daemon backtrace width
    #+BEGIN_EXAMPLE
      The daemon is run as 'root' on a Guix system, so you need to set this
      environment variable for the 'root' user session.  As an example, I set
      this in my /root/.bash_profile file:

      export COLUMNS=160              # wider Guile backtraces
    #+END_EXAMPLE

  - https://framagit.org/tyreunom/guix-home-manager

  - sudo strace -p 44043 -e openat,fcntl

  - Fix chromium audio capture
    #+BEGIN_SRC sh
      sed -i 's/"audio_capture_enabled":false/"audio_capture_enabled":true/' \
              ~/.config/chromium/Default/Preferences 
    #+END_SRC

  - extend environment variables
    
    To add environment variables to /etc/environment, you would
    “extend” ‘session-environment-service-type’, like so:
    #+BEGIN_SRC scheme
      (simple-service 'cogl-variable session-environment-service-type
                      '(("COGL_ATLAS_DEFAULT_BLIT_MODE" . "framebuffer")))

    #+END_SRC

  - build manual only for specific language
    #+BEGIN_EXAMPLE
      make doc/guix.pt_BR.info
      # or
      make doc/guix.pt_BR.html
    #+END_EXAMPLE

  - Verify store contents
    : guix gc --verify=contents 2>&1 |tee ~/verify.log

  - <bavier`> EuAndreh[m]: you can use makeinfo to produce a docbook
    output, then feed that to dbtoepub, apparently
https://kanru.info/blog/archives/2010/11/18/convert-texinfo-to-mobi/

  - please grab substitutes from https://qualif.ci.guix.gnu.org
    it provides lzipped substitutes in addition to gzipped substitutes

  - https://archive.org/details/guix-videos/
  - [[https://www.devopsworld.com/agenda/session/617842][A Purely Functional CI/CD Pipeline Using Jenkins with Guix]]

  - skeleton create directory [2019-05-27 Mon 22:22] [[gnus:INBOX#87pno5m22l.fsf@gnu.org][Email from Ludovic Courtès: Re: skeleton files in sub-directories]] by [[mailto:ludo@gnu.org][Ludovic Courtès]]
   #+BEGIN_SRC scheme
     (define dot-config
       (compute-file "dot-config-skeleton"
                     #~(begin
                         (mkdir #$output)
                         (mkdir (string-append #$output "/guix"))
                         …)))

     and then add it in the list of skeletons like so:

     `(…
       (".config" ,dot-config))
   #+END_SRC

  - This will generate and manage "grub.cfg" without installing grub bootloader on your disk.
    Origin: <6aa8150643946007e24e2026467e2ef2@disroot.org>
    #+BEGIN_SRC scheme
      (bootloader
       (bootloader-configuration
        (bootloader
         (bootloader
          (inherit grub-bootloader)
          (installer #~(const #t))))))
    #+END_SRC

  - narinfo
    #+BEGIN_EXAMPLE
      $ wget -q -O - https://ci.guix.info/nrkm1683p1cqnkcmhlmhiig9q9qd7xqh.narinfo | head -3
      StorePath: /gnu/store/nrkm1683p1cqnkcmhlmhiig9q9qd7xqh-sed-4.5
      URL: nar/gzip/nrkm1683p1cqnkcmhlmhiig9q9qd7xqh-sed-4.5
      Compression: gzip
    #+END_EXAMPLE

  - '((0 . succeeded) (1 . failed-build) (2 . failed-dependency) (3 . failed-other) (6 . failed-output) (4 . cancelled))

  - refcard
    : <civodul> you can do: cd doc/refcard; evince $(guix build -f build.scm)/*.pdf

  - The lesson is: when inheriting from a package, do it in the module
    where it’s defined.

  - guix deterministic
    [21:11] <dongcarl> civodul: If I understand you correctly... `guix
    build bitcoin-core --check --no-grafts --keep-failed` would let me
    know the determinism of bitcoin-core relative to a specific state
    of dependencies, as in, it ignores the non-determinism of
    bitcoin-core's dependencies by pinning them to a specific
    hash/build, and builds bitcoin-core on top of those fixed
    dependencies several times to check that bitcoin-core itself is
    detemrinisti


  - Fetch patches
    #+BEGIN_SRC diff
      diff --git a/gnu/packages/inkscape.scm b/gnu/packages/inkscape.scm
      index 1673cc602e..7b17ebae40 100644
      --- a/gnu/packages/inkscape.scm
      +++ b/gnu/packages/inkscape.scm
      @@ -46,7 +46,7 @@
       (define-public inkscape
         (package
           (name "inkscape")
      -    (version "0.92.3")
      +    (version "0.92.4")
           (source (origin
                     (method url-fetch)
                     (uri (string-append "https://media.inkscape.org/dl/"
      @@ -54,24 +54,7 @@
                                         "inkscape-" version ".tar.bz2"))
                     (sha256
                      (base32
      -                "1chng2yw8dsjxc9gf92aqv7plj11cav8ax321wmakmv5bb09cch6"))
      -              (patches
      -               (list (origin
      -                       (method url-fetch)
      -                       (uri (string-append "https://gitlab.com/inkscape/inkscape/commit/"
      -                                           "a600c6438fef2f4c06f9a4a7d933d99fb054a973.diff"))
      -                       (file-name "inkscape-poppler-compat.patch")
      -                       (sha256
      -                        (base32
      -                         "19dam5vsy571xszgjddl5g0958dmcsv0wvgxidp4bhj2lban222i")))
      -                     (origin
      -                       (method url-fetch)
      -                       (uri (string-append "https://gitlab.com/inkscape/inkscape/commit/"
      -                                           "fa1c469aa8c005e07bb8676d72af9f7c16fae3e0.diff"))
      -                       (file-name "inkscape-poppler-compat2.patch")
      -                       (sha256
      -                        (base32
      -                         "14k9yrfjz4nx3bz9dk91q74mc0i7rvl2qzkwhcy1br71yqjvngn5")))))))
      +                "0pjinhjibfsz1aywdpgpj3k23xrsszpj4a1ya5562dkv2yl2vv2p"))))
           (build-system cmake-build-system)
           (inputs
            `(("aspell" ,aspell)
    #+END_SRC

  - Systemd =guix-daemon= service
    : systemctl edit --full guix-daemon.service

  - Herd udev
    #+BEGIN_SRC sh
      sudo cat /proc/$(sudo herd status udev|grep Running|sed -es'/.*is \([0-9]\+\)\./\1/g')/environ
    #+END_SRC

  - Select
    #+BEGIN_SRC sh
      ./pre-inst-env guix describe --profile=$HOME/.config/guix/current --format=json | jq --raw-output 'map(select(.name == "guix"))'[0].commit
      ./pre-inst-env guix describe --profile=$HOME/.config/guix/current --format=recutils | recsel -e 'name = "guix"' -P commit
    #+END_SRC

  - Reset password from LiveUSB
    1. Boot live disk from usb
    2. open terminal and run:
            > passwd $(whoami)
    2.1 enter the root passwd you want. Then run:
            > sudo grep $(whoami) /etc/shadow
    2.2 You'll get the password as the second field (separated by : the first
            field is the username) e.g.:
            test:$6$jugtjlt6Og/erxFa$FVQR3CNnv9g1aF6nIkGFtdFSeA.uerF4UfM/0/hSMQcz0vDhiV6R4xoX4vQaAHET34expirYLu6OvTbA8/5iM.:17866::::::
    2.2 The password, or the password hash is (the password entered here is
            actually "test password"):
            $6$jugtjlt6Og/erxFa$FVQR3CNnv9g1aF6nIkGFtdFSeA.uerF4UfM/0/hSMQcz0vDhiV6R4xoX4vQaAHET34expirYLu6OvTbA8/5iM.
    3 Mount your guixsd root partition.
    3.1 Open the guixsd-root/etc/shadow in a text editor and change field 2 of
            the line starting with root so it has the password hash you created
            in step 2. In my case I would make it look like:
            root:$6$jugtjlt6Og/erxFa$FVQR3CNnv9g1aF6nIkGFtdFSeA.uerF4UfM/0/hSMQcz0vDhiV6R4xoX4vQaAHET34expirYLu6OvTbA8/5iM.:14403::::::
    3.2 Save the guixsd-root/etc/shadow file and reboot. You have now set a new
            password for your root account.

    For documentation see
    man passwd
    man 5 shadow

  - Reset file timestamps to epoch
    : sudo touch -t 197001010000.01 FILE

  - https://exploring-data.com/info/npm-packages-dependencies/

  - Manifest to manifest
  #+BEGIN_SRC scheme
    (use-modules (guix profiles)
                 (ice-9 match)
                 (ice-9 pretty-print))    

    (match (command-line)
      ((_ where)
       (pretty-print
        `(specifications->manifest
          ',(map manifest-entry-name (manifest-entries (profile-manifest where))))))
      (_ (error "Please provide the path to a Guix profile.")))
  #+END_SRC

  - Import via SSH
    : guix archive --export --recursive /gnu/store/…-PACKAGE-VERSION | ssh REMOTE_MACHINE guix archive --import

  - Guix archive package source
    Message-ID: <87h8isieke.fsf@gnu.org>
    : guix archive --export -r hello $(guix build -S hello) > hello.nar
    : guix build --sources=transitive hello

  - Environment
    Message-ID: <875zzczvn4.fsf@gmail.com>

    #+BEGIN_EXAMPLE
      I have experimented with various schemes for managing projects in
      guix. I have tried 'guix environment', 'guix package', and 'guix system
      vm'. FWIW, I have ended up "running" projects with an script that
      includes ...

      GCP_ROOT=$gcp_root guix package \
              --profile=$gcp_root/.guix-profile \
              -m $gcp_root/.manifest.scm

      eval $(guix package -p /var/guix/profiles/system/profile \
              -p $gcp_root/.guix-profile --search-paths=exact)

      ... where $gcp_root is the project directory.  This effectively replaces
      the "default user profile" with a "custom project profile"
      ($gcp_root/.guix-profile). I put the emacs project config in
      $gcp_root/.emacs and run emacs with a script that includes ...

      $GCP_ROOT/.guix-profile/bin/emacs \
          --no-site-file \
          --eval='(let ((guix-env (concat (getenv "GCP_ROOT") "/.guix-profile"))) (when (and guix-env (require (quote guix-emacs) nil t)) (guix-emacs-autoload-packages guix-env)))' \
          --no-init-file \
          --eval='(setq user-emacs-directory (concat (getenv "GCP_ROOT") "/.emacs.d/"))' \
          --eval='(load (concat (getenv "GCP_ROOT") "/.emacs"))' \
          --debug-init \
          "$@"

      The net effect: a custom emacs config running in a custom profile for
      each project. I use Makefiles to maintain $gcp_root/.manifest.scm,
      $gcp_root/.emacs, etc. and GNU screen to run/juggle these projects.
    #+END_EXAMPLE

  - [[http://bayfront.guixsd.org/.well-known/logs/][Guix IRC channel logs]]

  - [[https://issues.guix.info/issue/22629#240][pull the latest commit that was fully built on berlin.guixsd.org]]

    See https://berlin.guixsd.org/jobset/guix-modular-master
    
    #+BEGIN_SRC scheme
      (use-modules (guix http-client)
                   (json)
                   (srfi srfi-1)
                   (ice-9 match))

      (define (latest-evaluations jobset)
        "Return the latest evaluations of JOBSET."
        (filter (lambda (json)
                  (string=? (hash-ref json "specification") jobset))
                (json->scm
                 (http-fetch
                  "https://berlin.guixsd.org/api/evaluations?nr=30"))))

      (define (evaluation-complete? number)
        "Return true if evaluation NUMBER completed and all its builds were
      successful."
        (let ((builds (json->scm
                       (http-fetch
                        (string-append
                         "https://berlin.guixsd.org/api/latestbuilds?nr=30&evaluation="
                         (number->string number))))))
          (every (lambda (build)
                   ;; Zero means build success.
                   (= (hash-ref build "buildstatus") 0))
                 builds)))

      (define (latest-commit-successfully-built)
        "Return the latest commit for which substitutes are (potentially)
      available."
        (let* ((evaluations (latest-evaluations "guix-modular-master"))
               (candidates  (filter-map (lambda (json)
                                          (match (hash-ref json "checkouts")
                                            ((checkout)
                                             (cons (hash-ref json "id")
                                                   (hash-ref checkout "commit")))
                                            (_ #f)))
                                        evaluations)))
          (any (match-lambda
                  ((evaluation . commit)
                   (and (evaluation-complete? evaluation)
                        commit)))
                candidates)))

      ;; Pull the latest commit fully built on berlin.guixsd.org.
      ;; WARNING: This could downgrade your system!
      (list (channel
             (name 'guix)
             (url "https://git.savannah.gnu.org/git/guix.git")
             (commit (pk 'commit (latest-commit-successfully-built)))))
    #+END_SRC

  - input.tld channel
    #+BEGIN_SRC scheme
      (use-modules (ice-9 popen)
                   (ice-9 rdelim)
                   (ice-9 match)
                   (guix channels))

      (map (match-lambda
             ((name . url)
              (let* ((port (open-pipe* OPEN_READ "ssh" "input.tld" "--" "git"
                                       "-C" (string-append "/srv/git/"
                                                           (symbol->string name))
                                       "rev-parse" "HEAD"))
                     (output (read-string port)))
                (close-port port)
                (channel (name name)
                         (url url)
                         (commit (string-trim-right output #\newline))))))
           '((guix . "https://git.savannah.gnu.org/git/guix.git")
             (guix-chromium . "https://gitlab.com/mbakke/guix-chromium.git")
             (guix-wigust . "https://cgit.duckdns.org/git/guix-wigust")))

    #+END_SRC

    #+NAME: 2019-02-12
    #+BEGIN_SRC sh
      (use-modules (guix http-client)
                   (json)
                   (srfi srfi-1)
                   (ice-9 match))

      (define (latest-evaluations jobset)
        "Return the latest evaluations of JOBSET."
        (filter (lambda (json)
                  (string=? (hash-ref json "specification") jobset))
                (json->scm
                 (http-fetch
                  "https://berlin.guixsd.org/api/evaluations?nr=30"))))

      (define (evaluation-complete? number)
        "Return true if evaluation NUMBER completed and all its builds were
      successful."
        (let ((builds (json->scm
                       (http-fetch
                        (string-append
                         "https://berlin.guixsd.org/api/latestbuilds?nr=30&evaluation="
                         (number->string number))))))
          (every (lambda (build)
                   ;; Zero means build success.
                   (= (hash-ref build "buildstatus") 0))
                 builds)))

      (define (latest-commit-successfully-built)
        "Return the latest commit for which substitutes are (potentially)
      available."
        (let* ((evaluations (latest-evaluations "guix-modular-master"))
               (candidates  (filter-map (lambda (json)
                                          (match (hash-ref json "checkouts")
                                            ((checkout)
                                             (cons (hash-ref json "id")
                                                   (hash-ref checkout "commit")))
                                            (_ #f)))
                                        evaluations)))
          (any (match-lambda
                  ((evaluation . commit)
                   (and (evaluation-complete? evaluation)
                        commit)))
                candidates)))

      ;; Pull the latest commit fully built on berlin.guixsd.org.
      ;; WARNING: This could downgrade your system!
      (list (channel
             (name 'guix)
             (url "https://git.savannah.gnu.org/git/guix.git")
             (commit (pk 'commit (latest-commit-successfully-built)))))

    #+END_SRC

  - Guix Graph system
    #+BEGIN_SRC sh
      guix graph -e '(begin (%current-system "i686-linux") (@@ ...))'
    #+END_SRC

  - Guix reverse graph
    #+BEGIN_SRC sh
      guix graph --type=reverse-package webkitgtk | dot -Tsvg > ~/out.svg
    #+END_SRC

  - Guix reverse dependencies
    #+BEGIN_SRC sh
      guix refresh --list-dependent webkitgtk
    #+END_SRC

  - Search for a package in graph
    #+BEGIN_SRC sh
      for i in $(guix package -I | awk '{print $1}')
      do
          guix graph $i | grep -q qtwebkit && echo $i
      done
    #+END_SRC

  - Setuid Nix package on GuixSD
    #+BEGIN_SRC scheme
      (let ((nix-profile "/home/natsu/.nix-profile"))
        (map (lambda (file)
               (string-append (string-drop-right (readlink (string-append nix-profile "/bin/singularity"))
                                                 (string-length "/bin/singularity"))
                              "/libexec/singularity/bin/"
                              file))
             '("action-suid" "mount-suid" "start-suid")))

    #+END_SRC

  - Rewrite package graph in manifest
    #+BEGIN_SRC scheme
      (use-modules (gnu packages cran)       ; provides r-factoextra and r-nbclust
                   (my packages variants)    ; provides “r-minimal-3.4.2”
                   (guix packages)           ; for "package", "package-arguments"...
                   (guix build-system))      ; for "build-system-name"

      ;; This is a recursive package transformer.  When given a package
      ;; "pkg" it checks if it is an R package by looking at its build
      ;; system; if that is the case, it will return a package variant that
      ;; is built with "r-minimal-3.4.2".  It does this recursively, so all
      ;; dependencies are also modified.
      (define use-old-r
        (package-mapping
         (lambda (pkg)
           (if (eq? (build-system-name (package-build-system pkg)) 'r)
               ;; It’s an R package!  Return a new package that inherits from
               ;; the original, but build it with R 3.4.2 by adding a build
               ;; system argument.
               (package
                 (inherit pkg)
                 (arguments
                  (append `(#:r ,r-minimal-3.4.2)
                          (package-arguments pkg))))
               ;; Not an R package.  Don’t change it.
               pkg))))

      ;; Apply the transformer to the list of R packages.
      (define r-packages-with-old-r
        (map use-old-r (list r-factoextra r-nbclust)))

      ;; Build a manifest from the list of modified packages and the old R
      ;; variant itself.
      (packages->manifest
       (cons r-minimal-3.4.2 r-packages-with-old-r))
    #+END_SRC

  - [[http://issues.guix.info/][Guix issue tracker]]

  - Guix Wine
    #+BEGIN_SRC sh
      ./pre-inst-env\
          guix environment -C --expose=/gnu/store/ --ad-hoc wine\
          -- wine $(./pre-inst-env guix build hello --target=i686-w64-mingw32)\
          /bin/hello.exe
    #+END_SRC

  - Disable quit in Guile REPL
    : (catch 'quit (lambda () …) (const #f))

  - io
    #+BEGIN_SRC scheme
      (call-with-output-file nethack-script
        (lambda (port)
          (format port "#!~a/bin/sh
      first line
      second line
      …\n"
                  (assoc-ref inputs "bash"))))

    #+END_SRC

  - Hydra JSON interface
    : curl -i -H 'Accept: application/json' https://hydra.gnu.org/

  - Shepherd strace
    #+BEGIN_SRC scheme
      #$(file-append strace "/bin/strace")
      "-f" "-o" "/tmp/ddclient.strace" "-s" "1024"
    #+END_SRC

  - Remove mingetty and use agetty
    #+BEGIN_SRC scheme
      (services (cons (agetty-service (agetty-configuration (tty "ttyS0")))
                      (remove (lambda (service)
                                (or (eq? (service-kind service)
                                         mingetty-service-type)
                                    (eq? (service-kind service)
                                         console-font-service-type)))
                              (operating-system-user-services os))))
    #+END_SRC

  - Use origin inside inputs
    #+BEGIN_SRC scheme
      ("pci.ids"
       ,(origin
          (method url-fetch)
          (uri "https://github.com/pciutils/pciids/raw/ad02084f0bc143e3c15e31a6152a3dfb1d7a3156/pci.ids")
          (sha256
           (base32
            "0kfhpj5rnh24hz2714qhfmxk281vwc2w50sm73ggw5d15af7zfsw"))))
    #+END_SRC

  - Debug LD
    : env GUIX_LD_WRAPPER_DEBUG=yes make

  - https://git.lassieur.org/cgit/

  - GDB
    : sudo gdb --args guix-daemon --build-users-group=guixbuild

  - Upgrade
    : env GUILE_LOAD_PATH=$HOME/dotfiles:$GUILE_LOAD_PATH GUIX_PACKAGE_PATH= ./pre-inst-env guix environment --no-grafts -m $HOME/dotfiles/fiore/manifests/guix-collection-manifest.scm
    : env GUILE_LOAD_PATH=$HOME/dotfiles:$HOME/src/guix-local:$HOME/src/guix-wigust:$GUILE_LOAD_PATH GUIX_PACKAGE_PATH= ./pre-inst-env guix environment --no-grafts -m ~/dotfiles/fiore/manifests/manifest.scm
    : env GUILE_LOAD_PATH=$HOME/src/guix-wigust:$HOME/src/guix-packages:$GUILE_LOAD_PATH ./pre-inst-env guix system build /home/natsu/dotfiles/fiore/clover.scm

  - Substitutable
    #+BEGIN_SRC sh
      for item in $(guix gc -R $(readlink -f ~/.config/guix/current) | grep guix); do
          echo $item;
          curl -I https://berlin.guixsd.org/nar/gzip/$(echo $item | cut -d '/' -f 4);
      done
    #+END_SRC

  - Patches
    #+BEGIN_SRC scheme
      (patches
       (list (origin
               (method url-fetch)
               (uri "https://cgit.freedesktop.org/xorg/driver/\
      xf86-video-voodoo/patch/?id=9172ae566a0e85313fc80ab62b4455393eefe593")
               (sha256
                (base32
                 "0rndmxf5b8j3hjnhrwrnzsq5024fli134fj1mprhkcrvax2zq8db"))
               (file-name "xf86-video-voodoo-pcitag.patch"))))
    #+END_SRC

  - Remove system generations
    : (delete-generations* "/var/guix/profiles/system" '(134 135))

  - Switch system generation
    : (switch-to-generation* "/var/guix/profiles/system" 133)

  - Grep
    : guix package -A ^perl- | wc -l 523
    : guix package -A ^perl- | xargs guix refresh -l

  - Manually failing package build
    : (add-after 'compress-documentation 'stop (lambda _ #f))

  - Graph a file
    : guix graph -e '(load "FILE")' | dot -Tps > OUTPUT_FILE.ps

  - Create a profile and export that recursively
    #+BEGIN_SRC shell
      guix archive\
           --export\
           --recursive $(readlink -f /project/.guix-profile)\
          | gzip --stdout - > my-profile.nar.gz
    #+END_SRC

  - Multi monitor
    : xrandr --output DP-2-2 --auto

  - Build all packages from sources.
    See [[https://lists.gnu.org/archive/html/help-guix/2018-01/msg00080.html]].
    #+BEGIN_SRC shell
      guix build --no-substitutes --no-grafts --keep-going\
           $(guix package -A | cut -f1,2 --output-delimiter=@)\
           --sources=transitive
    #+END_SRC

  - Github mutated archives.  See [[https://notabug.org/apteryx/fiasco]].

  - Force fsck after reboot
    : touch /forcefsck

  - Show dynamic libraries
    : GUIX_LD_WRAPPER_DEBUG=yes

  - See the most recent build logs for a given package
    : ls -ltr /var/log/guix/drvs/*/*-icecat* | tail

  - Get all packges from a file
    : guix package -A | grep 'compression\.scm' | cut -f1

  - Get substitutable kernels
    #+BEGIN_SRC shell
      guix build -n $(guix package -A 'linux-libre$'\
                          | awk '{print $1"@"$2}'\
                          | tr '\n' ' ')
    #+END_SRC

  - Get logs
    : wget -O log https://hydra.gnu.org/log/$(tail -n 1 <(env GUIX_PACKAGE_PATH= guix build --no-grafts hello) | cut -d '/' -f 4)

  - Add file via union
    #+BEGIN_SRC scheme
      (arguments
       '(#:modules
         ((guix build union))
         #:builder
         (begin
           (use-modules (ice-9 match)
                        (guix build union))
           (match %build-inputs
             (((names . directories) ...)
              (union-build (assoc-ref %outputs "out")
                           directories))))))
    #+END_SRC

  - Upgrade guix-daemon

    [13:54:40] <snape> castilma: I'm not 100% sure but my
    understanding is that with GuixSD, doing 'sudo -E guix system
    reconfigure config.scm' will use your current guix package for the
    daemon, thus it'll be updated and you won't need to do 'guix pull'
    as root.

  - Static networking service
    #+BEGIN_SRC scheme
      (define (iproute2-shepherd-service config)
        (list (shepherd-service
               (documentation "Run the iproute2 network service")
               (provision '(networking))
               (requirement '())
               (start #~(lambda _
                          (let ((ip (string-append #$iproute "/sbin/ip")))
                            (system* ip "a" "add" "89.234.186.109/32" "dev"
                                     "ens18")
                            (system* ip "l" "set" "ens18" "up")
                            (system* ip "-6" "a" "add"
                                     "2a00:5884:8208::1/48" "dev" "ens18")
                            (system* ip "r" "add" "89.234.186.1" "dev"
                                     "ens18")
                            (system* ip "r" "add" "default" "via"
                                     "89.234.186.1" "dev" "ens18")
                            (system* ip "-6" "r" "add" "default" "via"
                                     "fe80::204:92:100:1" "dev" "ens18"))))
               (stop #~(lambda _
                         (display "Cannot stop iproute2 service.\n"))))))
    #+END_SRC

  - Message-ID: <87blycvrz1.fsf@elephly.net>
    : guix package -p ~/.config/guix/current --delete-generations
    : guix gc --delete-generations

  - ABI Incompatible
    Message-ID: <878st8g7w0.fsf@gnu.org>
    Things to have to be compiled at one point though.  We could let
    Guile auto-compile code, but unfortunately that comes with its own
    warts: the equivalent of “make clean-go”, for instance when an ABI
    incompatibility pops up, is “rm -rf ~/.cache/guile/ccache”, and
    that too is something a developer has too learn, and one could
    argue that it’s less familiar than “make” or “make clean.”

  - Message-ID: <87v9wk275q.fsf@jlicht.xyz>
    https://notabug.org/jlicht/guile-semver

  - https://framagit.org/tyreunom/guix-home-manager
    https://lists.gnu.org/archive/html/guix-devel/2019-02/msg00128.html

  - hash
    Message-ID: <878ssmt4zw.fsf@gnu.org>
    #+BEGIN_EXAMPLE
      $ wget -qO - http://berlin.guix.gnu.org/32hy1jqkam201l7c4wg3bhxz4x5l5jy0.narinfo | grep Hash
      NarHash: sha256:0vbkb5mcwzbz4lm1c1319pail61785sd3lj6526vl5hdnp1rxyad
      $ wget -qO - http://berlin.guix.gnu.org/nar/lzip/32hy1jqkam201l7c4wg3bhxz4x5l5jy0-nss-certs-3.44.1 | lzip -d | guix hash -
      0vbkb5mcwzbz4lm1c1319pail61785sd3lj6526vl5hdnp1rxyad
      $ wget -qO - http://berlin.guix.gnu.org/nar/gzip/32hy1jqkam201l7c4wg3bhxz4x5l5jy0-nss-certs-3.44.1 | gunzip | guix hash -
      0vbkb5mcwzbz4lm1c1319pail61785sd3lj6526vl5hdnp1rxyad
      $ wget -qO - http://ci.guix.gnu.org/nar/lzip/32hy1jqkam201l7c4wg3bhxz4x5l5jy0-nss-certs-3.44.1 | lzip -d | guix hash -
      0vbkb5mcwzbz4lm1c1319pail61785sd3lj6526vl5hdnp1rxyad
      $ wget -qO - http://ci.guix.gnu.org/nar/gzip/32hy1jqkam201l7c4wg3bhxz4x5l5jy0-nss-certs-3.44.1 | gunzip | guix hash -
      0vbkb5mcwzbz4lm1c1319pail61785sd3lj6526vl5hdnp1rxyad
    #+END_EXAMPLE

** mumi

   Message-ID: <875zntc8ux.fsf@elephly.net>
   #+BEGIN_EXAMPLE
         (use-modules (mumimu))
         (mu:initialize (%config 'mail-dir))
         (for-each
          (lambda (msg)
            (pk (mu:subject msg)))
          (mu:message-list "bugid:31023"))
   #+END_EXAMPLE
    
* check if guix corrupted
  #+BEGIN_EXAMPLE
    <rekado_> solene: if you want to check that the store isn’t corrupt and repair
              it, use “sudo -E guix gc --verify=repair,contents”  [16:30]
  #+END_EXAMPLE

* Columns


Hello!

Jan Nieuwenhuizen <janneke@gnu.org> skribis:

> In procedure lstat: No such file or directory: "/tmp/guix-build-guix-1.0.1-18.11fc384.drv-0/source/gnu/../gnu/installer/~^m\x18 "

This one is funny:

$ (unset GUILE_LOAD_COMPILED_PATH; COLUMNS=200 XDG_CACHE_HOME=/nowhere guild compile --target=i586-pc-gnu -L . gnu/ci.scm -o foo.go)
;;; note: auto-compilation is enabled, set GUILE_AUTO_COMPILE=0
;;;       or pass the --no-auto-compile argument to disable.
;;; compiling /home/ludo/.guix-profile/bin/guild
;;; WARNING: compilation of /home/ludo/.guix-profile/bin/guild failed:
;;; failed to create path for auto-compiled file "/home/ludo/.guix-profile/bin/guild"
WARNING: Use of `load' in declarative module (guix ui).  Add #:declarative? #f to your define-module invocation.
WARNING: (guix build emacs-build-system): imported module (guix build utils) overrides core binding `delete'
WARNING: Use of `load' in declarative module (gnu system install).  Add #:declarative? #f to your define-module invocation.
Backtrace:
In ice-9/boot-9.scm:
  3297:17 19 (resolve-interface (gnu system install) #:select _ #:hide _ #:prefix _ #:renamer _ #:version _)
In ice-9/threads.scm:
    390:8 18 (_ _)
In ice-9/boot-9.scm:
  3223:13 17 (_)
In ice-9/threads.scm:
    390:8 16 (_ _)
In ice-9/boot-9.scm:
  3507:20 15 (_)
   2806:4 14 (save-module-excursion _)
  3527:26 13 (_)
In unknown file:
          12 (primitive-load-path "gnu/system/install" #<procedure 7fb03993e6e0 at ice-9/boot-9.scm:3514:37 ()>)
In ice-9/eval.scm:
   626:19 11 (_ #<directory (gnu system install) 7fb03817caa0>)
   173:47 10 (_ #(#(#<directory (gnu system install) 7fb03817caa0> #<<plain-file> name: "motd" content: "\n\x1b[1;37mWelcome to the installation of GNU Guix!\x1b[0m\n\n\x1b[2mUsing this shell…>) …))
   196:43  9 (_ #(#(#<directory (gnu system install) 7fb03817caa0> #<<plain-file> name: "motd" content: "\n\x1b[1;37mWelcome to the installation of GNU Guix!\x1b[0m\n\n\x1b[2mUsing this shell…>) …))
   293:34  8 (_ #(#(#(#<directory (gnu system install) 7fb03817caa0> #<<plain-file> name: "motd" content: "\n\x1b[1;37mWelcome to the installation of GNU Guix!\x1b[0m\n\n\x1b[2mUsing this …>) …) #))
    619:8  7 (_ #(#(#(#<directory (gnu installer) 7fb03abbfe60>)) #<variable 7fb03f5d5110 value: #<gexp (begin (bindtextdomain "guix" (string-append #<gexp-input #<package guix@1.1.0 gnu/packag…> …))
   626:19  6 (_ #(#(#(#<directory (gnu installer) 7fb03abbfe60>)) #<variable 7fb03f5d5110 value: #<gexp (begin (bindtextdomain "guix" (string-append #<gexp-input #<package guix@1.1.0 gnu/packag…> …))
    159:9  5 (_ #(#(#(#<directory (guix discovery) 7fb04977f320>) "/home/ludo/src/guix/gnu/.." "gnu/installer") 26))
In srfi/srfi-1.scm:
   495:18  4 (fold-right #<procedure 7fb03f077e40 at ice-9/eval.scm:336:13 (a b)> () _ . _)
In ice-9/eval.scm:
   293:34  3 (_ #(#(#(#(#(#(#(#<directory (guix discovery) 7fb04977f320> ("ރl^ " (type . unknown) (inode . 17571939)) "/home/ludo/src/guix/gnu/../gnu/installer" #<variable 7fb03…> …)) …) …) …) …) …))
    155:9  2 (_ #(#(#(#(#<directory (guix discovery) 7fb04977f320>) "/home/ludo/src/guix/gnu/../gnu/installer/ރl^ " ((type . unknown) (inode . 17571939))) unknown) #<procedure failure ()>))
In unknown file:
           1 (lstat "/home/ludo/src/guix/gnu/../gnu/installer/ރl^ ")
In ice-9/boot-9.scm:
  1669:16  0 (raise-exception _ #:continuable? _)

ice-9/boot-9.scm:1669:16: In procedure raise-exception:
In procedure lstat: Dosiero aŭ dosierujo ne ekzistas: "/home/ludo/src/guix/gnu/../gnu/installer/ރl^ "

(A good opportunity to learn about THAANA LETTER RAA!
<https://en.wikipedia.org/wiki/Thaana#Alphabet>)

Here ‘scandir*’ from (guix build syscalls) is being interpreted and
presumably it gets all the struct offsets wrong (32-bit instead of
64-bit I guess), hence the funny file name.  (‘scandir*’ is called from
‘scheme-modules*’ in (gnu installer), itself from the
‘installer-program’ call in (gnu system install).)

This bit is fixed in 82d8959e5d137b2061a68878d78a8f74a238ac44.

To be continued…

Thank you,
Ludo’.

* Container
So presumably a better option is to use an image created like this:

  guix pack -f docker -S /bin=bin guix --localstatedir

and then, in the image, you first need to spawn guix-daemon, perhaps
with ‘--disable-chroot’ because the image lacks build users.

It would be useful also to set the user under which commands run in the
image, similar to the ‘USER’ directive in Dockerfiles.

* Cuirass
- [[https://ci.guix.gnu.org/eval/19534/dashboard][master dashboard]]
- [[https://ci.guix.gnu.org/eval/19488/dashboard][staging dashboard]]
- [[https://ci.guix.gnu.org/eval/19464/dashboard][test dashboard]]

* TODO (debbugs-gnu-bugs 28004)
* TODO (debbugs-gnu-bugs 28743)
* TODO (debbugs-gnu-bugs 28772)

* doc

- [[https://hal.inria.fr/hal-01580582/document][Code Staging in GNU Guix]]
- [[http://www.nongnu.org/geiser/][Geiser]]
- [[https://alezost.github.io/guix.el/doc.html][Emacs Guix]]

* Dovecot
  #+BEGIN_EXAMPLE
    doveconf: Warning: /etc/dovecot/dovecot.conf line 198: Global setting auth_socket_path won't change the setting inside an earlier filter at /etc/dovecot/dovecot.conf line 4 (if this is intentional, avoid this warning by moving the global setting before /etc/dovecot/dovecot.conf line 4)
    doveconf: Warning: /etc/dovecot/dovecot.conf line 200: Global setting mail_plugins won't change the setting inside an earlier filter at /etc/dovecot/dovecot.conf line 5 (if this is intentional, avoid this warning by moving the global setting before /etc/dovecot/dovecot.conf line 5)
    Error: net_connect_unix(/var/run/dovecot//stats-writer) failed: Permission denied
  #+END_EXAMPLE

* Dualboot

  https://lists.gnu.org/archive/html/help-guix/2016-03/msg00083.html

  Running all machines, I dunno.  I do dual-boot Debian and GuixSD
  with them sharing the same user profile and store.  On Debian, I
  bind-mount some directories from GuixSD's root partition.  From
  /etc/fstab:

  #+BEGIN_EXAMPLE
    UUID=d9cc11f0-e548-4526-a541-4f631a10b73c /mnt/guix/      ext4    defaults
      0       2
    /mnt/guix/var/guix    /var/guix           none            defaults,bind
      0       0
    /mnt/guix/gnu    /gnu                     none            defaults,bind
      0       0
  #+END_EXAMPLE

  Then /home/ is shared (and luks encrypted) on both distros.  It
  works fine.

  If you want to do "same profile and store across all things" Ricardo
  Wurmus does some wild things using NFS.

* entr

build.sh
#+BEGIN_SRC sh
  #!/usr/bin/env bash

  set -eux

  ./pre-inst-env guix build -K --no-offload "$(git diff --inter-hunk-context=1 gnu/packages/golang.scm gnu/packages/configuration-management.scm gnu/packages/version-control.scm | awk '/define-public/ { print $NF }' | head -2 | tail -1)"
#+END_SRC

#+BEGIN_SRC sh
  ls gnu/packages/golang.scm gnu/packages/configuration-management.scm gnu/packages/version-control.scm | ~/.guix-profile/bin/entr -r ./build.sh
#+END_SRC

* TODO ERROR: ivy-bibtex not such file
* Extensions
- [[https://hpc.guix.info/blog/2022/05/back-to-the-future-modules-for-guix-packages/][Guix-HPC — Back to the future: modules for Guix packages]]
- [[https://guixwl.org/][Guix Workflow Language | Guix Workflow Language]]

* Fix sendmail_path=/usr/sbin/sendmail
* fonts

From: Pierre Neidhardt <mail@ambrevar.xyz>
Subject: Re: How to use foreign-distro fonts without symlink hack?
To: "Jorge P. de Morais Neto" <jorge+list@disroot.org>, help-guix@gnu.org
Date: Sun, 05 Jan 2020 19:34:24 +0100 (22 minutes, 15 seconds ago)
Message-ID: <87tv59ycpb.fsf@ambrevar.xyz>

Hi Jorge!

jorge+list@disroot.org (Jorge P. de Morais Neto) writes:

> 1. Could this symlink cause problems for Debian applications?

Should be fine.

> 2. Why does not Guix `fc-cache' look in `/usr/share/fonts'?

Because Guix does not know about files outside the store or the home
directory.  This is by design.

Another way to change this behaviour is to add /usr/share/fonts to
~/.config/fontconfig/fonts.conf:

<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<!-- /etc/fonts/fonts.conf file to configure system font access -->
<fontconfig>
<dir>/usr/share/fonts</dir>
</fontconfig>

Hope this helps! :)

-- 
Pierre Neidhardt
https://ambrevar.xyz/

* FSF

  - http://www.fsfla.org/ikiwiki/selibre/linux-libre/

* Gexp
#+BEGIN_EXAMPLE
       <wigust> Hello Guix, How to take a look onto a file produced
                by copy-file in Gexp?
                E.g. https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/services/messaging.scm?h=master#n662
                                                             [22:07]
       <wigust> Could I get to it with `guix gc`?            [22:09]
       <wigust> If I build a system with prosody service.
            ,*** ng0 (~ng0@gateway/tor-sasl/ng0) has quit: Quit:
                Alexa, when is the end of world?             [22:15]
          <atw> wigust: I believe you'll want to use
                gexp->derivation, then "run" the derivation. Ludo
                gave me some help with this here:
                https://lists.gnu.org/archive/html/help-guix/2018-01/msg00058.html
          <atw> Make a note of the output directory, then find the
                file produced inside there                   [22:16]
          <atw> I /think/ that's it, but I trip up often with gexps
                :)
            ,*** ng0 (~ng0@gateway/tor-sasl/ng0) has joined channel
                #guix                                        [22:17]
       <wigust> atw: Thank you!                              [22:19]
#+END_EXAMPLE

* Gexp

  #+begin_src scheme
    (use-modules (gnu packages base)
                 (gnu packages elf)
                 (guix build utils)
                 (guix gexp)
                 (guix store)
                 (guix licenses))

    (define store
      (open-connection))

    (run-with-store store
      (gexp->derivation "plumber"
                        (with-imported-modules '((guix build utils))
                          #~(begin
                              (use-modules (guix build utils))
                              (copy-file #$(local-file "/home/oleg/Downloads/plumber-linux") "plumber")
                              (invoke (string-append #$patchelf "/bin/patchelf")
                                      "--set-interpreter" (string-append #$glibc "/lib/ld-linux-x86-64.so.2")
                                      "plumber")
                              (mkdir #$output)
                              (mkdir (string-append #$output "/bin"))
                              (copy-file "plumber" (string-append #$output "/bin/plumber"))))))
  #+end_src

* GRUB

** Fix grub after "guix system reconfigure"

  Installing for i386-pc platform.                                                            
  /gnu/store/h072dgv0g63pgwry386xmgn9xc06yy3w-grub-2.04/sbin/grub-install: warning: this GPT partition label contains no BIOS Boot Partition; embedding won't be possible.
  /gnu/store/h072dgv0g63pgwry386xmgn9xc06yy3w-grub-2.04/sbin/grub-install: warning: Embedding is not possible.  GRUB can only be installed in this setup by using blocklists.  However, blocklists are UNRELIABLE and their use is discouraged..                                           
  /gnu/store/h072dgv0g63pgwry386xmgn9xc06yy3w-grub-2.04/sbin/grub-install: error: will not proceed with blocklists.

# fdisk -l /dev/sda
...
/dev/sda4  37750784   37816319      65536    32M BIOS boot
https://superuser.com/a/1170352

mkfs.vfat -F32 /dev/sdXY

* Guile trap (breakpoint)

  #+BEGIN_SRC scheme
    (use-modules (system vm trap-state))

    (add-trap-at-procedure-call! strip-mount-point)
  #+END_SRC

* Guix additional packages

  - [[https://github.com/BIMSBbioinfo/guix-bimsb-nonfree][BIMSBbioinfo/guix-bimsb-nonfree]] :: GNU Guix package definitions
       for proprietary software, or software with unclear licenses.

  - [[https://github.com/BIMSBbioinfo/guix-bimsb][BIMSBbioinfo/guix-bimsb]] :: Packages for GNU Guix that have not yet
       or will not be submitted upstream for various reasons

  - [[https://github.com/UMCUGenetics/guix-additions][UMCUGenetics/guix-additions]] :: This repository contains additional
       packages for GNU Guix to support the software in the pipelines
       developed at the Cuppen research group.

  - [[https://github.com/gds-attic/govuk-guix][gds-attic/govuk-guix]] :: Package, service and system definitions
       using GNU Guix for software and systems related to
       GOV.UK. Personal project.

* guix-daemon from master

#+BEGIN_SRC shell
  sudo -E ./pre-inst-env guix-daemon …
#+END_SRC

* Guix deployment

  - [[https://github.com/BIMSBbioinfo/puppet-bimsb-guix][BIMSBbioinfo/puppet-bimsb-guix]] :: Puppet module for deploying Guix

* TODO [[https://lists.gnu.org/archive/html/guix-devel/2015-08/msg00258.html][guix: git: Support shallow git clones if a tag is available]]
* Guix Linux 5.3.18
  #+begin_src diff
    diff --git a/dotfiles/guixsd/guixsd.scm b/dotfiles/guixsd/guixsd.scm
    index 577c56f0..f4d16290 100644
    --- a/dotfiles/guixsd/guixsd.scm
    +++ b/dotfiles/guixsd/guixsd.scm
    @@ -292,20 +292,21 @@ location / {
           "/home/oleg/src/dotfiles/guixsd/hardware/guixsd.scm"))
 
     (define %system-guixsd
    -  (let ((base-system (load %hardware-file)))
    +  (let ((base-system (load %hardware-file))
    +        (inferior (inferior-for-channels (list (channel
    +                                                (name 'nonguix)
    +                                                (url "https://gitlab.com/nonguix/nonguix")
    +                                                (commit "b7ba152c4e5d827a1d9ab290022705d5e6675e39"))
    +                                               (channel
    +                                                (name 'guix)
    +                                                (url "https://git.savannah.gnu.org/git/guix.git")
    +                                                (commit "812b0d497e2f4bd429fb438f401a40d03a0465d4"))))))
         (operating-system
           (inherit base-system)
    -      (kernel (let* ((channels (list (channel
    -                                      (name 'nonguix)
    -                                      (url "https://gitlab.com/nonguix/nonguix")
    -                                      (commit "d12b4eb46db73307b04476076f072c89d4202f6c"))
    -                                     (channel
    -                                      (name 'guix)
    -                                      (url "https://git.savannah.gnu.org/git/guix.git")
    -                                      (commit "efa773f94a18b40f2c63795f364ae87dade76f60"))))
    -                     (inferior (inferior-for-channels channels)))
    -                (first (lookup-inferior-packages inferior "linux" "5.10.4"))))
    -      (firmware (cons* amdgpu-firmware linux-firmware %base-firmware))
    +      (kernel (first (lookup-inferior-packages inferior "linux" "5.3.18")))
    +      (firmware (cons* (first (lookup-inferior-packages inferior "amdgpu-firmware" "20191022"))
    +                       (first (lookup-inferior-packages inferior "linux-firmware" "20191022"))
    +                       %base-firmware))
           (kernel-arguments '("modprobe.blacklist=pcspkr,snd_pcsp"))
           (packages %my-system-packages)
 

  #+end_src

  #+begin_src bash
    #!/usr/bin/env bash

    mapfile -t packages < <(awk '/would be upgraded/ { print $2 }' refresh.log)
    package="$(printf "%s\n" "${packages[@]}" | fzf)"
    ./pre-inst-env guix refresh --update "$package"
  #+end_src

  #+begin_src scheme
    #!/run/current-system/profile/bin/guile \
    --no-auto-compile -e (run2) -s
    !#

    ;;;; refresh --- guix refresh wrapper
    ;;;; Copyright © 2020 Oleg Pykhalov <go.wigust@gmail.com>
    ;;;; Released under the GNU GPLv3 or any later version.

    (define-module (run2)
      #:use-module (ice-9 rdelim)
      #:use-module (ice-9 match)
      #:export (main))

    (define (main args)
      (match (string-split (match (string-split (with-input-from-file "out"
                                                  read-string)
                                                #\newline)
                             ((a ... last-but-one last) last-but-one))
                           #\:)
        ((file line column package message)
         (pk (list file line column (string-trim package)
                   (string-split (string-trim message) #\space))))))
  #+end_src

  #+begin_src bash
    #!/usr/bin/env bash

    if ! [ -e refresh.log ]
    then
        ./pre-inst-env guix refresh "$(./pre-inst-env guix maintainer)" |& tee refresh.log
    fi
    package="$(awk '/would be upgraded/ { print $2 }' refresh.log | fzf)"
    version="$(./pre-inst-env guix refresh --update "$package" |& awk '/updating from version/ { print $NF }' | sed 's/\.\.\.//')"
    mapfile -t hashes < <(./pre-inst-env guix build "$package" |& awk '/hash:/ { print $NF }')
    if [ "${#hashes[@]}" -ne 0 ]
    then
        for file in gnu/packages/*.scm
        do
            if grep --quiet "${hashes[0]}" "$file"
            then
                printf 'Substitute "%s" with "%s" in "%s".\n' "${hashes[0]}" "${hashes[1]}" "$file"
                sed --in-place "s/${hashes[0]}/${hashes[1]}/" "$file"
                ./pre-inst-env guix build "$package"
                git commit --message="$(printf "gnu: $package: Update to $version.\n\n* $file ($package): Update to $version.")" "$file"
                sed --in-place "/$package/d" refresh.log
            fi
        done
    fi
#+end_src

  #+begin_src scheme
    #!/run/current-system/profile/bin/guile \
    --no-auto-compile -e (lint-commit) -s
    !#

    (define-module (lint-commit)
      #:use-module (ice-9 format)
      #:use-module (ice-9 match)
      #:use-module (ice-9 rdelim)
      #:use-module (rx irregex)
      #:use-module (srfi srfi-1)
      #:export (main))

    (define (match-subject subject)
      (irregex-match '(seq (seq (or "gnu" "services") ":" space
                                (or (seq (+ alphanumeric) ":" space "Update to" space (+ (or alphanumeric ".")))
                                    (seq "Add" space (+ (or alphanumeric "-")))))
                           ".")
                     subject))

    (define (format-match procedure string)
      (if (match-subject string)
          (format #t "[ PASS ] ~s~%" string)
          (begin (format #t "[ FAIL ] ~s~%" string)
                 (exit 1))))

    (define (main args)
      (define input (with-input-from-port (current-input-port) read-string))
      (match (string-split input #\newline)
        ((subject message ...)
         (format-match match-subject subject))))
  #+end_src

  #+begin_src scheme
    (display (run-with-store (open-connection) (package-file icedtea-8 #:output "jdk")))
  #+end_src

* Guix on foreign distroes

- Archlinux: https://aur.archlinux.org/packages/guix/
- Gentoo: https://packages.gentoo.org/packages/sys-apps/guix
- Debian: from past discussion and on request from Whonix iirc it is
  currently not possible due to Debian Packaging Standards (expected
  package behavior) or something along the lines, see guix-devel
  archives.
- Fedora: https://copr.fedorainfracloud.org/coprs/lantw44/guix/
- Slackware: https://slackbuilds.org/repository/14.2/system/guix/ is
  on 0.12, needs an update. Any slacker up for that task?  Otherwise,
  ping the maintainer: > Maintained by: Hunter Sezen

* GuixOps

- Ganeti like guixops
  https://grnet.github.io/ganetimgr/

* Guix packaging

  - [[shell:guix%20lint%20$PACKAGE][shell:guix lint $PACKAGE]]
  - [[shell:guix%20size%20$PACKAGE][shell:guix size $PACKAGE]]
  - [[shell:guix%20build%20--rounds%3D2%20$PACKAGE][shell:guix build --rounds=2 $PACKAGE]]
  - [[shell:git%20format-patch][shell:git format-patch]]
  - [[mailto:guix-patches@gnu.org]]
  - [[elisp:(writegood-grade-level)]]
  - [[elisp:(writegood-reading-ease)]]


** 

Thank you for this patch series!

Currently, it doesn't apply to the Guix git master branch. Can you
rebase the patches on the master branch and send them again?

Thanks!

** patch example

   #+BEGIN_SRC scheme
     (patches (append (origin-patches (package-source perl))
                      (search-patches "perl-archive-tar-CVE-2018-12015.patch")))
   #+END_SRC

* GuixSD custom kernel

  [[gnus:INBOX#877etk6xbu.fsf@fastmail.com][Email from Marius Bakke: Re: How to customize the kerne]] by [[mailto:mbakke@fastmail.com][Marius Bakke]]

  #+BEGIN_SRC scheme
    (define-module (my packages)
      #:use-module (gnu packages linux))

    (define kernel-config
      (string-append (dirname (current-filename)) "/kernel.config"))

    (define-public my-kernel
      (package
        (inherit linux-libre)
        (native-inputs
         `(("kconfig" ,kernel-config)
           ,@(alist-delete "kconfig"
                           (package-native-inputs linux-libre))))))

    (use-modules (my packages))
    (operating-system
      [...]
      (kernel my-kernel)
  #+END_SRC

  This lets me keep the kernel .config in version control along with the
  system configuration.

  > I am new to compiling the Linux kernel, so it is doubly difficult to
  > learn how I should do it using Guix.  Any tips would be greatly
  > appreciated.  I'm guessing one tip might be, "Try building a few Linux
  > kernels on a more normal distribution, not using Guix, a few times to
  > get the hang of doing it the 'traditional' way first."  I have not
  > really done that yet.

  Working with custom kernels in Guix is simpler than in many other
  distros IMO.  Suppose you have a patched Linux-Libre tree, then you
  could add e.g.:

    (source "/path/to/custom/kernel")

  to the package declaration above.  Be aware that rolling back to the
  previous generation might not work if your computer implodes ;-)

  For starting out, I would recommend copying the GuixSD default config[*]
  to /your/kernel/tree/.config and run:

    guix environment linux-libre --ad-hoc ncurses -- make nconfig

  This will present a nice ncurses-based interface for configuring the
  kernel.  Note that if the kernel major+minor is higher than the .config
  (see top of file), you should run `make oldconfig` first which gives an
  interactive "wizard" that walks you through all the new options.

  Good luck! :-)

  [*] You can also start from `make defconfig` if you feel adventurous.

* Guix system without bootloader

‘--no-bootloader’ should definitely work for ‘reconfigure’; could you
double-check and report a bug if it doesn’t work?

Now, if that’s useful, we could easily define a “noop” bootloader in
(gnu bootloader noop), along these lines:

  (define noop-bootloader
    (bootloader
     (name 'noop)
     (package #f)
     (installer #~(cons #t))
     (configuration-file #f)
     (configuration-file-generator #f)))
I concur!  Actually, there’s a separate file already: the nar itself.

  wget -q -O - https://ci.guix.gnu.org/nar/lzip/1gyi4i5lbpr7apm74p08dwy11fhzh4j7-sed-4.7 \
     | lzip -d | guix archive -t
* guix upgrade exlude package

  #+BEGIN_SRC shell
    guix package -u . --do-no-upgrade=libreoffice
  #+END_SRC

* Hacking
  #+BEGIN_SRC scheme
    ;; run.scm for hacking gnu/bootloader/grub.scm

    (use-modules (ice-9 history)
                 (gnu bootloader grub)
                 (guix store)
                 (guix derivations)
                 (gnu))

    (use-package-modules bootloaders)

    (define %test-os
      (operating-system
        (host-name "gnu")
        (timezone "Etc/UTC")
        (locale "en_US.utf8")
        (bootloader (bootloader-configuration
                     (bootloader grub-bootloader)
                     (target "/dev/sda")
                     (terminal-outputs '(console))
                     (menu-entries
                      (list (menu-entry
                             (label "NixOS's Grub")
                             (linux "")
                             (initrd "")
                             (additional-options
                              '("search --label --set nixos"
                                "configfile /boot/grub/grub.cfg")))))))
        (file-systems (cons (file-system
                              (device "my-root")
                              (title 'label)
                              (mount-point "/")
                              (type "ext4"))
                            %base-file-systems))
        (users %base-user-accounts)
        (packages (cons grub %base-packages))))

    (pk 'DEBUG-derivation
        (let ((%connection (open-connection)))
          (build-derivations
           %connection
           (list (run-with-store %connection
                   (let ((%test-os-bootloader (operating-system-bootloader
                                               %test-os)))
                     ((@@ (gnu bootloader grub) grub-configuration-file)
                      %test-os-bootloader
                      (bootloader-configuration-menu-entries %test-os-bootloader)
                      #:system "x86_64-linux")))))
          (build-mode check)))

    ;; ./pre-inst-env env GUIX_PACKAGE_PATH= guile --no-auto-compile -s ./run.scm
  #+END_SRC
#+BEGIN_SRC scheme
  (call-with-values (lambda () (build-derivations %connection (list (run-with-store %connection (let ((%test-os-bootloader (operating-system-bootloader %test-os))) ((@@ (gnu bootloader grub) grub-configuration-file) %test-os-bootloader (bootloader-configuration-menu-entries %test-os-bootloader) #:system "x86_64-linux" #:old-entries '())))))) (lambda (a) a))
#+END_SRC

* Haskell

ghc -o ~/.xmonad/xmonad-x86_64-linux \
-package-db $(guix build ghc-xmonad-contrib | grep -v static)/lib/ghc-8.6.5/ghc-xmonad-contrib-0.16.conf.d/ \
-package-db $(guix build ghc-dbus | grep -v static)/lib/ghc-8.6.5/ghc-dbus-1.2.7.conf.d/ \
-package-db $GUIX_PROFILE/lib/ghc-8.6.5/package.conf.d/ \
-dynamic xmonad.hs

* How to check service configuration serialize

  #+BEGIN_SRC scheme
    (use-modules (guix derivations)
                 (guix store))

    (define-gexp-compiler (repository-cgit-configuration-compiler
                           (configuration <repository-cgit-configuration>) system target)
      (text-file* "test" (repository-cgit-configuration)))

    (define wi-repo
      (repository-cgit-configuration
       (url "http//cgit.localhost/hello")))

    (define wi-conf
      ;; TODO:
      ;; (cgit-configuration (project-list '("a/b/foo.git" "c/bar.git" "baz.git")))

      (cgit-configuration))

    (define (wi-build)
      (build-derivations
       (open-connection)
       (list (run-with-store (open-connection) wi-conf))))

    (define (wi-build-check)
      (build-derivations
       (open-connection)
       (list (run-with-store (open-connection) wi-conf))
       (build-mode check)))
  #+END_SRC

* [[gnus:INBOX#87tw1zl0wy.fsf@bernoul.li][How to fix Org-mode tabs]]

  #+BEGIN_SRC emacs-lisp :tangle yes
    (when (= source-tab-width 0)
      (setq indent-tabs-mode nil))
  #+END_SRC

* How to mark patch in Emacs

  Mark the entire patch in Emacs, then invoke "M-|", and type

  #+BEGIN_SRC shell
    patch -d /the/root/directory/of/the/project -pN
  #+END_SRC

  where N should be chosen by counting the slashes that you will want
  patch to remove before looking for files relative to that root
  directory.  For patches produced by "git diff" etc., N is typically 1.

* [[gnus:INBOX#CALjrZwb16Cn1ygFYUhKDWdid1dYQabB6yB0p_eFu8YYf_00pOQ@mail.gmail.com][How to use Guix profiles]]

  #+BEGIN_SRC shell
    # 1) Install conda into a profile:
    guix package --install=conda --profile=$HOME/guix_profiles/conda

    # 2) Activate the profile:
    source $HOME/guix_profiles/conda/etc/profile

    # 3) Create an environment with conda and install biopython
    conda create --name test-env biopython

    # 4) Try to activate the environment (here's where it fails)
    source activate test-env
  #+END_SRC

* How to use sneek on Gnunet IRC channels

  #+BEGIN_EXAMPLE
    <alice> Hi Guix
    <sneek> alice, you have N message.
    <sneek> alice, bob says: MESSAGE
    <alice> sneek: later tell bob MESSAGE:
    <sneek> Will do.
  #+END_EXAMPLE

#+begin_example
  sneek: seen wigust
  <sneek>wigust was last seen in #guix 2 hours and 49 minutes ago, saying: hi guix.
#+end_example

* Hydra
  - https://hydra.gnu.org/status
  - https://hydra.gnu.org/all
  - https://hydra.gnu.org/queue

* Importers
  - https://gitlab.com/htgoebel/guix-import-debian

* Iptables

#+BEGIN_SRC scheme
  (define-module (iptables ru)
    #:use-module (guix packages)
    #:use-module (guix gexp)
    #:use-module (guix monads)
    #:use-module (guix store)
    #:use-module (gnu packages)
    #:use-module (gnu packages linux)
    #:use-module (guix utils)
    #:use-module (srfi srfi-1)
    #:use-module (ice-9 match))

  ;; Rules to throttle HTTP connection redirections.  Taken from
  ;; <https://www.opennet.ru/tips/2999_iptables_block_tor.shtml>.

  (define %iptables-rst
    "-A INPUT -p tcp --sport 443 --tcp-flags RST RST -j DROP")

  (define %iptables-warning
    "-A INPUT -p tcp --sport 80 -m string --string \"Location: http://warning.rt.ru\" --algo bm -j DROP")

  (define %iptables-promo
    "-A INPUT -p tcp --sport 80 -m string --string \"Location: http://promo.nw.rt.ru\" --algo bm -j DROP")
#+END_SRC

* Jami

Message-ID: <87ee7be7ty.fsf@gmail.com>

Hello Guix,

Disclaimer: my employer is Savoir-faire Linux, which oversees the
development of Jami.

For a while, I've toyed with the idea that we could leverage Jami for
our video-conference needs, and contributed a jami-service-type a few
months ago to ease doing so [0].

A service is not strictly needed to setup a video-conferencing server
(later referred as a "rendezvous point") with Jami [1], it increases
availability and can be used without a normal user session.  It also
provides some isolation from the main system since it runs in a separate
namespace (container), at least on Guix System.

The main challenges for a decent experience with the Jami rendezvous
point feature is its resource requirements; as the number of
participants grow, so does the required amount of network bandwidth and
CPU power.

As some kind of technology preview, I'd like to offer a freely available
Jami rendezvous point.  Using either the jami-gnome or jami-qt client
available in Guix, you can connect to it by searching for the
'rdv-jami-guix' contact and initiating a call.  Participants' audio and
video streams will automatically be mixed and streamed by the server.

On a Guix System, installing it to your user profile should suffice.  On
a foreign distribution, you'll have to resort to a more complicated
launch procedure, thanks to D-Bus configuration [2].  Something like this
should work:

$ guix shell jami-gnome dbus glib gtk+ openssl nss-certs \
    -- dbus-run-session jami-gnome

I hope it proves useful in fostering more live collaboration in the
community!  Extra rendezvous points could also be deployed if needed.
If the experience is successful we could seek a better place to host
such service for the community (where it could be managed by the
collective of Guix sysadmins rather than myself for example).

Happy hacking,

Maxim

[0]  https://git.savannah.gnu.org/cgit/guix.git/commit/?id=69dcc24c9f0cdfea674eb690e7755d26a25ced2b
[1]  https://jami.net/help/#answer14
[2]  https://issues.guix.gnu.org/48538

* Laptop
1) Avoid ones with hybrid dual graphics ie intel/nvidia aka optimus
2) Avoid anything realtek
3) If its got fancy Dolby sound or quad speakers they wont work on Debian
4) Always check reviews for PWM flickering on screen dimming if you
have sensitive eyes
* mcron

  #+BEGIN_SRC scheme
    (define (backup-home user)
      #~(let ((borg (string-append #$borg "/bin/borg"))
              (home (format #f "/home/~a" #$user)))
          (system*
           borg "--verbose" "create"
           "--exclude-caches"
           "--exclude" (format #f "~a/.cache/*" home)
           "--stats" "--list"
           "/mnt/borg::{hostname}-{utcnow}"
           home)
          (system*
           borg "--verbose" "prune"
           "--list"
           "--prefix" "{hostname}-"
           "--keep-within=1w" "--keep-daily=30" "--keep-monthly=6"
           "/mnt/borg")))

    ;; test like
    ;; ,use (guix monad-repl)
    ;; ,enter-store-monad
    ;; (gexp->script "test" (backup-home "alex"))
    ;; ;; and note what the derivation produces. That's the script to run.
    ;; (mlet %store-monad ((script (gexp->script "test" (backup-home "alex"))))
    ;;       (built-derivations (list script)))
    ;; then, run the script to do a manual backup.

    (define (backup-home-job user)
      #~(job '(next-hour '(18))
             #$(backup-home user)
             #:user #$user))

    ;; in your (services ...)
    (mcron-service (list (backup-home-job "your-user-home-dir-name")))
  #+END_SRC

* Memory


Ludovic Courtès <ludo@gnu.org> skribis:

> Most of it seems to go in loading .go files:

On x86_64, I’ve run:

  ./pre-inst-env perf record guile -c '(use-modules (gnu packages libreoffice))'

which shows mostly GC activity, along with symbol interning activity:

  14.71%  guile    libgc.so.1.3.6         [.] GC_mark_from
   7.49%  guile    libgc.so.1.3.6         [.] GC_header_cache_miss
   5.56%  guile    libguile-3.0.so.1.1.1  [.] vm_regular_engine
   5.42%  guile    libgc.so.1.3.6         [.] GC_add_to_black_list_normal
   2.66%  guile    libpthread-2.29.so     [.] __pthread_mutex_unlock_usercnt
   2.63%  guile    libgc.so.1.3.6         [.] GC_find_header
   2.09%  guile    ld-2.29.so             [.] _dl_update_slotinfo
   1.88%  guile    libguile-3.0.so.1.1.1  [.] scm_c_weak_set_lookup
   1.68%  guile    libguile-3.0.so.1.1.1  [.] narrow_string_hash
   1.64%  guile    libguile-3.0.so.1.1.1  [.] scm_i_is_narrow_string
   1.55%  guile    libguile-3.0.so.1.1.1  [.] scm_ihashq
   1.52%  guile    libguile-3.0.so.1.1.1  [.] scm_sloppy_assq
   1.32%  guile    libgc.so.1.3.6         [.] GC_move_disappearing_link_inner
   1.23%  guile    libgc.so.1.3.6         [.] GC_malloc_kind
   1.23%  guile    libpthread-2.29.so     [.] __pthread_mutex_lock
   1.22%  guile    libguile-3.0.so.1.1.1  [.] scm_hash_fn_get_handle
   1.19%  guile    libpthread-2.29.so     [.] __pthread_mutex_trylock
   1.12%  guile    libguile-3.0.so.1.1.1  [.] get_callee_vcode
   1.12%  guile    libguile-3.0.so.1.1.1  [.] scm_equal_p


Back on my A20 board, I get this (unhelpful) GC profile:

scheme@(guix-user)> ,use(statprof)
scheme@(guix-user)> (gcprof (lambda () (resolve-module '(gnu packages base))))
%     cumulative   self
time   seconds     seconds  procedure
100.00      5.13      5.13  ice-9/boot-9.scm:2201:0:%load-announce
  0.00   4081.53      0.00  ice-9/boot-9.scm:220:5:map1
  0.00    621.21      0.00  ice-9/threads.scm:388:4
  0.00    310.61      0.00  ice-9/boot-9.scm:2803:0:save-module-excursion
  0.00    310.61      0.00  anon #x1b15600
  0.00    310.61      0.00  ice-9/boot-9.scm:3211:7
  0.00    310.61      0.00  ice-9/boot-9.scm:3500:5
  0.00    310.61      0.00  ice-9/boot-9.scm:3508:21
  0.00    305.47      0.00  ice-9/boot-9.scm:3256:0:resolve-interface
  0.00    295.21      0.00  ice-9/boot-9.scm:3381:5
  0.00    295.21      0.00  ice-9/boot-9.scm:3351:0:define-module*
  0.00      5.13      0.00  anon #xb2d8d098
  0.00      5.13      0.00  anon #xb32d0098
  0.00      5.13      0.00  anon #xb2fca098
  0.00      5.13      0.00  anon #xb32e2098
  0.00      5.13      0.00  anon #xb3343098
  0.00      5.13      0.00  ice-9/boot-9.scm:2557:0:call-with-deferred-observers
[…]
---
Sample count: 2
Total time: 5.134 seconds (0.44 seconds in GC)


and this profile:

scheme@(guix-user)> ,pr (resolve-module '(gnu packages base))
%     cumulative   self
time   seconds     seconds  procedure
 17.86      1.38      1.38  ice-9/boot-9.scm:2201:0:%load-announce
  5.36      0.41      0.41  ice-9/boot-9.scm:3545:0:autoload-done!
  4.76      0.37      0.37  ice-9/boot-9.scm:3540:0:autoload-done-or-in-progress?
  4.76      0.37      0.37  anon #x1a671cc
  4.17      0.32      0.32  ice-9/format.scm:113:2:format:format-work
  3.57      0.28      0.28  ice-9/boot-9.scm:3552:0:autoload-in-progress!
  2.98      0.55      0.23  ice-9/boot-9.scm:1396:0:symbol-append
  2.98      0.23      0.23  anon #x1a65c28
  1.79      0.32      0.14  ice-9/boot-9.scm:2729:0:module-make-local-var!
  1.79      0.14      0.14  anon #x1a671a4
  1.79      0.14      0.14  anon #x1a6c284
  1.79      0.14      0.14  anon #x1a67644
  1.79      0.14      0.14  ice-9/boot-9.scm:3209:4
  1.19   6106.96      0.09  ice-9/boot-9.scm:220:5:map1
  1.19    518.54      0.09  ice-9/boot-9.scm:3211:7
  1.19    511.19      0.09  ice-9/boot-9.scm:3381:5
  1.19      5.69      0.09  anon #xb13f9098
  1.19      0.18      0.09  anon #xad994098
  1.19      0.09      0.09  anon #x1a6848c
  1.19      0.09      0.09  srfi/srfi-60.scm:57:0:bitwise-if
  1.19      0.09      0.09  ice-9/boot-9.scm:2468:2
  1.19      0.09      0.09  ice-9/boot-9.scm:2468:2
  1.19      0.09      0.09  anon #x1a6e284
  1.19      0.09      0.09  anon #x1a67cd4
  1.19      0.09      0.09  anon #x1a6e87c
[…]
---
Sample count: 168
Total time: 7.714 seconds (1.279 seconds in GC)


What’s the deal with ‘%load-announce’?  How many times is it called?

$ guix repl
GNU Guile 3.0.2
Copyright (C) 1995-2020 Free Software Foundation, Inc.

Guile comes with ABSOLUTELY NO WARRANTY; for details type `,show w'.
This program is free software, and you are welcome to redistribute it
under certain conditions; type `,show c' for details.

Enter `,help' for help.
scheme@(guix-user)> ,use(system vm vm)
scheme@(guix-user)> (set-vm-engine! 'debug)
scheme@(guix-user)> ,use(statprof)
scheme@(guix-user)> (statprof (lambda () (resolve-module '(gnu packages base))) #:count-calls? #t)
%     cumulative   self
time   seconds    seconds   calls   procedure
  5.31      4.39      4.39                            anon #x1ba81cc
  3.84  98371.57      3.17   69196  ice-9/boot-9.scm:220:5:map1
  3.32      2.75      2.75   57783  ice-9/boot-9.scm:2468:2
  3.26      2.70      2.70                            anon #x1ba81a4
  3.01      2.49      2.49   60626  ice-9/boot-9.scm:1299:5
  2.94      9.23      2.43   44668  ice-9/boot-9.scm:2757:0:module-add!
  2.85      4.39      2.35   47021  ice-9/boot-9.scm:2549:0:module-modified
  2.53      2.09      2.09   44668  ice-9/boot-9.scm:2652:0:module-obarray-set!
  2.33      1.93      1.93                            anon #x1ba6c28
  2.24      1.85      1.85                            anon #x1baa1fc
  2.21      1.83      1.83                            anon #x1bad284
  2.11      1.75      1.75                            anon #x1ba8cd4
  2.01      4.55      1.67   32603  ice-9/boot-9.scm:2790:0:module-ref-submodule
  1.92      1.59      1.59                            anon #x1ba8f34
  1.89      1.56      1.56   21349  ice-9/boot-9.scm:806:0:and=>
  1.76      1.46      1.46   32184  ice-9/boot-9.scm:2468:2
  1.69      1.40      1.40   33343  ice-9/boot-9.scm:2468:2
  1.69      1.40      1.40                            anon #x1ba8080
  1.50     15.24      1.24   19850  ice-9/boot-9.scm:3339:29
  1.44   7457.26      1.19    7325  ice-9/boot-9.scm:3256:0:resolve-interface
  1.44      1.19      1.19   19133  ice-9/boot-9.scm:3345:2
  1.41      9.79      1.16   19217  ice-9/boot-9.scm:1396:0:symbol-append
  1.37      1.14      1.14   20160  ice-9/boot-9.scm:2468:2
  1.34      1.11      1.11   19850  ice-9/boot-9.scm:3303:48
  1.34      1.11      1.11   14322  srfi/srfi-60.scm:57:0:bitwise-if
  1.31      1.08      1.08   36200  anon #x1ba6c18
  1.15      2.65      0.95    9672  ice-9/vlist.scm:544:0:vhash-assv
  1.15      2.09      0.95   20671  ice-9/boot-9.scm:215:2:map
  1.15      0.95      0.95   14210  ice-9/boot-9.scm:3209:4
  1.12      7.09      0.93   12743  ice-9/boot-9.scm:2729:0:module-make-local-var!
  1.05      0.87      0.87   11594  guix/utils.scm:810:0:source-properties->location
  0.99      1.35      0.82   11559  ice-9/boot-9.scm:2746:0:module-ensure-local-variable!
  0.90      0.74      0.74     370  ice-9/boot-9.scm:2201:0:%load-announce
[…]
---
Sample count: 3128
Total time: 82.752 seconds (16.401 seconds in GC)

Only 370 times.

Hmm could something be wrong with the mapping of instruction pointers to
source code location?

Ludo’.

* Misc

  - Latest Emacs: https://lists.gnu.org/archive/html/help-guix/2018-04/msg00099.html

* network-manager-service-type

#+BEGIN_SRC scheme
  (network-manager-service-type
   config =>
   (network-manager-configuration
    (inherit config)
    (vpn-plugins (list (specification->package+output
			"network-manager-openvpn")))))
#+END_SRC
success = false; } else { //Lock texture if( !gFooTexture.lockTexture() ) { printf( "Unable to lock Foo' texture!\n" ); }
* ng0 plans

<ng0> upcoming (as far as I remembered the list): Services for murmurd,
      apache, mantis, buildbot, finishing my tlsdate service, and packages for
      mantis + buildbot. there's more I think.

* Pitfalls

  - Unbound variable: package-version
    https://gnunet.org/bot/log/guix/2016-02-16

* Pulseaudio


Derp, I did not notice you had re-rolled the patches already :-)

Please ignore the /etc/pulse related questions, this looks much better.

> The second patch of this series differs from the one proposed there, in that
> it uses environment variables to achieve its goal rather than rebuilding
> pulseaudio.  As a result, pulseaudio-service will very likely ignore user
> configuration in $XDG_CONFIG_DIR/pulse unless those variables are unset.
> Doing so in ~/.profile or an equivalent to it should suffice.

Sounds reasonable.  Users who wish to control pulseaudio outside of the
configuration system can just exclude the service, or unset PULSE_CONFIG
and PULSE_CLIENT_CONFIG in their profile.

* QEMU

#+BEGIN_SRC diff
  diff --git a/gnu/system/examples/vm-image.tmpl b/gnu/system/examples/vm-image.tmpl
  index bcb2ba614c..5db38911a1 100644
  --- a/gnu/system/examples/vm-image.tmpl
  +++ b/gnu/system/examples/vm-image.tmpl
  @@ -41,10 +41,15 @@ accounts.\x1b[0m
                  (bootloader grub-bootloader)
                  (target "/dev/vda")
                  (terminal-outputs '(console))))
  -  (file-systems (cons (file-system
  -                        (mount-point "/")
  -                        (device "/dev/vda1")
  -                        (type "ext4"))
  +  (file-systems (append (list (file-system
  +                                (mount-point "/")
  +                                (device "/dev/vda1")
  +                                (type "ext4"))
  +                              (file-system
  +                                (mount-point "/mnt")
  +                                (device "TAG_ssh")
  +                                (type "9p")
  +                                (options "trans=virtio")))
                         %base-file-systems))
 
     (users (cons (user-account
  @@ -78,7 +83,10 @@ root ALL=(ALL) ALL
                                (keyboard-layout keyboard-layout)))))
 
                    ;; Uncomment the line below to add an SSH server.
  -                 ;;(service openssh-service-type)
  +                 (service openssh-service-type
  +                          (openssh-configuration
  +                           (authorized-keys
  +                            `(("guest" ,(local-file "/home/oleg/.ssh/id_rsa.pub"))))))
 
                    ;; Use the DHCP client service rather than NetworkManager.
                    (service dhcp-client-service-type))
#+END_SRC

oleg@guixsd ~/src/guix-master$ /gnu/store/dl0w9s9mchyg0ggj62yzd2szw200nsb3-run-vm.sh -m 2048 -smp 2 -nic user,model=virtio-net-pci,hostfwd=tcp::10022-:22 -daemonize -virtfs local,path="$HOME/.ssh",security_model=none,mount_tag="TAG_ssh"

#+BEGIN_SRC scheme
  (use-modules (system vm elf)
               (rnrs io ports)
               (ice-9 match))

  (define go
    (search-path %load-compiled-path "gnu/packages/python-xyz.go"))

  (define elf
    (parse-elf (call-with-input-file go get-bytevector-all)))

  (define (elf-section-name-as-string elf section)
    (let ((off (elf-section-offset
                (list-ref (elf-sections elf)
                          (elf-shstrndx elf)))))
      (string-table-ref (elf-bytes elf)
                        (+ off (elf-section-name section)))))

  (sort (map (lambda (section)
               (cons (elf-section-name-as-string elf section)
                     (elf-section-size section)))
             (elf-sections elf))
        (match-lambda*
          (((name1 . size1) (name2 . size2))
           (> size1 size2))))
#+END_SRC


The manual describes how to fetch Guix from Git in section ‘14.1
Building from Git’, including how to verify the authenticity of the
copy. Quoting the part in question:

  1.‘guix git authenticate’ only works after the branch ‘keyring’ has
     been set up locally; I’ve been told to achieve this with the
     command ‘git fetch upstream keyring:keyring’, but ‘git checkout
     keyring’ has worked for me, too. After that, it seems to be
     necessary to switch back to the master branch to successfully run
    ‘guix git authenticate’. I think the commands for this should be
     included in this section.

  2. The word ‘if’ seems to be a typo of ‘it’. I first thought that the
     sentence was incomplete and that the command should pass if the
     commit and the fingerprint [did something]. :)

* Repository

- [[https://github.com/UMCUGenetics/guix-additions][guix-additions]]
- [[https://gitlab.com/daym/guix-gui/][Danny Milosavljevic / guix-gui · GitLab]]
- [[https://github.com/SystemCrafters/guix-installer][SystemCrafters/guix-installer: A GNU Guix installer image with the full Linux kernel!]]
- [[https://github.com/saucoide/scn-channel][saucoide/scn-channel with a qtile window manager]]
- [[https://bordeaux.guix.gnu.org/][bordeaux.guix.gnu.org]]

* Reproducibility

  #+BEGIN_SRC shell
    wget -q -O - https://mirror.hydra.gnu.org/guix/nar/gzip/7drfxfiwif436bw908iy6jm3myrinn4m-xfce4-session-4.12.0 | gunzip -c | guix archive -x xfsession1
    wget -q -O - https://berlin.guixsd.org/nar/gzip/7drfxfiwif436bw908iy6jm3myrinn4m-xfce4-session-4.12.0 | gunzip | guix archive -x xfsession2
    diff -ru --no-dereference xfsession[12]
    diffoscope xfsession[12]/share/icons/hicolor/icon-theme.cache
  #+END_SRC

* Reproducibility

** mescc

  #+BEGIN_EXAMPLE
    <OriansJ`> well wigust; janneke  is working on getting mescc
               to build a self-hosting gcc-2.95.3. I'm working on
               reducing the binary seed we are currently using for
               mescc-tools and rain1 thanks for that tcc testing
  #+END_EXAMPLE
  
  https://gitlab.com/janneke/mes

** Misc

*** guix environment emacs
    #+begin_src scheme
      #!/run/current-system/profile/bin/guile \
      --no-auto-compile -e (br1-mr14.intr) -s
      !#

      (define-module (br1-mr14.intr)
        #:export (main))

      (define (main args)
        (system* "guix" "environment" "--pure" "--ad-hoc" "emacs" "emacs-vterm" "coreutils" "openssh" "--"
                 "env" "GTK_THEME=Adwaita:dark" "emacs" "--debug-init" "--no-init-file" "--vertical-scroll-bars"
                 (string-append "--eval="
                                (format #f "~s"
                                        '(progn (load-theme 'manoj-dark)
                                                (global-prettify-symbols-mode)
                                                (setq prettify-symbols-unprettify-at-point 'right-edge)
                                                (setq confirm-kill-processes nil)
                                                (load (expand-file-name "~/.emacs.d/modules/term.el"))
                                                (vterm)
                                                (vterm-send-string "ssh br1-mr14.intr")
                                                (vterm-send-return))))))
    #+end_src

*** 
  - [[https://bootstrapping.miraheze.org/wiki/Investigate][ideas we haven't yet explored]]
  - https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=74682318
  - [2018-09-10 Mon 18:54] [[gnus:INBOX#87pnxqkbmg.fsf@gnu.org][Email from Ludovic Courtès: hpcguix-web, channels, and inferiors]] by [[mailto:ludovic.courtes@inria.fr][Ludovic Courtès]]

- 36162 remote-eval
- Guix CI test

#+BEGIN_EXAMPLE
  $ ./pre-inst-env guile
  GNU Guile 2.2.5
  Copyright (C) 1995-2019 Free Software Foundation, Inc.

  Guile comes with ABSOLUTELY NO WARRANTY; for details type `,show w'.
  This program is free software, and you are welcome to redistribute it
  under certain conditions; type `,show c' for details.

  Enter `,help' for help.
  scheme@(guile-user)> ,use(guix store)
  scheme@(guile-user)> (use-modules (gnu ci) (ice-9 match))
  scheme@(guile-user)> (define store (open-connection))
  scheme@(guile-user)> (define jobs  (hydra-jobs store '((systems "x86_64-linux" "i686-linux"))))
  evaluating for 'x86_64-linux' (heap size: 35.0 MiB)...
  random seed for tests: 1562154761
  evaluating for 'i686-linux' (heap size: 467.0 MiB)...
#+END_EXAMPLE

- Build Guix documentation
  : guix build -f doc/build.scm
  
  : GUIX_WEB_SITE_URL="//guix.gnu.org/" ./pre-inst-env  guix build -f doc/build.scm
  : rsync -rzvha --copy-links /gnu/store/…-guix-manual/ …/manual/

- [bug#36469] [PATCH 0/2] 'guix pack' records environment variables
  : guix pack -f docker guile guile-json --entry-point=bin/guile
  : docker run THE-IMAGE

- Message-ID: <874l4254kv.fsf@gnu.org>
#+BEGIN_SRC scheme
  (define update-guix-hpc-web
    (build-program "https://gitlab.inria.fr/guix-hpc/website.git"
                   "/srv/guix-hpc"))

  (operating-system
    ;; …
    (services (cons (simple-service 'update-guix-hpc-web
                                    mcron-service-type
                                    (list #~(job '(next-minute '(0))
                                                 #$update-guix-hpc-web)))
                    …)))
#+END_SRC

Inside =$ guix repl=:
#+BEGIN_SRC scheme
  (use-modules (guix channels) (guix describe))
  (profile-channels (current-profile))
#+END_SRC

Will produce a <channel> record:
#+BEGIN_EXAMPLE
  $1 = (#<<channel> name: guix
                    url: "https://git.savannah.gnu.org/git/guix.git"
                    branch: "master" commit: "178f1d1f75a8d512b517f474f63da507beaebd49"
                    location: ((line . 549) (column . 19) (filename . "guix/channels.scm"))>)
#+END_EXAMPLE


#+BEGIN_SRC scheme
  (for-each (lambda (file)
              (rename-file file (string-append (dirname file) "/..")))
            (find-files themes))
#+END_SRC

#+BEGIN_SRC scheme
  (let ((device-number (lambda (major minor)
                         (+ (* major 256) minor))))
    (mknod "/dev/tty" 'char-special #o600
           (device-number 5 0))
    (chmod "/dev/tty" #o666))
#+END_SRC

patchelf ld-linux-x86-64.so.2
https://nixos.org/patchelf.html
#+BEGIN_SRC scheme
  (invoke "patchelf"
          "--set-interpreter"
          (string-append (assoc-ref %build-inputs "glibc") "/lib/ld-linux-x86-64.so.2")
          file-name)
#+END_SRC
* Search path directory
#+BEGIN_SRC scheme
  ;; If you want to match a regular file instead of a directory (the
  ;; default), you must write:

  (search-path-specification
   (variable "DRMAA_LIBRARY_PATH")
   (files '("lib/libdrmaa.so"))
   (file-type 'regular))

  ;; This will match all the lib/libdrmaa.so files found in the environment.
#+END_SRC

* Shepherd
#+begin_quote
root@berlin ~/maintenance/hydra# herd restart guix-daemon
Service cuirass-web has been stopped. 
Service cuirass has been stopped.
Service guix-publish has been stopped.
Service guix-daemon has been stopped. 
herd: exception caught while executing 'start' on service 'guix-daemon':
Unbound variable: fork+exec-command/container
root@berlin ~/maintenance/hydra# herd restart guix-daemon
Service guix-daemon is not running.   
herd: exception caught while executing 'start' on service 'guix-daemon':
Unbound variable: fork+exec-command/container

The workaround I found, which works nicely, is to run:

  herd eval root "(reload-module (resolve-module '(gnu build shepherd)))"

and then:

  herd restart guix-daemon
  herd restart guix-publish
  …
#+end_quote
* Static networking service
  #+BEGIN_SRC scheme
    (services (cons* …
                     (static-networking-service "enp6s4f0"
                                                "141.80.181.40"
                                                #:netmask "255.255.255.0"
                                                #:gateway "141.80.181.1")
                     (static-networking-service "enp0s8"
                                                "192.168.0.1"
                                                #:netmask "255.255.255.0")
                     …
                     %base-services))

  #+END_SRC

* Static vs dynamic binding

Most of the time in Guix we favor static binding: it makes sure that
programs work out of the box, regardless of what happens to be already
installed on your system, and that the program will behave the same on
all systems since its behavior does not depend on external state.
There are exceptions where we want dynamic binding, for instance for
plugins or optional/soft dependencies.
- [[https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=877019][Debian Bug report logs - #877019 ITP: nix -- Purely functional package manager]]

* Stop stripping mount point if BTRFS
  :LOGBOOK:
  CLOCK: [2017-10-30 Mon 04:34]--[2017-10-30 Mon 04:59] =>  0:25
  CLOCK: [2017-10-30 Mon 02:57]--[2017-10-30 Mon 03:22] =>  0:25
  CLOCK: [2017-10-30 Mon 02:04]--[2017-10-30 Mon 02:29] =>  0:25
  :END:

* Tests
#+begin_src scheme
  (test-assert "foo"
    (marionette-eval
     '(begin
        (use-modules (ice-9 rdelim)
                     (ice-9 popen))
        (let* ((port   (open-pipe "/run/current-system/profile/bin/cat /tmp/out.txt; /run/current-system/profile/bin/ls -la /var/guix/profiles/per-user /var/guix/profiles/per-user/alice /home/alice /home/alice/test /root"
                                  OPEN_READ))
               (output (read-string port)))
          (close-port port)
          (pk (string-trim-right output #\newline))))
     marionette))
#+end_src

* Thinkpad Linux Kernel config

  #+BEGIN_SRC scheme
    (kernel-arguments (list "modprobe.blacklist=pcspkr" "quiet" "rhgb"
                            "thinkpad_acpi.fan_control=1" "i195.modeset=1"))
  #+END_SRC

* Tips

** Capture closure
#+BEGIN_SRC scheme
(with-output-to-file "/etc/nix/nix.conf"
  (lambda _
    (display "sandbox = true")
    (newline)
    (format #t "build-sandbox-paths = ~{~a ~}~%"
            '#$(package-closure (map (match-lambda ((name package) package))
                                     (package-inputs nix))))))
#+END_SRC

That’s inaccurate: ‘package-closure’ does not capture non-package
inputs, and it’s the set of build-time dependencies, not references.

Using #:references-graphs solves that problem because it gives you
precisely the closure of each package, as returned by ‘guix gc -R’.

** [[http://issues.guix.gnu.org/41732#7][issue with emacs-lua-mode and emacs-next]]

** [2017-08-26 Sat 02:38] [[gnus:INBOX#871snzfl4s.fsf@gnu.org][Email from Ludovic Courtès: Tip of the day: storing your G]] by [[mailto:ludo@gnu.org][Ludovic Courtès]]
   #+BEGIN_SRC scheme
   (operating-system
     (services
      (cons
       (simple-service 'store-my-config
		       etc-service-type
		       `(("config.scm"
			  ,(local-file (assoc-ref
					(current-source-location)
					'filename))))))))
   #+END_SRC
** [2017-08-26 Sat 02:43] [[gnus:INBOX#87d17o7x5z.fsf@gnu.org][Email from Ludovic Courtès: Re: overriding essential-servi]] by [[mailto:ludo@gnu.org][Ludovic Courtès]]
   #+BEGIN_SRC scheme
   (services (cons (simple-service 'my-env
				   session-environment-service-type
				   `(("GUILE_LOAD_PATH"
				      . ,(file-append guile-2.2 "/share/foo"))))
		   %base-services))

   #+END_SRC

** override package in module
   #+begin_src scheme
     #!/usr/bin/env -S guix repl --
     !#

     (use-modules (gnu packages admin)
                  (guix packages)
                  (guix download)
                  (guix build-system gnu)
                  ((guix licenses)
                   #:select (gpl3+ lgpl2.0+ lgpl3+ public-domain)))

     (define progress
       (package
         (name "hello")
         (version "2.10")
         (source (origin
                   (method url-fetch)
                   (uri (string-append "mirror://gnu/hello/hello-" version
                                       ".tar.gz"))
                   (sha256
                    (base32
                     "0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i"))))
         (build-system gnu-build-system)
         (synopsis "Hello, GNU world: An example GNU package")
         (description
          "GNU Hello prints the message \"Hello, world!\" and then exits.  It
     serves as an example of standard GNU coding practices.  As such, it supports
     command-line arguments, multiple languages, and so on.")
         (home-page "https://www.gnu.org/software/hello/")
         (license gpl3+)))

     ;; (module-make-local-var! (resolve-module '(gnu packages admin))
     ;;                         (module-obarray-ref (module-obarray (current-module)) 'progress))

     (module-ensure-local-variable! (resolve-module '(gnu packages admin))
                                    'progress)

     (pk (package-name (@@ (gnu packages admin) progress)))

     (module-add! (resolve-module '(gnu packages admin)) 'progress (module-obarray-ref (module-obarray (current-module)) 'progress))

     (pk (module-symbol-binding (resolve-module '(gnu packages admin))
                                'progress))

     (pk 'end)

     ;; (pk 'third)

   #+end_src

* TOBLOG

#+BEGIN_SRC markdown
  # Preparation

  If you have a [[https://git.savannah.gnu.org/cgit/guix.git]](Guix Git
  repository) already, you can create a new [Git
  Worktree](https://git-scm.com/docs/git-worktree).



  [More info](https://www.gnu.org/software/guix/manual/html_node/Building-from-Git.html#Building-from-Git)

#+END_SRC

* Translation

[0]: <https://translationproject.org/domain/guix.html>
[1]: <https://translationproject.org/domain/guix-manual.html>
[2]: <https://translationproject.org/domain/guix-packages.html>

* Unzip initial RAM disk

#+BEGIN_SRC shell
  gunzip -C < INITRD | cpio -tv
#+END_SRC

* Video

Here’s the script I used to make a QEMU animation of the installation
process: it grabs screenshots at regular intervals through QEMU.

You can then assemble them to form an animated GIF with:

  : convert -loop 0 -delay 20 /tmp/qemu-movie-0*ppm /tmp/install.gif

The GIF can be compressed with:

  : mogrify -layers optimize-frame /tmp/install.gif

On IRC, Ricardo came up with this command to produce the video at
<https://guix.gnu.org/guix-videos/guix-system-install-1.1.0.webm> (with
a fade-in, proper frame rate, etc.):

#+begin_src bash
  ffmpeg -framerate 30 -pattern_type glob -i \
         'qemu-guix-install.selected/qemu-movie-*.ppm' -c:v libvpx-vp9 -vsync \
         cfr -crf 31 -pix_fmt yuv420p -b:v 0 -filter_complex \
         "setpts=5*PTS,loop=loop=60:size=1:start=0,fade=t=in:st=0:n=60" \
         out3.webm
#+end_src

Ludo’.

#+begin_src scheme
  ;; Copyright © 2020 Ludovic Courtès <ludo@gnu.org>
  ;; Released under the GNU General Public License, version 3 or later.

  (use-modules (ice-9 match)
               (gnu system vm)
               (gnu system install)
               (guix)
               (guix ui)
               (gnu packages virtualization))


  (define O_CLOEXEC                                 ;missing in Guile 3.0.2
    #o02000000)

  (define wait-for-monitor-prompt
    (@@ (gnu build marionette) wait-for-monitor-prompt))

  (define (spawn command)
    (match (primitive-fork)
      (0   (dynamic-wind
             (const #t)
             (lambda ()
               (apply execl (car command) command))
             (lambda ()
               (primitive-_exit 42))))
      (pid pid)))

  (define (shoot-movie)
    (mlet* %store-monad ((image (system-disk-image installation-os
                                                   #:disk-image-size 'guess))
                         (qemu  (lower-object qemu))
                         (_     (built-derivations (list qemu image))))
      (define disk
        (begin
          (system* (string-append (derivation->output-path qemu)
                                  "/bin/qemu-img")
                   "create" "-f" "qcow2" "/tmp/disk.img" "2G")
          "/tmp/disk.img"))

      (define command
        (list (string-append (derivation->output-path qemu)
                             "/bin/qemu-system-x86_64")
              "-enable-kvm" "-m" "512"
              "-drive"
              (string-append "file="
                             (pk (derivation->output-path image))
                             ",if=virtio,cache=writeback,readonly")
              "-monitor" "unix:/tmp/monitor"
              "-drive" "file=/tmp/disk.img,if=virtio"
              "-snapshot"))

      (define monitor
        (socket AF_UNIX SOCK_STREAM 0))

      (bind monitor AF_UNIX "/tmp/monitor")
      (listen monitor 1)
      (fcntl monitor F_SETFL
             (logior O_CLOEXEC (fcntl monitor F_GETFL)))

      (let ((pid (spawn command)))
        (match (accept monitor)
          ((sock . _)
           (wait-for-monitor-prompt sock #:quiet? #f)
           (let loop ((n 0))
             (format sock "screendump /tmp/qemu-movie-~4,48d.ppm~%" n)
             (force-output sock)
             (wait-for-monitor-prompt sock #:quiet? #f)
             (usleep 200000)
             (loop (+ 1 n))))))))

  (false-if-exception (delete-file "/tmp/monitor"))

  (with-build-handler (build-notifier)
    (with-store store
      (run-with-store store (shoot-movie))))
#+end_src

- [[https://10years.guix.gnu.org/program/][Ten Years of Guix — Program]]

* Videos
  - http://audio-video.gnu.org/video/ghm2013/Daimrod-Recent_work_in_the_Emacs_XWidget_branch_.webm
  - http://audio-video.gnu.org/video/ghm2013/David_Bremner-Notmuch_mail_.webm
  - http://audio-video.gnu.org/video/ghm2013/Jose_Marchesi-GNU_recutils_.webm
  - http://audio-video.gnu.org/video/ghm2013/Ludovic_Courtes-GNU_Guix_the_computing_freedom_deployment_tool_.webm
  - http://audio-video.gnu.org/video/ghm2013/Samuel_Thibault-Hurd_recent_developments_.webm
  - https://archive.fosdem.org/2014/schedule/event/gnuguix/
  - https://archive.fosdem.org/2016/schedule/event/deployments_with_gnu_guix/
  - https://audio-video.gnu.org/video/ghm2013/Daimrod-Recent_work_in_the_Emacs_XWidget_branch_.webm
  - https://audio-video.gnu.org/video/ghm2013/David_Bremner-Notmuch_mail_.webm
  - https://audio-video.gnu.org/video/ghm2013/Jose_Marchesi-GNU_recutils_.webm
  - https://audio-video.gnu.org/video/ghm2013/Ludovic_Courtes-GNU_Guix_the_computing_freedom_deployment_tool_.webm
  - https://audio-video.gnu.org/video/ghm2013/Samuel_Thibault-Hurd_recent_developments_.webm
  - https://audio-video.gnu.org/video/ghm2017/2017-08--courtes--guix--ghm.webm
  - https://audio-video.gnu.org/video/ghm2017/2017-08--sassmannshausen--potluck--ghm.webm
  - https://audio-video.gnu.org/video/misc/2016-01__GNU_Guix__Gentle_Introduction_to_Functional_Package_Management.webm
  - https://audio-video.gnu.org/video/misc/2016-01__GNU_Guix__Your_Distro_is_a_Scheme_Library.webm
  - https://www.gnu.org/ghm/2013/paris/v2/sylvain/output.webm
  - https://www.gnu.org/software/guix/blog/tags/talks/

  - https://www.cloudbees.com/videos/purely-functional-ci-cd-pipeline-using-jenkins-with-guix
  - https://xana.lepiller.eu/guix-days-2022/guix-days-2022-guix-aws-lambda.mkv

* Weather

#+BEGIN_SRC scheme
  (use-modules (guix scripts substitute)
               (guix build utils)
               (web request)
               (web uri)
               (srfi srfi-1)
               (gnutls))

  (define base-url
    (or (getenv "URL")
       "https://mirror.hydra.gnu.org"))

  (define base-uri
    (string->uri base-url))

  (define index.html
    (build-request
     (string->uri (string-append base-url
                                 "/nix-cache-info"
                                 ;; "/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee.narinfo"
                                 ;; "/yihvhxv3xyyvl1m2cy1lnf1lyi9h76fk.narinfo"
                                 ))))

  (define http-multiple-get
    (@@ (guix scripts substitute) http-multiple-get))

  ;; (set-log-level! 5)
  ;; (set-log-procedure! (lambda (level message)
  ;;                       (display message)))

  (let ((requests (make-list 100000 index.html)))
    (http-multiple-get base-uri
                       (lambda (req resp port result)
                         (dump-port port (%make-void-port "w"))
                         (cons 'x result))
                       '()
                       requests))
#+END_SRC

* Web resources
  - https://libreplanet.org/wiki/Group:Guix

* WSL
- [[https://gist.github.com/giuliano108/49ec5bd0a9339db98535bc793ceb5ab4][Guix-on-WSL2.md]]

* Xmonad

#+begin_example
  Message-ID: <87fssiwbmq.fsf@posteo.de>

  I also start XMonad from the terminal/TTY. I use the following command
  which I found in some Guix mailing list:

  xinit -- ~/.guix-profile/bin/Xorg :0 vt1 \
    -keeptty \
    -configdir ~/.guix-profile/share/X11/xorg.conf.d \
    -modulepath ~/.guix-profile/lib/xorg/modules


  I then have a ~/.xsession file which in particular contains this line:

  exec ~/.xmonad/xmonad-x86_64-linux


  I'm not sure but I think these were the packages which I installed as
  user in order to make XMonad work/compile:

  gcc-toolchain
  ghc
  ghc-xmonad-contrib
  glibc
  ld-wrapper
  libxinerama
  xf86-input-libinput
  xf86-video-fbdev
  xf86-video-intel
  xinit
  xorg-server


  I also have a ~/.xmonad/build script with the following content:

  #!/bin/sh
  ghc -dynamic "$HOME/.xmonad/Main.hs" -i"$HOME/.xmonad" -o "$1"
#+end_example

