* Bugs

  - [ ] GNU bug report logs - #27217 texlive is too big

* Awesome

** ng0
   https://git.krosos.org

** Alex Kost <alezost@gmail.com>
   https://github.com/alezost/shepherd-config

** David
   https://git.dthompson.us/dotfiles.git/blob/HEAD:/dotfiles/.config/shepherd/init.scm

** Christopher Baines <mail@cbaines.net> (aka Efraim)
   https://gitlab.com/Efraim/guix/

** Ludovic (aka civodul)
http://web.fdn.fr/~lcourtes/

** Andy Wingo <wingo@igalia.com>
   https://gitlab.com/users/wingo/

* Cheat sheet

  - Remove system generations
    : (delete-generations* "/var/guix/profiles/system" '(134 135 136 137 138 139))

  - Switch system generation
    : (switch-to-generation* "/var/guix/profiles/system" 133)

  - Grep
    : 'guix package -A ^perl- | wc -l' 523. 'guix package -A ^perl- | xargs guix refresh -l' ~1500 packages

  - Manually failing package build
    : (add-after 'compress-documentation 'stop (lambda _ #f))

  - Graph a file
    : guix graph -e '(load "FILE")' | dot -Tps > OUTPUT_FILE.ps

  - [[file:bin/emacsmail::emacsclient%20-c%20--eval%20"(browse-url-mail%20\"$@\")"][Make share email in icecat with emacs]]

* Guix packaging

- [[shell:guix%20lint%20$PACKAGE][shell:guix lint $PACKAGE]]
- [[shell:guix%20size%20$PACKAGE][shell:guix size $PACKAGE]]
- [[shell:guix%20build%20--rounds%3D2%20$PACKAGE][shell:guix build --rounds=2 $PACKAGE]]
- [[shell:git%20format-patch][shell:git format-patch]]
- [[mailto:guix-patches@gnu.org]]
- [[elisp:(writegood-grade-level)]]
- [[elisp:(writegood-reading-ease)]]

* How to use sneek on Gnunet IRC channels

  #+BEGIN_EXAMPLE
    <alice> Hi Guix
    <sneek> alice, you have N message.
    <sneek> alice, bob says: MESSAGE
    <alice> sneek: later tell bob MESSAGE:
    <sneek> Will do.
  #+END_EXAMPLE

* [[gnus:INBOX#87tw1zl0wy.fsf@bernoul.li][How to fix Org-mode tabs]]

  #+begin_src emacs-lisp :tangle yes
    (when (= source-tab-width 0)
      (setq indent-tabs-mode nil))
    #+end_src

* [[gnus:INBOX#CALjrZwb16Cn1ygFYUhKDWdid1dYQabB6yB0p_eFu8YYf_00pOQ@mail.gmail.com][How to use Guix profiles]]

  #+BEGIN_SRC shell
    # 1) Install conda into a profile:
    guix package --install=conda --profile=$HOME/guix_profiles/conda

    # 2) Activate the profile:
    source $HOME/guix_profiles/conda/etc/profile

    # 3) Create an environment with conda and install biopython
    conda create --name test-env biopython

    # 4) Try to activate the environment (here's where it fails)
    source activate test-env
  #+END_SRC

* How to mark patch in Emacs

  Mark the entire patch in Emacs, then invoke "M-|", and type

  #+BEGIN_SRC shell
    patch -d /the/root/directory/of/the/project -pN
  #+END_SRC

  where N should be chosen by counting the slashes that you will want
  patch to remove before looking for files relative to that root
  directory.  For patches produced by "git diff" etc., N is typically 1.

* Thinkpad Linux Kernel config

  #+BEGIN_SRC scheme
    (kernel-arguments (list "modprobe.blacklist=pcspkr" "quiet" "rhgb"
                            "thinkpad_acpi.fan_control=1" "i195.modeset=1"))
  #+END_SRC

* guix upgrade exlude package

  #+BEGIN_SRC shell
    guix package -u . --do-no-upgrade=libreoffice
  #+END_SRC

* check if guix corrupted
  #+BEGIN_EXAMPLE
    <rekado_> solene: if you want to check that the store isn’t corrupt and repair
              it, use “sudo -E guix gc --verify=repair,contents”  [16:30]
  #+END_EXAMPLE

* Static networking service
  #+BEGIN_SRC scheme
    (services (cons* …
                     (static-networking-service "enp6s4f0"
                                                "141.80.181.40"
                                                #:netmask "255.255.255.0"
                                                #:gateway "141.80.181.1")
                     (static-networking-service "enp0s8"
                                                "192.168.0.1"
                                                #:netmask "255.255.255.0")
                     …
                     %base-services))

  #+END_SRC

* Guix on foreign distroes

- Archlinux: https://aur.archlinux.org/packages/guix/
- Gentoo: https://packages.gentoo.org/packages/sys-apps/guix
- Debian: from past discussion and on request from Whonix iirc it is
  currently not possible due to Debian Packaging Standards (expected
  package behavior) or something along the lines, see guix-devel
  archives.
- Fedora: https://copr.fedorainfracloud.org/coprs/lantw44/guix/
- Slackware: https://slackbuilds.org/repository/14.2/system/guix/ is
  on 0.12, needs an update. Any slacker up for that task?  Otherwise,
  ping the maintainer: > Maintained by: Hunter Sezen

* GuixOps

- Ganeti like guixops
  https://grnet.github.io/ganetimgr/

* Static vs dynamic binding

Most of the time in Guix we favor static binding: it makes sure that
programs work out of the box, regardless of what happens to be already
installed on your system, and that the program will behave the same on
all systems since its behavior does not depend on external state.
There are exceptions where we want dynamic binding, for instance for
plugins or optional/soft dependencies.
- [[https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=877019][Debian Bug report logs - #877019 ITP: nix -- Purely functional package manager]]

* ng0 plans

<ng0> upcoming (as far as I remembered the list): Services for murmurd,
      apache, mantis, buildbot, finishing my tlsdate service, and packages for
      mantis + buildbot. there's more I think.

* TODO ERROR: ivy-bibtex not such file
* TODO (debbugs-gnu-bugs 28004)
* TODO (debbugs-gnu-bugs 28743)
* TODO (debbugs-gnu-bugs 28772)

* Build system monad

  #+BEGIN_SRC scheme
    (use-modules (gnu)
                 (guix store))

    ;; Deriviation
    (define d
      (run-with-store (open-connection) (operating-system-derivation %system-magnolia-bare)))

    ;; Build deriviation
    (define s (open-connection))

    (build-derivations s (list d))
  #+END_SRC

* Build from Scheme expression

  #+BEGIN_SRC sh
    guix build -e '(@@ (gnu packages commencement) glibc-utf8-locales-final)'
  #+END_SRC

* Guile trap (breakpoint)

  #+BEGIN_SRC scheme
    (use-modules (system vm trap-state))

    (add-trap-at-procedure-call! strip-mount-point)
  #+END_SRC

* Stop stripping mount point if BTRFS
  :LOGBOOK:
  CLOCK: [2017-10-30 Mon 04:34]--[2017-10-30 Mon 04:59] =>  0:25
  CLOCK: [2017-10-30 Mon 02:57]--[2017-10-30 Mon 03:22] =>  0:25
  CLOCK: [2017-10-30 Mon 02:04]--[2017-10-30 Mon 02:29] =>  0:25
  :END:

[[file:~/src/guix/gnu/system.scm::(store-mount-point%20boot-parameters-store-mount-point)][Working file]]

* report lint no fallback

#+BEGIN_EXAMPLE
  natsu@magnolia ~/src/guix$ ./pre-inst-env guix lint emacs-helm-make
  substitute: updating list of substitutes from 'https://berlin.guixsd.org'... 100.0%
  substitute: updating list of substitutes from 'https://mirror.hydra.gnu.org'... 100.0%
  substitute: updating list of substitutes from 'https://hydra.gnu.org'... 100.0%
  substitute: updating list of substitutes from 'https://berlin.guixsd.org'... 100.0%
  substitute: updating list of substitutes from 'https://mirror.hydra.gnu.org'... 100.0%
  substitute: updating list of substitutes from 'https://hydra.gnu.org'... 100.0%
  fetching path `/gnu/store/15cbhk91mzvvmmpb9vjh3ylgivaxs89c-git-2.14.3.tar.xz'...
  fetching path `/gnu/store/2xlz8v9ikrmr6pjnn6p4d0z51xywsx32-git-manpages-2.14.3.tar.xz'...
  fetching path `/gnu/store/m04s88sd7731k94yjk20wrr4v8wc43ar-perl-gssapi-0.28'...
  fetching path `/gnu/store/ikyw97ss19lp5y9060l02bxw2wp1bfwj-perl-term-readkey-2.37'...
  fetching path `/gnu/store/589mq574illssy636ci66agcc3vp75zz-subversion-1.8.19.tar.bz2'...
  fetching path `/gnu/store/xc1c8gwf8jc4ih4ivr32y010brxfj7ik-swig-3.0.12'...
  Downloading https://berlin.guixsd.org/nar/2xlz8v9ikrmr6pjnn6p4d0z51xywsx32-git-manpages-2.14.3.tar.xz...
  Downloading https://berlin.guixsd.org/nar/15cbhk91mzvvmmpb9vjh3ylgivaxs89c-git-2.14.3.tar.xz...
  Downloading https://berlin.guixsd.org/nar/gzip/m04s88sd7731k94yjk20wrr4v8wc43ar-perl-gssapi-0.28...
  Downloading https://berlin.guixsd.org/nar/gzip/ikyw97ss19lp5y9060l02bxw2wp1bfwj-perl-term-readkey-2.37...
  Downloading https://berlin.guixsd.org/nar/589mq574illssy636ci66agcc3vp75zz-subversion-1.8.19.tar.bz2...
  Downloading https://berlin.guixsd.org/nar/gzip/xc1c8gwf8jc4ih4ivr32y010brxfj7ik-swig-3.0.12...
   perl-gssapi-0.28  48KiB            9.4MiB/s 00:00 [######              ]  33.4%guix substitute: error: download from 'https://berlin.guixsd.org/nar/589mq574illssy636ci66agcc3vp75zz-subversion-1.8.19.tar.bz2' failed: 404, "Not Found"
  fetching path `/gnu/store/589mq574illssy636ci66agcc3vp75zz-subversion-1.8.19.tar.bz2' failed with exit code 1
  fetching path `/gnu/store/6y7ky7g5nvmzr9bqghhnnxvlm0vjmwr6-scons-2.5.1'...
  killing process 14872
  killing process 14889
  killing process 14857
  killing process 14856
  killing process 14852
  killing process 14851
  gnu/packages/emacs.scm:3902:4: emacs-helm-make@0.1.0-1.786104a: failed to create derivation: some substitutes for the outputs of derivation `/gnu/store/7cx09jdhqr9a996v931paijrh566l8an-subversion-1.8.19.tar.bz2.drv' failed (usually happens due to networking issues); try `--fallback' to build derivation from source 
  fetching CVE database for 2017...
#+END_EXAMPLE

* Weather

#+BEGIN_SRC scheme
  (use-modules (guix scripts substitute)
               (guix build utils)
               (web request)
               (web uri)
               (srfi srfi-1)
               (gnutls))

  (define base-url
    (or (getenv "URL")
       "https://mirror.hydra.gnu.org"))

  (define base-uri
    (string->uri base-url))

  (define index.html
    (build-request
     (string->uri (string-append base-url
                                 "/nix-cache-info"
                                 ;; "/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee.narinfo"
                                 ;; "/yihvhxv3xyyvl1m2cy1lnf1lyi9h76fk.narinfo"
                                 ))))

  (define http-multiple-get
    (@@ (guix scripts substitute) http-multiple-get))

  ;; (set-log-level! 5)
  ;; (set-log-procedure! (lambda (level message)
  ;;                       (display message)))

  (let ((requests (make-list 100000 index.html)))
    (http-multiple-get base-uri
                       (lambda (req resp port result)
                         (dump-port port (%make-void-port "w"))
                         (cons 'x result))
                       '()
                       requests))
#+END_SRC

* Search path directory
#+BEGIN_SRC scheme
  ;; If you want to match a regular file instead of a directory (the
  ;; default), you must write:

  (search-path-specification
   (variable "DRMAA_LIBRARY_PATH")
   (files '("lib/libdrmaa.so"))
   (file-type 'regular))

  ;; This will match all the lib/libdrmaa.so files found in the environment.
#+END_SRC

* Unzip initial RAM disk

#+BEGIN_SRC shell
  gunzip -C < INITRD | cpio -tv
#+END_SRC

* guix-daemon from master

#+BEGIN_SRC shell
  sudo -E ./pre-inst-env guix-daemon …
#+END_SRC

* doc

- [[https://hal.inria.fr/hal-01580582/document][Code Staging in GNU Guix]]
- [[http://www.nongnu.org/geiser/][Geiser]]
- [[https://alezost.github.io/guix.el/doc.html][Emacs Guix]]

* Fix sendmail_path=/usr/sbin/sendmail
* Laptop
1) Avoid ones with hybrid dual graphics ie intel/nvidia aka optimus
2) Avoid anything realtek
3) If its got fancy Dolby sound or quad speakers they wont work on Debian
4) Always check reviews for PWM flickering on screen dimming if you
have sensitive eyes
* network-manager-service-type

#+BEGIN_SRC scheme
  (network-manager-service-type
   config =>
   (network-manager-configuration
    (inherit config)
    (vpn-plugins (list (specification->package+output
			"network-manager-openvpn")))))
#+END_SRC
success = false; } else { //Lock texture if( !gFooTexture.lockTexture() ) { printf( "Unable to lock Foo' texture!\n" ); }
* GuixSD custom kernel

  [[gnus:INBOX#877etk6xbu.fsf@fastmail.com][Email from Marius Bakke: Re: How to customize the kerne]] by [[mailto:mbakke@fastmail.com][Marius Bakke]]

  #+BEGIN_SRC scheme
    (define-module (my packages)
      #:use-module (gnu packages linux))

    (define kernel-config
      (string-append (dirname (current-filename)) "/kernel.config"))

    (define-public my-kernel
      (package
        (inherit linux-libre)
        (native-inputs
         `(("kconfig" ,kernel-config)
           ,@(alist-delete "kconfig"
                           (package-native-inputs linux-libre))))))

    (use-modules (my packages))
    (operating-system
      [...]
      (kernel my-kernel)
  #+END_SRC

  This lets me keep the kernel .config in version control along with the
  system configuration.

  > I am new to compiling the Linux kernel, so it is doubly difficult to
  > learn how I should do it using Guix.  Any tips would be greatly
  > appreciated.  I'm guessing one tip might be, "Try building a few Linux
  > kernels on a more normal distribution, not using Guix, a few times to
  > get the hang of doing it the 'traditional' way first."  I have not
  > really done that yet.

  Working with custom kernels in Guix is simpler than in many other
  distros IMO.  Suppose you have a patched Linux-Libre tree, then you
  could add e.g.:

    (source "/path/to/custom/kernel")

  to the package declaration above.  Be aware that rolling back to the
  previous generation might not work if your computer implodes ;-)

  For starting out, I would recommend copying the GuixSD default config[*]
  to /your/kernel/tree/.config and run:

    guix environment linux-libre --ad-hoc ncurses -- make nconfig

  This will present a nice ncurses-based interface for configuring the
  kernel.  Note that if the kernel major+minor is higher than the .config
  (see top of file), you should run `make oldconfig` first which gives an
  interactive "wizard" that walks you through all the new options.

  Good luck! :-)

  [*] You can also start from `make defconfig` if you feel adventurous.

* Guix deployment

  - [[https://github.com/BIMSBbioinfo/puppet-bimsb-guix][BIMSBbioinfo/puppet-bimsb-guix]] :: Puppet module for deploying Guix

* Guix additional packages

  - [[https://github.com/BIMSBbioinfo/guix-bimsb-nonfree][BIMSBbioinfo/guix-bimsb-nonfree]] :: GNU Guix package definitions
       for proprietary software, or software with unclear licenses.

  - [[https://github.com/BIMSBbioinfo/guix-bimsb][BIMSBbioinfo/guix-bimsb]] :: Packages for GNU Guix that have not yet
       or will not be submitted upstream for various reasons

  - [[https://github.com/UMCUGenetics/guix-additions][UMCUGenetics/guix-additions]] :: This repository contains additional
       packages for GNU Guix to support the software in the pipelines
       developed at the Cuppen research group.

  - [[https://github.com/gds-attic/govuk-guix][gds-attic/govuk-guix]] :: Package, service and system definitions
       using GNU Guix for software and systems related to
       GOV.UK. Personal project.

* FSF

  - http://www.fsfla.org/ikiwiki/selibre/linux-libre/
