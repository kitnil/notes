* Bugs

  - [ ] GNU bug report logs - #27217 texlive is too big
  - [ ] EMACSLOADPATH tar.gz
  : warning: could not locate elisp directory under `/gnu/store/…-emacs-dumb-jump-0.5.2.tar.gz'
  - [ ] https://hydra.gnu.org/build/2584263/nixlog/1/raw

** TODO New ‘guix pull’ implementation

   The spinner leaves garbage symbols in XTerm + Tmux while building ‘guix-daemon’.

* Awesome

** ng0
   https://git.krosos.org

** Alex Kost <alezost@gmail.com>
   https://github.com/alezost/shepherd-config

** David
   https://git.dthompson.us/dotfiles.git/blob/HEAD:/dotfiles/.config/shepherd/init.scm

** Christopher Baines <mail@cbaines.net> (aka Efraim)
   https://gitlab.com/Efraim/guix/

** Ludovic (aka civodul)
   http://web.fdn.fr/~lcourtes/

** Andy Wingo <wingo@igalia.com>
   https://gitlab.com/users/wingo/

** Mike Gerwitz
   https://mikegerwitz.com/projects/easejs/

** janneke
   https://gitlab.com/janneke/guix.git

* Cheat sheet

  - https://patchwork.cbaines.net/

  - But that's not too big an issue for Emacs when using Emacs-Guix,
    as one can do `guix-set-emacs-environment' and choose a profile to
    re-read and set (in Emacs itself) its environment variables.
    Re-running 'guix-emacs-autoload-packages' would then refresh the
    autoloads corectly, given that EMACSLOADPATH would have been
    refreshed with an updated profile.

  - Guix
    #+BEGIN_SRC scheme
      (lookup-inferior-packages (inferior-for-channels (cons (channel
                                                              (name 'guix-majordomo)
                                                              (url "file:///home/oleg/src/guix-majordomo"))
                                                             %default-channels))
                                "majordomo-ca")
    #+END_SRC

  - https://share.riseup.net

  - guix environment --ad-hoc imagemagick -- convert your-photo.jpg -quality 20% new-compressed-photo.jpg

  - env -i /bin/bash --login --noprofile --norc
    . ~/opt/my-tools-profile/etc/profile

  - guix graph -e '(load "/path/to/file.scm")'
    - https://lists.gnu.org/archive/html/guix-devel/2018-07/msg00212.html

  - Guix version
    #+BEGIN_EXAMPLE
      > +(define-public emacs-extempore-mode
      > +  (let ((version "20190917")            ; no proper tag, use date
      > of commit

      We can't do this, since upstream could decide to release 0.1 tomorrow
      and Guix would never consider it an upgrade: the number 20190917 is
      larger than almost anything.

      Hence we must use ‘0.0.0’ in such situations.
    #+END_EXAMPLE

  - Manifest
    #+BEGIN_SRC scheme
      (use-modules (guix channels)
                   (guix inferior)
                   (srfi srfi-1))

      (define channels
        (list (channel
               (name 'guix)
               (url "https://git.savannah.gnu.org/git/guix.git")
               (commit "dec845606d2d184da31065fa26cd951b84b3ce2d"))))

      (define inferior
        (inferior-for-channels channels))

      (packages->manifest (first (lookup-inferior-packages inferior "hello")))
    #+END_SRC

  - Create a NAR file without involving the Guix store
    : guix environment --ad-hoc nix -- nix-store --dump $PWD | sha256sum

  - guix daemon backtrace width
    #+BEGIN_EXAMPLE
      The daemon is run as 'root' on a Guix system, so you need to set this
      environment variable for the 'root' user session.  As an example, I set
      this in my /root/.bash_profile file:

      export COLUMNS=160              # wider Guile backtraces
    #+END_EXAMPLE

  - https://framagit.org/tyreunom/guix-home-manager

  - sudo strace -p 44043 -e openat,fcntl

  - Fix chromium audio capture
    #+BEGIN_SRC sh
      sed -i 's/"audio_capture_enabled":false/"audio_capture_enabled":true/' \
              ~/.config/chromium/Default/Preferences 
    #+END_SRC

  - extend environment variables
    
    To add environment variables to /etc/environment, you would
    “extend” ‘session-environment-service-type’, like so:
    #+BEGIN_SRC scheme
      (simple-service 'cogl-variable session-environment-service-type
                      '(("COGL_ATLAS_DEFAULT_BLIT_MODE" . "framebuffer")))

    #+END_SRC

  - build manual only for specific language
    #+BEGIN_EXAMPLE
      make doc/guix.pt_BR.info
      # or
      make doc/guix.pt_BR.html
    #+END_EXAMPLE

  - Verify store contents
    : guix gc --verify=contents 2>&1 |tee ~/verify.log

  - <bavier`> EuAndreh[m]: you can use makeinfo to produce a docbook
    output, then feed that to dbtoepub, apparently
    https://kanru.info/blog/archives/2010/11/18/convert-texinfo-to-mobi/

  - please grab substitutes from https://qualif.ci.guix.gnu.org
    it provides lzipped substitutes in addition to gzipped substitutes

  - https://archive.org/details/guix-videos/

  - skeleton create directory [2019-05-27 Mon 22:22] [[gnus:INBOX#87pno5m22l.fsf@gnu.org][Email from Ludovic Courtès: Re: skeleton files in sub-directories]] by [[mailto:ludo@gnu.org][Ludovic Courtès]]
   #+BEGIN_SRC scheme
     (define dot-config
       (compute-file "dot-config-skeleton"
                     #~(begin
                         (mkdir #$output)
                         (mkdir (string-append #$output "/guix"))
                         …)))

     and then add it in the list of skeletons like so:

     `(…
       (".config" ,dot-config))
   #+END_SRC

  - This will generate and manage "grub.cfg" without installing grub bootloader on your disk.
    Origin: <6aa8150643946007e24e2026467e2ef2@disroot.org>
    #+BEGIN_SRC scheme
      (bootloader
       (bootloader-configuration
        (bootloader
         (bootloader
          (inherit grub-bootloader)
          (installer #~(const #t))))))
    #+END_SRC

  - narinfo
    #+BEGIN_EXAMPLE
      $ wget -q -O - https://ci.guix.info/nrkm1683p1cqnkcmhlmhiig9q9qd7xqh.narinfo | head -3
      StorePath: /gnu/store/nrkm1683p1cqnkcmhlmhiig9q9qd7xqh-sed-4.5
      URL: nar/gzip/nrkm1683p1cqnkcmhlmhiig9q9qd7xqh-sed-4.5
      Compression: gzip
    #+END_EXAMPLE

  - '((0 . succeeded) (1 . failed-build) (2 . failed-dependency) (3 . failed-other) (6 . failed-output) (4 . cancelled))

  - refcard
    : <civodul> you can do: cd doc/refcard; evince $(guix build -f build.scm)/*.pdf

  - The lesson is: when inheriting from a package, do it in the module
    where it’s defined.

  - guix deterministic
    [21:11] <dongcarl> civodul: If I understand you correctly... `guix
    build bitcoin-core --check --no-grafts --keep-failed` would let me
    know the determinism of bitcoin-core relative to a specific state
    of dependencies, as in, it ignores the non-determinism of
    bitcoin-core's dependencies by pinning them to a specific
    hash/build, and builds bitcoin-core on top of those fixed
    dependencies several times to check that bitcoin-core itself is
    detemrinisti


  - Fetch patches
    #+BEGIN_SRC diff
      diff --git a/gnu/packages/inkscape.scm b/gnu/packages/inkscape.scm
      index 1673cc602e..7b17ebae40 100644
      --- a/gnu/packages/inkscape.scm
      +++ b/gnu/packages/inkscape.scm
      @@ -46,7 +46,7 @@
       (define-public inkscape
         (package
           (name "inkscape")
      -    (version "0.92.3")
      +    (version "0.92.4")
           (source (origin
                     (method url-fetch)
                     (uri (string-append "https://media.inkscape.org/dl/"
      @@ -54,24 +54,7 @@
                                         "inkscape-" version ".tar.bz2"))
                     (sha256
                      (base32
      -                "1chng2yw8dsjxc9gf92aqv7plj11cav8ax321wmakmv5bb09cch6"))
      -              (patches
      -               (list (origin
      -                       (method url-fetch)
      -                       (uri (string-append "https://gitlab.com/inkscape/inkscape/commit/"
      -                                           "a600c6438fef2f4c06f9a4a7d933d99fb054a973.diff"))
      -                       (file-name "inkscape-poppler-compat.patch")
      -                       (sha256
      -                        (base32
      -                         "19dam5vsy571xszgjddl5g0958dmcsv0wvgxidp4bhj2lban222i")))
      -                     (origin
      -                       (method url-fetch)
      -                       (uri (string-append "https://gitlab.com/inkscape/inkscape/commit/"
      -                                           "fa1c469aa8c005e07bb8676d72af9f7c16fae3e0.diff"))
      -                       (file-name "inkscape-poppler-compat2.patch")
      -                       (sha256
      -                        (base32
      -                         "14k9yrfjz4nx3bz9dk91q74mc0i7rvl2qzkwhcy1br71yqjvngn5")))))))
      +                "0pjinhjibfsz1aywdpgpj3k23xrsszpj4a1ya5562dkv2yl2vv2p"))))
           (build-system cmake-build-system)
           (inputs
            `(("aspell" ,aspell)
    #+END_SRC

  - Systemd =guix-daemon= service
    : systemctl edit --full guix-daemon.service

  - Herd udev
    #+BEGIN_SRC sh
      sudo cat /proc/$(sudo herd status udev|grep Running|sed -es'/.*is \([0-9]\+\)\./\1/g')/environ
    #+END_SRC

  - Select
    #+BEGIN_SRC sh
      ./pre-inst-env guix describe --profile=$HOME/.config/guix/current --format=json | jq --raw-output 'map(select(.name == "guix"))'[0].commit
      ./pre-inst-env guix describe --profile=$HOME/.config/guix/current --format=recutils | recsel -e 'name = "guix"' -P commit
    #+END_SRC

  - Reset password from LiveUSB
    1. Boot live disk from usb
    2. open terminal and run:
            > passwd $(whoami)
    2.1 enter the root passwd you want. Then run:
            > sudo grep $(whoami) /etc/shadow
    2.2 You'll get the password as the second field (separated by : the first
            field is the username) e.g.:
            test:$6$jugtjlt6Og/erxFa$FVQR3CNnv9g1aF6nIkGFtdFSeA.uerF4UfM/0/hSMQcz0vDhiV6R4xoX4vQaAHET34expirYLu6OvTbA8/5iM.:17866::::::
    2.2 The password, or the password hash is (the password entered here is
            actually "test password"):
            $6$jugtjlt6Og/erxFa$FVQR3CNnv9g1aF6nIkGFtdFSeA.uerF4UfM/0/hSMQcz0vDhiV6R4xoX4vQaAHET34expirYLu6OvTbA8/5iM.
    3 Mount your guixsd root partition.
    3.1 Open the guixsd-root/etc/shadow in a text editor and change field 2 of
            the line starting with root so it has the password hash you created
            in step 2. In my case I would make it look like:
            root:$6$jugtjlt6Og/erxFa$FVQR3CNnv9g1aF6nIkGFtdFSeA.uerF4UfM/0/hSMQcz0vDhiV6R4xoX4vQaAHET34expirYLu6OvTbA8/5iM.:14403::::::
    3.2 Save the guixsd-root/etc/shadow file and reboot. You have now set a new
            password for your root account.

    For documentation see
    man passwd
    man 5 shadow

  - Reset file timestamps to epoch
    : sudo touch -t 197001010000.01 FILE

  - https://exploring-data.com/info/npm-packages-dependencies/

  - Manifest to manifest
  #+BEGIN_SRC scheme
    (use-modules (guix profiles)
                 (ice-9 match)
                 (ice-9 pretty-print))    

    (match (command-line)
      ((_ where)
       (pretty-print
        `(specifications->manifest
          ',(map manifest-entry-name (manifest-entries (profile-manifest where))))))
      (_ (error "Please provide the path to a Guix profile.")))
  #+END_SRC

  - Import via SSH
    : guix archive --export --recursive /gnu/store/…-PACKAGE-VERSION | ssh REMOTE_MACHINE guix archive --import

  - Guix archive package source
    Message-ID: <87h8isieke.fsf@gnu.org>
    : guix archive --export -r hello $(guix build -S hello) > hello.nar
    : guix build --sources=transitive hello

  - Environment
    Message-ID: <875zzczvn4.fsf@gmail.com>

    #+BEGIN_EXAMPLE
      I have experimented with various schemes for managing projects in
      guix. I have tried 'guix environment', 'guix package', and 'guix system
      vm'. FWIW, I have ended up "running" projects with an script that
      includes ...

      GCP_ROOT=$gcp_root guix package \
              --profile=$gcp_root/.guix-profile \
              -m $gcp_root/.manifest.scm

      eval $(guix package -p /var/guix/profiles/system/profile \
              -p $gcp_root/.guix-profile --search-paths=exact)

      ... where $gcp_root is the project directory.  This effectively replaces
      the "default user profile" with a "custom project profile"
      ($gcp_root/.guix-profile). I put the emacs project config in
      $gcp_root/.emacs and run emacs with a script that includes ...

      $GCP_ROOT/.guix-profile/bin/emacs \
          --no-site-file \
          --eval='(let ((guix-env (concat (getenv "GCP_ROOT") "/.guix-profile"))) (when (and guix-env (require (quote guix-emacs) nil t)) (guix-emacs-autoload-packages guix-env)))' \
          --no-init-file \
          --eval='(setq user-emacs-directory (concat (getenv "GCP_ROOT") "/.emacs.d/"))' \
          --eval='(load (concat (getenv "GCP_ROOT") "/.emacs"))' \
          --debug-init \
          "$@"

      The net effect: a custom emacs config running in a custom profile for
      each project. I use Makefiles to maintain $gcp_root/.manifest.scm,
      $gcp_root/.emacs, etc. and GNU screen to run/juggle these projects.
    #+END_EXAMPLE

  - [[http://bayfront.guixsd.org/.well-known/logs/][Guix IRC channel logs]]

  - [[https://issues.guix.info/issue/22629#240][pull the latest commit that was fully built on berlin.guixsd.org]]

    See https://berlin.guixsd.org/jobset/guix-modular-master
    
    #+BEGIN_SRC scheme
      (use-modules (guix http-client)
                   (json)
                   (srfi srfi-1)
                   (ice-9 match))

      (define (latest-evaluations jobset)
        "Return the latest evaluations of JOBSET."
        (filter (lambda (json)
                  (string=? (hash-ref json "specification") jobset))
                (json->scm
                 (http-fetch
                  "https://berlin.guixsd.org/api/evaluations?nr=30"))))

      (define (evaluation-complete? number)
        "Return true if evaluation NUMBER completed and all its builds were
      successful."
        (let ((builds (json->scm
                       (http-fetch
                        (string-append
                         "https://berlin.guixsd.org/api/latestbuilds?nr=30&evaluation="
                         (number->string number))))))
          (every (lambda (build)
                   ;; Zero means build success.
                   (= (hash-ref build "buildstatus") 0))
                 builds)))

      (define (latest-commit-successfully-built)
        "Return the latest commit for which substitutes are (potentially)
      available."
        (let* ((evaluations (latest-evaluations "guix-modular-master"))
               (candidates  (filter-map (lambda (json)
                                          (match (hash-ref json "checkouts")
                                            ((checkout)
                                             (cons (hash-ref json "id")
                                                   (hash-ref checkout "commit")))
                                            (_ #f)))
                                        evaluations)))
          (any (match-lambda
                  ((evaluation . commit)
                   (and (evaluation-complete? evaluation)
                        commit)))
                candidates)))

      ;; Pull the latest commit fully built on berlin.guixsd.org.
      ;; WARNING: This could downgrade your system!
      (list (channel
             (name 'guix)
             (url "https://git.savannah.gnu.org/git/guix.git")
             (commit (pk 'commit (latest-commit-successfully-built)))))
    #+END_SRC

  - input.tld channel
    #+BEGIN_SRC scheme
      (use-modules (ice-9 popen)
                   (ice-9 rdelim)
                   (ice-9 match)
                   (guix channels))

      (map (match-lambda
             ((name . url)
              (let* ((port (open-pipe* OPEN_READ "ssh" "input.tld" "--" "git"
                                       "-C" (string-append "/srv/git/"
                                                           (symbol->string name))
                                       "rev-parse" "HEAD"))
                     (output (read-string port)))
                (close-port port)
                (channel (name name)
                         (url url)
                         (commit (string-trim-right output #\newline))))))
           '((guix . "https://git.savannah.gnu.org/git/guix.git")
             (guix-chromium . "https://gitlab.com/mbakke/guix-chromium.git")
             (guix-wigust . "https://cgit.duckdns.org/git/guix-wigust")))

    #+END_SRC

    #+NAME: 2019-02-12
    #+BEGIN_SRC sh
      (use-modules (guix http-client)
                   (json)
                   (srfi srfi-1)
                   (ice-9 match))

      (define (latest-evaluations jobset)
        "Return the latest evaluations of JOBSET."
        (filter (lambda (json)
                  (string=? (hash-ref json "specification") jobset))
                (json->scm
                 (http-fetch
                  "https://berlin.guixsd.org/api/evaluations?nr=30"))))

      (define (evaluation-complete? number)
        "Return true if evaluation NUMBER completed and all its builds were
      successful."
        (let ((builds (json->scm
                       (http-fetch
                        (string-append
                         "https://berlin.guixsd.org/api/latestbuilds?nr=30&evaluation="
                         (number->string number))))))
          (every (lambda (build)
                   ;; Zero means build success.
                   (= (hash-ref build "buildstatus") 0))
                 builds)))

      (define (latest-commit-successfully-built)
        "Return the latest commit for which substitutes are (potentially)
      available."
        (let* ((evaluations (latest-evaluations "guix-modular-master"))
               (candidates  (filter-map (lambda (json)
                                          (match (hash-ref json "checkouts")
                                            ((checkout)
                                             (cons (hash-ref json "id")
                                                   (hash-ref checkout "commit")))
                                            (_ #f)))
                                        evaluations)))
          (any (match-lambda
                  ((evaluation . commit)
                   (and (evaluation-complete? evaluation)
                        commit)))
                candidates)))

      ;; Pull the latest commit fully built on berlin.guixsd.org.
      ;; WARNING: This could downgrade your system!
      (list (channel
             (name 'guix)
             (url "https://git.savannah.gnu.org/git/guix.git")
             (commit (pk 'commit (latest-commit-successfully-built)))))

    #+END_SRC

  - Guix Graph system
    #+BEGIN_SRC sh
      guix graph -e '(begin (%current-system "i686-linux") (@@ ...))'
    #+END_SRC

  - Guix reverse graph
    #+BEGIN_SRC sh
      guix graph --type=reverse-package webkitgtk | dot -Tsvg > ~/out.svg
    #+END_SRC

  - Guix reverse dependencies
    #+BEGIN_SRC sh
      guix refresh --list-dependent webkitgtk
    #+END_SRC

  - Search for a package in graph
    #+BEGIN_SRC sh
      for i in $(guix package -I | awk '{print $1}') ; do guix graph $i | grep -q qtwebkit && echo $i ; done
    #+END_SRC

  - Setuid Nix package on GuixSD
    #+BEGIN_SRC scheme
      (let ((nix-profile "/home/natsu/.nix-profile"))
        (map (lambda (file)
               (string-append (string-drop-right (readlink (string-append nix-profile "/bin/singularity"))
                                                 (string-length "/bin/singularity"))
                              "/libexec/singularity/bin/"
                              file))
             '("action-suid" "mount-suid" "start-suid")))

    #+END_SRC

  - Rewrite package graph in manifest
    #+BEGIN_SRC scheme
      (use-modules (gnu packages cran)       ; provides r-factoextra and r-nbclust
                   (my packages variants)    ; provides “r-minimal-3.4.2”
                   (guix packages)           ; for "package", "package-arguments"...
                   (guix build-system))      ; for "build-system-name"

      ;; This is a recursive package transformer.  When given a package
      ;; "pkg" it checks if it is an R package by looking at its build
      ;; system; if that is the case, it will return a package variant that
      ;; is built with "r-minimal-3.4.2".  It does this recursively, so all
      ;; dependencies are also modified.
      (define use-old-r
        (package-mapping
         (lambda (pkg)
           (if (eq? (build-system-name (package-build-system pkg)) 'r)
               ;; It’s an R package!  Return a new package that inherits from
               ;; the original, but build it with R 3.4.2 by adding a build
               ;; system argument.
               (package
                 (inherit pkg)
                 (arguments
                  (append `(#:r ,r-minimal-3.4.2)
                          (package-arguments pkg))))
               ;; Not an R package.  Don’t change it.
               pkg))))

      ;; Apply the transformer to the list of R packages.
      (define r-packages-with-old-r
        (map use-old-r (list r-factoextra r-nbclust)))

      ;; Build a manifest from the list of modified packages and the old R
      ;; variant itself.
      (packages->manifest
       (cons r-minimal-3.4.2 r-packages-with-old-r))
    #+END_SRC

  - [[http://issues.guix.info/][Guix issue tracker]]

  - Guix Wine
    #+BEGIN_SRC sh
      ./pre-inst-env\
          guix environment -C --expose=/gnu/store/ --ad-hoc wine\
          -- wine $(./pre-inst-env guix build hello --target=i686-w64-mingw32)\
          /bin/hello.exe
    #+END_SRC

  - Disable quit in Guile REPL
    : (catch 'quit (lambda () …) (const #f))

  - io
    #+BEGIN_SRC scheme
      (call-with-output-file nethack-script
        (lambda (port)
          (format port "#!~a/bin/sh
      first line
      second line
      …\n"
                  (assoc-ref inputs "bash"))))

    #+END_SRC

  - Hydra JSON interface
    : curl -i -H 'Accept: application/json' https://hydra.gnu.org/

  - Shepherd strace
    #+BEGIN_SRC scheme
      #$(file-append strace "/bin/strace")
      "-f" "-o" "/tmp/ddclient.strace" "-s" "1024"
    #+END_SRC

  - Remove mingetty and use agetty
    #+BEGIN_SRC scheme
      (services (cons (agetty-service (agetty-configuration (tty "ttyS0")))
                      (remove (lambda (service)
                                (or (eq? (service-kind service)
                                         mingetty-service-type)
                                    (eq? (service-kind service)
                                         console-font-service-type)))
                              (operating-system-user-services os))))
    #+END_SRC

  - Use origin inside inputs
    #+BEGIN_SRC scheme
      ("pci.ids"
       ,(origin
          (method url-fetch)
          (uri "https://github.com/pciutils/pciids/raw/ad02084f0bc143e3c15e31a6152a3dfb1d7a3156/pci.ids")
          (sha256
           (base32
            "0kfhpj5rnh24hz2714qhfmxk281vwc2w50sm73ggw5d15af7zfsw"))))
    #+END_SRC

  - Debug LD
    : env GUIX_LD_WRAPPER_DEBUG=yes make

  - https://git.lassieur.org/cgit/

  - GDB
    : sudo gdb --args guix-daemon --build-users-group=guixbuild

  - Upgrade
    : env GUILE_LOAD_PATH=$HOME/dotfiles:$GUILE_LOAD_PATH GUIX_PACKAGE_PATH= ./pre-inst-env guix environment --no-grafts -m $HOME/dotfiles/fiore/manifests/guix-collection-manifest.scm
    : env GUILE_LOAD_PATH=$HOME/dotfiles:$HOME/src/guix-local:$HOME/src/guix-wigust:$GUILE_LOAD_PATH GUIX_PACKAGE_PATH= ./pre-inst-env guix environment --no-grafts -m ~/dotfiles/fiore/manifests/manifest.scm
    : env GUILE_LOAD_PATH=$HOME/src/guix-wigust:$HOME/src/guix-packages:$GUILE_LOAD_PATH ./pre-inst-env guix system build /home/natsu/dotfiles/fiore/clover.scm

  - Substitutable
    #+BEGIN_SRC sh
      for item in $(guix gc -R $(readlink -f ~/.config/guix/current) | grep guix); do
          echo $item;
          curl -I https://berlin.guixsd.org/nar/gzip/$(echo $item | cut -d '/' -f 4);
      done
    #+END_SRC

  - Patches
    #+BEGIN_SRC scheme
      (patches
       (list (origin
               (method url-fetch)
               (uri "https://cgit.freedesktop.org/xorg/driver/\
      xf86-video-voodoo/patch/?id=9172ae566a0e85313fc80ab62b4455393eefe593")
               (sha256
                (base32
                 "0rndmxf5b8j3hjnhrwrnzsq5024fli134fj1mprhkcrvax2zq8db"))
               (file-name "xf86-video-voodoo-pcitag.patch"))))
    #+END_SRC

  - Remove system generations
    : (delete-generations* "/var/guix/profiles/system" '(134 135))

  - Switch system generation
    : (switch-to-generation* "/var/guix/profiles/system" 133)

  - Grep
    : guix package -A ^perl- | wc -l 523
    : guix package -A ^perl- | xargs guix refresh -l

  - Manually failing package build
    : (add-after 'compress-documentation 'stop (lambda _ #f))

  - Graph a file
    : guix graph -e '(load "FILE")' | dot -Tps > OUTPUT_FILE.ps

  - Create a profile and export that recursively
    #+BEGIN_SRC shell
      guix archive\
           --export\
           --recursive $(readlink -f /project/.guix-profile)\
          | gzip --stdout - > my-profile.nar.gz
    #+END_SRC

  - Multi monitor
    : xrandr --output DP-2-2 --auto

  - [[file:bin/emacsmail::emacsclient%20-c%20--eval%20"(browse-url-mail%20\"$@\")"][Make share email in icecat with emacs]]

  - Build all packages from sources.
    See [[https://lists.gnu.org/archive/html/help-guix/2018-01/msg00080.html]].
    #+BEGIN_SRC shell
      guix build --no-substitutes --no-grafts --keep-going\
           $(guix package -A | cut -f1,2 --output-delimiter=@)\
           --sources=transitive
    #+END_SRC

  - Github mutated archives.  See [[https://notabug.org/apteryx/fiasco]].

  - Force fsck after reboot
    : touch /forcefsck

  - Show dynamic libraries
    : GUIX_LD_WRAPPER_DEBUG=yes

  - See the most recent build logs for a given package
    : ls -ltr /var/log/guix/drvs/*/*-icecat* | tail

  - Get all packges from a file
    : guix package -A | grep 'compression\.scm' | cut -f1

  - Get substitutable kernels
    #+BEGIN_SRC shell
      guix build -n $(guix package -A 'linux-libre$'\
                          | awk '{print $1"@"$2}'\
                          | tr '\n' ' ')
    #+END_SRC

  - Get logs
    : wget -O log https://hydra.gnu.org/log/$(tail -n 1 <(env GUIX_PACKAGE_PATH= guix build --no-grafts hello) | cut -d '/' -f 4)

  - Add file via union
    #+BEGIN_SRC scheme
      (arguments
       '(#:modules
         ((guix build union))
         #:builder
         (begin
           (use-modules (ice-9 match)
                        (guix build union))
           (match %build-inputs
             (((names . directories) ...)
              (union-build (assoc-ref %outputs "out")
                           directories))))))
    #+END_SRC

  - Upgrade guix-daemon

    [13:54:40] <snape> castilma: I'm not 100% sure but my
    understanding is that with GuixSD, doing 'sudo -E guix system
    reconfigure config.scm' will use your current guix package for the
    daemon, thus it'll be updated and you won't need to do 'guix pull'
    as root.

  - Static networking service
    #+BEGIN_SRC scheme
      (define (iproute2-shepherd-service config)
        (list (shepherd-service
               (documentation "Run the iproute2 network service")
               (provision '(networking))
               (requirement '())
               (start #~(lambda _
                          (let ((ip (string-append #$iproute "/sbin/ip")))
                            (system* ip "a" "add" "89.234.186.109/32" "dev"
                                     "ens18")
                            (system* ip "l" "set" "ens18" "up")
                            (system* ip "-6" "a" "add"
                                     "2a00:5884:8208::1/48" "dev" "ens18")
                            (system* ip "r" "add" "89.234.186.1" "dev"
                                     "ens18")
                            (system* ip "r" "add" "default" "via"
                                     "89.234.186.1" "dev" "ens18")
                            (system* ip "-6" "r" "add" "default" "via"
                                     "fe80::204:92:100:1" "dev" "ens18"))))
               (stop #~(lambda _
                         (display "Cannot stop iproute2 service.\n"))))))
    #+END_SRC

  - Message-ID: <87blycvrz1.fsf@elephly.net>
    : guix package -p ~/.config/guix/current --delete-generations
    : guix gc --delete-generations

  - ABI Incompatible
    Message-ID: <878st8g7w0.fsf@gnu.org>
    Things to have to be compiled at one point though.  We could let
    Guile auto-compile code, but unfortunately that comes with its own
    warts: the equivalent of “make clean-go”, for instance when an ABI
    incompatibility pops up, is “rm -rf ~/.cache/guile/ccache”, and
    that too is something a developer has too learn, and one could
    argue that it’s less familiar than “make” or “make clean.”

  - Message-ID: <87v9wk275q.fsf@jlicht.xyz>
    https://notabug.org/jlicht/guile-semver

  - https://framagit.org/tyreunom/guix-home-manager
    https://lists.gnu.org/archive/html/guix-devel/2019-02/msg00128.html

  - hash
    Message-ID: <878ssmt4zw.fsf@gnu.org>
    #+BEGIN_EXAMPLE
      $ wget -qO - http://berlin.guix.gnu.org/32hy1jqkam201l7c4wg3bhxz4x5l5jy0.narinfo | grep Hash
      NarHash: sha256:0vbkb5mcwzbz4lm1c1319pail61785sd3lj6526vl5hdnp1rxyad
      $ wget -qO - http://berlin.guix.gnu.org/nar/lzip/32hy1jqkam201l7c4wg3bhxz4x5l5jy0-nss-certs-3.44.1 | lzip -d | guix hash -
      0vbkb5mcwzbz4lm1c1319pail61785sd3lj6526vl5hdnp1rxyad
      $ wget -qO - http://berlin.guix.gnu.org/nar/gzip/32hy1jqkam201l7c4wg3bhxz4x5l5jy0-nss-certs-3.44.1 | gunzip | guix hash -
      0vbkb5mcwzbz4lm1c1319pail61785sd3lj6526vl5hdnp1rxyad
      $ wget -qO - http://ci.guix.gnu.org/nar/lzip/32hy1jqkam201l7c4wg3bhxz4x5l5jy0-nss-certs-3.44.1 | lzip -d | guix hash -
      0vbkb5mcwzbz4lm1c1319pail61785sd3lj6526vl5hdnp1rxyad
      $ wget -qO - http://ci.guix.gnu.org/nar/gzip/32hy1jqkam201l7c4wg3bhxz4x5l5jy0-nss-certs-3.44.1 | gunzip | guix hash -
      0vbkb5mcwzbz4lm1c1319pail61785sd3lj6526vl5hdnp1rxyad
    #+END_EXAMPLE

** mumi

   Message-ID: <875zntc8ux.fsf@elephly.net>
   #+BEGIN_EXAMPLE
         (use-modules (mumimu))
         (mu:initialize (%config 'mail-dir))
         (for-each
          (lambda (msg)
            (pk (mu:subject msg)))
          (mu:message-list "bugid:31023"))
   #+END_EXAMPLE
    
* Guix packaging

  - [[shell:guix%20lint%20$PACKAGE][shell:guix lint $PACKAGE]]
  - [[shell:guix%20size%20$PACKAGE][shell:guix size $PACKAGE]]
  - [[shell:guix%20build%20--rounds%3D2%20$PACKAGE][shell:guix build --rounds=2 $PACKAGE]]
  - [[shell:git%20format-patch][shell:git format-patch]]
  - [[mailto:guix-patches@gnu.org]]
  - [[elisp:(writegood-grade-level)]]
  - [[elisp:(writegood-reading-ease)]]


** 

Thank you for this patch series!

Currently, it doesn't apply to the Guix git master branch. Can you
rebase the patches on the master branch and send them again?

Thanks!

** patch example

   #+BEGIN_SRC scheme
     (patches (append (origin-patches (package-source perl))
                      (search-patches "perl-archive-tar-CVE-2018-12015.patch")))
   #+END_SRC

* How to use sneek on Gnunet IRC channels

  #+BEGIN_EXAMPLE
    <alice> Hi Guix
    <sneek> alice, you have N message.
    <sneek> alice, bob says: MESSAGE
    <alice> sneek: later tell bob MESSAGE:
    <sneek> Will do.
  #+END_EXAMPLE

* [[gnus:INBOX#87tw1zl0wy.fsf@bernoul.li][How to fix Org-mode tabs]]

  #+BEGIN_SRC emacs-lisp :tangle yes
    (when (= source-tab-width 0)
      (setq indent-tabs-mode nil))
  #+END_SRC

* [[gnus:INBOX#CALjrZwb16Cn1ygFYUhKDWdid1dYQabB6yB0p_eFu8YYf_00pOQ@mail.gmail.com][How to use Guix profiles]]

  #+BEGIN_SRC shell
    # 1) Install conda into a profile:
    guix package --install=conda --profile=$HOME/guix_profiles/conda

    # 2) Activate the profile:
    source $HOME/guix_profiles/conda/etc/profile

    # 3) Create an environment with conda and install biopython
    conda create --name test-env biopython

    # 4) Try to activate the environment (here's where it fails)
    source activate test-env
  #+END_SRC

* How to mark patch in Emacs

  Mark the entire patch in Emacs, then invoke "M-|", and type

  #+BEGIN_SRC shell
    patch -d /the/root/directory/of/the/project -pN
  #+END_SRC

  where N should be chosen by counting the slashes that you will want
  patch to remove before looking for files relative to that root
  directory.  For patches produced by "git diff" etc., N is typically 1.

* Thinkpad Linux Kernel config

  #+BEGIN_SRC scheme
    (kernel-arguments (list "modprobe.blacklist=pcspkr" "quiet" "rhgb"
                            "thinkpad_acpi.fan_control=1" "i195.modeset=1"))
  #+END_SRC

* guix upgrade exlude package

  #+BEGIN_SRC shell
    guix package -u . --do-no-upgrade=libreoffice
  #+END_SRC

* check if guix corrupted
  #+BEGIN_EXAMPLE
    <rekado_> solene: if you want to check that the store isn’t corrupt and repair
              it, use “sudo -E guix gc --verify=repair,contents”  [16:30]
  #+END_EXAMPLE

* Static networking service
  #+BEGIN_SRC scheme
    (services (cons* …
                     (static-networking-service "enp6s4f0"
                                                "141.80.181.40"
                                                #:netmask "255.255.255.0"
                                                #:gateway "141.80.181.1")
                     (static-networking-service "enp0s8"
                                                "192.168.0.1"
                                                #:netmask "255.255.255.0")
                     …
                     %base-services))

  #+END_SRC

* Guix on foreign distroes

- Archlinux: https://aur.archlinux.org/packages/guix/
- Gentoo: https://packages.gentoo.org/packages/sys-apps/guix
- Debian: from past discussion and on request from Whonix iirc it is
  currently not possible due to Debian Packaging Standards (expected
  package behavior) or something along the lines, see guix-devel
  archives.
- Fedora: https://copr.fedorainfracloud.org/coprs/lantw44/guix/
- Slackware: https://slackbuilds.org/repository/14.2/system/guix/ is
  on 0.12, needs an update. Any slacker up for that task?  Otherwise,
  ping the maintainer: > Maintained by: Hunter Sezen

* GuixOps

- Ganeti like guixops
  https://grnet.github.io/ganetimgr/

* Static vs dynamic binding

Most of the time in Guix we favor static binding: it makes sure that
programs work out of the box, regardless of what happens to be already
installed on your system, and that the program will behave the same on
all systems since its behavior does not depend on external state.
There are exceptions where we want dynamic binding, for instance for
plugins or optional/soft dependencies.
- [[https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=877019][Debian Bug report logs - #877019 ITP: nix -- Purely functional package manager]]

* ng0 plans

<ng0> upcoming (as far as I remembered the list): Services for murmurd,
      apache, mantis, buildbot, finishing my tlsdate service, and packages for
      mantis + buildbot. there's more I think.

* TODO ERROR: ivy-bibtex not such file
* TODO [[https://lists.gnu.org/archive/html/guix-devel/2015-08/msg00258.html][guix: git: Support shallow git clones if a tag is available]]
* TODO (debbugs-gnu-bugs 28004)
* TODO (debbugs-gnu-bugs 28743)
* TODO (debbugs-gnu-bugs 28772)

* Build system monad

  #+BEGIN_SRC scheme
    (use-modules (gnu)
                 (guix store))

    ;; Deriviation
    (define d
      (run-with-store (open-connection) (operating-system-derivation %system-magnolia-bare)))

    ;; Build deriviation
    (define s (open-connection))

    (build-derivations s (list d))
  #+END_SRC

* Build from Scheme expression

  #+BEGIN_SRC sh
    guix build -e '(@@ (gnu packages commencement) glibc-utf8-locales-final)'
  #+END_SRC

* Guile trap (breakpoint)

  #+BEGIN_SRC scheme
    (use-modules (system vm trap-state))

    (add-trap-at-procedure-call! strip-mount-point)
  #+END_SRC

* Stop stripping mount point if BTRFS
  :LOGBOOK:
  CLOCK: [2017-10-30 Mon 04:34]--[2017-10-30 Mon 04:59] =>  0:25
  CLOCK: [2017-10-30 Mon 02:57]--[2017-10-30 Mon 03:22] =>  0:25
  CLOCK: [2017-10-30 Mon 02:04]--[2017-10-30 Mon 02:29] =>  0:25
  :END:

[[file:~/src/guix/gnu/system.scm::(store-mount-point%20boot-parameters-store-mount-point)][Working file]]

* report lint no fallback

#+BEGIN_EXAMPLE
  natsu@magnolia ~/src/guix$ ./pre-inst-env guix lint emacs-helm-make
  substitute: updating list of substitutes from 'https://berlin.guixsd.org'... 100.0%
  substitute: updating list of substitutes from 'https://mirror.hydra.gnu.org'... 100.0%
  substitute: updating list of substitutes from 'https://hydra.gnu.org'... 100.0%
  substitute: updating list of substitutes from 'https://berlin.guixsd.org'... 100.0%
  substitute: updating list of substitutes from 'https://mirror.hydra.gnu.org'... 100.0%
  substitute: updating list of substitutes from 'https://hydra.gnu.org'... 100.0%
  fetching path `/gnu/store/15cbhk91mzvvmmpb9vjh3ylgivaxs89c-git-2.14.3.tar.xz'...
  fetching path `/gnu/store/2xlz8v9ikrmr6pjnn6p4d0z51xywsx32-git-manpages-2.14.3.tar.xz'...
  fetching path `/gnu/store/m04s88sd7731k94yjk20wrr4v8wc43ar-perl-gssapi-0.28'...
  fetching path `/gnu/store/ikyw97ss19lp5y9060l02bxw2wp1bfwj-perl-term-readkey-2.37'...
  fetching path `/gnu/store/589mq574illssy636ci66agcc3vp75zz-subversion-1.8.19.tar.bz2'...
  fetching path `/gnu/store/xc1c8gwf8jc4ih4ivr32y010brxfj7ik-swig-3.0.12'...
  Downloading https://berlin.guixsd.org/nar/2xlz8v9ikrmr6pjnn6p4d0z51xywsx32-git-manpages-2.14.3.tar.xz...
  Downloading https://berlin.guixsd.org/nar/15cbhk91mzvvmmpb9vjh3ylgivaxs89c-git-2.14.3.tar.xz...
  Downloading https://berlin.guixsd.org/nar/gzip/m04s88sd7731k94yjk20wrr4v8wc43ar-perl-gssapi-0.28...
  Downloading https://berlin.guixsd.org/nar/gzip/ikyw97ss19lp5y9060l02bxw2wp1bfwj-perl-term-readkey-2.37...
  Downloading https://berlin.guixsd.org/nar/589mq574illssy636ci66agcc3vp75zz-subversion-1.8.19.tar.bz2...
  Downloading https://berlin.guixsd.org/nar/gzip/xc1c8gwf8jc4ih4ivr32y010brxfj7ik-swig-3.0.12...
   perl-gssapi-0.28  48KiB            9.4MiB/s 00:00 [######              ]  33.4%guix substitute: error: download from 'https://berlin.guixsd.org/nar/589mq574illssy636ci66agcc3vp75zz-subversion-1.8.19.tar.bz2' failed: 404, "Not Found"
  fetching path `/gnu/store/589mq574illssy636ci66agcc3vp75zz-subversion-1.8.19.tar.bz2' failed with exit code 1
  fetching path `/gnu/store/6y7ky7g5nvmzr9bqghhnnxvlm0vjmwr6-scons-2.5.1'...
  killing process 14872
  killing process 14889
  killing process 14857
  killing process 14856
  killing process 14852
  killing process 14851
  gnu/packages/emacs.scm:3902:4: emacs-helm-make@0.1.0-1.786104a: failed to create derivation: some substitutes for the outputs of derivation `/gnu/store/7cx09jdhqr9a996v931paijrh566l8an-subversion-1.8.19.tar.bz2.drv' failed (usually happens due to networking issues); try `--fallback' to build derivation from source 
  fetching CVE database for 2017...
#+END_EXAMPLE

* Weather

#+BEGIN_SRC scheme
  (use-modules (guix scripts substitute)
               (guix build utils)
               (web request)
               (web uri)
               (srfi srfi-1)
               (gnutls))

  (define base-url
    (or (getenv "URL")
       "https://mirror.hydra.gnu.org"))

  (define base-uri
    (string->uri base-url))

  (define index.html
    (build-request
     (string->uri (string-append base-url
                                 "/nix-cache-info"
                                 ;; "/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee.narinfo"
                                 ;; "/yihvhxv3xyyvl1m2cy1lnf1lyi9h76fk.narinfo"
                                 ))))

  (define http-multiple-get
    (@@ (guix scripts substitute) http-multiple-get))

  ;; (set-log-level! 5)
  ;; (set-log-procedure! (lambda (level message)
  ;;                       (display message)))

  (let ((requests (make-list 100000 index.html)))
    (http-multiple-get base-uri
                       (lambda (req resp port result)
                         (dump-port port (%make-void-port "w"))
                         (cons 'x result))
                       '()
                       requests))
#+END_SRC

* Search path directory
#+BEGIN_SRC scheme
  ;; If you want to match a regular file instead of a directory (the
  ;; default), you must write:

  (search-path-specification
   (variable "DRMAA_LIBRARY_PATH")
   (files '("lib/libdrmaa.so"))
   (file-type 'regular))

  ;; This will match all the lib/libdrmaa.so files found in the environment.
#+END_SRC

* Unzip initial RAM disk

#+BEGIN_SRC shell
  gunzip -C < INITRD | cpio -tv
#+END_SRC

* guix-daemon from master

#+BEGIN_SRC shell
  sudo -E ./pre-inst-env guix-daemon …
#+END_SRC

* doc

- [[https://hal.inria.fr/hal-01580582/document][Code Staging in GNU Guix]]
- [[http://www.nongnu.org/geiser/][Geiser]]
- [[https://alezost.github.io/guix.el/doc.html][Emacs Guix]]

* Fix sendmail_path=/usr/sbin/sendmail
* Laptop
1) Avoid ones with hybrid dual graphics ie intel/nvidia aka optimus
2) Avoid anything realtek
3) If its got fancy Dolby sound or quad speakers they wont work on Debian
4) Always check reviews for PWM flickering on screen dimming if you
have sensitive eyes
* network-manager-service-type

#+BEGIN_SRC scheme
  (network-manager-service-type
   config =>
   (network-manager-configuration
    (inherit config)
    (vpn-plugins (list (specification->package+output
			"network-manager-openvpn")))))
#+END_SRC
success = false; } else { //Lock texture if( !gFooTexture.lockTexture() ) { printf( "Unable to lock Foo' texture!\n" ); }
* GuixSD custom kernel

  [[gnus:INBOX#877etk6xbu.fsf@fastmail.com][Email from Marius Bakke: Re: How to customize the kerne]] by [[mailto:mbakke@fastmail.com][Marius Bakke]]

  #+BEGIN_SRC scheme
    (define-module (my packages)
      #:use-module (gnu packages linux))

    (define kernel-config
      (string-append (dirname (current-filename)) "/kernel.config"))

    (define-public my-kernel
      (package
        (inherit linux-libre)
        (native-inputs
         `(("kconfig" ,kernel-config)
           ,@(alist-delete "kconfig"
                           (package-native-inputs linux-libre))))))

    (use-modules (my packages))
    (operating-system
      [...]
      (kernel my-kernel)
  #+END_SRC

  This lets me keep the kernel .config in version control along with the
  system configuration.

  > I am new to compiling the Linux kernel, so it is doubly difficult to
  > learn how I should do it using Guix.  Any tips would be greatly
  > appreciated.  I'm guessing one tip might be, "Try building a few Linux
  > kernels on a more normal distribution, not using Guix, a few times to
  > get the hang of doing it the 'traditional' way first."  I have not
  > really done that yet.

  Working with custom kernels in Guix is simpler than in many other
  distros IMO.  Suppose you have a patched Linux-Libre tree, then you
  could add e.g.:

    (source "/path/to/custom/kernel")

  to the package declaration above.  Be aware that rolling back to the
  previous generation might not work if your computer implodes ;-)

  For starting out, I would recommend copying the GuixSD default config[*]
  to /your/kernel/tree/.config and run:

    guix environment linux-libre --ad-hoc ncurses -- make nconfig

  This will present a nice ncurses-based interface for configuring the
  kernel.  Note that if the kernel major+minor is higher than the .config
  (see top of file), you should run `make oldconfig` first which gives an
  interactive "wizard" that walks you through all the new options.

  Good luck! :-)

  [*] You can also start from `make defconfig` if you feel adventurous.

* Guix deployment

  - [[https://github.com/BIMSBbioinfo/puppet-bimsb-guix][BIMSBbioinfo/puppet-bimsb-guix]] :: Puppet module for deploying Guix

* Guix additional packages

  - [[https://github.com/BIMSBbioinfo/guix-bimsb-nonfree][BIMSBbioinfo/guix-bimsb-nonfree]] :: GNU Guix package definitions
       for proprietary software, or software with unclear licenses.

  - [[https://github.com/BIMSBbioinfo/guix-bimsb][BIMSBbioinfo/guix-bimsb]] :: Packages for GNU Guix that have not yet
       or will not be submitted upstream for various reasons

  - [[https://github.com/UMCUGenetics/guix-additions][UMCUGenetics/guix-additions]] :: This repository contains additional
       packages for GNU Guix to support the software in the pipelines
       developed at the Cuppen research group.

  - [[https://github.com/gds-attic/govuk-guix][gds-attic/govuk-guix]] :: Package, service and system definitions
       using GNU Guix for software and systems related to
       GOV.UK. Personal project.

* FSF

  - http://www.fsfla.org/ikiwiki/selibre/linux-libre/

* How to check service configuration serialize

  #+BEGIN_SRC scheme
    (use-modules (guix derivations)
                 (guix store))

    (define-gexp-compiler (repository-cgit-configuration-compiler
                           (configuration <repository-cgit-configuration>) system target)
      (text-file* "test" (repository-cgit-configuration)))

    (define wi-repo
      (repository-cgit-configuration
       (url "http//cgit.localhost/hello")))

    (define wi-conf
      ;; TODO:
      ;; (cgit-configuration (project-list '("a/b/foo.git" "c/bar.git" "baz.git")))

      (cgit-configuration))

    (define (wi-build)
      (build-derivations
       (open-connection)
       (list (run-with-store (open-connection) wi-conf))))

    (define (wi-build-check)
      (build-derivations
       (open-connection)
       (list (run-with-store (open-connection) wi-conf))
       (build-mode check)))
  #+END_SRC

* mcron

  #+BEGIN_SRC scheme
    (define (backup-home user)
      #~(let ((borg (string-append #$borg "/bin/borg"))
              (home (format #f "/home/~a" #$user)))
          (system*
           borg "--verbose" "create"
           "--exclude-caches"
           "--exclude" (format #f "~a/.cache/*" home)
           "--stats" "--list"
           "/mnt/borg::{hostname}-{utcnow}"
           home)
          (system*
           borg "--verbose" "prune"
           "--list"
           "--prefix" "{hostname}-"
           "--keep-within=1w" "--keep-daily=30" "--keep-monthly=6"
           "/mnt/borg")))

    ;; test like
    ;; ,use (guix monad-repl)
    ;; ,enter-store-monad
    ;; (gexp->script "test" (backup-home "alex"))
    ;; ;; and note what the derivation produces. That's the script to run.
    ;; (mlet %store-monad ((script (gexp->script "test" (backup-home "alex"))))
    ;;       (built-derivations (list script)))
    ;; then, run the script to do a manual backup.

    (define (backup-home-job user)
      #~(job '(next-hour '(18))
             #$(backup-home user)
             #:user #$user))

    ;; in your (services ...)
    (mcron-service (list (backup-home-job "your-user-home-dir-name")))
  #+END_SRC

* Reproducibility

  #+BEGIN_SRC shell
    wget -q -O - https://mirror.hydra.gnu.org/guix/nar/gzip/7drfxfiwif436bw908iy6jm3myrinn4m-xfce4-session-4.12.0 | gunzip -c | guix archive -x xfsession1
    wget -q -O - https://berlin.guixsd.org/nar/gzip/7drfxfiwif436bw908iy6jm3myrinn4m-xfce4-session-4.12.0 | gunzip | guix archive -x xfsession2
    diff -ru --no-dereference xfsession[12]
    diffoscope xfsession[12]/share/icons/hicolor/icon-theme.cache
  #+END_SRC

* Gexp
#+BEGIN_EXAMPLE
       <wigust> Hello Guix, How to take a look onto a file produced
                by copy-file in Gexp?
                E.g. https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/services/messaging.scm?h=master#n662
                                                             [22:07]
       <wigust> Could I get to it with `guix gc`?            [22:09]
       <wigust> If I build a system with prosody service.
            ,*** ng0 (~ng0@gateway/tor-sasl/ng0) has quit: Quit:
                Alexa, when is the end of world?             [22:15]
          <atw> wigust: I believe you'll want to use
                gexp->derivation, then "run" the derivation. Ludo
                gave me some help with this here:
                https://lists.gnu.org/archive/html/help-guix/2018-01/msg00058.html
          <atw> Make a note of the output directory, then find the
                file produced inside there                   [22:16]
          <atw> I /think/ that's it, but I trip up often with gexps
                :)
            ,*** ng0 (~ng0@gateway/tor-sasl/ng0) has joined channel
                #guix                                        [22:17]
       <wigust> atw: Thank you!                              [22:19]
#+END_EXAMPLE

* Videos
  - http://audio-video.gnu.org/video/ghm2013/Daimrod-Recent_work_in_the_Emacs_XWidget_branch_.webm
  - http://audio-video.gnu.org/video/ghm2013/David_Bremner-Notmuch_mail_.webm
  - http://audio-video.gnu.org/video/ghm2013/Jose_Marchesi-GNU_recutils_.webm
  - http://audio-video.gnu.org/video/ghm2013/Ludovic_Courtes-GNU_Guix_the_computing_freedom_deployment_tool_.webm
  - http://audio-video.gnu.org/video/ghm2013/Samuel_Thibault-Hurd_recent_developments_.webm
  - https://archive.fosdem.org/2014/schedule/event/gnuguix/
  - https://archive.fosdem.org/2016/schedule/event/deployments_with_gnu_guix/
  - https://audio-video.gnu.org/video/ghm2013/Daimrod-Recent_work_in_the_Emacs_XWidget_branch_.webm
  - https://audio-video.gnu.org/video/ghm2013/David_Bremner-Notmuch_mail_.webm
  - https://audio-video.gnu.org/video/ghm2013/Jose_Marchesi-GNU_recutils_.webm
  - https://audio-video.gnu.org/video/ghm2013/Ludovic_Courtes-GNU_Guix_the_computing_freedom_deployment_tool_.webm
  - https://audio-video.gnu.org/video/ghm2013/Samuel_Thibault-Hurd_recent_developments_.webm
  - https://audio-video.gnu.org/video/ghm2017/2017-08--courtes--guix--ghm.webm
  - https://audio-video.gnu.org/video/ghm2017/2017-08--sassmannshausen--potluck--ghm.webm
  - https://audio-video.gnu.org/video/misc/2016-01__GNU_Guix__Gentle_Introduction_to_Functional_Package_Management.webm
  - https://audio-video.gnu.org/video/misc/2016-01__GNU_Guix__Your_Distro_is_a_Scheme_Library.webm
  - https://www.gnu.org/ghm/2013/paris/v2/sylvain/output.webm
  - https://www.gnu.org/software/guix/blog/tags/talks/

* Failed builds

  https://hydra.gnu.org/job/gnu/master/gource-0.47.x86_64-linux

* Dualboot

  https://lists.gnu.org/archive/html/help-guix/2016-03/msg00083.html

  Running all machines, I dunno.  I do dual-boot Debian and GuixSD
  with them sharing the same user profile and store.  On Debian, I
  bind-mount some directories from GuixSD's root partition.  From
  /etc/fstab:

  #+BEGIN_EXAMPLE
    UUID=d9cc11f0-e548-4526-a541-4f631a10b73c /mnt/guix/      ext4    defaults
      0       2
    /mnt/guix/var/guix    /var/guix           none            defaults,bind
      0       0
    /mnt/guix/gnu    /gnu                     none            defaults,bind
      0       0
  #+END_EXAMPLE

  Then /home/ is shared (and luks encrypted) on both distros.  It
  works fine.

  If you want to do "same profile and store across all things" Ricardo
  Wurmus does some wild things using NFS.

* Lint

  - notify on GUIX_PACKAGE_PATH
  - notify on failing package
  - guix lint -c gnu-descriptions global

* Importers
  - https://gitlab.com/htgoebel/guix-import-debian

* Hydra
  - https://hydra.gnu.org/status
  - https://hydra.gnu.org/all
  - https://hydra.gnu.org/queue

* Pitfalls

  - Unbound variable: package-version
    https://gnunet.org/bot/log/guix/2016-02-16

* Web resources
  - https://libreplanet.org/wiki/Group:Guix

* Hacking
  #+BEGIN_SRC scheme
    ;; run.scm for hacking gnu/bootloader/grub.scm

    (use-modules (ice-9 history)
                 (gnu bootloader grub)
                 (guix store)
                 (guix derivations)
                 (gnu))

    (use-package-modules bootloaders)

    (define %test-os
      (operating-system
        (host-name "gnu")
        (timezone "Etc/UTC")
        (locale "en_US.utf8")
        (bootloader (bootloader-configuration
                     (bootloader grub-bootloader)
                     (target "/dev/sda")
                     (terminal-outputs '(console))
                     (menu-entries
                      (list (menu-entry
                             (label "NixOS's Grub")
                             (linux "")
                             (initrd "")
                             (additional-options
                              '("search --label --set nixos"
                                "configfile /boot/grub/grub.cfg")))))))
        (file-systems (cons (file-system
                              (device "my-root")
                              (title 'label)
                              (mount-point "/")
                              (type "ext4"))
                            %base-file-systems))
        (users %base-user-accounts)
        (packages (cons grub %base-packages))))

    (pk 'DEBUG-derivation
        (let ((%connection (open-connection)))
          (build-derivations
           %connection
           (list (run-with-store %connection
                   (let ((%test-os-bootloader (operating-system-bootloader
                                               %test-os)))
                     ((@@ (gnu bootloader grub) grub-configuration-file)
                      %test-os-bootloader
                      (bootloader-configuration-menu-entries %test-os-bootloader)
                      #:system "x86_64-linux")))))
          (build-mode check)))

    ;; ./pre-inst-env env GUIX_PACKAGE_PATH= guile --no-auto-compile -s ./run.scm
  #+END_SRC
#+BEGIN_SRC scheme
  (call-with-values (lambda () (build-derivations %connection (list (run-with-store %connection (let ((%test-os-bootloader (operating-system-bootloader %test-os))) ((@@ (gnu bootloader grub) grub-configuration-file) %test-os-bootloader (bootloader-configuration-menu-entries %test-os-bootloader) #:system "x86_64-linux" #:old-entries '())))))) (lambda (a) a))
#+END_SRC

* TOBLOG

#+BEGIN_SRC markdown
  # Preparation

  If you have a [https://git.savannah.gnu.org/cgit/guix.git](Guix Git
  repository) already, you can create a new [Git
  Worktree](https://git-scm.com/docs/git-worktree).



  [More info](https://www.gnu.org/software/guix/manual/html_node/Building-from-Git.html#Building-from-Git)

#+END_SRC

* Dovecot
  #+BEGIN_EXAMPLE
    doveconf: Warning: /etc/dovecot/dovecot.conf line 198: Global setting auth_socket_path won't change the setting inside an earlier filter at /etc/dovecot/dovecot.conf line 4 (if this is intentional, avoid this warning by moving the global setting before /etc/dovecot/dovecot.conf line 4)
    doveconf: Warning: /etc/dovecot/dovecot.conf line 200: Global setting mail_plugins won't change the setting inside an earlier filter at /etc/dovecot/dovecot.conf line 5 (if this is intentional, avoid this warning by moving the global setting before /etc/dovecot/dovecot.conf line 5)
    Error: net_connect_unix(/var/run/dovecot//stats-writer) failed: Permission denied
  #+END_EXAMPLE

* Misc

  - Latest Emacs: https://lists.gnu.org/archive/html/help-guix/2018-04/msg00099.html

* Reproducibility

** mescc

  #+BEGIN_EXAMPLE
    <OriansJ`> well wigust; janneke  is working on getting mescc
               to build a self-hosting gcc-2.95.3. I'm working on
               reducing the binary seed we are currently using for
               mescc-tools and rain1 thanks for that tcc testing
  #+END_EXAMPLE
  
  https://gitlab.com/janneke/mes

** Misc

  - [[https://bootstrapping.miraheze.org/wiki/Investigate][ideas we haven't yet explored]]
  - https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=74682318
  - [2018-09-10 Mon 18:54] [[gnus:INBOX#87pnxqkbmg.fsf@gnu.org][Email from Ludovic Courtès: hpcguix-web, channels, and inferiors]] by [[mailto:ludovic.courtes@inria.fr][Ludovic Courtès]]

- 36162 remote-eval
- Guix CI test

#+BEGIN_EXAMPLE
  $ ./pre-inst-env guile
  GNU Guile 2.2.5
  Copyright (C) 1995-2019 Free Software Foundation, Inc.

  Guile comes with ABSOLUTELY NO WARRANTY; for details type `,show w'.
  This program is free software, and you are welcome to redistribute it
  under certain conditions; type `,show c' for details.

  Enter `,help' for help.
  scheme@(guile-user)> ,use(guix store)
  scheme@(guile-user)> (use-modules (gnu ci) (ice-9 match))
  scheme@(guile-user)> (define store (open-connection))
  scheme@(guile-user)> (define jobs  (hydra-jobs store '((systems "x86_64-linux" "i686-linux"))))
  evaluating for 'x86_64-linux' (heap size: 35.0 MiB)...
  random seed for tests: 1562154761
  evaluating for 'i686-linux' (heap size: 467.0 MiB)...
#+END_EXAMPLE

- Build Guix documentation
  : guix build -f doc/build.scm
  
  : GUIX_WEB_SITE_URL="//guix.gnu.org/" ./pre-inst-env  guix build -f doc/build.scm
  : rsync -rzvha --copy-links /gnu/store/…-guix-manual/ …/manual/

- [bug#36469] [PATCH 0/2] 'guix pack' records environment variables
  : guix pack -f docker guile guile-json --entry-point=bin/guile
  : docker run THE-IMAGE

- Message-ID: <874l4254kv.fsf@gnu.org>
#+BEGIN_SRC scheme
  (define update-guix-hpc-web
    (build-program "https://gitlab.inria.fr/guix-hpc/website.git"
                   "/srv/guix-hpc"))

  (operating-system
    ;; …
    (services (cons (simple-service 'update-guix-hpc-web
                                    mcron-service-type
                                    (list #~(job '(next-minute '(0))
                                                 #$update-guix-hpc-web)))
                    …)))
#+END_SRC
#+BEGIN_SRC scheme
  $ guix repl
  GNU Guile 2.2.4
  Copyright (C) 1995-2017 Free Software Foundation, Inc.

  Guile comes with ABSOLUTELY NO WARRANTY; for details type `,show w'.
  This program is free software, and you are welcome to redistribute it
  under certain conditions; type `,show c' for details.

  Enter `,help' for help.
  scheme@(guix-user)> ,use(guix channels)
  scheme@(guix-user)> ,use(guix describe)
  scheme@(guix-user)> (profile-channels (current-profile))
  $1 = (#<<channel> name: guix url: "https://git.savannah.gnu.org/git/guix.git" branch: "master" commit: "178f1d1f75a8d512b517f474f63da507beaebd49" location: ((line . 549) (column . 19) (filename . "guix/channels.scm"))>)
#+END_SRC
#+BEGIN_SRC scheme
  (for-each (lambda (file)
              (rename-file file (string-append (dirname file) "/..")))
            (find-files themes))
#+END_SRC

