- [2020-08-06 Thu 11:15] [[gnus:INBOX#E1k3Wq4-00055u-Ns@fencepost.gnu.org][Email from Richard Stallman: Making GNUS continue to work with Gmail]] by [[mailto:rms@gnu.org][Richard Stallman]]** 
  - [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=41386][#41386 - 28.0.50; Gnus nnimap OAuth 2.0 support - GNU bug report logs]]

* gnus-posting-styles
#+begin_quote
I am trying to use Gnus again after about five years. Using my
configuration file that I had with Ma Gnus (so maybe that's the
issue...).

I have multiple accounts and used posting styles to send from different
accounts based on the From header. The set-up I have below worked
previously. Now mails cannot be sent and Emacs thinks that smtpmail is
not running. 

I using Emacs GNU Emacs 26.3 (build 1, x86_64-unknown-openbsd, GTK+
Version 3.24.20) of 2020-05-09 and the Gnus that comes with it, v5.13. 

Any suggestions or pointers would be greatly appreciated.

This is my SMTP part:

(setq message-signature-directory "~/.signatures")
(setq smtpmail-auth-credentials "~/.authinfo.gpg")
(setq message-send-mail-function 'smtpmail-send-it)

(setq gnus-posting-styles
      '(("Countermail:*"
	 (x-identity "Countermail")
	 (address "aorchid@countermail.com")
	 (reply-to "aorchid@countermail.com")
	 ("X-Message-SMTP-Method" "smtp imap1.countermail.com 465")
	 (body "\nThanks, Aric\n"))

	((header "to" "someone@ucla.edu")
	 (x-identity "Countermail-another")
	 (address "someone@countermail.com")
	 (reply-to "someone@countermail.com")
	 ("X-Message-SMTP-Method" "smtp imap1.countermail.com 465")
	 (body "\nThanks, Aric\n")
	 (eval (setq mml2015-signers '("someone@countermail.com")))
	 )

	((header "to" "someone@countermail.com")
	 (x-identity "Countermail-another")
	 (address "someone@countermail.com")
	 (reply-to "someone@countermail.com")
	 (eval (setq mml2015-signers '("someone@countermail.com")))
	 ("X-Message-SMTP-Method" "smtp imap1.countermail.com 465")
	 (body "\nThanks, Aric\n")
	 (signature-file "signature-short"))
	("Mac:*" 
	 (address "me@mac.com")
	 ("X-Message-SMTP-Method" "smtp outbound.mailhop.org 465
	user") 
	(body "\nThanks, Aric\n")
	 (signature-file "signature_bike"))
	("Gmail:*"
	 (address "me@gmail.com")
	 (reply-to "me@gmail.com")
	 ("X-Message-SMTP-Method" "smtp smtp.gmail.com 587")
	 (signature-file "signature_bike"))

The .auth file looks like the following:

machine Gmail login "me@gmail.com" port "587" password "..." 
machine BOL login "..." port "587" password "..." 
machine "mail.mac.com" login "me" port "imaps" password
"..." 
machine Gmail login "me" port "imaps" password "..."
machine BOL login "..." port "imaps" password "..."
machine "imap1.countermail.com" login "..." port
"imaps" password "..." 
machine "outbound.mailhop.org" login "someone" port "465" password
"..." 
machine "imap1.countermail.com" login "..." port "465" password "..."

Thanks in advance.
Aric
#+end_quote

: <87o8jxffqq.fsf@ucl.ac.uk>
I use gnus posting styles for this and gnus-alias-use-identity to switch
identities.  Not quite what you wanted, as it's not tied to the m key
but is instead something you do once you are in the message buffer, but
it does work well.

: <873618g0f7.fsf@emailmessageidheader.nil>
gnus-alias-use-identity takes a little setting up (not too
much though) but is much more flexible. I probably have 20
contexts set up and in the end it makes switching among them
very easy. For instance, sometimes I want to be a clueless AOL
user, sometimes I want to be an alum of my undergrad
university, and sometimes I even just want to be myself.

Take the time to set up gnus-alias-identity list to suit your
needs and wishes, and when you're comfortable with that go to
the next level with gnus-alias-identity-rules, which allows for
some automated identity selection. For instance certain
"friends" always get mail from my netzero identity; if someone
writes to a deprecated address they weill get a reply from my
preferred identity.

: <87zh3g8ngb.fsf@shuttle.vesterheim.no>
Additionally, here is a function to cycle through the gnus-alias
identities:

https://github.com/vv3/gnus-alias/commit/986f3a1732362357162a8450a2250069baf02dce

This can be bound to a key for quick access.

* Toggle steam type

  #+begin_src emacs-lisp
    (defun change-stream-type ()
      (cond ((equal user-mail-address "metoothree@gmail.com")
             (setq smtpmail-stream-type 'ssl))
            ((equal user-mail-address "metoo@mac.com")
             (setq smtpmail-stream-type 'starttls))
            ((equal user-mail-address "me@countermail.com")
             (setq smtpmail-stream-type 'starttls))
            ((equal user-mail-address "aorchid@countermail.com")
             (setq smtpmail-stream-type 'starttls))))

    (add-hook 'message-send-hook 'change-stream-type)
  #+end_src

  Mail headers
  #+begin_src emacs-lisp
    (setq gnus-visible-headers
          '( "^From:"
             "^Newsgroups:"
             "^Subject:"
             "^Date:"
             "^Message-ID:"
             "^Supersedes:"
             "^Followup-To:"
             "^Reply-To:"
    ;;       "^Summary:"
    ;;       "^Keywords:"
    ;;       "^Importance:"
             "^To:"
             "^Cc:"
             "^Bcc:"
    ;;       "^Gnus-Warning:"
             "^X-Face-Img:"
             "^User-Agent:"
             "^X-Mailer:"
             "^X-Mailreader:"
             "^X-Newsreader:"
             "^X-User-Agent:"
    ;;       "^X-Now-Playing:"
    ;;       "^Content-Type:"
             "^X-Spam-Status:"))
  #+end_src

* MIME

: <87wo20b4lo.fsf@tullinup.koldfront.dk>

What do I need to configure to have that done automatically, so I don't have
to navigate to the attachment and press RET?

The motivating factor of asking a question is incredible. This is what I found
was needed:

#+begin_src emacs-lisp
  ;; Show inline:
  (add-to-list 'mm-attachment-override-types "application/zip")
  (add-to-list 'mm-automatic-display "application/zip")

  (add-to-list 'mm-attachment-override-types "application/tlsrpt\\+gzip")
  (add-to-list 'mm-automatic-display "application/tlsrpt\\+gzip")
  (add-to-list 'mm-inline-media-tests '("application/tlsrpt\\+gzip" mm-inline-text identity))
  (add-to-list 'mm-inlined-types "application/tlsrpt\\+gzip")
#+end_src

To keep the "buttons" being displayed, also add:

#+begin_src emacs-lisp
  (add-to-list 'gnus-buttonized-mime-types "application/zip")
  (add-to-list 'gnus-buttonized-mime-types "application/tlsrpt\\+gzip")
#+end_src

* Server

<87a6yg5spv.fsf@tullinup.koldfront.dk>

  #+begin_src emacs-lisp
    (nnml "archive"
          (nnml-directory "~/Mail/archive")
          (nnml-active-file "~/Mail/archive/active")
          (nnml-get-new-mail nil)
          (nnml-inhibit-expiry t))
  #+end_src

  #+begin_src emacs-lisp
    (setq asjo-archive-method '(nnml "archive"
                                     (nnml-directory "~/Mail/archive")
                                     (nnml-active-file "~/Mail/archive/active")
                                     (nnml-get-new-mail nil)
                                     (nnir-search-engine notmuch)
                                     (nnml-inhibit-expiry t)))
    (setq gnus-message-archive-method asjo-archive-method)

    (setq gnus-refer-article-method
          ;; First try to load the article from your local newsserver or nnml
          '(current
            ;; Then try the archive (?):
            (list asjo-archive-method)
            ....

  #+end_src

** Lists

Usenet groups, from nntp.aioe.org:

  - alt.os.linux
  - alt.test    
  - alt.tv.survivor
  - alt.usage.english
  - rec.sport.boxing
  - rec.woodworking

and the following MLs, with Gmane:

  - gmane.comp.shells.zsh.user
  - gmane.comp.terminal-emulators.tmux.user
  - gmane.comp.video.ffmpeg.user
  - gmane.discuss
  - gmane.emacs.bugs
  - gmane.emacs.devel
  - gmane.emacs.gnus.general
  - gmane.emacs.gnus.user
  - gmane.emacs.help
  - gmane.emacs.orgmode
  - gmane.emacs.w3m
  - gmane.linux.debian.user
  - gmane.test

* Misc

,----[ C-h v gnus-list-identifiers RET ]
| gnus-list-identifiers is a variable defined in ‘gnus-sum.el’.
| Its value is nil
| 
| Documentation:
| Regexp that matches list identifiers to be removed from subject.
| This can also be a list of regexps.
`----

#+begin_src emacs-lisp
  (setq gnus-summary-line-format "%U%R%z%B%s -- %n\n")
  (setq gnus-sum-thread-tree-root "● ")
  (setq gnus-sum-thread-tree-single-leaf "`->")
#+end_src

- notmuch auto-update <87o8lt1zp0.fsf@tullinup.koldfront.dk>

#+begin_src emacs-lisp
  (defun asjo-notmuch-new ()
    "Run notmuch new"
    (start-process "notmuch" "*Notmuch*" "notmuch" "new"))

  (defadvice gnus (after gnus-notmuch-new activate)
    (asjo-notmuch-new))
#+end_src

and in my .gnus:

: (add-hook 'gnus-after-getting-new-news-hook 'asjo-notmuch-new)

- [[https://lars.ingebrigtsen.no/2020/09/19/you-can-read-twitter-with-gnus/][You Can Read Twitter With Gnus – Random Thoughts]]

- browse url

    w runs the command gnus-summary-browse-url (found in
    gnus-summary-mode-map), which is an interactive compiled Lisp function
    in `gnus-sum.el'.

    It is bound to w, A w.

    (gnus-summary-browse-url &optional EXTERNAL)

- Send with a delay

When I press C-c C-j to delay an article, I'm prompted like this:

  "Target date (YYYY-MM-DD), time (hh:mm), or length of delay (units in mhdwMY): 3d"

This is nice and flexible. In this particular case, I wanted to send an
article on a specific date _and_ time.

So I tried entering "2021-07-14 17:03:30", and Gnus happily accepted
that. But if I look at the delayed article in nndraft:delayed, the
header is:

  X-Gnus-Delayed: Wed, 14 Jul 2021 08:00:00 +0200

- Replace To with Cc
#+begin_src emacs-lisp
  (defun my/message-swap-to-cc ()
    (interactive)
    (when-let ((to (message-field-value "To"))
               (cc (message-field-value "Cc")))
      (message-replace-header "To" cc "From")
      (message-replace-header "Cc" to "To")))
#+end_src

* Theme

** Threads

Message-ID: <79B0677D-9A94-4717-8636-4FF4F23280DA@kuaishou.com>
#+begin_src emacs-lisp
  (gnus-sum-thread-tree-root            "┌ ")
  (gnus-sum-thread-tree-false-root      "◌ ")
  (gnus-sum-thread-tree-single-indent   "◎ ")
  (gnus-sum-thread-tree-vertical        "│")
  (gnus-sum-thread-tree-indent          "  ")
  (gnus-sum-thread-tree-leaf-with-other "├─►")
  (gnus-sum-thread-tree-single-leaf     "╰─►")
  (gnus-summary-line-format "%U%R %3d %[%-23,23f%] %B %s\n”)
#+end_src

See https://github.com/condy0919/.emacs.d/blob/master/lisp/init-mail.el#L113-L121
for more gnus settings.

#+begin_src emacs-lisp
  (custom-set-variables			; thread tree
   '(gnus-sum-thread-tree-root            "● ")
   '(gnus-sum-thread-tree-false-root      "○ ")
   '(gnus-sum-thread-tree-single-indent   "")
   '(gnus-sum-thread-tree-vertical        "│ ")
   '(gnus-sum-thread-tree-indent          "  ")
   '(gnus-sum-thread-tree-leaf-with-other "├─▶ ")
   '(gnus-sum-thread-tree-single-leaf     "╰─▶ "))
#+end_src

* nnselect

: <m2v9ek9jz0.fsf@codeisgreat.org>

I have specified messages for an nnselect group in the configuration in
~/.gnus.el. Like this,

#+begin_src emacs-lisp
  (setq gnus-parameters
        '(("nnselect:emacs"
           (nnselect-specs
            (nnselect-function . gnus-search-run-query)
            (nnselect-args
             (search-query-spec
              (query . "recipient:emacs-devel@gnu.org"))
             (search-group-spec
              ("nnimap\\+codeisgreat:INBOX")
              ))))
          ("nnselect:postgress"
           (nnselect-specs
            (nnselect-function . gnus-search-run-query)
            (nnselect-args
             (search-query-spec
              (query . "recipient:pgsql-general@lists.postgresql.org")
              (query . "recipient:pgsql-announce@lists.postgresql.org")
              (query . "recipient:pgsql-novice@lists.postgresql.org")
              (query . "recipient:pgsql-sql@lists.postgresql.org"))
             (search-group-spec
              ("nnimap\\+codeisgreat:INBOX")
              ))))
          ("nnselect:cron"
           (nnselect-specs
            (nnselect-function . gnus-search-run-query)
            (nnselect-args
             (search-query-spec
              (query . "from:\"Cron? Daemon\"")
             (search-group-spec
              ("nnml:mail.misc")
              ("nnimap\\+otp:INBOX")
              )))))))
#+end_src

* SMTP

Message-ID: <m2y2ggprj2.fsf@cmschueller.my-fqdn.de>

#+begin_src emacs-lisp

(defun exal-change-smtp ()
  "Change the SMTP server according to the current from line."
  (save-excursion
    (let ((from
           (save-restriction
             (message-narrow-to-headers)
             (message-fetch-field "from"))))
      (message "From is `%s', setting `smtpmail-smtp-server' to `%s'"
               from
               (cond
                ((string-match "gmx.at" from)
                  ;; Use stmp-auth
                  (message "Using smtp-auth for GMX account")
                   ;; Sending mail
                  (setq smtpmail-starttls-credentials '(("mail.gmx.net" 587 nil nil))
;;                      smtpmail-smtp-server "mail.gmx.net"
                        smtpmail-default-smtp-server "mail.gmx.net"
                        send-mail-function 'smtpmail-send-it
                        message-send-mail-function 'smtpmail-send-it
                        smtpmail-smtp-service 587
                        smtpmail-auth-credentials (expand-file-name "~/.authinfo")
			smtpmail-smtp-server "mail.gmx.net"))

                ((string-match "mailbox.org" from)
                   ;; Use SMTP for mailbox.org account
                 (message "Using smtp-auth for mailbox.org account")
		 (setq message-send-mail-function 'smtpmail-send-it
		       smtpmail-starttls-credentials '(("barnburner.local" 25 nil nil))
		       smtpmail-auth-credentials '(("barnburner.local" 25 "mente" nil))
		       smtpmail-default-smtp-server "barnburner.local"
		       smtpmail-smtp-service 25
		       smtpmail-smtp-server "barnburner.local"))


                (t
                 (message 
                  (concat "Sending via nntp... "
                          from))))))))

(add-hook 'message-setup-hook 'exal-change-smtp)

#+end_src

* Topics

Mebbe `T m` "archive" to "nnml", which, if my Gnus code is anything like
yours, would put "archive" after "proc-spamrel".

You could also manhandle your `gnus-topic-topology` entry in `.newsrc.eld` to
strongarm the desired order.

The topics business has some bugs, to be sure, but none so showstopping as to
warrant the drudgery of writing a patch.
