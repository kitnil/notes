- [[https://github.com/zchee/go-qcow2][zchee/go-qcow2: Manage the QEMU qcow2 disk image written in Go]]
- [[https://nocoast-tech.blogspot.com/2010/05/converting-kvm-guests-from-lvm-to-qcow2.html][nocoast: Converting kvm guests from lvm to qcow2, base images and snapshots]]

Converting kvm guests from lvm to qcow2, base images and snapshots
lvm based kvm guests are fast but you lose some flexibility, playing with fedora/kvm on my laptop I prefer to use file based images. Converting from lvm images to qcow2 isn't hard but the documentation is sparse.

1. use qemu-img to convert from an lvm to qcow2 format:

qemu-img convert -O qcow2 /dev/vg_name/lv_name/ /var/lib/libvirt/images/image_name.qcow2

If you want the image compressed add '-c' right after the word convert.

2. edit the xml for the image

virsh edit image_name

modify the disk stanza, adding a type to the driver line; on the source line change 'dev' to 'file' and modify the path:

driver name='qemu' type='qcow2'
source file='/var/lib/libvirt/images/image_name.qcow2'


Creating images from with a base image allows quick rollouts of many boxes based on an single install - for example I have a 'golden image' of centos, I can stop that VM and create 2 servers using the original VM disk as a base file and writing changes to different files.

qemu-img create -b original_image.qcow2 -f qcow2 clone_image01.qcow2
qemu-img create -b original_image.qcow2 -f qcow2 clone_image02.qcow2


Taking this further I can then snapshot both images so once I start making changes, rolling back to a point in time prior to the changes is very easy:

qemu-img snapshot -c snapshot_name vm_image_name.qcow2

* Reclaim free space

[[https://serverfault.com/questions/329287/free-up-not-used-space-on-a-qcow2-image-file-on-kvm-qemu][kvm virtualization - free up not used space on a qcow2-image-file on kvm/qemu - Server Fault]]

In addition to the accepted answer (which describe the more common, general
method to shrink a qcow2 file), modern version (ie: RHEL7+) of the
libvirt/qemu/qcow2 stack supports the virtio-scsi driver which supports the
discard='unmap' option.

If the virtual machine uses virtio-scsi and the libvirt definition include
discard='unmap', a simple fstrim on the guest filesystem will release
assigned-but-unused free space on the host. This can be checked with du -hs
<guestdisk> on host side (note: ls -al <guestdisk> will not show the real
allocated size, just the logical one).

For even newer libvirt/qemu instances (ie: RHEL8+), guest file size can be
reduced even if the guest OS does not support trim: by enabling both
discard='unmap' and discard_zeroes='unmap' (and using the virtio-scsi driver),
writing a sequential stream of zero on guest side (ie: via dd if=/dev/zero
of=/zero.img bs=1M count=1024) will trigger host-size trimming of the affected
LBA ranges. However, please note that this can be CPU-intensive for the host
(which had to "parse" any guest write searching for repeating zeroes), so it
should be only enabled in specific cases.

Both methods will reduce the physical allocated size (what du -hs shows). For
reducing the logical size (what a simple ls -al gives) you need to use
virt-spasify or qemu-img (as described in the other answers).
