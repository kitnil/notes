:PROPERTIES:
:ID:       2dc46956-0cc8-46e7-a31f-4f4d9730807c
:END:
#+title: Nix

* Awesome

- [[https://channels.nix.gsc.io/][channels.nix.gsc.io/]]
- [[https://github.com/zseri][zseri (zseri)]]
- [[https://github.com/Anton-Latukha/nix-notes/blob/master/nix.org][nix-notes/nix.org at master · Anton-Latukha/nix-notes]]
- [[https://github.com/gytis-ivaskevicius/nixfiles][gytis-ivaskevicius/nixfiles: My kick-ass NixOS systems configurations!!]]

* Language
- [[https://nix.dev/anti-patterns/language][In the Nix language — nix.dev documentation]]
- [[https://github.com/divnix/yants][divnix/yants: a fork/mirror of yants - because github is more discoverable]]
- [[https://github.com/tazjin/nix-1p][tazjin/nix-1p: A (more or less) one page introduction to Nix, the language.]]

** [[https://gist.github.com/srghma/4f63ad78a88a617f74a1b7f8989ed7aa][what each nix Dev should know.md]]

#+begin_src markdown
   `fix` function - https://github.com/NixOS/nixpkgs/blob/9f087964709174424bca681b600af8ee8e763df5/lib/fixed-points.nix#L19 , https://en.m.wikipedia.org/wiki/Fixed_point_(mathematics) , point where `x = f(x) = f(f(f(f....f(x)....)))`

  `rec { a = 1; b = a + 1; }` is the same as `fix (self: { a = 1; b = self.a + 1; })`

  `builtins.trace` - https://github.com/NixOS/nixpkgs/blob/9f087964709174424bca681b600af8ee8e763df5/lib/debug.nix#L4 trace has different flavors, http://hackage.haskell.org/package/base-4.12.0.0/docs/Debug-Trace.html#v:trace all lazy languages have trace 

  `builtins.seq` - in lazy languages data is represented as thunks (IF data has not been yet evaluated THEN it's pointer on function that should produce this data ELSE it's pointer on data), `builtins.seq` forces first layer of data to evaluate (evaluates it to WHNF?), `builtins.deepSeq` is recursive variant of `seq`, it forces whole data to evaluate (evaluates it to NF?),  (more https://wiki.haskell.org/Seq, https://www.google.com/amp/s/amp.reddit.com/r/haskell/comments/9z6v51/whats_the_difference_between_head_normal_formhnf/)

  `nix-shell` - debugging example
  ```
  $ nix-shell --pure <package>
  $ typeset # to see all availeale functions with their definitions
  $ type genericBuild # to see genericBuild definition
  $ set -e # to exit on error
  $ set -x # to show all executed commands
  $ source $stdenv/setup # to setup env
  $ genericBuild # to start phases

  ```

  `lib.evalModule` - it's easy, n.b. it uses fixed points

  `derivation` - it's easy, https://github.com/NixOs/nix/blob/master/corepkgs/derivation.nix

  `mkDerivation` - wrapper on `derivation`, I think maybe they put too much logic in this function https://nixos.org/nixpkgs/manual/#sec-stdenv-phases

  how path is different from string - paths are copied to nix store when they are forced to evaluate. IF string was constructed from path (this info is stored in "string context"), THEN string evaluation will force path to be copied to nix store too (e.g. evaluation of `"${/foo}/bar"` will copy directory `/foo` as `/nix/store/xxxx-foo`, resulting string will be `/nix/store/xxxx-foo/bar`). http://blog.shealevy.com/2018/08/05/understanding-nix's-string-context/ 

  but `"${toString ./foo}/bar"` will produce `"/fullpath/foo/bar"`

  `callPackage`  - https://nixos.org/nixos/nix-pills/callpackage-design-pattern.html

  IDF means import from derivation - when you import some file from derivation (e.g. `arion = import "${arionSrcFromGithub}/release.nix"`), the `arionSrcFromGithub` is not saved anywhere as dependency for `arion` and will be removed on next garbage collection.  This makes sense, but you end up downloading `arionSrcFromGithub` all the time from the internet. To resolve this you can add `arionSrcFromGithub` to /nix/var/nix/gcroots using `nix-build --add-root` OR save the link to it inside some derivation that added to gcroots (e.g. `arion`) https://github.com/srghma/dotfiles/blob/0054e4586183e0dcf1bdecc9507bde937c365f30/nixos/utils/addAsRuntimeDeps.nix#L1

  `nix-build --check` - nix assumes that your derivation builder outputs same result given same inputs, this may not be true, using this flag the derivation will be built twice, IF resulting hash of the package content (!!!, not the hash of the path, i.e. xxxx in /nix/store/xxxx-yyy, this hash is computed only from derivation inputs) is different THEN it will return an error

  https://learnxinyminutes.com/docs/nix/

  https://gist.github.com/srghma/f1ff5cd10722ee8218cfdbae1ad49645

  https://stackoverflow.com/a/34837585/3574379

  http://www.haskellforall.com/2017/11/compare-nix-derivations-using-nix-diff.html?m=1
#+end_src

* NixOS
- [[https://gist.github.com/gdamjan/8158b57379932fd0e07ce6d83399b71f][Install a NixOS for a systemd-nspawn container … from podman]]
#+begin_src markdown
  Run a nix container with podman, with the container destination mounted as `/mnt`:

  ```
  DEST=~/containers/nixos
  mkdir -p $DEST/{dev,proc,etc/nixos}

  podman run -v $DEST:/mnt -it --rm --cap-add SYS_ADMIN --uts=private docker.io/nixos/nix:latest
  ```

  Setup the channel for nixos-21.11
  ```
  nix-channel --add https://nixos.org/channels/nixos-21.11 nixpkgs
  nix-channel --update
  nix-channel --list
  ```

  Install the nixos install tools:
  ```
  nix-env -f '<nixpkgs>' -iA nixos-install-tools util-linux
  ```

  Copy the [`configuration.nix`](https://nixos.org/nixos/options.html) file and run the installation:
  ```
  cat > /mnt/etc/nixos/configuration.nix
  …see below…
  <Ctrl-D>

  # workaround for error: while setting up the build environment: mounting /proc: Operation not permitted «
  mount --bind /proc/ /mnt/proc
  mount --bind /dev/ /mnt/dev

  nixos-install --root /mnt
  ```

  Let's "boot" the container:
  ```
  sudo systemd-nspawn --boot --network-veth --directory $DEST
  …

  # poweroff
  ```

  System updates:
  ```
  nixos-rebuild boot --upgrade
  ```

  Release upgrade:
  ```
  nix-channel --add https://nixos.org/channels/nixos-21.11 nixpkgs
  nix-channel --update
  nixos-rebuild boot --upgrade
  ```
#+end_src

#+begin_src nix
  # /etc/nixos/configuration.nix
  #
  # Edit this configuration file to define what should be installed on
  # your system.  Help is available in the configuration.nix(5) man page
  # and in the NixOS manual (accessible by running ‘nixos-help’).

  { config, pkgs, ... }:

  {
    imports = [];

    boot.isContainer = true;
    boot.loader.initScript.enable = true;

    time.timeZone = "Europe/Skopje";

    networking.hostName = ""; # empty
    networking.useDHCP = false;
    networking.useNetworkd = true;
    networking.useHostResolvConf = false;
    networking.firewall.enable = false;

    environment.systemPackages = with pkgs; [
       vim
       wget
    ];

    system.stateVersion = "21.11";
  }
#+end_src

#+begin_example
  $ sudo systemd-nspawn --boot --network-veth --directory $DEST
  Spawning container nixos on /home/damjan/containers/nixos.
  Press ^] three times within 1s to kill container.

  <<< NixOS Stage 2 >>>

  running activation script...
  setting up /etc...
  starting systemd...
  systemd 247 running in system mode. (+PAM +AUDIT -SELINUX +IMA +APPARMOR +SMACK -SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT -GNUTLS +ACL +XZ +LZ4 -ZSTD +SECCOMP +BLKID -ELFUTILS +KMOD +IDN2 -IDN +PCRE2 default-hierarchy=unified)
  Detected virtualization systemd-nspawn.
  Detected architecture x86-64.
  Failed to create symlink /sys/fs/cgroup/net_cls: Read-only file system
  Failed to create symlink /sys/fs/cgroup/net_prio: Read-only file system
  Failed to create symlink /sys/fs/cgroup/cpuacct: Read-only file system
  Failed to create symlink /sys/fs/cgroup/cpu: Read-only file system

  Welcome to NixOS 21.05 (Okapi)!

  Initializing machine ID from container UUID.
  Queued start job for default target Multi-User System.
  system-getty.slice: unit configures an IP firewall, but the local system does not support BPF/cgroup firewalling.
  (This warning is only shown for the first unit using IP firewalling.)
  [  OK  ] Created slice system-getty.slice.
  [  OK  ] Created slice system-modprobe.slice.
  [  OK  ] Created slice User and Session Slice.
  [  OK  ] Started Dispatch Password Requests to Console Directory Watch.
  [  OK  ] Started Forward Password Requests to Wall Directory Watch.
  [  OK  ] Reached target Local Encrypted Volumes.
  [  OK  ] Reached target Containers.
  [  OK  ] Reached target Paths.
  [  OK  ] Reached target Remote File Systems.
  [  OK  ] Reached target Slices.
  [  OK  ] Reached target Swap.
  [  OK  ] Listening on Process Core Dump Socket.
  [  OK  ] Listening on Journal Socket (/dev/log).
  [  OK  ] Listening on Journal Socket.
  [  OK  ] Listening on Network Service Netlink Socket.
           Mounting Huge Pages File System...
           Starting Journal Service...
           Starting Firewall...
           Starting Apply Kernel Variables...
           Starting Create Static Device Nodes in /dev...
  [  OK  ] Mounted Huge Pages File System.
  [  OK  ] Finished Apply Kernel Variables.
  [  OK  ] Finished Create Static Device Nodes in /dev.
  [  OK  ] Reached target Local File Systems (Pre).
  [  OK  ] Reached target Local File Systems.
  [  OK  ] Started Journal Service.
           Starting Flush Journal to Persistent Storage...
  [FAILED] Failed to start Firewall.
  See 'systemctl status firewall.service' for details.
  [  OK  ] Reached target Network (Pre).
  [  OK  ] Reached target All Network Interfaces (deprecated).
           Starting Network Service...
  [  OK  ] Finished Flush Journal to Persistent Storage.
           Starting Create Volatile Files and Directories...
  [  OK  ] Finished Create Volatile Files and Directories.
           Starting Rebuild Journal Catalog...
           Starting Update UTMP about System Boot/Shutdown...
  [  OK  ] Finished Update UTMP about System Boot/Shutdown.
  [  OK  ] Finished Rebuild Journal Catalog.
           Starting Update is Completed...
  [  OK  ] Finished Update is Completed.
  [  OK  ] Reached target System Initialization.
  [  OK  ] Started Daily Cleanup of Temporary Directories.
  [  OK  ] Reached target Timers.
  [  OK  ] Listening on D-Bus System Message Bus Socket.
  [  OK  ] Listening on Nix Daemon Socket.
  [  OK  ] Reached target Sockets.
  [  OK  ] Reached target Basic System.
           Starting Name Service Cache Daemon...
  [  OK  ] Started Network Service.
  [  OK  ] Started D-Bus System Message Bus.
           Starting Extra networking commands....
           Starting Wait for Network to be Configured...
           Starting Network Name Resolution...
  [  OK  ] Finished Extra networking commands..
  [  OK  ] Started Name Service Cache Daemon.
  [  OK  ] Reached target User and Group Name Lookups.
           Starting User Login Management...
  [  OK  ] Started User Login Management.
  [  OK  ] Started Network Name Resolution.
  [  OK  ] Reached target Network.
  [  OK  ] Reached target Host and Network Name Lookups.
           Starting Permit User Sessions...
  [  OK  ] Finished Permit User Sessions.
  [  OK  ] Started Console Getty.
  [  OK  ] Reached target Login Prompts.


  <<< Welcome to NixOS 21.05.4086.68d4f5970b6 (x86_64) - console >>>


  nixos login:
  Password:
#+end_example

- [[https://github.com/grwlf/nixos-ssh-over-tls][grwlf/nixos-ssh-over-tls: NixOS module which hides both HTTP and SSH daemons behind SSL proxy on the same port]]
- [[https://github.com/obsidiansystems/socket-over-tls-service][obsidiansystems/socket-over-tls-service: A NixOS service that forwards a Unix domain socket over TLS]]

* Guix
- [[https://github.com/foo-dogsquared/nix-overlay-guix][foo-dogsquared/nix-overlay-guix: A package and module for using GNU Guix on Nix(OS). Fork from https://github.com/Emiller88/guix, attempting to update the project and clean up the codebase for a more usable interface.]]

* Cheatsheet

- Import JSON file
/tmp/out.json
{ "addr": "178.250.246.90", "port": 24, "gateway": "172.16.103.1" }

nix-repl> lib.importJSON /tmp/out.json

- mapAttrs
: let foo = lib.mapAttrs (name: value: if value ? A then { "${builtins.concatStringsSep "." (lib.reverseList (lib.splitString "." (builtins.head value.A)))}.in-addr.arpa." = name; } else if value ? subdomains then foo value.subdomains else null); in lib.filter (x: x != null) (lib.attrValues (foo flake.outputs.lib.zone.subdomains))

- NixOS REPL 
: oleg@guixsd ~/src/nixpkgs-master$ NIXOS_CONFIG="$HOME/src/nixpkgs-master/nixos/modules/virtualisation/qemu-vm.nix" nix repl .

- nix-repl> mynixos2 = nixos { services.mailman.enable = true; services.mailman.siteOwner="eng"; }

nix-repl> mynixos2.config.environment.etc."mailman.cfg".text
"[mailman]\nsite_owner: eng\nlayout: fhs\n\n[paths.fhs]\nbin_dir: /nix/store/f93i81cd0gc0xlkiykmrss7bnikdchh2-python3.7-mailman-3.3.0/bin\nvar_dir: /var/lib/mailman\nqueue_dir: $var_dir/queue\ntemplate_dir: $var_dir/templates\nlog_dir: $var_dir/log\nlock_dir: $var_dir/lock\netc_dir: /etc\next_dir: $etc_dir/mailman.d\npid_file: /run/mailman/master.pid\n"

- Idea
: nix-build --no-out-link --expr 'with import <nixpkgs> { config = { allowUnfree = true; }; }; idea.idea-ultimate'

- Build patched package without tests
: $((git commit --amend -m 'patch' src/vulnix/output.py; git diff HEAD~..HEAD > 1.patch; nix repl /home/oleg/.nix-defexpr/channels/nixos-unstable <<< ':b (import (fetchgit {url = "https://cgit.duckdns.org/git/nixos/nixpkgs"; rev = "329102c47bd1c68f0acdf4feec64232202948c7a"; sha256 = "1y416j4bw46a40asdai3zcb4qim5f6pg46kr1n0pv0vy56mlbv8a";}) {}).vulnix.overrideAttrs(old: {patches = [./1.patch]; doCheck = false; checkPhase = ""; preCheckPhase = "rm -rf src/vulnix/tests; ls -la; ls -la src; ls -la src/vulnix"; installCheckPhase = ""; doInstallCheck = false;})') | awk '/out ->/ { print $NF }')/bin/vulnix --json /nix/store/zavn4np1jvm79f0rafkv0p1mrag09qkz-bash-4.4-p23/

- diff
  : diff -u <(nix-instantiate --strict --eval -E 'with (builtins.getFlake (toString ./.)); outputs.nixosConfigurations.container-web31.config.security.sudo' | nixfmt) <(nix-instantiate --strict --eval -E 'with (builtins.getFlake (toString ./.)); outputs.nixosConfigurations.web22.config.security.sudo' | nixfmt)

- nix repl
  : :a builtins.getFlake "github:nixos/nixpkgs"
  : :a outputs.lib
  : :a builtins

- Create .envrc for project directories
: for file in $(echo */default.nix); do (output="$(dirname "$file")"/.envrc; [[ -f $output ]] || echo 'use nixpkgs' >> "$output"); done

- [[https://nixcloud.io/tour/?id=1][A tour of Nix]]
- [[https://github.com/kamadorueda/four-shells][kamadorueda/four-shells: Technologies around Nix and IPFS that are published under an Open Source License]]
- [[https://github.com/divnix/quick-nix-registry][divnix/quick-nix-registry: Speed up the Nix registry by caching nixpkgs locally]]
- [[https://github.com/ryantm/agenix][ryantm/agenix: age-encrypted secrets for NixOS]]
- [[https://github.com/polygon/scalpel][polygon/scalpel: Minimally invasive safe secret provisioning to Nix-generated service config files]]
- [[https://github.com/sudosubin/home-manager-secrets][sudosubin/home-manager-secrets: Secrets management for home-manager]]
- [[https://github.com/gytis-ivaskevicius/high-quality-nix-content][gytis-ivaskevicius/high-quality-nix-content]]
- [[https://zimbatm.com/NixFlakes/][Nix Flakes edition | $ zimbatm]]
- [[https://github.com/ursi/nixf][ursi/nixf: An easy way to use nix flakes without upgrading nix]]
- [[https://github.com/tmcl/minimal-android-nix-example][tmcl/minimal-android-nix-example: If you want to see how to get a modern Android package to compile with nix, here you go.]]
- [[https://github.com/numtide/nix-filter][numtide/nix-filter]]
- [[https://github.com/bqv/guix][bqv/guix: A package and module for using GNU Guix on Nix(OS). Kinda more a code dump than for actual use. See fork]]
- [[https://github.com/DavHau/nix-portable][DavHau/nix-portable: Nix - Static, Permissionless, Installation-free, Pre-configured]]
- [[https://github.com/fabaff/nix-security-lab][fabaff/nix-security-lab: Tool set for Information security professionals and all others]]
- [[https://github.com/svanderburg/disnix][svanderburg/disnix: Disnix: A Nix-based distributed service deployment tool]]
- [[https://github.com/svanderburg/monitoring-playground][svanderburg/monitoring-playground]]
- [[https://r13y.com/][Is NixOS Reproducible?]]
- [[https://github.com/pauldub/nix-dev-shells][pauldub/nix-dev-shells]]
- [[https://github.com/Mazurel/android2nix][Mazurel/android2nix: WIP: Building Android apps with Nix]]
- [[https://zimbatm.com/NixFlakes/][Nix Flakes edition | $ zimbatm]]
- [[https://github.com/Infinisil/nixus][Infinisil/nixus]]
- [[https://github.com/balsoft/nixos-minecraft-kiosk][balsoft/nixos-minecraft-kiosk]]
- [[https://github.com/Mic92/nix-ld][Mic92/nix-ld: Run unpatched dynamic binaries on NixOS]]
- [[https://github.com/cleverca22/not-os][cleverca22/not-os: An operating system generator, based on NixOS, that, given a config, outputs a small (47 MB), read-only squashfs for a runit-based operating system, with support for iPXE and signed boot.]]
- [[https://kevincox.ca/2020/09/06/switching-to-desktop-nixos/][Switching to NixOS on my Desktop]]
- [[https://github.com/nix-dot-dev/nix.dev][nix-dot-dev/nix.dev: An opinionated guide for developers wanting to get things done with Nix.]]
- [[https://github.com/dnaq/nix-mirror][dnaq/nix-mirror: A simple tool for mirroring nix binary caches]]
- [[https://github.com/cachix/pre-commit-hooks.nix][cachix/pre-commit-hooks.nix: Seamless integration of https://pre-commit.com git hooks with Nix.]]
- [[https://github.com/justinwoo/nix-shorts][justinwoo/nix-shorts: A collection of short notes about Nix, down to what is immediately needed for users.]]
- [[https://status.nixos.org/][NixOS Infra Status]]
- [[https://github.com/Infinisil/all-hies][Infinisil/all-hies: Cached Haskell IDE Engine Nix builds for all GHC versions]]
- [[https://github.com/nmattia/niv][nmattia/niv: Easy dependency management for Nix projects]]
- [[https://github.com/pmiddend/nixos-manager][pmiddend/nixos-manager: Manage your NixOS packages and configuration via a simple, intuitive UI]]
- [[https://github.com/utdemir/nix-tree][utdemir/nix-tree: Interactively browse the dependency graph of your Nix derivations.]]
- [[https://github.com/nix-community/NUR][nix-community/NUR: Nix User Repository: User contributed nix packages maintainer=@Mic92]]
- [[https://nur.nix-community.org/][Packages search for NUR]]
- [[https://github.com/cdepillabout/nix-query-tree-viewer][cdepillabout/nix-query-tree-viewer: GTK viewer for the output of `nix store --query --tree`]]
- [[https://ops.functionalalgebra.com/][Nix Cookbook · Cookbook style to learning Nix expression language for Nix packaging and NixOS]]
- [[https://github.com/DBCDK/morph][DBCDK/morph: NixOS deployment tool]]
- [[https://github.com/Synthetica9/nix-linter][Synthetica9 / nix-linter]]
- [[https://github.com/awakesecurity/nix-deploy][awakesecurity / nix-deploy (Haskell)]]
- [[https://github.com/maralorn/nix-output-monitor][maralorn/nix-output-monitor: Pipe your nix-build output through the nix-output-monitor a.k.a nom to get additional information while building.]]
- [[https://github.com/input-output-hk/nix-tools][input-output-hk/nix-tools: Translate Cabals Generic Package Description to a Nix expression]]
- [[https://github.com/ryantm/nixpkgs-update][ryantm/nixpkgs-update: Updating nixpkgs packages since 2018]]
- [[https://github.com/basvandijk/nixtodo][basvandijk / nixtodo]]
- [[https://github.com/Profpatsch/libnix-haskell][Profpatsch/libnix-haskell: Haskell library to interface with the nix package manager]]
- [[https://github.com/bennofs/nix-index][bennofs/nix-index: Quickly locate nix packages with specific files]]
- [[https://github.com/bennofs/nix-script][bennofs/nix-script: A shebang for running scripts inside nix-shell with defined dependencies]]
- [[https://github.com/awakesecurity/hocker][awakesecurity / hocker Utilities for interacting with the docker registry and generating nix build instructions]]
- [[https://github.com/Gabriel439/nix-diff][Gabriel439 / nix-diff]]
- oleg@guixsd ~/majordomo/webservices/nginx-php73-private$ nix-build --option trusted-public-keys 'cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=, cache.nixos.intr:6VD7bofl5zZFTEwsIDsUypprsgl7r9I+7OGY4WsubFA=' --substituters 'https://cache.nixos.org/ http://cache.nixos.intr/' --no-out-link --expr 'with (import (builtins.fetchTarball {url = "https://github.com/nixos/nixpkgs/archive/d0b3ab3b249.tar.gz";}) {overlays = [(import (builtins.fetchGit {url = "git@gitlab.intr:_ci/nixpkgs.git"; ref = "master";}))];}); (import ./test.nix {}).driver'
- [[https://www.reddit.com/r/NixOS/comments/a3w67x/install_a_package_from_a_specific_version_of/][Install a package from a specific version of Nixpkgs : NixOS]]
- [[https://gitlab.com/obsidian.systems/basalt/][obsidian.systems / basalt · GitLab]]
- [[https://github.com/grahamc/netboot.nix][grahamc/netboot.nix: Create full netboot images in 15 seconds.]]
- [[https://github.com/noteed/nix-notes][noteed/nix-notes: A collection of short notes about Nix, each contributing to the same virtual machine image]]
- [[https://github.com/vlktomas/nix-examples][vlktomas/nix-examples: Showcase of Nix usage for various technologies]]
- [[https://github.com/BenSchZA/nix-shells][BenSchZA/nix-shells: Assorted Nix development shells]]
- [[https://github.com/hercules-ci/arion][hercules-ci/arion: Run docker-compose with help from Nix/NixOS]]
- [[https://github.com/domenkozar/hnix-lsp][domenkozar/hnix-lsp: Language Server Protocol for Nix]]
- [[https://github.com/nh2/nixops-tutorial][nh2/nixops-tutorial: Tutorial for practical deployments with NixOps]]
- [[https://github.com/justinwoo/format-nix][justinwoo/format-nix: A simple formatter for Nix using tree-sitter-nix.]]
- [[https://github.com/tazjin/nixdoc][tazjin/nixdoc: Tool to generate documentation for Nix library functions]]
- [[https://github.com/Infinisil/nixlisp][Infinisil/nixlisp]]
- [[https://github.com/cloudwatt/nix-container-images][cloudwatt/nix-container-images: Write container images as NixOS machines]]
- [[https://github.com/ajs124/NixDroid][ajs124 / NixDroid Android AOSP]]
- [[https://github.com/xtruder/kubenix][xtruder / kubenix]]
- [[https://github.com/nix-community/setup.nix][nix-community/setup.nix: Nixpkgs based build tools for declarative Python packages [maintainer=@datakurre]]]
- [[https://github.com/vitiral/novault][vitiral/novault: ultra simple and secure vaultless password manager (beta)]]
- [[https://github.com/headcounter/shabitica][headcounter/shabitica: Run your own self-hosted Habitica instance]]
- [[https://github.com/pjones/nix-hs][pjones/nix-hs: Haskell + nixpkgs = nix-hs]]
- [[https://github.com/styx-static/styx][styx-static/styx: Static site generator in Nix expression language.]]
- [[https://github.com/VanCoding/node_modules.nix][VanCoding/node_modules.nix: A nix library to turn your package-lock.json into a fully populated node_modules directory]]
- [[https://github.com/colemickens/nixos-flake-example][colemickens/nixos-flake-example: This is a demo NixOS config, with optional flakes support. Along with notes on why flakes is useful and worth adopting.]]
- [[https://github.com/nixinator/nixpkgs-gourse][nixinator/nixpkgs-gourse: A visualization of the nixpkgs repo using gourse with a handy nix-shell and github avatars]]
- [[https://github.com/matejc/x11docker-vpn][matejc/x11docker-vpn]]
- [[https://github.com/nixcon/nixcon-video-infra/tree/canon/modules][nixcon-video-infra/modules at canon · nixcon/nixcon-video-infra]]
- [[https://github.com/jonascarpay/declarative-cachix][jonascarpay/declarative-cachix: Add cachix caches declaratively]]
- [[https://github.com/community-garden/fdroid-repo][community-garden/fdroid-repo]]
- [[https://gitlab.com/cab404/wg-bond][cab404 / wg-bond · GitLab]]
- [[https://github.com/andir/nixos-security-tracker][andir/nixos-security-tracker]]
- [[https://github.com/BrianHicks/nix-script][BrianHicks/nix-script: write scripts in compiled languages that run in the nix ecosystem, with no separate build step]]
- [[https://github.com/gvolpe/dconf2nix][gvolpe/dconf2nix: Convert Dconf files (Gnome Shell) to Nix, as expected by Home Manager.]]
- [[https://github.com/input-output-hk/bitte][input-output-hk/bitte: Nix Ops for Terraform, Consul, Vault, Nomad]]
- [[https://github.com/danielfullmer/robotnix][danielfullmer/robotnix: Build Android (AOSP) using Nix]]
- [[https://github.com/fghibellini/nix-haskell-monorepo][fghibellini/nix-haskell-monorepo: Pragmatic tutorial on how to use nix with a haskell monorepo]]
- [[https://github.com/cachix/pre-commit-hooks.nix][cachix/pre-commit-hooks.nix: Seamless integration of https://pre-commit.com git hooks with Nix.]]
- [[https://github.com/cloudwatt/nix-container-images#reuse-nixos-modules][cloudwatt/nix-container-images: Write container images as NixOS machines]]
- [[https://github.com/notgne2/continix][notgne2/continix: Simple NixOS-like Docker containers with declarative config]]
- [[https://github.com/actions/cache][actions/cache: Cache dependencies and build outputs in GitHub Actions]]
- [[https://wiki.nikitavoloboev.xyz/package-managers/nix][Nix - Everything I know]]
- [[https://github.com/aaronjanse/nix-eval-lsp][aaronjanse/nix-eval-lsp: Nix language server that evaluates code]]
- [[https://github.com/berberman/nvfetcher][berberman/nvfetcher: Generate nix sources expr for the latest version of packages]]
- [[https://github.com/MagicRB/NixNG][MagicRB/NixNG]]
- [[https://gitea.redalder.org/Magic_RB/NixNG][Magic_RB/NixNG - NixNG - Red Alder Gitea]]
- [[https://justinas.org/nixos-in-the-cloud-step-by-step-part-1][NixOS in the Cloud, step-by-step: part 1 · Justinas Stankevičius]]
- [[https://github.com/nerdypepper/statix][nerdypepper/statix: lints and suggestions for the nix programming language]]
- [[https://github.com/thiagokokada/graalvm-nix][thiagokokada/graalvm-nix: GraalVM derivations to be used by projects]]
- [[https://github.com/fluidattacks/makes][fluidattacks/makes: A SecDevOps framework powered by Nix]]
- [[https://github.com/lucasew/path.nix][lucasew/path.nix: Generate the NIX_PATH environment variable from a flake input]]
- [[https://docs.replit.com/tutorials/30-build-with-nix][Replit Docs - Building with Nix on Replit]]
- [[https://github.com/divnix/quick-nix-registry/blob/master/flake.nix][quick-nix-registry/flake.nix at master · divnix/quick-nix-registry]]
- [[https://github.com/djwhitt/nix-babahska-static-bin-pkg][djwhitt/nix-babahska-static-bin-pkg]]
- [[https://github.com/mikroskeem/nixos-snaphook][mikroskeem/nixos-snaphook: Take system snapshot before rebuilding & switching NixOS installation to a new configuration]]
- [[https://github.com/ursi/nix-css][ursi/nix-css]]
- [[https://github.com/jonringer/nix-template][jonringer/nix-template: Make creating nix expressions easy]]
- [[https://github.com/fzakaria/mvn2nix][fzakaria/mvn2nix: Easily package your Maven Java application with the Nix package manager.]]
- [[https://github.com/kirelagin/dns.nix][kirelagin/dns.nix: A Nix DSL for DNS zone files]]
- [[https://github.com/svanderburg/nijs][svanderburg/nijs: NiJS: An internal DSL for Nix in JavaScript]]
- [[https://github.com/nprindle/nix-cron][nprindle/nix-cron: A small DSL for writing cron jobs in Nix]]
- [[https://github.com/expipiplus1/update-nix-fetchgit][expipiplus1/update-nix-fetchgit: A program to automatically update fetchgit values in Nix expressions]]
- [[https://github.com/nix-community/dream2nix][nix-community/dream2nix: Nixify software with less effort [maintainer=@DavHau]]]
- [[https://github.com/nix-community/go-nix][nix-community/go-nix: Elements of Nix re-implemented as Go libraries [maintainer=@flokli]]]
- [[https://nixos.wiki/wiki/Impermanence][Impermanence - NixOS Wiki]]
- [[https://github.com/DavHau/fromYaml][DavHau/fromYaml: yaml parser in pure nix]]
- [[https://github.com/nix-community/impermanence][nix-community/impermanence: Modules to help you handle persistent state on systems with ephemeral root storage maintainer=@talyz]]
#+begin_src nix
  environment.persistence."/nix/state" = {
    directories = [ "/etc/nixos" "/var/log" "/var/lib/docker" ];
    files = [
      "/etc/machine-id"
      "/etc/ssh/ssh_host_rsa_key"
      "/etc/ssh/ssh_host_rsa_key.pub"
      "/etc/ssh/ssh_host_ed25519_key"
      "/etc/ssh/ssh_host_ed25519_key.pub"
    ];
  };
#+end_src
- https://github.com/NixOS/nixpkgs/issues/24346
  #+begin_src nix
    # https://github.com/7c6f434c/7c6f434c-configurations/blob/master/init-less-system/generic/tools.nix#L373
    # Run with: nix repl <<< ':b let pkgs = import <nixpkgs> {}; in pkgs.lib.traceVal (import /tmp/run.nix)'

    (builtins.getAttr "rsyncd"
      (import <nixpkgs/nixos> {
        configuration = {
          fileSystems."/".label = "vmdisk";
          boot.loader.grub.devices = [ "/dev/sda" ];
          services.rsyncd = {
            enable = true;
            settings = {
              global = {
                uid = "root";
                gid = "root";
                "hosts allow" = "172.16.0.0/16";
                "read only" = "yes";
              };
              home = {
                path = "/home";
              };
              nginx = {
                path = "/opt/nginx";
              };
            };
          };
        };
      }).config.systemd.services).runner
  #+end_src

: oleg@guixsd ~/majordomo/_ci/nixpkgs$ nix-instantiate --expr 'with import <nixpkgs> {}; lib.filter (package: lib.isDerivation package) (map (package: package.src) (lib.filter (package: lib.hasAttrByPath ["src"] package) (import ./build.nix)))'

Ad-hoc
: nix run -f channel:nixos-unstable anki -c anki

Imperatively
: nix-env -f channel:nixos-unstable -iA anki

#+BEGIN_SRC nix
  systemPackages = [ (import (fetchTarball "channel:nixos-unstable") {}).anki ];

  # or

  builtins.fetchTarball {
    url = "https://github.com/NixOS/nixpkgs/archive/<GIT_REVISION>.tar.gz";
    sha256 = "asdfjhasdfhgasdhjkfagsdfjkhgasdfhjkagsdfhjagd";
  }
#+END_SRC

- [[https://github.com/DeterminateSystems/nix-netboot-serve][DeterminateSystems/nix-netboot-serve: Make any NixOS system netbootable with 10s cycle times.]]

- http://chriswarbo.net/projects/nixos/useful_hacks.html
: nix repl ~/src/nixpkgs-19.09
: s = nixos ((import ./ns.nix).ns3 { config = { }; inherit pkgs; })

- NixOS custom profile
  Create a new system generation in a new profile without switching to it, but making it as default.
  : sudo nixos-rebuild boot --profile-name my-custom-profile

- /etc/environment
#+BEGIN_SRC nix
  environment.etc.jenkins = {
    source = pkgs.jenkins-jcasc-config;
    target = "jenkins/jenkins.yml";
  };

#+END_SRC

- flake
    # trace: { inputs = { nixpkgs = <CODE>; }; lastModified = 1606768306; lastModifiedDate = "20201130203146"; narHash = "sha256-wiHRIBbdMtmeSXmKmTagM/mmH6lB4N4Pl7nIZu8/ScU="; outPath = "/nix/store/awr10nfsfvpbh9irpqg077yw748a1pzm-source"; outputs = { packages = <CODE>; }; packages = <CODE>; rev = "42f2b9d816eebb82917067830fd493b276d8bdce"; revCount = 775; shortRev = "42f2b9d"; sourceInfo = { lastModified = 1606768306; lastModifiedDate = "20201130203146"; narHash = "sha256-wiHRIBbdMtmeSXmKmTagM/mmH6lB4N4Pl7nIZu8/ScU="; outPath = "/nix/store/awr10nfsfvpbh9irpqg077yw748a1pzm-source"; rev = "42f2b9d816eebb82917067830fd493b276d8bdce"; revCount = 775; shortRev = "42f2b9d"; submodules = false; }; submodules = false; }

    # packages.x86_64-linux.hello = nixpkgs.lib.traceVal majordomo.outputs.packages.x86_64-linux.redis-cli;

    # defaultPackage.x86_64-linux = self.packages.x86_64-linux.container;

    : nix flake update --override-input majordomo 'git+file:///home/oleg/majordomo/_ci/nixpkgs'
    : nix flake update --update-input majordomo

    : nix develop
    #+begin_src nix
      devShell = { nixpkgs }: with import nixpkgs; stdenv.mkDerivation {
        name = "packer-environment";
        buildInputs = [ packer (callPackage ./default.nix {}) ];
      };
    #+end_src

    - nix-shell ~/.nix-defexpr/channels/nixos-unstable -p nixFlakes '(nixos{}).nixos-rebuild'

- nix exec
#+begin_example
  nix.extraOptions = ''
        plugin-files = ${pkgs.nix-plugins.override { nix = config.nix.package; }}/lib/nix/plugins/libnix-extra-builtins.so
        extra-builtins-file = /etc/nixos/extra-builtins.nix
    '';

  /etc/nixos/extra-builtins.nix:

  { exec, ... }: {
    #pass = name: exec [ "sh" "-c" ''echo "\"$(pass ${name})\""'' ];
    vault = key: field: exec [ "vault" "kv" "get" "-format=json" "-field=${field}" key ];
  }

  nix-repl> builtins.extraBuiltins.vault "secret/jenkins" "user"     
  "admin"nix-repl> builtins.extraBuiltins.vault "secret/jenkins" "password"
  "gah!"
#+end_example

- nix-prefetch-url

https://github.com/NixOS/nix/issues/1880
#+BEGIN_SRC sh
  nix-build -E 'with import <nixpkgs> {}; 
                          fetchFromGitHub {
                              owner = "bitcoinunlimited";
                              repo = "bitcoinunlimited";
                              rev = "v1.0.2.0";
                              sha256 = "17cmy0s1908s2rqs0zwr05f3541nqm2pg08n2xn97g2k3yimdg5q";
                          }'
#+END_SRC

documentation /gnu/store/90wc27m5rafga3zjzkg6xdbf49rrz3w1-nix-2.0.4/share/doc/nix/manual/index.html

patchelf https://nixos.wiki/wiki/Packaging/Binaries#Creating_the_Derivation_for_upstream_Packaging

- nix version
: nix-instantiate --eval -E '(import <nixpkgs> {}).lib.nixpkgsVersion'; 

- nix build expression
: file="$1"
: nix-build -E "(import <nixpkgs> {}).callPackage ./$file {}" "${@:2}"

- nix build expression with
: file="$1"
:  nix-build -E "with (import <nixpkgs> {}); with pkgs; callPackage ./$file {}" "${@:2}"

- nix build expression unstable with
: file="$1"
: nix-build -E "with (import <nixos-unstable> {}); with pkgs; callPackage ./$file {}" "${@:2}"

- nix shell expression with overlay
: overlay="$1"
: expression="$2"
: nix-shell --expr "(import <nixos/nixpkgs> {overlays = [(import $overlay)];}).$expression"

- systemd polkit
#+begin_src nix
  security.polkit = {
    enable = true;
    extraConfig = ''
      polkit.addRule(function(action, subject) {
        if (action.id == "org.freedesktop.systemd1.manage-units" && subject.user == "sup") {
          return polkit.Result.YES;
        }
      })
    '';
  };
#+end_src

* Installation
- [[https://github.com/nix-community/nix-installers][nix-community/nix-installers: Nix installers for legacy distributions (rpm & deb & pacman) [maintainer=@adisbladis]]]

* Configurations
- [[https://github.com/jethrokuan/nix][jethrokuan/nix: NixOS configuration with Nix flakes]]

* Learning
- [[http://people.tamu.edu/~luke.adams/doxygen-nixpkgs/strings_8nix.html][nixpkgs builtins: lib/strings.nix File Reference]]
- [[http://people.tamu.edu/~luke.adams/doxygen-nixpkgs/group__lib.html][nixpkgs builtins: lib]]
- [[https://github.com/colemickens/nixos-flake-example][colemickens/nixos-flake-example: This is a demo NixOS config, with optional flakes support. Along with notes on why flakes is useful and worth adopting.]]
- [[https://github.com/kisik21/nixos-super-minimal][kisik21/nixos-super-minimal]]
- [[https://www.youtube.com/playlist?list=PLRGI9KQ3_HP_OFRG6R-p4iFgMSK1t5BHs][(46) Nixology - YouTube]]
- [[https://nixos.mayflower.consulting/blog/2021/01/28/nextcloud-stateversion/][Safe service upgrades using system.stateVersion]]
- [[https://github.com/Anton-Latukha/nix-notes][Anton-Latukha/nix-notes: Nix notes in org]]
- [[https://github.com/NixOS/nix-book][NixOS/nix-book: The Nix Book – centralized community online learning resource for Nix]]

* Secrets
- [[https://github.com/Mic92/sops-nix][Mic92/sops-nix: Atomic secret provisioning for NixOS based on sops]]

* Cache
- [[https://github.com/ghuntley/cachix-demo][ghuntley/cachix-demo]]
- [[https://nixbuild.net/][nixbuild.net]]
- [[https://github.com/nixbuild/nixbuild-action][nixbuild/nixbuild-action: GitHub Action for using the nixbuild.net service]]

* Nixops

- [[https://www.ryantm.com/blog/nixops-without-sharing/][Nixops without sharing]]

* Install commands

- ipmi
: nix-env -p .nix-profile.d/ipmiview/ipmiview -iA nixos-unstable.ipmiview

* 

https://gist.github.com/joepie91/043a51a7b70be5f50f1d

This is an installation walkthrough for [the Nix package manager](https://nixos.org/nix/) in multi-user mode, on a non-NixOS system. While the walkthrough focuses on Debian, instructions on different platforms should be similar.

## 1. Install dependencies.

For recent Debian: 

```sh
apt-get install build-essential pkg-config autotools-dev dh-autoreconf libssl-dev libbz2-dev libsqlite3-dev libcurl4-openssl-dev liblzma-dev libgc-dev libdbi-perl libdbd-sqlite3-perl libwww-curl-perl libxml2 libxslt-dev
```

For other distributions, look for the equivalent packages.

## 2. Set up build users.

```sh
groupadd -r nixbld
for n in $(seq 1 10); do useradd -c "Nix build user $n" \
    -d /var/empty -g nixbld -G nixbld -M -N -r -s "$(which nologin)" \
    nixbld$n; done
```

## 3. Install Nix.

```sh
wget http://nixos.org/releases/nix/nix-1.11.2/nix-1.11.2.tar.xz
tar -xvf nix-1.11.2.tar.xz
cd nix-1.11.2/
./configure --enable-gc
make -j 2
make install
```

If you have more than two CPU cores, you might want to increase the value of the `-j` flag for faster compilation.

## 4. Create a systemd unit file, for managing the Nix daemon.

Save this as `/etc/systemd/system/nix.service`:

```
[Unit]
Description=Nix daemon

[Service]
EnvironmentFile=-/etc/default/nix
ExecStart=/usr/local/bin/nix-daemon $EXTRA_OPTS
IgnoreSIGPIPE=false
KillMode=process

[Install]
WantedBy=multi-user.target
```

Create an empty `/etc/default/nix`:

```sh
touch /etc/default/nix
```

Enable and start the service:

```sh
systemctl enable nix
systemctl start nix
```

## 5. Set up user configuration

Source the following in your `/root/.bashrc`, either directly or indirectly:

```sh
nix-setup-user() {
        TARGET_USER="$1"
        SYMLINK_PATH="/home/$TARGET_USER/.nix-profile"
        PROFILE_DIR="/nix/var/nix/profiles/per-user/$TARGET_USER"

        echo "Creating profile $PROFILE_DIR..."
        echo "Profile symlink: $SYMLINK_PATH"

        rm "$SYMLINK_PATH"
        mkdir -p "$PROFILE_DIR"
        chown "$TARGET_USER:$TARGET_USER" "$PROFILE_DIR"
        
        ln -s "$PROFILE_DIR/profile" "$SYMLINK_PATH"
        chown -h "$TARGET_USER:$TARGET_USER" "$SYMLINK_PATH"
        
        echo "export NIX_REMOTE=daemon" >> "/home/$TARGET_USER/.bashrc"
        echo ". /usr/local/etc/profile.d/nix.sh" >> "/home/$TARGET_USER/.bashrc"
        
        su -lc "cd; . /usr/local/etc/profile.d/nix.sh; NIX_REMOTE=daemon nix-channel --update" "$TARGET_USER"
}
```

Now, whenever you create a new user - say, `joepie91`, you can simply do something like the following:

```sh
nix-setup-user joepie91
```

... and a few minutes later, `joepie91` will be able to log in, and use Nix. Repeat for each user that needs access to Nix.

https://nixos.org/nix-dev/2010-April.txt.gz

* Android
- [[https://github.com/t184256/nix-on-droid][t184256/nix-on-droid: Nix-enabled environment for your Android device.]]

* Packages
- [[https://github.com/JJJollyjim/arewehackersyet][JJJollyjim/arewehackersyet: Tracking the availability of Kali Linux packages in NixOS]]
** Generate expression
- [[https://github.com/obsidiansystems/haven][obsidiansystems/haven: Use haskell to produce a nix set of maven dependencies!]]
- [[https://github.com/NixOS/mvn2nix-maven-plugin][NixOS/mvn2nix-maven-plugin: Generate project-info.json for use with nix's Maven repository generation functions]]

* CI
- [[https://github.com/Mic92/nix-build-uncached][Mic92/nix-build-uncached: A CI friendly wrapper around nix-build.]]

* DSL
- [[https://github.com/Mic92/pythonix][Mic92/pythonix: Eval nix code from python]]
- [[https://github.com/Mic92/hydra-eval-jobs][Mic92/hydra-eval-jobs: Eval nix expressions from flakes (extracted from hydra)]]
- [[https://github.com/andir/libnixstore-c][andir/libnixstore-c: a brutal attempt at making C bindings for Nix]]

* Emacs
- [[https://github.com/vlaci/nix-straight.el][vlaci/nix-straight.el]]

* Source

** navi

#+BEGIN_SRC nix
  navi = (super.callPackage ((builtins.fetchGit {
          url = "https://github.com/9999years/nix-config";
          ref = "master";
        }).outPath + "/rebeccapkgs/navi") { }).overrideAttrs (oldAttrs: with super.pkgs; {
          version = "2.0.0";
          src = super.fetchFromGitHub {
            owner = "denisidoro";
            repo = "navi";
            rev = "v2.0.0";
            sha256 = "0bmdywwsm3r250f6i5x46s9gqlv129aq7lavn07rfrv7ayq7ckpv";
          };
          installPhase = ''
            mkdir -p $out/bin
            mkdir -p $out/share/navi

            cp -r cheats $out/share/navi/
            cp -r src $out/share/navi/

            makeWrapper ${bash}/bin/bash $out/bin/navi \
                --argv0 navi \
                --add-flags "$out/share/navi/navi"
          '';
        });
#+END_SRC


#+BEGIN_SRC nix
  nix-repl> lib.foldAttrs (n: a: [n] ++ a) [] mynixos.options.systemd.services.definitions            
    { audit = [ ... ]; console-getty = [ ... ]; "container-getty@" = [ ... ]; "container@" = [ ... ]; dbus = [ ... ]; dhcpcd = [ ... ]; firewall = [ ... ]; "getty@" = [ ... ]; hyperkitty = [ ... ]; hyperkitty-daily = [ ... ]; hyperkitty-hourly = [ ... ]; hyperkitty-minutely = [ ... ]; hyperkitty-quarter-hourly = [ ... ]; hyperkitty-weekly = [ ... ]; hyperkitty-yearly = [ ... ]; mailman = [ ... ]; mailman-daily = [ ... ]; mailman-settings = [ ... ]; mailman-web = [ ... ]; mwlib-nserve = [ ... ]; mwlib-nslave = [ ... ]; mwlib-qserve = [ ... ]; network-local-commands = [ ... ]; network-setup = [ ... ]; nix-daemon = [ ... ]; nix-gc = [ ... ]; nix-optimise = [ ... ]; nscd = [ ... ]; polkit = [ ... ]; post-resume = [ ... ]; pre-sleep = [ ... ]; prepare-kexec = [ ... ]; resolvconf = [ ... ]; rngd = [ ... ]; save-hwclock = [ ... ]; "serial-getty@" = [ ... ]; "systemd-backlight@" = [ ... ]; systemd-binfmt = [ ... ]; "systemd-fsck@" = [ ... ]; systemd-journal-flush = [ ... ]; systemd-journald = [ ... ]; systemd-logind = [ ... ]; systemd-modules-load = [ ... ]; "systemd-nspawn@" = [ ... ]; systemd-random-seed = [ ... ]; systemd-remount-fs = [ ... ]; systemd-sysctl = [ ... ]; systemd-timedated = [ ... ]; systemd-timesyncd = [ ... ]; systemd-udev-settle = [ ... ]; systemd-udevd = [ ... ]; systemd-update-utmp = [ ... ]; systemd-user-sessions = [ ... ]; systemd-vconsole-setup = [ ... ]; "user-runtime-dir@" = [ ... ]; "user@" = [ ... ]; }

  nix-repl> lib.filterAttrs (n: v: n == "mailman-web") (lib.foldAttrs (n: a: [n] ++ a) [] mynixos.options.systemd.services.definitions)
  { mailman-web = [ ... ]; }

#+END_SRC

* Hydra

- [[https://github.com/malob/nix-review-tools-reports][malob/nix-review-tools-reports: Repository that automatically generates Hydra reports using `nix-review-tools`.]]

example job
#+BEGIN_SRC nix
  let
    pkgs = import <nixpkgs> { };

    jobs = rec {

      tarball = pkgs.releaseTools.sourceTarball {
        name = "hello-tarball";
        src = "mirror://gnu/hello/hello-2.10.tar.gz";
        buildInputs = (with pkgs; [ bash ]);
      };

      build = { system ? builtins.currentSystem }:

        let pkgs = import <nixpkgs> { inherit system; };
        in pkgs.releaseTools.nixBuild {
          name = "hello";
          src = jobs.tarball;
        };
    };
  in jobs
#+END_SRC

* Dictionary
** Profile
A general and convenient concept for realizing rollbacks.
** Database
/nix/var/nix/db/db.sqlite

Keeps track of the dependencies between derivations.

Made up of multiple "generations".

* Programs
- [[https://github.com/Mic92/envfs][Mic92/envfs: Fuse filesystem that returns symlinks to executables based on the PATH of the requesting process.]]
- [[https://github.com/tweag/gomod2nix][tweag/gomod2nix: Convert applications using Go modules to Nix expressions]]
- [[https://github.com/nix-community/vgo2nix][nix-community/vgo2nix: Convert go.mod files to nixpkgs buildGoPackage compatible deps.nix files [maintainer=@adisbladis]]]
- [[https://github.com/nixosbrasil/climod][nixosbrasil/climod: Modular generated command line interfaces using the same technology as the NixOS module system.]]
- [[https://github.com/nixosbrasil/nix-emacs][nixosbrasil/nix-emacs: Use the same module system that leverages NixOS to configure your emacs customization]]

* Commands

** nix-instantiate
#+begin_src shell
  nix-instantiate -E 'import <nixpkgs/nixos> { configuration = (import ./nixops-deployment.nix).web32; system = "x86_64-linux"; }'
#+end_src

** GC
#+begin_src shell
  nix-env -p /nix/var/nix/profiles/system --list-generations | awk -v date="$(date +%Y-%m)" '$0 !~ date { print $1 }' | xargs nix-env -p /nix/var/nix/profiles/system --delete-generations
#+end_src

** Show direct runtime dependencie
#+BEGIN_SRC shell
nix-store -q --references "$(command -v bassename)"
#+END_SRC

** Show reverse dependencies
#+BEGIN_SRC shell
nix-store -q --referrers "$(command -v basename)"
#+END_SRC

** Show catamorphed closure
#+BEGIN_SRC shell
nix-store -qR "$(command -v bassename)"
#+END_SRC

** Show tree of closure
#+BEGIN_SRC shell
nix-store -q --tree "$(command -v basename)"
#+END_SRC

** Recovering making rollback from store directory
#+BEGIN_SRC shell
/nix/store/<hash>-nix-<ver>/bin/nix-env --rollback
#+END_SRC

** Restore specific NixOS generation

[[https://github.com/NixOS/nixpkgs/issues/24374][List-generations and rollback to any configuration · Issue #24374 · NixOS/nixpkgs]]
#+begin_src sh
sudo nix-env --switch-generation 12345 -p /nix/var/nix/profiles/system
sudo /nix/var/nix/profiles/system/bin/switch-to-configuration switch
#+end_src

** vm
#+begin_example
  nixops.util.CommandFailed: command ‘['nix-build', '-I', 'nixops=/nix/store/jpn9dj9b1wlhdh5a2s3rassaghk1syn9-nixops-1.7pre0_abcdef/share/nix/nixops', '--arg', 'networkExprs', u'[ "/home/oleg/majordomo/_ci/nixops/jenkins.nix" ]', '--arg', 'args', '{}', '--argstr', 'uuid', u'af5d6207-11f8-11eb-bb11-0242659d6883', '--argstr', 'deploymentName', u'jenkins', '<nixops/eval-machine-info.nix>', '--arg', 'checkConfigurationOptions', 'false', '-A', 'nodes.jenkins-test.config.deployment.libvirtd.baseImage', '-o', '/run/user/1000/nixops-tmpeq23PB/libvirtd-image-jenkins-test']’ failed on machine ‘jenkins-test’ (exit code 100)''
#+end_example

** Build with specific channel
#+begin_src shell
  nix-build release.nix -A build.x86_64-linux -I nixpkgs=channel:nixos-19.03
#+end_src

** Recover with reinstall from store directory
#+BEGIN_SRC shell
/nix/store/<hash>-nix-<ver>/bin/nix-env -i /nix/store/<hash>-nix-<ver>
#+END_SRC

** nix-repl
   #+begin_src nix
     lib.listToAttrs (lib.mapAttrsFlatten (name: value: lib.nameValuePair ("mj-" + name) value) { "a" = { "b" = "c"; }; })
   #+end_src

** nix-instantiate example
   : ls -1 /tmp/env.nix | entr -r nix-instantiate --eval --strict --expr 'with import <nixpkgs> {}; import /tmp/env.nix { inherit lib; }'
   #+begin_src nix
     { lib }:

     lib.mapAttrsFlatten (name: value: name + value) {
       LC_ALL = "en_US.UTF-8";
       TZ = "Europe/Moscow";
     }

   #+end_src

*** meta
  : nix-instantiate ~/src/nixpkgs-19.09/ --eval --strict -A "hello.meta.position"

* Modules

  #+begin_src nix
    let
      systemModule = { lib, config, ... }: {
        options.toplevel = lib.mkOption {
          type = lib.types.str;
        };

        options.enableFoo = lib.mkOption {
          type = lib.types.bool;
          default = false;
        };

        config.toplevel = ''
          Is foo enabled? ${lib.boolToString config.enableFoo}
        '';
      };

      userModule = {
        enableFoo = true;
      };

    in (import <nixpkgs/lib>).evalModules {
      modules = [ systemModule userModule ];
    }
  #+end_src
  : nix-instantiate --eval /tmp/file.nix -A config.toplevel

- [[https://github.com/hardenedlinux/nixpkgs-hardenedlinux/blob/main/modules/osquery.nix][nixpkgs-hardenedlinux/osquery.nix at main · hardenedlinux/nixpkgs-hardenedlinux]]

* Lustrate
  #+begin_src yaml
    - hosts: web_ubuntu
      tasks:
        - file:
            path: /etc/nixos
            state: directory

        - copy:
            dest: /etc/nixos/hardware-configuration.nix
            content: |
              # Do not modify this file!  It was generated by ‘nixos-generate-config’
              # and may be overwritten by future invocations.  Please make changes
              # to /etc/nixos/configuration.nix instead.
              { config, lib, pkgs, modulesPath, ... }:

              {
                imports = [ ];

                boot = {
                  initrd = {
                    availableKernelModules = [
                      "ata_piix"
                      "virtio_pci"
                      "floppy"
                      "sr_mod"
                      "ehci_pci"
                      "ahci"
                      "megaraid_sas"
                      "isci"
                      "usbhid"
                      "sd_mod"
                      "firewire_ohci"
                      "pata_jmicron"
                      "aacraid"
                      "uhci_hcd"
                    ];
                    kernelModules = [ ];
                  };

                  kernelModules = [ "sg" ];
                  extraModulePackages = [ ];
                  kernelParams = [
                    "nosplash"
                    "noquiet"
                    "biosdevname=0"
                    "net.ifnames=0"
                    "aacraid.expose_physicals=1"
                    "panic=3"
                    "boot.shell_on_fail"
                    "bootdegraded=1"
                  ];
                  kernel.sysctl = {
                    "kernel.sysrq" = 1;
                    "vm.swappiness" = 1;
                    "vm.overcommit_memory" = 1;
                  };
                  kernelPackages = pkgs.linuxPackages_5_4;
                };

                swapDevices = [ ];

                powerManagement.cpuFreqGovernor = lib.mkDefault "ondemand";
              }

        - shell: arcconf getconfig 1
          ignore_errors: yes
          register: arcconf

        - shell: MegaCli64 -ShowSummary -aAll
          ignore_errors: yes
          register: megacli


        - copy:
            dest: /etc/nixos/configuration.nix
            content: |
              { config, pkgs, ... }:

              ########################################################################
              # CHANGE ME
              ########################################################################

              let eth0-mac = "00:25:90:cb:0c:02";
                  eth1-mac = "00:25:90:cb:0c:03";
              in {
                imports =
                  [ # Include the results of the hardware scan.
                    ./hardware-configuration.nix
                  ];

                boot.loader.grub.enable = true;
                boot.loader.grub.version = 2;
                boot.loader.grub.device = "/dev/sda"; # or "nodev" for efi only

                services.openssh = {
                  enable = true;
                  permitRootLogin = "yes";

                  listenAddresses = [{
                    addr = "172.16.103.23";
                    port = 22;
                  }];
                };

                fileSystems = {
                  "/" = {
                    device = "/dev/sdb1";
                    fsType = "ext4";
                  };
                  "/home" = {
                    device = "/dev/sda2";
                    fsType = "ext4";
                    options = [ "noatime,grpjquota=aquota.group,jqfmt=vfsv1" ];
                  };
                  "/mysql" = {
                    device = "/dev/sda1";
                    fsType = "ext4";
                  };
                  "/opcache" = {
                    device = "/mysql/opcache";     
                    options = [ "bind" ];
                  };
                };

                networking = {
                  hostName = "web21";
                  domain = "majordomo.ru";

                  useDHCP = false;
                  search = [ "intr" "majordomo.ru" ];
                  nameservers = [
                    "172.16.103.2"
                    "172.16.102.2"
                    "78.108.87.253"
                    "78.108.89.253"
                    "8.8.8.8"
                  ];
                  resolvconf.extraOptions = [ "attempts:2" "timeout:2" ];

                  vlans = {
                    vlan80 = { id = 80; interface = "eth0"; };
                    vlan253 = { id = 253; interface = "eth0"; };
                  };
                  interfaces = {
                    vlan80.ipv4 = {
                      addresses = [
                        { address = "78.108.80.142"; prefixLength = 24; }
                        { address = "78.108.80.143"; prefixLength = 24; }
                      ];
                    };
                    vlan253.ipv4 = {
                      addresses = [
                        { address = "172.16.103.23"; prefixLength = 24; }
                      ];
                      routes = [{
                        address = "172.16.0.0";
                        prefixLength = 16;
                        via = "172.16.103.1";
                      }];
                    };
                  };
                  defaultGateway = {
                    address = "78.108.80.254";
                    interface = "vlan80";
                  };
                };

                users.users.root.hashedPassword = "...";


                boot.initrd.extraUdevRulesCommands = ''
                    cat <<EOF >  $out/99-extra.rules
                      ENV{ID_VENDOR}=="Adapte*", KERNEL=="sd*", SUBSYSTEM=="block", SYMLINK+="disk/by-ldname/%E{ID_MODEL}%n", OPTIONS+="string_escape=replace"
                      SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="${eth0-mac}", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0" 
                      SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="${eth1-mac}", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="eth*", NAME="eth1"
                   EOF
                  '';

                services.udev.extraRules = ''
                      ENV{ID_VENDOR}=="Adapte*", KERNEL=="sd*", SUBSYSTEM=="block", SYMLINK+="disk/by-ldname/%E{ID_MODEL}%n", OPTIONS+="string_escape=replace"
                      SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="${eth0-mac}", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"
                      SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="${eth1-mac}", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="eth*", NAME="eth1"
                  '';    

                system.stateVersion = "20.09";
              }

        - set_fact: interfaces="{{ ansible_interfaces | select('match', '^(em|p|eth|br)[0-9]+') | map('regex_replace', '^(.*)$', 'ansible_\\1') | list | unique }}"
        - debug: var=interfaces
        - shell:
            mysql -se 'SHOW VARIABLES LIKE "%version%"' | awk '/innodb_version/ {print $NF}'
          register: mysql_version
        - shell:
            ip r
          register: routes
        - copy:
            dest: /etc/nixos/README.md
            content: |
              # network
              {{ interfaces | map('extract', hostvars[inventory_hostname], 'macaddress') | select('defined') | list | unique | to_nice_yaml }}

              {{ interfaces | map('extract', hostvars[inventory_hostname], 'ipv4') | select('defined') | list | to_nice_yaml }}

              {{ interfaces | map('extract', hostvars[inventory_hostname], 'ipv4_secondaries') | select('defined') | list | to_nice_yaml }}

              {{ routes.stdout }}

              # myqsl
              mysql:
                version: {{ mysql_version.stdout }}

              # arcconf
              {{ arcconf.stdout }}

              # megacli
              {{ megacli.stdout }}

  #+end_src

- Majordomo flakes
#+begin_example
#!/usr/bin/env bash

mapfile -t files < <(find * -maxdepth 3 -type f -name flake.nix -print)

flakes()
{
    for file in "${files[@]}"
    do
        group="$(dirname "$(dirname "$file")")"
        group="${group//./-}"
        group="${group/_/}"
        name="$(basename "$(dirname "$file")")"
        name="${name//./-}"
        name="${name/_/}"
        printf '{"from": {"type": "indirect", "id": "%s-%s"}, "to": {"type": "git", "url": "https://gitlab.intr/%s/%s"}}\n' "$group" "$name" "$group" "$name"
    done | jq --slurp
}

printf '{"version": 2, "flakes":%s}' "$(flakes)"
#+end_example

#+begin_example
builtins.match "php([[:alnum:]])([[:alnum:]])" "php70"
#+end_example

#+begin_src nix
  with import <nixpkgs> {};
  with lib;
  
  (map
    (version: { name = version; home = pkgs."openjdk${version}"; })
    (filter
      (file: builtins.match "([[:digit:]])+" file != null)
      (map
        (file: removeSuffix ".nix" (baseNameOf file))
        (filesystem.listFilesRecursive (pkgs.path + /pkgs/development/compilers/openjdk)))))
#+end_src

#+begin_src nix
  nix-repl> let { a = 2; b = 3; body = "foo"; }
  "foo"
#+end_src

* deploy-rs
  - [[https://github.com/serokell/deploy-rs][serokell/deploy-rs: A Simple multi-profile Nix-flake deploy tool.]]

    Activation command during deploy example:
    #+begin_example
      /nix/store/...-activatable-nixos-system-mx1-mr-20.09.20201027.cd63096/activate-rs                                       \
          --temp-path '/tmp'                                                                                                  \
          activate '/nix/store/...-activatable-nixos-system-mx1-mr-20.09.20201027.cd63096' '/nix/var/nix/profiles/system'     \
          --confirm-timeout 30                                                                                                \
          --auto-rollback
    #+end_example

** TODO nixos-switch-to-configuration code 100 means that host reboot is required

* Tools
- [[https://github.com/zhaofengli/colmena][zhaofengli/colmena: A simple, stateless NixOS deployment tool]]
- [[https://github.com/thiagokokada/nix-alien][thiagokokada/nix-alien: Run unpatched binaries on Nix/NixOS]]
- [[https://github.com/mlieberman85/nixbom][mlieberman85/nixbom]]
- [[https://github.com/purenix-org/purenix][purenix-org/purenix: Nix backend for PureScript. Transpile PureScript code to Nix.]]
- [[https://github.com/cdepillabout/purenix-examples][cdepillabout/purenix-examples: Examples of common Nix things written in PureNix]]
- [[https://github.com/astro/deadnix][astro/deadnix: Scan Nix files for dead code]]
  - [[https://github.com/astro/deadnix-action][astro/deadnix-action: Workflow to find and delete dead nix code]]
- [[https://lazamar.co.uk/nix-versions/][Nix Package Versions]]
- [[https://github.com/kamadorueda/alejandra][kamadorueda/alejandra: The Uncompromising Nix Code Formatter]]
- [[https://github.com/nix-dot-dev/getting-started-nix-template][nix-dot-dev/getting-started-nix-template: Based on nix.dev tutorials, repository template to get you started with Nix.]]
- [[https://github.com/Lassulus/nix-autobahn][Lassulus/nix-autobahn]]
- [[https://github.com/railwayapp/nixpacks][railwayapp/nixpacks: App source + Nix packages + Docker = Image]]
- [[https://github.com/DavHau/nix-eval-cache][DavHau/nix-eval-cache: Cache evaluation of nix functions]]
- [[https://github.com/siraben/nix-lint][siraben/nix-lint: Semantic linter for Nix using tree-sitter 🌳 + ❄️]]
- [[https://github.com/jmgilman/nix-pre-commit][jmgilman/nix-pre-commit: Generate pre-commit configurations with your flake.nix]]
- [[https://github.com/nix-community/nixago][nix-community/nixago: Generate configuration files using Nix maintainer=@jmgilman]]
- [[https://github.com/divnix/quick-nix-registry][divnix/quick-nix-registry: Speed up the Nix registry by caching nixpkgs locally]]
- [[https://github.com/pinpox/lollypops][pinpox/lollypops: Lollypop Operations - NixOS Deployment Tool]]

* Overlays
  - nixos-install --flake github:hoverbear-consulting/flake#gizmo --impure
    - ln -s /path/to/nixpkgs-replit/default.nix ~/.config/nixpkgs/overlays/replit.nix
    - # Install upm nix-env -iA nixpkgs.upm


* Virtualization
- [[https://github.com/Mic92/nixos-shell][Mic92/nixos-shell: Spawns lightweight nixos vms in a shell]]
- [[https://github.com/astro/microvm.nix][astro/microvm.nix: NixOS MicroVMs]]
- [[https://github.com/rsdy/nix-readonly][rsdy/nix-readonly: Lightweight NixOS VMs using KVM with read-only root]]

* NixOS
  #+begin_src nix
    let
      nixos = import (pkgs.path + /nixos) {
        inherit system;
        configuration = {
          services.restic.backups.remotebackup = services.restic.backups.remotebackup;
        };
      };
    in lib.mkForce ''
            ${nixos.config.systemd.services.restic-backups-remotebackup.postStart}
        #     echo hi
          '';
    
  #+end_src

- [[https://github.com/chessai/nike][chessai/nike: nixos remote installation via `justdoit`]]
- [[https://github.com/lourkeur/miniguest][lourkeur/miniguest: lightweight, declarative guest operating systems]]
- [[https://gist.github.com/vizanto/7568026][NixOS boot with (shared) `/nix` mounted through NFS. Using this hack to have `/nix` stored on ZFS in the SmartOS global zone, until SmartOS gets `virtfs` support.]]
- [[https://github.com/Sam1431/IdempotentDots][Sam1431/IdempotentDots: dots configured after setting up NixOS on tmpfs]]
- [[https://github.com/gvolpe/nix-config][gvolpe/nix-config: NixOS configuration]]

** Installers
- [[https://github.com/samuela/nixos-up/blob/main/nixos-up.ml][nixos-up/nixos-up.ml at main · samuela/nixos-up]]

** NixOS alternatives
 - [[https://ocelot-project.github.io/][λ Ocelot]]


* Flakes
- [[https://github.com/NixOS/templates][NixOS/templates: Flake templates]]
- [[https://github.com/fnctl/mkSystem/blob/main/flake.nix][mkSystem/flake.nix at main · fnctl/mkSystem]]
- [[https://github.com/fnctl/helix][fnctl/helix: A post-modern modal text editor.]]

** Learning

- [[https://nixos.wiki/wiki/Flakes][Flakes - NixOS Wiki]]
- [[https://github.com/NixOS/nix/tree/master/src/nix][nix/src/nix at master · NixOS/nix]]

** Videos

- [[https://www.youtube.com/watch?v=QXUlhnhuRX4&t=1154s][Jörg Thalheim: Nix flakes 101 (rC3 2020) - YouTube]]
- [[https://www.youtube.com/watch?v=K54KKAx2wNc&t=18s][Intro to Flakes - YouTube]]
- [[https://www.youtube.com/watch?v=UeBX7Ide5a0][Nix flakes (NixCon 2019) - YouTube]]
- [[https://www.youtube.com/watch?v=h2I1FHpbaIg][Nix Friday - Flakes! - YouTube]]
- [[https://www.youtube.com/channel/UCDTeiF7cayvgLMUBSm9-B2A][Jonas Chevalier - YouTube]]
- [[https://www.youtube.com/watch?v=98EwejpIJzE&t=645s][Flakes in nix 2.4 - YouTube]]
- [[https://www.youtube.com/user/nautilus1k][Andrew Tropin - YouTube]]
- [[https://www.youtube.com/watch?v=mJbQ--iBc1U&t=994s][Moving Nixos System Configuration Into A Flake - YouTube]]
- [[https://www.youtube.com/watch?v=CDzgNxoAlnA&t=3126s][Almost Perfect Dotfiles Management w/ nix, home-manager and flakes - YouTube]]

** Misc

  - [[https://github.com/DavHau/systemd2nix][DavHau/systemd2nix: Convert systemd service files to Nix syntax]]
  - [[https://github.com/DavHau/mach-nix][DavHau/mach-nix: Create highly reproducible python environments]]
  - [[https://github.com/flokli/nix-casync][flokli/nix-casync: A more efficient way to store and substitute Nix store paths]]
  - [[https://github.com/netbootxyz/netboot.xyz/issues/1050]["Permission denied" error on NixOS · Issue #1050 · netbootxyz/netboot.xyz]]
  - [[https://github.com/ijohanne/nixpkgs-firefox-addons][ijohanne/nixpkgs-firefox-addons: Fork of nixpkgs-firefox-addons from https://gitlab.com/rycee/nixpkgs-firefox-addons]]
  - [[https://github.com/divnix/digga][divnix/digga: A a flake utility library to craft shell-, home-, and hosts- environments.]]
  - [[https://github.com/serokell/systemd-nix][serokell/systemd-nix: Generate systemd units from NixOS-style descriptions]]
  - [[https://github.com/fufexan/nix-gaming][fufexan/nix-gaming: Gaming on Nix]]
  - [[https://github.com/serokell/vault-secrets/blob/master/flake.nix][vault-secrets/flake.nix at master · serokell/vault-secrets]]
  - [[https://github.com/hackworthltd/react-nix-craco-public][hackworthltd/react-nix-craco-public: Repro case for an npmlock2nix issue]]
  - [[https://github.com/divnix/vs-ext][divnix/vs-ext: A kick ass library to dominate your Visual Studio Extensions (with DevOS)]]
  - [[https://github.com/gytis-ivaskevicius/flake-utils-plus?auto_subscribed=false][gytis-ivaskevicius/flake-utils-plus: Use Nix flakes without any fluff.]]
  - [[https://github.com/tadfisher/flake][tadfisher/flake: My computing life in Nix.]]
  - [[https://github.com/bqv/nixrc][bqv/nixrc: Structured flake-based NixOS configuration]]
  - [[https://github.com/MarcoPolo/simple-vms][MarcoPolo/simple-vms: Simple VMs in NixOS]]
  - [[https://github.com/balsoft/kalinix][balsoft/kalinix: A pentesting/CTF toolbox with the help of Nix]]
  - [[https://github.com/adriansosa/tmux-flake][adriansosa/tmux-flake]]
  - [[https://github.com/MatthewCroughan/nixinate][MatthewCroughan/nixinate: Another NixOS Deployment Tool - Nixinate your systems 🕶️]]
  - [[https://github.com/Simon-Boyer/nixos-swarm-node][Simon-Boyer/nixos-swarm-node: Personnal NixOS configuration for a docker swarm node]]

  - [[https://github.com/jkachmar/easy-hls-nix][jkachmar/easy-hls-nix: Easy Haskell Language Server tooling with Nix!]]

  - $ nix build .#nixosConfigurations.someNixosSystem.config.system.build.vm

  - [[https://github.com/Hoverbear-Consulting/flake][Hoverbear-Consulting/flake]]
    : nixos-install --flake github:hoverbear-consulting/flake#gizmo --impure

** Packer
   #+begin_src nix
     {
       description = "Run packer to build NixOS";
       inputs = {
         flake-compat = {
           url = "github:edolstra/flake-compat";
           flake = false;
         };
         flake-utils.url = "github:numtide/flake-utils";
         packer-nixos = {
           url = "github:nix-community/nixbox";
           flake = false;
         };
       };
       outputs = { self, nixpkgs, flake-utils, packer-nixos, ... }:
         flake-utils.lib.eachDefaultSystem (system: with nixpkgs.legacyPackages."${system}"; {
           apps.mailman =
             let
               nixos-x86_64 = builtins.fromJSON (builtins.readFile "${packer-nixos}/nixos-x86_64.json");
               packerNixosJson = with nixpkgs.lib; writeText "nixos-x86_64.json"
                 (builtins.toJSON
                   (filterAttrs
                     (name: value: name != "post-processors")
                     (nixos-x86_64 // {
                       builders = [
                         ((findFirst
                           (x: x.type == "qemu")
                           nixos-x86_64.builders
                           nixos-x86_64.builders)
                         // {
                           iso_url = "https://releases.nixos.org/nixos/20.09/nixos-20.09.3827.389249fa9b3/nixos-minimal-20.09.3827.389249fa9b3-x86_64-linux.iso";
                           iso_checksum = "d73847e1bc4034eb7b31998d6106ba60bd37048c605cbe3b11d7fb4a87aea676";
                         })
                       ];
                     })));
             in flake-utils.lib.mkApp {
               drv = writeScriptBin "build.sh" ''
                 #!${runtimeShell}
                 set -euo pipefail
                 cp -a ${packer-nixos} packer-nixos
                 find packer-nixos -type f -exec chmod 644 {} \;
                 chmod 755 packer-nixos
                 install -m644 ${packerNixosJson} packer-nixos/nixos-x86_64.json
                 (
                     cd packer-nixos
                     exec -a "$0" ${packer}/bin/packer build ${packerNixosJson} "$@"
                 )
               '';
             };
           devShell = mkShell {
             buildInputs = [ nixUnstable ];
           };
         });
     }
   #+end_src

   : nix build .#nixosConfigurations.mailman.config.system.build.tarball
   #+begin_src nix
     {
       description = "TODO";
       inputs = {
         flake-compat = {
           url = "github:edolstra/flake-compat";
           flake = false;
         };
         flake-utils.url = "github:numtide/flake-utils";
         packer-nixos = {
           url = "github:nix-community/nixbox";
           flake = false;
         };
       };
       outputs = { self, nixpkgs, flake-utils, packer-nixos, ... }:
         flake-utils.lib.eachDefaultSystem (system: {
           devShell = with nixpkgs.legacyPackages."${system}"; mkShell {
             buildInputs = [ nixUnstable ];
           };
         })
         // (let
           system = "x86_64-linux";
         in {
           nixosModule = {
             boot.loader.grub.device = "/dev/sda";
             fileSystems."/".device = "/dev/sda1";
             services.nginx.enable = true;
             imports = [
               (nixpkgs + /nixos/modules/virtualisation/docker-image.nix)
               (nixpkgs + /nixos/modules/installer/cd-dvd/channel.nix)
             ];
           };
           nixosConfigurations.mailman = nixpkgs.lib.nixosSystem {
             inherit system;
             modules = [ self.nixosModule ];
           };
         });
     }
   #+end_src

* Cache

- [[https://nixos.wiki/wiki/Binary_Cache][Binary Cache - NixOS Wiki]]
#+begin_example
$ curl http://binarycache.example.com/nix-cache-info
StoreDir: /nix/store
WantMassQuery: 1
Priority: 30
#+end_example

* Nixpkgs Source
- pkgs/stdenv/generic/check-meta.nix

* Repl

#+begin_example
  nix-repl> :a builtins.getFlake (toString ./.)
  Added 11 variables.
#+end_example

#+begin_example
  nix-repl> :a inputs
  Added 14 variables.
#+end_example

* PHP
  #+begin_src php
    php > var_dump(new \PNDP\AST\NixFunInvocation(new \PNDP\AST\NixExpression("foo"), []));
    object(PNDP\AST\NixFunInvocation)#4 (2) {
      ["funExpr"]=>
      object(PNDP\AST\NixExpression)#2 (1) {
        ["value"]=>
        string(3) "foo"
      }
      ["paramExpr"]=>
      array(0) {
      }
    }
    php > var_dump(phpToNix(new \PNDP\AST\NixFunInvocation(new \PNDP\AST\NixExpression("foo"), [])));
    string(6) "foo []"
    NULL
    php > var_dump(phpToNix(new \PNDP\AST\NixFunInvocation(new \PNDP\AST\NixExpression("foo"), "")));
    string(6) "foo """
    NULL
    php > var_dump(phpToNix(new \PNDP\AST\NixFunInvocation(new \PNDP\AST\NixExpression("foo"), ";")));
    string(7) "foo ";""
    NULL
    php > var_dump(phpToNix(new \PNDP\AST\NixFunInvocation(new \PNDP\AST\NixExpression("foo"), NULL)));
    string(8) "foo null"
    NULL
    php > var_dump(new \PNDP\AST\NixExpression("foo"))
    php > ;
    object(PNDP\AST\NixExpression)#4 (1) {
      ["value"]=>
      string(3) "foo"
    }
    php > var_dump(phpToNix(new \PNDP\AST\NixExpression("foo")));
    string(3) "foo"
    NULL
    php > phpToNix("foo")
    php > ;
    string(5) ""foo""
    php > var_dump(phpToNix(new \PNDP\AST\NixExpression("foo")));
    string(3) "foo"
    NULL
    php > print(phpToNix(new \PNDP\AST\NixExpression("foo")));
  #+end_src

- [[https://github.com/edolstra/nix-serve/issues/10][substituter not accepted due to invalid signature · Issue #10 · edolstra/nix-serve]]
  - nix path-info --store http://<hostname>:<port> --json <some-path> | grep sig
- [[https://github.com/NixOS/nix/issues/4520][normal allowed-users should be able to use --substituters · Issue #4520 · NixOS/nix]]

* Libraries
- [[https://github.com/ArctarusLimited/xnlib][ArctarusLimited/xnlib: XTended Nix Library used for various purposes by Arctarus]]
