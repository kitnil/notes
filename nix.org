- NixOS REPL 
: oleg@guixsd ~/src/nixpkgs-master$ NIXOS_CONFIG="$HOME/src/nixpkgs-master/nixos/modules/virtualisation/qemu-vm.nix" nix repl .

- nix-repl> mynixos2 = nixos { services.mailman.enable = true; services.mailman.siteOwner="eng"; }

nix-repl> mynixos2.config.environment.etc."mailman.cfg".text
"[mailman]\nsite_owner: eng\nlayout: fhs\n\n[paths.fhs]\nbin_dir: /nix/store/f93i81cd0gc0xlkiykmrss7bnikdchh2-python3.7-mailman-3.3.0/bin\nvar_dir: /var/lib/mailman\nqueue_dir: $var_dir/queue\ntemplate_dir: $var_dir/templates\nlog_dir: $var_dir/log\nlock_dir: $var_dir/lock\netc_dir: /etc\next_dir: $etc_dir/mailman.d\npid_file: /run/mailman/master.pid\n"

- Idea
: nix-build --no-out-link --expr 'with import <nixpkgs> { config = { allowUnfree = true; }; }; idea.idea-ultimate'

- Build patched package without tests
: $((git commit --amend -m 'patch' src/vulnix/output.py; git diff HEAD~..HEAD > 1.patch; nix repl /home/oleg/.nix-defexpr/channels/nixos-unstable <<< ':b (import (fetchgit {url = "https://cgit.duckdns.org/git/nixos/nixpkgs"; rev = "329102c47bd1c68f0acdf4feec64232202948c7a"; sha256 = "1y416j4bw46a40asdai3zcb4qim5f6pg46kr1n0pv0vy56mlbv8a";}) {}).vulnix.overrideAttrs(old: {patches = [./1.patch]; doCheck = false; checkPhase = ""; preCheckPhase = "rm -rf src/vulnix/tests; ls -la; ls -la src; ls -la src/vulnix"; installCheckPhase = ""; doInstallCheck = false;})') | awk '/out ->/ { print $NF }')/bin/vulnix --json /nix/store/zavn4np1jvm79f0rafkv0p1mrag09qkz-bash-4.4-p23/

- Create .envrc for project directories
: for file in $(echo */default.nix); do (output="$(dirname "$file")"/.envrc; [[ -f $output ]] || echo 'use nixpkgs' >> "$output"); done

- [[https://github.com/cachix/pre-commit-hooks.nix][cachix/pre-commit-hooks.nix: Seamless integration of https://pre-commit.com git hooks with Nix.]]
- [[https://github.com/justinwoo/nix-shorts][justinwoo/nix-shorts: A collection of short notes about Nix, down to what is immediately needed for users.]]
- [[https://status.nixos.org/][NixOS Infra Status]]
- [[https://github.com/Infinisil/all-hies][Infinisil/all-hies: Cached Haskell IDE Engine Nix builds for all GHC versions]]
- [[https://github.com/nmattia/niv][nmattia/niv: Easy dependency management for Nix projects]]
- [[https://github.com/pmiddend/nixos-manager][pmiddend/nixos-manager: Manage your NixOS packages and configuration via a simple, intuitive UI]]
- [[https://github.com/utdemir/nix-tree][utdemir/nix-tree: Interactively browse the dependency graph of your Nix derivations.]]
- [[https://github.com/nix-community/NUR][nix-community/NUR: Nix User Repository: User contributed nix packages maintainer=@Mic92]]
- [[https://github.com/cdepillabout/nix-query-tree-viewer][cdepillabout/nix-query-tree-viewer: GTK viewer for the output of `nix store --query --tree`]]
- [[https://ops.functionalalgebra.com/][Nix Cookbook · Cookbook style to learning Nix expression language for Nix packaging and NixOS]]
- [[https://github.com/DBCDK/morph][DBCDK/morph: NixOS deployment tool]]
- [[https://github.com/Synthetica9/nix-linter][Synthetica9 / nix-linter]]
- [[https://github.com/awakesecurity/nix-deploy][awakesecurity / nix-deploy (Haskell)]]
- [[https://github.com/maralorn/nix-output-monitor][maralorn/nix-output-monitor: Pipe your nix-build output through the nix-output-monitor a.k.a nom to get additional information while building.]]
- [[https://github.com/input-output-hk/nix-tools][input-output-hk/nix-tools: Translate Cabals Generic Package Description to a Nix expression]]
- [[https://github.com/ryantm/nixpkgs-update][ryantm/nixpkgs-update: Updating nixpkgs packages since 2018]]
- [[https://github.com/basvandijk/nixtodo][basvandijk / nixtodo]]
- [[https://github.com/Profpatsch/libnix-haskell][Profpatsch/libnix-haskell: Haskell library to interface with the nix package manager]]
- [[https://github.com/bennofs/nix-index][bennofs/nix-index: Quickly locate nix packages with specific files]]
- [[https://github.com/bennofs/nix-script][bennofs/nix-script: A shebang for running scripts inside nix-shell with defined dependencies]]
- [[https://github.com/awakesecurity/hocker][awakesecurity / hocker Utilities for interacting with the docker registry and generating nix build instructions]]
- [[https://github.com/Gabriel439/nix-diff][Gabriel439 / nix-diff]]
- oleg@guixsd ~/majordomo/webservices/nginx-php73-private$ nix-build --option trusted-public-keys 'cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=, cache.nixos.intr:6VD7bofl5zZFTEwsIDsUypprsgl7r9I+7OGY4WsubFA=' --substituters 'https://cache.nixos.org/ http://cache.nixos.intr/' --no-out-link --expr 'with (import (builtins.fetchTarball {url = "https://github.com/nixos/nixpkgs/archive/d0b3ab3b249.tar.gz";}) {overlays = [(import (builtins.fetchGit {url = "git@gitlab.intr:_ci/nixpkgs.git"; ref = "master";}))];}); (import ./test.nix {}).driver'
- [[https://www.reddit.com/r/NixOS/comments/a3w67x/install_a_package_from_a_specific_version_of/][Install a package from a specific version of Nixpkgs : NixOS]]
- [[https://gitlab.com/obsidian.systems/basalt/][obsidian.systems / basalt · GitLab]]
- [[https://github.com/grahamc/netboot.nix][grahamc/netboot.nix: Create full netboot images in 15 seconds.]]
- [[https://github.com/noteed/nix-notes][noteed/nix-notes: A collection of short notes about Nix, each contributing to the same virtual machine image]]
- [[https://github.com/vlktomas/nix-examples][vlktomas/nix-examples: Showcase of Nix usage for various technologies]]
- [[https://github.com/BenSchZA/nix-shells][BenSchZA/nix-shells: Assorted Nix development shells]]
- [[https://github.com/hercules-ci/arion][hercules-ci/arion: Run docker-compose with help from Nix/NixOS]]
- [[https://github.com/domenkozar/hnix-lsp][domenkozar/hnix-lsp: Language Server Protocol for Nix]]
- [[https://github.com/nh2/nixops-tutorial][nh2/nixops-tutorial: Tutorial for practical deployments with NixOps]]
- [[https://github.com/justinwoo/format-nix][justinwoo/format-nix: A simple formatter for Nix using tree-sitter-nix.]]
- [[https://github.com/tazjin/nixdoc][tazjin/nixdoc: Tool to generate documentation for Nix library functions]]
- [[https://github.com/Infinisil/nixlisp][Infinisil/nixlisp]]
- [[https://github.com/cloudwatt/nix-container-images][cloudwatt/nix-container-images: Write container images as NixOS machines]]
- [[https://github.com/ajs124/NixDroid][ajs124 / NixDroid Android AOSP]]
- [[https://github.com/xtruder/kubenix][xtruder / kubenix]]
- [[https://github.com/nix-community/setup.nix][nix-community/setup.nix: Nixpkgs based build tools for declarative Python packages [maintainer=@datakurre]]]
- [[https://github.com/vitiral/novault][vitiral/novault: ultra simple and secure vaultless password manager (beta)]]
- [[https://github.com/headcounter/shabitica][headcounter/shabitica: Run your own self-hosted Habitica instance]]
- [[https://github.com/pjones/nix-hs][pjones/nix-hs: Haskell + nixpkgs = nix-hs]]
- [[https://github.com/styx-static/styx][styx-static/styx: Static site generator in Nix expression language.]]

: oleg@guixsd ~/majordomo/_ci/nixpkgs$ nix-instantiate --expr 'with import <nixpkgs> {}; lib.filter (package: lib.isDerivation package) (map (package: package.src) (lib.filter (package: lib.hasAttrByPath ["src"] package) (import ./build.nix)))'

Ad-hoc
: nix run -f channel:nixos-unstable anki -c anki

Imperatively
: nix-env -f channel:nixos-unstable -iA anki

#+BEGIN_SRC nix
  systemPackages = [ (import (fetchTarball "channel:nixos-unstable") {}).anki ];

  # or

  builtins.fetchTarball {
    url = "https://github.com/NixOS/nixpkgs/archive/<GIT_REVISION>.tar.gz";
    sha256 = "asdfjhasdfhgasdhjkfagsdfjkhgasdfhjkagsdfhjagd";
  }
#+END_SRC

- http://chriswarbo.net/projects/nixos/useful_hacks.html
: nix repl ~/src/nixpkgs-19.09
: s = nixos ((import ./ns.nix).ns3 { config = { }; inherit pkgs; })

- /etc/environment
#+BEGIN_SRC nix
  environment.etc.jenkins = {
    source = pkgs.jenkins-jcasc-config;
    target = "jenkins/jenkins.yml";
  };

#+END_SRC

- nix-prefetch-url

https://github.com/NixOS/nix/issues/1880
#+BEGIN_SRC sh
  nix-build -E 'with import <nixpkgs> {}; 
                          fetchFromGitHub {
                              owner = "bitcoinunlimited";
                              repo = "bitcoinunlimited";
                              rev = "v1.0.2.0";
                              sha256 = "17cmy0s1908s2rqs0zwr05f3541nqm2pg08n2xn97g2k3yimdg5q";
                          }'
#+END_SRC

documentation /gnu/store/90wc27m5rafga3zjzkg6xdbf49rrz3w1-nix-2.0.4/share/doc/nix/manual/index.html

patchelf https://nixos.wiki/wiki/Packaging/Binaries#Creating_the_Derivation_for_upstream_Packaging

* Cache
- [[https://github.com/ghuntley/cachix-demo][ghuntley/cachix-demo]]
- [[https://nixbuild.net/][nixbuild.net]]
- [[https://github.com/nixbuild/nixbuild-action][nixbuild/nixbuild-action: GitHub Action for using the nixbuild.net service]]

* Nixops

- [[https://www.ryantm.com/blog/nixops-without-sharing/][Nixops without sharing]]

* Install commands

- ipmi
: nix-env -p .nix-profile.d/ipmiview/ipmiview -iA nixos-unstable.ipmiview

* 

https://gist.github.com/joepie91/043a51a7b70be5f50f1d

This is an installation walkthrough for [the Nix package manager](https://nixos.org/nix/) in multi-user mode, on a non-NixOS system. While the walkthrough focuses on Debian, instructions on different platforms should be similar.

## 1. Install dependencies.

For recent Debian: 

```sh
apt-get install build-essential pkg-config autotools-dev dh-autoreconf libssl-dev libbz2-dev libsqlite3-dev libcurl4-openssl-dev liblzma-dev libgc-dev libdbi-perl libdbd-sqlite3-perl libwww-curl-perl libxml2 libxslt-dev
```

For other distributions, look for the equivalent packages.

## 2. Set up build users.

```sh
groupadd -r nixbld
for n in $(seq 1 10); do useradd -c "Nix build user $n" \
    -d /var/empty -g nixbld -G nixbld -M -N -r -s "$(which nologin)" \
    nixbld$n; done
```

## 3. Install Nix.

```sh
wget http://nixos.org/releases/nix/nix-1.11.2/nix-1.11.2.tar.xz
tar -xvf nix-1.11.2.tar.xz
cd nix-1.11.2/
./configure --enable-gc
make -j 2
make install
```

If you have more than two CPU cores, you might want to increase the value of the `-j` flag for faster compilation.

## 4. Create a systemd unit file, for managing the Nix daemon.

Save this as `/etc/systemd/system/nix.service`:

```
[Unit]
Description=Nix daemon

[Service]
EnvironmentFile=-/etc/default/nix
ExecStart=/usr/local/bin/nix-daemon $EXTRA_OPTS
IgnoreSIGPIPE=false
KillMode=process

[Install]
WantedBy=multi-user.target
```

Create an empty `/etc/default/nix`:

```sh
touch /etc/default/nix
```

Enable and start the service:

```sh
systemctl enable nix
systemctl start nix
```

## 5. Set up user configuration

Source the following in your `/root/.bashrc`, either directly or indirectly:

```sh
nix-setup-user() {
        TARGET_USER="$1"
        SYMLINK_PATH="/home/$TARGET_USER/.nix-profile"
        PROFILE_DIR="/nix/var/nix/profiles/per-user/$TARGET_USER"

        echo "Creating profile $PROFILE_DIR..."
        echo "Profile symlink: $SYMLINK_PATH"

        rm "$SYMLINK_PATH"
        mkdir -p "$PROFILE_DIR"
        chown "$TARGET_USER:$TARGET_USER" "$PROFILE_DIR"
        
        ln -s "$PROFILE_DIR/profile" "$SYMLINK_PATH"
        chown -h "$TARGET_USER:$TARGET_USER" "$SYMLINK_PATH"
        
        echo "export NIX_REMOTE=daemon" >> "/home/$TARGET_USER/.bashrc"
        echo ". /usr/local/etc/profile.d/nix.sh" >> "/home/$TARGET_USER/.bashrc"
        
        su -lc "cd; . /usr/local/etc/profile.d/nix.sh; NIX_REMOTE=daemon nix-channel --update" "$TARGET_USER"
}
```

Now, whenever you create a new user - say, `joepie91`, you can simply do something like the following:

```sh
nix-setup-user joepie91
```

... and a few minutes later, `joepie91` will be able to log in, and use Nix. Repeat for each user that needs access to Nix.

https://nixos.org/nix-dev/2010-April.txt.gz

* Source

** navi

#+BEGIN_SRC nix
  navi = (super.callPackage ((builtins.fetchGit {
          url = "https://github.com/9999years/nix-config";
          ref = "master";
        }).outPath + "/rebeccapkgs/navi") { }).overrideAttrs (oldAttrs: with super.pkgs; {
          version = "2.0.0";
          src = super.fetchFromGitHub {
            owner = "denisidoro";
            repo = "navi";
            rev = "v2.0.0";
            sha256 = "0bmdywwsm3r250f6i5x46s9gqlv129aq7lavn07rfrv7ayq7ckpv";
          };
          installPhase = ''
            mkdir -p $out/bin
            mkdir -p $out/share/navi

            cp -r cheats $out/share/navi/
            cp -r src $out/share/navi/

            makeWrapper ${bash}/bin/bash $out/bin/navi \
                --argv0 navi \
                --add-flags "$out/share/navi/navi"
          '';
        });
#+END_SRC


#+BEGIN_SRC nix
  nix-repl> lib.foldAttrs (n: a: [n] ++ a) [] mynixos.options.systemd.services.definitions            
    { audit = [ ... ]; console-getty = [ ... ]; "container-getty@" = [ ... ]; "container@" = [ ... ]; dbus = [ ... ]; dhcpcd = [ ... ]; firewall = [ ... ]; "getty@" = [ ... ]; hyperkitty = [ ... ]; hyperkitty-daily = [ ... ]; hyperkitty-hourly = [ ... ]; hyperkitty-minutely = [ ... ]; hyperkitty-quarter-hourly = [ ... ]; hyperkitty-weekly = [ ... ]; hyperkitty-yearly = [ ... ]; mailman = [ ... ]; mailman-daily = [ ... ]; mailman-settings = [ ... ]; mailman-web = [ ... ]; mwlib-nserve = [ ... ]; mwlib-nslave = [ ... ]; mwlib-qserve = [ ... ]; network-local-commands = [ ... ]; network-setup = [ ... ]; nix-daemon = [ ... ]; nix-gc = [ ... ]; nix-optimise = [ ... ]; nscd = [ ... ]; polkit = [ ... ]; post-resume = [ ... ]; pre-sleep = [ ... ]; prepare-kexec = [ ... ]; resolvconf = [ ... ]; rngd = [ ... ]; save-hwclock = [ ... ]; "serial-getty@" = [ ... ]; "systemd-backlight@" = [ ... ]; systemd-binfmt = [ ... ]; "systemd-fsck@" = [ ... ]; systemd-journal-flush = [ ... ]; systemd-journald = [ ... ]; systemd-logind = [ ... ]; systemd-modules-load = [ ... ]; "systemd-nspawn@" = [ ... ]; systemd-random-seed = [ ... ]; systemd-remount-fs = [ ... ]; systemd-sysctl = [ ... ]; systemd-timedated = [ ... ]; systemd-timesyncd = [ ... ]; systemd-udev-settle = [ ... ]; systemd-udevd = [ ... ]; systemd-update-utmp = [ ... ]; systemd-user-sessions = [ ... ]; systemd-vconsole-setup = [ ... ]; "user-runtime-dir@" = [ ... ]; "user@" = [ ... ]; }

  nix-repl> lib.filterAttrs (n: v: n == "mailman-web") (lib.foldAttrs (n: a: [n] ++ a) [] mynixos.options.systemd.services.definitions)
  { mailman-web = [ ... ]; }

#+END_SRC

* Hydra

example job
#+BEGIN_SRC nix
  let
    pkgs = import <nixpkgs> { };

    jobs = rec {

      tarball = pkgs.releaseTools.sourceTarball {
        name = "hello-tarball";
        src = "mirror://gnu/hello/hello-2.10.tar.gz";
        buildInputs = (with pkgs; [ bash ]);
      };

      build = { system ? builtins.currentSystem }:

        let pkgs = import <nixpkgs> { inherit system; };
        in pkgs.releaseTools.nixBuild {
          name = "hello";
          src = jobs.tarball;
        };
    };
  in jobs
#+END_SRC

* Dictionary
** Profile
A general and convenient concept for realizing rollbacks.
** Database
/nix/var/nix/db/db.sqlite

Keeps track of the dependencies between derivations.

Made up of multiple "generations".

* Commands

** Show direct runtime dependencie
#+BEGIN_SRC shell
nix-store -q --references "$(command -v bassename)"
#+END_SRC

** Show reverse dependencies
#+BEGIN_SRC shell
nix-store -q --referrers "$(command -v basename)"
#+END_SRC

** Show catamorphed closure
#+BEGIN_SRC shell
nix-store -qR "$(command -v bassename)"
#+END_SRC

** Show tree of closure
#+BEGIN_SRC shell
nix-store -q --tree "$(command -v basename)"
#+END_SRC

** Recovering making rollback from store directory
#+BEGIN_SRC shell
/nix/store/<hash>-nix-<ver>/bin/nix-env --rollback
#+END_SRC

** Build with specific channel
#+begin_src shell
  nix-build release.nix -A build.x86_64-linux -I nixpkgs=channel:nixos-19.03
#+end_src

** Recover with reinstall from store directory
#+BEGIN_SRC shell
/nix/store/<hash>-nix-<ver>/bin/nix-env -i /nix/store/<hash>-nix-<ver>
#+END_SRC

** nix-repl
   #+begin_src nix
     lib.listToAttrs (lib.mapAttrsFlatten (name: value: lib.nameValuePair ("mj-" + name) value) { "a" = { "b" = "c"; }; })
   #+end_src

** nix-instantiate example
   : ls -1 /tmp/env.nix | entr -r nix-instantiate --eval --strict --expr 'with import <nixpkgs> {}; import /tmp/env.nix { inherit lib; }'
   #+begin_src nix
     { lib }:

     lib.mapAttrsFlatten (name: value: name + value) {
       LC_ALL = "en_US.UTF-8";
       TZ = "Europe/Moscow";
     }

   #+end_src

*** meta
  : nix-instantiate ~/src/nixpkgs-19.09/ --eval --strict -A "hello.meta.position"

* Modules

  #+begin_src nix
    let
      systemModule = { lib, config, ... }: {
        options.toplevel = lib.mkOption {
          type = lib.types.str;
        };

        options.enableFoo = lib.mkOption {
          type = lib.types.bool;
          default = false;
        };

        config.toplevel = ''
          Is foo enabled? ${lib.boolToString config.enableFoo}
        '';
      };

      userModule = {
        enableFoo = true;
      };

    in (import <nixpkgs/lib>).evalModules {
      modules = [ systemModule userModule ];
    }
  #+end_src
  : nix-instantiate --eval /tmp/file.nix -A config.toplevel
