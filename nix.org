- NixOS REPL 
: oleg@guixsd ~/src/nixpkgs-master$ NIXOS_CONFIG="$HOME/src/nixpkgs-master/nixos/modules/virtualisation/qemu-vm.nix" nix repl .

- Idea
: nix-build --no-out-link --expr 'with import <nixpkgs> { config = { allowUnfree = true; }; }; idea.idea-ultimate'

- Build patched package without tests
: $((git commit --amend -m 'patch' src/vulnix/output.py; git diff HEAD~..HEAD > 1.patch; nix repl /home/oleg/.nix-defexpr/channels/nixos-unstable <<< ':b (import (fetchgit {url = "https://cgit.duckdns.org/git/nixos/nixpkgs"; rev = "329102c47bd1c68f0acdf4feec64232202948c7a"; sha256 = "1y416j4bw46a40asdai3zcb4qim5f6pg46kr1n0pv0vy56mlbv8a";}) {}).vulnix.overrideAttrs(old: {patches = [./1.patch]; doCheck = false; checkPhase = ""; preCheckPhase = "rm -rf src/vulnix/tests; ls -la; ls -la src; ls -la src/vulnix"; installCheckPhase = ""; doInstallCheck = false;})') | awk '/out ->/ { print $NF }')/bin/vulnix --json /nix/store/zavn4np1jvm79f0rafkv0p1mrag09qkz-bash-4.4-p23/

- [https://github.com/DBCDK/morph][DBCDK/morph: NixOS deployment tool]

- oleg@guixsd ~/majordomo/webservices/nginx-php73-private$ nix-build --option trusted-public-keys 'cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=, cache.nixos.intr:6VD7bofl5zZFTEwsIDsUypprsgl7r9I+7OGY4WsubFA=' --substituters 'https://cache.nixos.org/ http://cache.nixos.intr/' --no-out-link --expr 'with (import (builtins.fetchTarball {url = "https://github.com/nixos/nixpkgs/archive/d0b3ab3b249.tar.gz";}) {overlays = [(import (builtins.fetchGit {url = "git@gitlab.intr:_ci/nixpkgs.git"; ref = "master";}))];}); (import ./test.nix {}).driver'

- [https://www.reddit.com/r/NixOS/comments/a3w67x/install_a_package_from_a_specific_version_of/][Install a package from a specific version of Nixpkgs : NixOS]

: oleg@guixsd ~/majordomo/_ci/nixpkgs$ nix-instantiate --expr 'with import <nixpkgs> {}; lib.filter (package: lib.isDerivation package) (map (package: package.src) (lib.filter (package: lib.hasAttrByPath ["src"] package) (import ./build.nix)))'

Ad-hoc
: nix run -f channel:nixos-unstable anki -c anki

Imperatively
: nix-env -f channel:nixos-unstable -iA anki

#+BEGIN_SRC nix
  systemPackages = [ (import (fetchTarball "channel:nixos-unstable") {}).anki ];

  # or

  builtins.fetchTarball {
    url = "https://github.com/NixOS/nixpkgs/archive/<GIT_REVISION>.tar.gz";
    sha256 = "asdfjhasdfhgasdhjkfagsdfjkhgasdfhjkagsdfhjagd";
  }
#+END_SRC

- http://chriswarbo.net/projects/nixos/useful_hacks.html

- /etc/environment
#+BEGIN_SRC nix
  environment.etc.jenkins = {
    source = pkgs.jenkins-jcasc-config;
    target = "jenkins/jenkins.yml";
  };

#+END_SRC

- nix-prefetch-url

https://github.com/NixOS/nix/issues/1880
#+BEGIN_SRC sh
  nix-build -E 'with import <nixpkgs> {}; 
                          fetchFromGitHub {
                              owner = "bitcoinunlimited";
                              repo = "bitcoinunlimited";
                              rev = "v1.0.2.0";
                              sha256 = "17cmy0s1908s2rqs0zwr05f3541nqm2pg08n2xn97g2k3yimdg5q";
                          }'
#+END_SRC

documentation /gnu/store/90wc27m5rafga3zjzkg6xdbf49rrz3w1-nix-2.0.4/share/doc/nix/manual/index.html

patchelf https://nixos.wiki/wiki/Packaging/Binaries#Creating_the_Derivation_for_upstream_Packaging

* Install commands

- ipmi
: nix-env -p .nix-profile.d/ipmiview/ipmiview -iA nixos-unstable.ipmiview

* 

https://gist.github.com/joepie91/043a51a7b70be5f50f1d

This is an installation walkthrough for [the Nix package manager](https://nixos.org/nix/) in multi-user mode, on a non-NixOS system. While the walkthrough focuses on Debian, instructions on different platforms should be similar.

## 1. Install dependencies.

For recent Debian: 

```sh
apt-get install build-essential pkg-config autotools-dev dh-autoreconf libssl-dev libbz2-dev libsqlite3-dev libcurl4-openssl-dev liblzma-dev libgc-dev libdbi-perl libdbd-sqlite3-perl libwww-curl-perl libxml2 libxslt-dev
```

For other distributions, look for the equivalent packages.

## 2. Set up build users.

```sh
groupadd -r nixbld
for n in $(seq 1 10); do useradd -c "Nix build user $n" \
    -d /var/empty -g nixbld -G nixbld -M -N -r -s "$(which nologin)" \
    nixbld$n; done
```

## 3. Install Nix.

```sh
wget http://nixos.org/releases/nix/nix-1.11.2/nix-1.11.2.tar.xz
tar -xvf nix-1.11.2.tar.xz
cd nix-1.11.2/
./configure --enable-gc
make -j 2
make install
```

If you have more than two CPU cores, you might want to increase the value of the `-j` flag for faster compilation.

## 4. Create a systemd unit file, for managing the Nix daemon.

Save this as `/etc/systemd/system/nix.service`:

```
[Unit]
Description=Nix daemon

[Service]
EnvironmentFile=-/etc/default/nix
ExecStart=/usr/local/bin/nix-daemon $EXTRA_OPTS
IgnoreSIGPIPE=false
KillMode=process

[Install]
WantedBy=multi-user.target
```

Create an empty `/etc/default/nix`:

```sh
touch /etc/default/nix
```

Enable and start the service:

```sh
systemctl enable nix
systemctl start nix
```

## 5. Set up user configuration

Source the following in your `/root/.bashrc`, either directly or indirectly:

```sh
nix-setup-user() {
        TARGET_USER="$1"
        SYMLINK_PATH="/home/$TARGET_USER/.nix-profile"
        PROFILE_DIR="/nix/var/nix/profiles/per-user/$TARGET_USER"

        echo "Creating profile $PROFILE_DIR..."
        echo "Profile symlink: $SYMLINK_PATH"

        rm "$SYMLINK_PATH"
        mkdir -p "$PROFILE_DIR"
        chown "$TARGET_USER:$TARGET_USER" "$PROFILE_DIR"
        
        ln -s "$PROFILE_DIR/profile" "$SYMLINK_PATH"
        chown -h "$TARGET_USER:$TARGET_USER" "$SYMLINK_PATH"
        
        echo "export NIX_REMOTE=daemon" >> "/home/$TARGET_USER/.bashrc"
        echo ". /usr/local/etc/profile.d/nix.sh" >> "/home/$TARGET_USER/.bashrc"
        
        su -lc "cd; . /usr/local/etc/profile.d/nix.sh; NIX_REMOTE=daemon nix-channel --update" "$TARGET_USER"
}
```

Now, whenever you create a new user - say, `joepie91`, you can simply do something like the following:

```sh
nix-setup-user joepie91
```

... and a few minutes later, `joepie91` will be able to log in, and use Nix. Repeat for each user that needs access to Nix.

https://nixos.org/nix-dev/2010-April.txt.gz

* Source

** navi

#+BEGIN_SRC nix
  navi = (super.callPackage ((builtins.fetchGit {
          url = "https://github.com/9999years/nix-config";
          ref = "master";
        }).outPath + "/rebeccapkgs/navi") { }).overrideAttrs (oldAttrs: with super.pkgs; {
          version = "2.0.0";
          src = super.fetchFromGitHub {
            owner = "denisidoro";
            repo = "navi";
            rev = "v2.0.0";
            sha256 = "0bmdywwsm3r250f6i5x46s9gqlv129aq7lavn07rfrv7ayq7ckpv";
          };
          installPhase = ''
            mkdir -p $out/bin
            mkdir -p $out/share/navi

            cp -r cheats $out/share/navi/
            cp -r src $out/share/navi/

            makeWrapper ${bash}/bin/bash $out/bin/navi \
                --argv0 navi \
                --add-flags "$out/share/navi/navi"
          '';
        });
#+END_SRC
