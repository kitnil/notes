* Tutorials

* Corey Schafer

[[https://yt3.ggpht.com/-s6PgRDss0XQ/AAAAAAAAAAI/AAAAAAAAAAA/fb7pMinwZh8/s100-c-k-no-rj-c0xffffff/photo.jpg]]
[[https://www.youtube.com/user/schafer5/][YouTube]]
[[https://en.wikipedia.org/wiki/Python_%28programming_language%29][Wikipedia]]

* pythondigest

-  [[https://pythondigest.ru][Official]]
-  [[https://twitter.com/pydigest][Twitter]]
-  [[http://pythondigest.ru/rss/issues][RSS]]
-  [[@py_digest][Telegram]]

* Video

** Tutorials

- [[https://www.youtube.com/channel/UCfzlCWGWYyIQ0aLC5w48gBQ][sentdex]]

* Examples

** Read a file

Source: [[https://www.youtube.com/watch?v=jA5LW3bR0Us&list=PLQVvvaa0QuDfju7ADVp5W1GF9jVhjbX-_&index=2][String Concatenation and Formatting - Intermediate Python Programming p.2 sentdex]]

#+BEGIN_SRC python
  import os

  location_of_files = '/path/to/file'
  file_name = 'example.txt'
  with open(os.path.join(location_of_files, file_name)) as f:
      print(f.read())
#+END_SRC

** Print multiple variables

Source: [[https://www.youtube.com/watch?v=jA5LW3bR0Us&list=PLQVvvaa0QuDfju7ADVp5W1GF9jVhjbX-_&index=2][String Concatenation and Formatting - Intermediate Python Programming p.2 sentdex]]

String formating:
#+BEGIN_SRC python
  who = 'Gary'
  how_many = 12
  print('{} bought {} apples today!'.format(who, how_many))
#+END_SRC

Put {0} and {1} in python2.

** Argparse for CLI

Source: [[https://www.youtube.com/watch?v=0twL6MXCLdQ&list=PLQVvvaa0QuDfju7ADVp5W1GF9jVhjbX-_&index=3][Argparse for CLI - Intermediate Python Programming p.3 - YouTube]]

#+BEGIN_SRC python
  import argparse
  import sys

  def main():
      parser = argparse.ArgumentParser()
      parser.add_argument('--x', type=float, default=1.0,
                          help='What is the first number?')
      parser.add_argument('--y', type=float, default=1.0,
                          help='What is the second number?')
      parser.add_argument('--operation', type=str, default='add',
                          help='What operation? Can choose add, sub, mul, or div')
      args = parser.parse_args()
      sys.stdout.write(str(calc(args)))

  def calc(args):
      if args.operation == 'add':
          return args.x + args.y
      elif args.operation == 'sub':
          return args.x - args.y
      elif args.operation == 'mul':
          return args.x * args.y
      elif args.operation == 'div':
          return args.x / args.y

  if __name__ == '__main__':
      main()
#+END_SRC

** List comprehension and generator expressions

Sources:
- [[https://www.youtube.com/watch?v=ZoWgzG_r2qo&list=PLQVvvaa0QuDfju7ADVp5W1GF9jVhjbX-_&index=4][List comprehension and generator expressions - Intermediate Python Programming p.4 - YouTube]]
- [[https://www.youtube.com/watch?v=MJUbUDa-YCA&index=5&list=PLQVvvaa0QuDfju7ADVp5W1GF9jVhjbX-_][More on list comp and generators - Intermediate Python Programming p.5 - YouTube]]

#+BEGIN_SRC python
  list_in_memory = [i for i in range(500)]
  generator = (i for i in range(500))
#+END_SRC

#+BEGIN_SRC python
  def div_by_five(num):
      if num % 5 == 0:
          return True
      else:
          return False

  input_list = [5,6,2,10,15,20,5,2,1,3]
  xyz = (i for i in input_list if div_by_five(i))

  [print(i) for i in xyz]
#+END_SRC

Generator logic:
#+BEGIN_SRC python
  xyz = (i for i in input_list if div_by_five(i))

  xyz = []
  for i in input_list:
      if div_by_five(i):
          xyz.append(i)
#+END_SRC

** Imbend one line for loops

Origin:
#+BEGIN_SRC python
  [[print(i, ii) for ii in range(7)] for i in range(5)]
#+END_SRC

The same as:
#+BEGIN_SRC python
  for i in range(5):
      for ii in range(7):
          print(i, ii)
#+END_SRC

*Steps to reproduce logic*

First step:
#+BEGIN_SRC python
  print(i, ii)
#+END_SRC

Second step:
#+BEGIN_SRC python
  [print(i, ii) for ii in range(7)]
#+END_SRC

Third step:
#+BEGIN_SRC python
  [[print(i, ii) for ii in range(7)] for i in range(5)]
#+END_SRC

Generator:
#+BEGIN_SRC python
  xyz = ([[i, ii] for ii in range(7)] for i in range(5))

  print([i for i in xyz])
#+END_SRC

Think about it:
#+BEGIN_QUOTE
With list comprehension we will run out of memory.
With generators we well run out of time.
#+END_QUOTE

Interesting thing that it will work:
#+BEGIN_SRC python
  xyz = (print(i) for i in range(5))

  for i in xyz:
      i
#+END_SRC
because *print(i)* is *i*.

** Timeit Module

Source: [[https://www.youtube.com/watch?v=Fw7u3fKFDqI&index=6&list=PLQVvvaa0QuDfju7ADVp5W1GF9jVhjbX-_][Timeit Module - Intermediate Python Programming p.6 sentdex]]

#+BEGIN_SRC python
  import timeit

  time = timeit.timeit('1+3', number=5000000)

  return time
#+END_SRC

Interesting thing:
#+BEGIN_SRC python
  xyz = list(i for i in input_list if div_by_five(i))

  # Output is equal to

  xyz = list((i for i in input_list if div_by_five(i)))

  for i in xyz:
      print(i)
#+END_SRC

** Enumerate

Source: [[https://www.youtube.com/watch?v=bOGmYvtw-kk&index=7&list=PLQVvvaa0QuDfju7ADVp5W1GF9jVhjbX-_][Enumerate - Intermediate Python Programming p.7 - YouTube]]

#+BEGIN_SRC python
  example = ['left', 'right', 'up', 'down']

  # Ugly
  for i in range(len(example)):
      print(i, example[i])

  # Awesome
  for i, j in enumerate(example):
      print(i, j)

  example_dict = dict(enumerate(example))

  [print(i, j) for i, j in enumerate(example_dict)]
#+END_SRC
