:PROPERTIES:
:ID:       4a6c1e3e-833d-451c-9fb3-4ec06a8dd548
:END:
#+title: Python

* LISP implementation in Python
  [[https://github.com/pixie-lang/pixie][pixie-lang/pixie: A small, fast, native lisp with "magical" powers]]

* Learning

- [[https://github.com/Bycelium/PyFlow][Bycelium/PyFlow: An open-source tool for visual and modular block programming in python]]
- [[https://github.com/arogozhnikov/python3_with_pleasure][arogozhnikov/python3_with_pleasure: A short guide on features of Python 3 with examples]]
- [[https://github.com/jerry-git/learn-python3][jerry-git/learn-python3: Jupyter notebooks for teaching/learning Python 3]]
- [[https://github.com/dabeaz/python-cookbook][dabeaz/python-cookbook: Code samples from the "Python Cookbook, 3rd Edition", published by O'Reilly & Associates, May, 2013.]]
- [[https://github.com/lyhue1991/eat_tensorflow2_in_30_days][lyhue1991/eat_tensorflow2_in_30_days: Tensorflow2.0 üçéüçä is delicious, just eat it! üòãüòã]]
- [[https://github.com/matplotlib/cheatsheets][matplotlib/cheatsheets: Official Matplotlib cheat sheets]]
- [[https://github.com/faif/python-patterns][faif/python-patterns: A collection of design patterns/idioms in Python]]
- [[https://github.com/misscoded/webinar-bolt-python-nov-2020][misscoded/webinar-bolt-python-nov-2020: Sample app using Bolt for Python for "Building on the Slack Platform with Python" webinar (November 2020)]]
- [[https://realpython.com/primer-on-python-decorators/][Primer on Python Decorators ‚Äì Real Python]]
- [[https://www.youtube.com/channel/UChWbNrHQHvKK6paclLp7WYw][Ben Hoff - YouTube]]
- [[https://github.com/codingforentrepreneurs/30-Days-of-Python][codingforentrepreneurs/30-Days-of-Python: Learn Python for the next 30 (or so) Days.]]
- [[https://stackoverflow.com/questions/39913847/is-there-a-way-to-compile-a-python-application-into-static-binary][build - Is there a way to compile a python application into static binary? - Stack Overflow]]
- [[https://habr.com/ru/company/otus/blog/653847/][–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –Ω–∞ Selenium / –•–∞–±—Ä]]
- [[https://habr.com/ru/post/654407/][–û—Å–Ω–æ–≤—ã —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é Python / –•–∞–±—Ä]]
- [[https://norvig.com/lispy.html][(How to Write a (Lisp) Interpreter (in Python))]]
- [[https://github.com/DjangoEx/python-engineer-roadmap][DjangoEx/python-engineer-roadmap: Python Engineer Roadmap]]
- [[https://github.com/ForrestKnight/open-source-cs-python][ForrestKnight/open-source-cs-python: Video discussing this curriculum:]]
- [[https://github.com/zpoint/CPython-Internals][zpoint/CPython-Internals: Dive into CPython internals, trying to illustrate every detail of CPython implementation]]
- [[https://github.com/pamoroso/free-python-books][pamoroso/free-python-books: Python books free to read online or download]]
- [[https://github.com/AbdulMalikDev/PythonCheatSheet][AbdulMalikDev/PythonCheatSheet: A Cheat Sheet üìú to revise Python syntax. Particularly useful for solving Data Structure and Algorithmic problems with Python.]]
- [[https://github.com/murtazahassan/Learn-OpenCV-in-3-hours][murtazahassan/Learn-OpenCV-in-3-hours]]
- [[https://github.com/AbdulMalikDev/PythonCheatSheet][AbdulMalikDev/PythonCheatSheet: A Cheat Sheet to revise Python syntax. Particularly useful for solving Data Structure and Algorithmic problems with Python.]]
- [[https://guicommits.com/how-to-log-in-python-like-a-pro/][How to Python Logging]]
- [[https://github.com/Asabeneh/30-Days-Of-Python][Asabeneh/30-Days-Of-Python: 30 days of Python programming challenge is a step-by-step guide to learn the Python programming language in 30 days. This challenge may take more than100 days, follow your own pace.]]
- [[https://habr.com/ru/company/selectel/blog/704040/][–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å Minecraft –Ω–∞ Python? –û–±–∑–æ—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Ursina Engine / –•–∞–±—Ä]]

* Community
- [[https://devguide.python.org/versions/][Status of Python Versions]]

* PEP
- [[https://peps.python.org/pep-0668/][PEP 668 ‚Äì Marking Python base environments as ‚Äúexternally managed‚Äù | peps.python.org]]

* Awesome
- [[https://en.wikipedia.org/wiki/List_of_Python_software][List of Python software - Wikipedia]]
- [[https://github.com/ml-tooling/best-of-python][ml-tooling/best-of-python: üèÜ A ranked list of awesome Python open-source libraries and tools. Updated weekly.]]
- [[https://github.com/ml-tooling/best-of-web-python][ml-tooling/best-of-web-python: üèÜ A ranked list of awesome python libraries for web development. Updated weekly.]]
- [[https://github.com/ml-tooling/best-of-python-dev][ml-tooling/best-of-python-dev: üèÜ A ranked list of awesome python developer tools and libraries. Updated weekly.]]
- [[https://github.com/ml-tooling/best-of-ml-python][ml-tooling/best-of-ml-python: üèÜ A ranked list of awesome machine learning Python libraries. Updated weekly.]]
- [[https://github.com/landaire/unfuck][landaire/unfuck: Python 2.7 bytecode dÃ∂eÃ∂oÃ∂bÃ∂fÃ∂uÃ∂sÃ∂cÃ∂aÃ∂tÃ∂oÃ∂r unfucker]]

* Jokes
- [[https://github.com/jokteur/python_communism][jokteur/python_communism: A module for initiating the communist revolution in each of your python modules]]

* Tools
- [[https://github.com/pfnet/pysen][pfnet/pysen: Python linting made easy. Also a casual yet honorific way to address individuals who have entered an organization prior to you.]]
- [[https://github.com/ashutoshbsathe/yacv][ashutoshbsathe/yacv: Yet Another Compiler Visualizer]]
- [[https://github.com/dfeneyrou/palanteer][dfeneyrou/palanteer: High performance visual profiler, debugger, tests enabler for C++ and Python]]
- [[https://github.com/dmvianna/jedi-language-server-env][dmvianna/jedi-language-server-env: a nix shell with a functioning jedi-language-server]]
- [[https://github.com/google/subpar][google/subpar: Subpar is a utility for creating self-contained python executables. It is designed to work well with Bazel.]]
- [[https://www.pyinstaller.org/][PyInstaller Quickstart ‚Äî PyInstaller bundles Python applications]]
- [[https://github.com/bloomberg/memray][bloomberg/memray: Memray is a memory profiler for Python]]
- [[https://github.com/pschanely/CrossHair][pschanely/CrossHair: An analysis tool for Python that blurs the line between testing and type systems.]]
- [[https://github.com/bndr/pipreqs][bndr/pipreqs: pipreqs - Generate pip requirements.txt file based on imports of any project. Looking for maintainers to move this project forward.]]
- [[https://github.com/charliermarsh/ruff][charliermarsh/ruff: An extremely fast Python linter, written in Rust.]]
- [[https://github.com/thonny/thonny][thonny/thonny: Python IDE for beginners]]
- [[https://github.com/cnpryer/huak][cnpryer/huak: üì¶ A Python package manager written in Rust inspired by Cargo.]]
- [[https://github.com/furkanonder/beetrace][furkanonder/beetrace: Trace your python process line by line with low overhead!]]
- [[https://github.com/PyCQA/autoflake][PyCQA/autoflake: Removes unused imports and unused variables as reported by pyflakes]]

* Programms
- [[https://github.com/Harsha200105/DesktopAssistant][Harsha200105/DesktopAssistant: A Virtual Desktop Assistant Written in Python]]
- [[https://magic-wormhole.readthedocs.io/en/latest/][Magic-Wormhole: Get Things From One Computer To Another, Safely ‚Äî Magic-Wormhole 0.12.0+14.g016200b.dirty documentation]]
- [[https://github.com/open-mmlab/mmocr][open-mmlab/mmocr: OpenMMLab Text Detection and Recognition Toolbox]]
- [[https://github.com/joowani/colorpedia][joowani/colorpedia: Command-line tool for looking up colors and palettes.]]
- [[https://github.com/HashPals/Name-That-Hash][HashPals/Name-That-Hash: üîó Don't know what type of hash it is? Name That Hash will name that hash type! ü§ñ Identify MD5, SHA256 and 300+ other hashes ‚òÑ Comes with a neat web app üî•]]
- [[https://github.com/daleal/zum][daleal/zum: Stop writing scripts to interact with your APIs. Call them as CLIs instead.]]
- [[https://github.com/artperrin/image2csv][artperrin/image2csv: Convert tables stored as images to an usable .csv file]]
- [[https://github.com/lucidrains/deep-daze][lucidrains/deep-daze: Simple command line tool for text to image generation using OpenAI's CLIP and Siren (Implicit neural representation network)]]
- [[https://github.com/knadh/tg-archive][knadh/tg-archive: A tool for exporting Telegram group chats into static websites, preserving chat history like mailing list archives.]]
- [[https://github.com/danhab99/ledcapture][danhab99/ledcapture: Flashes keyboard leds on incoming/outgoing network packets]]
- [[https://github.com/GamestonkTerminal/GamestonkTerminal][GamestonkTerminal/GamestonkTerminal: The next best thing after Bloomberg Terminal]]
- [[https://github.com/aydinnyunus/Keylogger][aydinnyunus/Keylogger: Get Keyboard,Mouse,ScreenShot,Microphone Inputs from Target Computer and Send to your Mail.]]
- [[https://github.com/PeterWang512/GANSketching][PeterWang512/GANSketching: Sketch Your Own GAN: Customizing a GAN model with hand-drawn sketches.]]
- [[https://github.com/Hironsan/BossSensor][Hironsan/BossSensor: Hide screen when boss is approaching.]]
- [[https://github.com/monosidev/monosi][monosidev/monosi: Open source data observability platform]]
- [[https://github.com/sc0tfree/updog][sc0tfree/updog: Updog is a replacement for Python's SimpleHTTPServer. It allows uploading and downloading via HTTP/S, can set ad hoc SSL certificates and use http basic auth.]]
- [[https://github.com/crytic/slither][crytic/slither: Static Analyzer for Solidity]]
- [[https://github.com/iperov/DeepFaceLive][iperov/DeepFaceLive: Real-time face swap for PC streaming or video calls]]
- [[https://github.com/danielgatis/rembg][danielgatis/rembg: Rembg is a tool to remove images background.]]
- [[https://github.com/milesmcc/shynet][milesmcc/shynet: Modern, privacy-friendly, and detailed web analytics that works without cookies or JS.]]
- [[https://github.com/leon-thomm/Ryven][leon-thomm/Ryven: Flow-based visual scripting for Python]]
- [[https://github.com/saulpw/unzip-http][saulpw/unzip-http: Extract individual files from .zip files over http without downloading the entire archive.]]

* Libraries

- [[https://github.com/andir/hex2u32-filter][andir/hex2u32-filter: iptables filter generator based on hex dumps (very very very simple)]]
- [[https://gist.github.com/rcoup/1338263][Block device sync between remote hosts. Based off http://www.bouncybouncy.net/programs/blocksync.py]]
- [[https://github.com/Bogdanp/cursive_re][Bogdanp/cursive_re: Readable regular expressions for Python 3.6 and up.]]
- [[https://github.com/breuleux/jurigged][breuleux/jurigged: Hot reloading for Python]]
- [[https://github.com/channable/opnieuw][channable/opnieuw: One weird trick to make your code more reliable]]
- [[https://github.com/DarshanDeshpande/Scrapera][DarshanDeshpande/Scrapera: A universal package of scraper scripts for humans]]
- [[https://github.com/egberts/bind9_parser][egberts/bind9_parser: Bind9 Parser in Python that can process all of ISC Bind configuration files]]
- [[https://github.com/evhub/coconut][evhub/coconut: Simple, elegant, Pythonic functional programming.]]
- [[https://github.com/facebookresearch/Kats][facebookresearch/Kats: Kats, a kit to analyze time series data, a lightweight, easy-to-use, generalizable, and extendable framework to perform time series analysis, from understanding the key statistics and characteristics, detecting change points and anomalies, to forecasting future trends.]]
- [[https://github.com/giswqs/geemap][giswqs/geemap: A Python package for interactive mapping with Google Earth Engine, ipyleaflet, and ipywidgets.]]
- [[https://github.com/hoffstadt/DearPyGui][hoffstadt/DearPyGui: Dear PyGui: A fast and powerful Graphical User Interface Toolkit for Python with minimal dependencies]]
- [[https://hydra.cc/docs/intro/][Hydra - ability to dynamically create a hierarchical configuration by composition and override it through config files and the command line.]]
- [[https://github.com/iterative/shtab][iterative/shtab: ‚ÜîÔ∏è Automagic shell tab completion for Python CLI applications]]
- [[https://github.com/jiaaro/pydub][jiaaro/pydub: Manipulate audio with a simple and easy high level interface]]
- [[https://github.com/killiansheriff/LovelyPlots][killiansheriff/LovelyPlots: Matplotlib style sheets to nicely format figures for scientific papers, thesis and presentations while keeping them fully editable in Adobe Illustrator.]]
- [[https://github.com/liuyangc3/nginx_config_parser][liuyangc3/nginx_config_parser: nginx upstream parser]]
- [[https://github.com/Maratyszcza/PeachPy][Maratyszcza/PeachPy: x86-64 assembler embedded in Python]]
- [[https://kamadorueda.github.io/metaloaders/][metaloaders API documentation]]
- [[https://github.com/mherrmann/selenium-python-helium][mherrmann/selenium-python-helium: Selenium-python but lighter: Helium is the best Python library for web automation.]]
- [[https://github.com/monosidev/monosi][monosidev/monosi: Open source data observability platform]]
- [[https://github.com/msoulier/tftpy][msoulier/tftpy: Pure Python TFTP library]]
- [[https://github.com/pallets/jinja][pallets/jinja: A very fast and expressive template engine.]]
- [[https://github.com/psf/requests-html][psf/requests-html: Pythonic HTML Parsing for Humans‚Ñ¢]]
- [[https://github.com/pycob/pyvibe][pycob/pyvibe: Generate styled HTML pages from Python]]
- [[https://github.com/pygame-community/pygame-ce][pygame-community/pygame-ce: üêçüéÆ pygame - Community Edition is a Free and Open Source python programming language library for making multimedia applications (like games) built on top of the excellent SDL library. C, Python, Native, OpenGL.]]
- [[https://github.com/PySimpleGUI/PySimpleGUI][PySimpleGUI/PySimpleGUI: Launched in 2018 Actively developed & supported. Supports tkinter, Qt, WxPython, Remi (in browser). Create custom GUI Windows simply, trivially with a full set of widgets. Multi-Window applications are also simple. Python 2.7 & 3 Support. 325+ Demo programs & Cookbook for rapid start. Extensive documentation. Examples using Machine Learning(GUI, OpenCV Integration, Chatterbot), Desktop Widgets (Rainmeter-like), Matplotlib + Pyplot integration, add GUI to command line scripts, PDF & Image Viewer. For both beginning and advanced programmers. docs - PySimpleGUI.org GitHub - PySimpleGUI.com. Create complex windows simply.]]
- [[https://github.com/pywebio/PyWebIO][pywebio/PyWebIO: Write interactive web app in script way.]]
- [[https://github.com/reactive-python/reactpy][reactive-python/reactpy: It's React, but in Python]]
- [[https://github.com/rochacbruno/dynaconf][rochacbruno/dynaconf: Configuration Management for Python ‚öô]]
- [[https://github.com/rougier/scientific-visualization-book?auto_subscribed=false][rougier/scientific-visualization-book: An open access book on scientific visualization using python and matplotlib]]
- [[https://github.com/dbader/schedule][schedule - Python job scheduling for humans.]]
- [[https://github.com/scoder/lupa][scoder/lupa: Lua in Python]]
- [[https://sexpdata.readthedocs.io/en/latest/][S-expression parser for Python ‚Äî sexpdata 0.0.4.dev1 documentation]]
- [[https://github.com/textflint/textflint][textflint/textflint: Unified Multilingual Robustness Evaluation Toolkit for Natural Language Processing]]
- [[https://github.com/Textualize/rich-cli][Textualize/rich-cli: Rich-cli is a command line toolbox for fancy output in the terminal]]
- [[https://github.com/tiangolo/sqlmodel][tiangolo/sqlmodel: SQL databases in Python, designed for simplicity, compatibility, and robustness.]]
- [[https://github.com/tobymao/sqlglot][tobymao/sqlglot: Python SQL Parser and Transpiler]]
- [[https://github.com/trailofbits/graphtage][trailofbits/graphtage: A semantic diff utility and library for tree-like files such as JSON, JSON5, XML, HTML, YAML, and CSV.]]
- [[https://github.com/trailofbits/manticore][trailofbits/manticore: Symbolic execution tool]]
- [[https://github.com/tusharsadhwani/zxpy][tusharsadhwani/zxpy: Shell scripts made simple üêö]]
- [[https://github.com/umlet/pwk][umlet/pwk: Python With Kurly braces]]
- [[https://github.com/willmcgugan/textual?auto_subscribed=false][willmcgugan/textual: Textual is a TUI (Text User Interface) framework for Python inspired by modern web development.]]

** Frameworks
- [[https://charlottemach.com/2021/11/29/simple-flask-docker-app.html][Containerizing a simple Flask App ¬∑ cookies and containers]]

** REPL
- [[https://github.com/40ants/therepl][40ants/therepl: An extension for IPython to switch between modules and evaluate the code from Emacs like we do in Common Lisp.]]

* Deploy
Message-ID: <20201108142717.lmud5h4gh44vtjc6@melmoth>
#+begin_quote
I've just learned, by accident (working on `python-keyring` [1]), that
`python setup.py install` was somehow deprecated in favor of tools like
`pep517` or `build`.

So, I've tried packaging `python-keyring` with those two‚Ä¶

`pep517` keeps on trying to download dependencies, which won't work.

`build` crashes with "ZIP does not support timestamps before 1980",
which, I guess is related to the fact that everything in the store is
timestamped to January 1st 1970.

Does anyone have a opinion on Python packaging and how it should be done?
Any idea how I can circumvent the timestamps problem? Is this fish too
big for me?!

Any help or advice welcome! Thanks!

-- 
Tanguy

[1]: https://github.com/jaraco/keyring/issues/469
     Keyring package version is set to 0.0.0, this might be related to
     the fact that, upstream, they build it with `python -m pep517.build .`,
     not with `python setup.py install`‚Ä¶ but it could also not be
     related at all! But in order to be sure, I have to try!
#+end_quote

* Runtime
- [[https://github.com/google/grumpy][google/grumpy: Grumpy is a Python to Go source code transcompiler and runtime.]]

* Lint

- [[https://github.com/daorejuela1/prepycheck/blob/master/prepycheck.sh][prepycheck/prepycheck.sh at master ¬∑ daorejuela1/prepycheck]]
- [[https://github.com/facebook/pyre-check][facebook/pyre-check: Performant type-checking for python.]]

* Misc
- [[https://github.com/deepmind/alphafold][deepmind/alphafold: Open source code for AlphaFold.]]

* Programms
- [[https://github.com/bee-san/pyWhat][bee-san/pyWhat: üê∏ Identify anything. pyWhat easily lets you identify emails, IP addresses, and more. Feed it a .pcap file or some text and it'll tell you what it is! üßô‚Äç‚ôÄÔ∏è]]
- [[https://github.com/yankeexe/timezones-cli][yankeexe/timezones-cli: CLI Tool to store and glance date time from multiple time zones.]]
- [[https://github.com/vinayak-mehta/present][vinayak-mehta/present: A terminal-based presentation tool with colors and effects.]]
- [[https://github.com/nbedos/termtosvg][nbedos/termtosvg: Record terminal sessions as SVG animations]]
- [[https://github.com/sdushantha/wifi-password][sdushantha/wifi-password: Quickly fetch your WiFi password and if needed, generate a QR code of your WiFi to allow phones to easily connect]]
- [[https://scapy.net/][Scapy Packet crafting for Python2 and Python3]]
- [[https://github.com/initml/cleanup.pictures][initml/cleanup.pictures: Code for https://cleanup.pictures]]

* Deep Learning
- [[https://keras.io/][Keras: the Python deep learning API]]
- [[https://github.com/PeterL1n/BackgroundMattingV2][PeterL1n/BackgroundMattingV2: Real-Time High-Resolution Background Matting]]

* Networking
- [[https://github.com/jhao104/proxy_pool][jhao104/proxy_pool: PythonÁà¨Ëô´‰ª£ÁêÜIPÊ±†(proxy pool)]]

* Implementations
- [[https://github.com/micropython/micropython][micropython/micropython: MicroPython - a lean and efficient Python implementation for microcontrollers and constrained systems]]
- [[https://github.com/gilch/hissp][gilch/hissp: It's Python with a Lissp.]]
- [[https://github.com/pyscript/pyscript][pyscript/pyscript: Home Page: https://pyscript.net Examples: https://pyscript.net/examples]]

* Tools

- [[https://github.com/pyinstaller/pyinstaller][pyinstaller/pyinstaller: Freeze (package) Python programs into stand-alone executables]]
- [[http://www.pythontutor.com/visualize.html][PYTHON Code Visualisation]]
- [[https://github.com/mingrammer/diagrams][mingrammer/diagrams: Diagram as Code for prototyping cloud system architectures]]
- [[https://github.com/ralphbean/ansi2html][ralphbean/ansi2html: Convert text with ansi color codes to HTML]]
- [[https://github.com/toastdriven/shell][toastdriven/shell: A better way to run shell commands in Python.]]
- [[https://github.com/plotly/dash][plotly/dash: Analytical Web Apps for Python, R, Julia, and Jupyter. No JavaScript Required.]]
- [[https://github.com/timothycrosley/isort][timothycrosley/isort: A Python utility / library to sort imports.]]
- [[https://github.com/Qix-/better-exceptions][Qix-/better-exceptions: Pretty and useful exceptions in Python, automatically.]]
- [[https://github.com/PyCQA/bandit][PyCQA/bandit: Bandit is a tool designed to find common security issues in Python code.]]
- [[https://github.com/psf/black][psf/black: The uncompromising Python code formatter]]
- [[https://github.com/aws-cloudformation/cfn-python-lint][aws-cloudformation/cfn-python-lint: CloudFormation Linter]]
- [[https://github.com/benfred/py-spy][benfred/py-spy: Sampling profiler for Python programs]]
- [[https://github.com/indygreg/PyOxidizer][indygreg/PyOxidizer: A modern Python application packaging and distribution tool]]
- [[https://github.com/alexmojaki/heartrate][alexmojaki/heartrate: Simple real time visualisation of the execution of a Python program.]]
- [[https://github.com/julvo/reloading][julvo/reloading: Change Python code while it's running using a reloading loop]]
- [[https://medium.com/@yeraydiazdiaz/what-the-mock-cheatsheet-mocking-in-python-6a71db997832][What the mock? ‚Äî A cheatsheet for mocking in Python]]
- [[https://medium.com/swlh/how-to-insert-data-from-csv-file-into-a-sqlite-database-using-python-82f7d447866a][How to insert data from CSV file into a SQLite Database using Python]]
- [[https://medium.com/@peter.jp.xie/rest-api-testing-using-python-751022c364b8][REST API Testing Using Python - Peter Xie - Medium]]
- [[https://medium.com/hackernoon/python-tricks-101-2836251922e0][Python Tricks 101üêç - HackerNoon.com - Medium]]
- [[https://salsa.debian.org/gq/python-docker]]
- [[https://github.com/reloadware/reloadium][reloadware/reloadium: Advanced hot reloading & profiling for Python]]
- [[https://github.com/gaogaotiantian/viztracer][gaogaotiantian/viztracer: VizTracer is a low-overhead logging/debugging/profiling tool that can trace and visualize your python code execution.]]
- [[https://github.com/connorferster/handcalcs][connorferster/handcalcs: Python library for converting Python calculations into rendered latex.]]
- [[https://github.com/albertz/python-preloaded][albertz/python-preloaded: Bundle Python executable with preloaded modules]]

https://stackoverflow.com/questions/2524853/python-try-statement-in-a-single-line#8061176
#+BEGIN_SRC python3
class trialContextManager:
    def __enter__(self): pass
    def __exit__(self, *args): return True
trial = trialContextManager()
with trial: a = 5
#+END_SRC

** lsp
- [[https://github.com/emacs-lsp/lsp-pyright][emacs-lsp/lsp-pyright: lsp-mode pyright]]

* Test
** Tools
- [[https://github.com/anapaulagomes/pytest-picked][anapaulagomes/pytest-picked: Run the tests related to the changed files (according to Git) ü§ì]]
- [[https://github.com/numirias/pytest-json-report][numirias/pytest-json-report: A pytest plugin to report test results as JSON]]
** 

https://docs.python.org/3/library/unittest.html

#+BEGIN_SRC python
  #!/usr/bin/env python3

  import unittest

  class TestStringMethods(unittest.TestCase):

      def test_upper(self):
          self.assertEqual('foo'.upper(), 'FOO')

      def test_isupper(self):
          self.assertTrue('FOO'.isupper())
          self.assertFalse('Foo'.isupper())

      def test_split(self):
          s = 'hello world'
          self.assertEqual(s.split(), ['hello', 'world'])
          # check that s.split fails when the separator is not a string
          with self.assertRaises(TypeError):
              s.split(2)

  if __name__ == '__main__':
      unittest.main()
#+END_SRC

* password-store

- [[https://github.com/jmcs/py-password-store/blob/master/password_store/credentials.py][py-password-store/credentials.py at master ¬∑ jmcs/py-password-store]]

* ipython

- %lsmagic
- %timeit

* sh

#+BEGIN_SRC python
  import sh
  sh.ssh("web30.intr", "sudo --stdin uptime", _in="SUDO_PASSWORD\n")
#+END_SRC

bake
#+BEGIN_SRC python
web30 = sh.ssh.bake("web30.intr")
web30("sudo --stdin uptime", _in="SUDO_PASSWORD\n")
web30_sudo = web30.sudo.bake("--stdin", _in="SUDO_PASSWORD\n")
web30_sudo("id")
web33.ls(web33.getent("passwd u7590").stdout.split(b":")[5])
#+END_SRC

* paramiko

  Fix infinite wait after "shell" call in SSH channel:
  #+begin_src diff
    diff --git a/channel.py b/channel.py
    index 72f6501..919d11a 100644
    --- a/channel.py
    +++ b/channel.py
    @@ -200,7 +200,6 @@ class Channel(ClosingContextManager):
             m.add_string(bytes())
             self._event_pending()
             self.transport._send_user_message(m)
    -        self._wait_for_event()
 
         @open_only
         def invoke_shell(self):
  #+end_src
* Examples
#+begin_example
  $ nix-shell -p 'python3.withPackages (ps: [ ps.jinja2 ])' --run python
  Python 3.8.8 (default, Feb 19 2021, 11:04:50) 
  [GCC 9.3.0] on linux
  Type "help", "copyright", "credits" or "license" for more information.
  >>> import jinja2
  >>> j = jinja2.Environment()
  >>> j.from_string('{% if a %}NOOOO!{% endif %}').render(a=None)
  ''
  >>> j.from_string('{% if not a %}NOOOO!{% endif %}').render(a=None)
  'NOOOO!'

  2.11.2
#+end_example
* Web
- [[https://github.com/ddevault/evilpass][ddevault/evilpass: Slightly evil password strength checker]]

* ChatGPT

** I would like to get number from image by scanning camera.

To get a number from an image using a camera, you can use a technique called Optical Character Recognition (OCR). OCR is a technology that enables a computer to recognize text in an image and convert it into machine-readable text.

Python has several libraries that support OCR, including Tesseract and OpenCV. Here's a simple example of how to use Tesseract in Python to extract text from an image:

arduino

import pytesseract
import cv2

# Read the image
image = cv2.imread('image.jpg')

# Convert the image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply thresholding to the grayscale image
thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]

# Apply OCR using Tesseract
text = pytesseract.image_to_string(thresh, config='--psm 11')

# Print the extracted text
print(text)

In this example, we first read the image using OpenCV, convert it to grayscale, and apply thresholding to make the text more visible. Then, we use Tesseract to extract the text from the image. The config parameter specifies the page segmentation mode, which determines how Tesseract should group the text into words and lines.

Note that OCR can be affected by various factors such as the quality of the image, the font used in the image, and the lighting conditions. It may not always be accurate, so it's important to test it thoroughly and fine-tune the parameters for best results.
