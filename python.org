
* Lisp

[[https://github.com/pixie-lang/pixie][pixie-lang/pixie: A small, fast, native lisp with "magical" powers]]

* Learn

- [[https://github.com/arogozhnikov/python3_with_pleasure][arogozhnikov/python3_with_pleasure: A short guide on features of Python 3 with examples]]
- [[https://github.com/jerry-git/learn-python3][jerry-git/learn-python3: Jupyter notebooks for teaching/learning Python 3]]
- [[https://github.com/dabeaz/python-cookbook][dabeaz/python-cookbook: Code samples from the "Python Cookbook, 3rd Edition", published by O'Reilly & Associates, May, 2013.]]
- [[https://github.com/lyhue1991/eat_tensorflow2_in_30_days][lyhue1991/eat_tensorflow2_in_30_days: Tensorflow2.0 üçéüçä is delicious, just eat it! üòãüòã]]
- [[https://github.com/matplotlib/cheatsheets][matplotlib/cheatsheets: Official Matplotlib cheat sheets]]
- [[https://github.com/faif/python-patterns][faif/python-patterns: A collection of design patterns/idioms in Python]]
- [[https://github.com/misscoded/webinar-bolt-python-nov-2020][misscoded/webinar-bolt-python-nov-2020: Sample app using Bolt for Python for "Building on the Slack Platform with Python" webinar (November 2020)]]
- [[https://realpython.com/primer-on-python-decorators/][Primer on Python Decorators ‚Äì Real Python]]
- [[https://www.youtube.com/channel/UChWbNrHQHvKK6paclLp7WYw][Ben Hoff - YouTube]]

* Awesome
- [[https://github.com/ml-tooling/best-of-python][ml-tooling/best-of-python: üèÜ A ranked list of awesome Python open-source libraries and tools. Updated weekly.]]
- [[https://github.com/ml-tooling/best-of-web-python][ml-tooling/best-of-web-python: üèÜ A ranked list of awesome python libraries for web development. Updated weekly.]]
- [[https://github.com/ml-tooling/best-of-python-dev][ml-tooling/best-of-python-dev: üèÜ A ranked list of awesome python developer tools and libraries. Updated weekly.]]

* Libs

- [[https://github.com/umlet/pwk][umlet/pwk: Python With Kurly braces]]
- [[https://sexpdata.readthedocs.io/en/latest/][S-expression parser for Python ‚Äî sexpdata 0.0.4.dev1 documentation]]
- [[https://github.com/psf/requests-html][psf/requests-html: Pythonic HTML Parsing for Humans‚Ñ¢]]
- [[https://github.com/dbader/schedule][schedule - Python job scheduling for humans.]]
- [[https://github.com/pallets/jinja][pallets/jinja: A very fast and expressive template engine.]]
- [[https://github.com/jiaaro/pydub][jiaaro/pydub: Manipulate audio with a simple and easy high level interface]]
- [[https://github.com/msoulier/tftpy][msoulier/tftpy: Pure Python TFTP library]]

** REPL
- [[https://github.com/40ants/therepl][40ants/therepl: An extension for IPython to switch between modules and evaluate the code from Emacs like we do in Common Lisp.]]

* Deploy
Message-ID: <20201108142717.lmud5h4gh44vtjc6@melmoth>
#+begin_quote
I've just learned, by accident (working on `python-keyring` [1]), that
`python setup.py install` was somehow deprecated in favor of tools like
`pep517` or `build`.

So, I've tried packaging `python-keyring` with those two‚Ä¶

`pep517` keeps on trying to download dependencies, which won't work.

`build` crashes with "ZIP does not support timestamps before 1980",
which, I guess is related to the fact that everything in the store is
timestamped to January 1st 1970.

Does anyone have a opinion on Python packaging and how it should be done?
Any idea how I can circumvent the timestamps problem? Is this fish too
big for me?!

Any help or advice welcome! Thanks!

-- 
Tanguy

[1]: https://github.com/jaraco/keyring/issues/469
     Keyring package version is set to 0.0.0, this might be related to
     the fact that, upstream, they build it with `python -m pep517.build .`,
     not with `python setup.py install`‚Ä¶ but it could also not be
     related at all! But in order to be sure, I have to try!
#+end_quote

* Runtime
- [[https://github.com/google/grumpy][google/grumpy: Grumpy is a Python to Go source code transcompiler and runtime.]]

* Lint

- [[https://github.com/daorejuela1/prepycheck/blob/master/prepycheck.sh][prepycheck/prepycheck.sh at master ¬∑ daorejuela1/prepycheck]]
- [[https://github.com/facebook/pyre-check][facebook/pyre-check: Performant type-checking for python.]]

* Programms
- [[https://github.com/yankeexe/timezones-cli][yankeexe/timezones-cli: CLI Tool to store and glance date time from multiple time zones.]]
- [[https://github.com/vinayak-mehta/present][vinayak-mehta/present: A terminal-based presentation tool with colors and effects.]]
- [[https://github.com/nbedos/termtosvg][nbedos/termtosvg: Record terminal sessions as SVG animations]]

* Deep Learning
- [[https://keras.io/][Keras: the Python deep learning API]]

* Networking
- [[https://github.com/jhao104/proxy_pool][jhao104/proxy_pool: PythonÁà¨Ëô´‰ª£ÁêÜIPÊ±†(proxy pool)]]

* Implementations
- [[https://github.com/micropython/micropython][micropython/micropython: MicroPython - a lean and efficient Python implementation for microcontrollers and constrained systems]]

* Tools

- [[https://github.com/pyinstaller/pyinstaller][pyinstaller/pyinstaller: Freeze (package) Python programs into stand-alone executables]]
- [[http://www.pythontutor.com/visualize.html][PYTHON Code Visualisation]]
- [[https://github.com/mingrammer/diagrams][mingrammer/diagrams: Diagram as Code for prototyping cloud system architectures]]
- [[https://github.com/ralphbean/ansi2html][ralphbean/ansi2html: Convert text with ansi color codes to HTML]]
- [[https://github.com/toastdriven/shell][toastdriven/shell: A better way to run shell commands in Python.]]
- [[https://github.com/plotly/dash][plotly/dash: Analytical Web Apps for Python, R, Julia, and Jupyter. No JavaScript Required.]]
- [[https://github.com/timothycrosley/isort][timothycrosley/isort: A Python utility / library to sort imports.]]
- [[https://github.com/Qix-/better-exceptions][Qix-/better-exceptions: Pretty and useful exceptions in Python, automatically.]]
- [[https://github.com/PyCQA/bandit][PyCQA/bandit: Bandit is a tool designed to find common security issues in Python code.]]
- [[https://github.com/psf/black][psf/black: The uncompromising Python code formatter]]
- [[https://github.com/aws-cloudformation/cfn-python-lint][aws-cloudformation/cfn-python-lint: CloudFormation Linter]]
- [[https://github.com/benfred/py-spy][benfred/py-spy: Sampling profiler for Python programs]]
- [[https://github.com/indygreg/PyOxidizer][indygreg/PyOxidizer: A modern Python application packaging and distribution tool]]
- [[https://github.com/alexmojaki/heartrate][alexmojaki/heartrate: Simple real time visualisation of the execution of a Python program.]]
- [[https://github.com/julvo/reloading][julvo/reloading: Change Python code while it's running using a reloading loop]]
- [[https://medium.com/@yeraydiazdiaz/what-the-mock-cheatsheet-mocking-in-python-6a71db997832][What the mock? ‚Äî A cheatsheet for mocking in Python]]
- [[https://medium.com/swlh/how-to-insert-data-from-csv-file-into-a-sqlite-database-using-python-82f7d447866a][How to insert data from CSV file into a SQLite Database using Python]]
- [[https://medium.com/@peter.jp.xie/rest-api-testing-using-python-751022c364b8][REST API Testing Using Python - Peter Xie - Medium]]
- [[https://medium.com/hackernoon/python-tricks-101-2836251922e0][Python Tricks 101üêç - HackerNoon.com - Medium]]
- [[https://salsa.debian.org/gq/python-docker]]

https://stackoverflow.com/questions/2524853/python-try-statement-in-a-single-line#8061176
#+BEGIN_SRC python3
class trialContextManager:
    def __enter__(self): pass
    def __exit__(self, *args): return True
trial = trialContextManager()
with trial: a = 5
#+END_SRC

** lsp
- [[https://github.com/emacs-lsp/lsp-pyright][emacs-lsp/lsp-pyright: lsp-mode pyright]]

* Test
** Tools
- [[https://github.com/anapaulagomes/pytest-picked][anapaulagomes/pytest-picked: Run the tests related to the changed files (according to Git) ü§ì]]
** 

https://docs.python.org/3/library/unittest.html

#+BEGIN_SRC python
  #!/usr/bin/env python3

  import unittest

  class TestStringMethods(unittest.TestCase):

      def test_upper(self):
          self.assertEqual('foo'.upper(), 'FOO')

      def test_isupper(self):
          self.assertTrue('FOO'.isupper())
          self.assertFalse('Foo'.isupper())

      def test_split(self):
          s = 'hello world'
          self.assertEqual(s.split(), ['hello', 'world'])
          # check that s.split fails when the separator is not a string
          with self.assertRaises(TypeError):
              s.split(2)

  if __name__ == '__main__':
      unittest.main()
#+END_SRC

* password-store

- [[https://github.com/jmcs/py-password-store/blob/master/password_store/credentials.py][py-password-store/credentials.py at master ¬∑ jmcs/py-password-store]]

* ipython

- %lsmagic
- %timeit

* sh

#+BEGIN_SRC python
  import sh
  sh.ssh("web30.intr", "sudo --stdin uptime", _in="SUDO_PASSWORD\n")
#+END_SRC

bake
#+BEGIN_SRC python
web30 = sh.ssh.bake("web30.intr")
web30("sudo --stdin uptime", _in="SUDO_PASSWORD\n")
web30_sudo = web30.sudo.bake("--stdin", _in="SUDO_PASSWORD\n")
web30_sudo("id")
web33.ls(web33.getent("passwd u7590").stdout.split(b":")[5])
#+END_SRC

* paramiko

  Fix infinite wait after "shell" call in SSH channel:
  #+begin_src diff
    diff --git a/channel.py b/channel.py
    index 72f6501..919d11a 100644
    --- a/channel.py
    +++ b/channel.py
    @@ -200,7 +200,6 @@ class Channel(ClosingContextManager):
             m.add_string(bytes())
             self._event_pending()
             self.transport._send_user_message(m)
    -        self._wait_for_event()
 
         @open_only
         def invoke_shell(self):
  #+end_src
* Web
- [[https://github.com/ddevault/evilpass][ddevault/evilpass: Slightly evil password strength checker]]
