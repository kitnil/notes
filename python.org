
* Lisp

[[https://github.com/pixie-lang/pixie][pixie-lang/pixie: A small, fast, native lisp with "magical" powers]]

* Learn

- [[https://github.com/jerry-git/learn-python3][jerry-git/learn-python3: Jupyter notebooks for teaching/learning Python 3]]

* Libs

- [[https://sexpdata.readthedocs.io/en/latest/][S-expression parser for Python ‚Äî sexpdata 0.0.4.dev1 documentation]]

* Lint

- [[https://github.com/daorejuela1/prepycheck/blob/master/prepycheck.sh][prepycheck/prepycheck.sh at master ¬∑ daorejuela1/prepycheck]]

* Tools

- [[https://github.com/timothycrosley/isort][timothycrosley/isort: A Python utility / library to sort imports.]]
- [[https://github.com/facebook/pyre-check][facebook/pyre-check: Performant type-checking for python.]]
- [[https://github.com/Qix-/better-exceptions][Qix-/better-exceptions: Pretty and useful exceptions in Python, automatically.]]
- [[https://github.com/PyCQA/bandit][PyCQA/bandit: Bandit is a tool designed to find common security issues in Python code.]]
- [[https://github.com/psf/black][psf/black: The uncompromising Python code formatter]]
- [[https://github.com/aws-cloudformation/cfn-python-lint][aws-cloudformation/cfn-python-lint: CloudFormation Linter]]
- [[https://github.com/benfred/py-spy][benfred/py-spy: Sampling profiler for Python programs]]
- [[https://github.com/indygreg/PyOxidizer][indygreg/PyOxidizer: A modern Python application packaging and distribution tool]]
- [[https://github.com/alexmojaki/heartrate][alexmojaki/heartrate: Simple real time visualisation of the execution of a Python program.]]
- [[https://github.com/julvo/reloading][julvo/reloading: Change Python code while it's running using a reloading loop]]
- [[https://medium.com/@yeraydiazdiaz/what-the-mock-cheatsheet-mocking-in-python-6a71db997832][What the mock? ‚Äî A cheatsheet for mocking in Python]]
- [[https://medium.com/swlh/how-to-insert-data-from-csv-file-into-a-sqlite-database-using-python-82f7d447866a][How to insert data from CSV file into a SQLite Database using Python]]
- [[https://medium.com/@peter.jp.xie/rest-api-testing-using-python-751022c364b8][REST API Testing Using Python - Peter Xie - Medium]]
- [[https://medium.com/hackernoon/python-tricks-101-2836251922e0][Python Tricks 101üêç - HackerNoon.com - Medium]]
- [[https://salsa.debian.org/gq/python-docker]]

https://stackoverflow.com/questions/2524853/python-try-statement-in-a-single-line#8061176
#+BEGIN_SRC python3
class trialContextManager:
    def __enter__(self): pass
    def __exit__(self, *args): return True
trial = trialContextManager()
with trial: a = 5
#+END_SRC

* Test

https://docs.python.org/3/library/unittest.html

#+BEGIN_SRC python
  #!/usr/bin/env python3

  import unittest

  class TestStringMethods(unittest.TestCase):

      def test_upper(self):
          self.assertEqual('foo'.upper(), 'FOO')

      def test_isupper(self):
          self.assertTrue('FOO'.isupper())
          self.assertFalse('Foo'.isupper())

      def test_split(self):
          s = 'hello world'
          self.assertEqual(s.split(), ['hello', 'world'])
          # check that s.split fails when the separator is not a string
          with self.assertRaises(TypeError):
              s.split(2)

  if __name__ == '__main__':
      unittest.main()
#+END_SRC

* password-store

- [[https://github.com/jmcs/py-password-store/blob/master/password_store/credentials.py][py-password-store/credentials.py at master ¬∑ jmcs/py-password-store]]

* ipython

- %lsmagic
- %timeit

* sh

#+BEGIN_SRC python
  import sh
  sh.ssh("web30.intr", "sudo --stdin uptime", _in="SUDO_PASSWORD\n")
#+END_SRC

bake
#+BEGIN_SRC python
web30 = sh.ssh.bake("web30.intr")
web30("sudo --stdin uptime", _in="SUDO_PASSWORD\n")
web30_sudo = web30.sudo.bake("--stdin", _in="SUDO_PASSWORD\n")
web30_sudo("id")
web33.ls(web33.getent("passwd u7590").stdout.split(b":")[5])
#+END_SRC
