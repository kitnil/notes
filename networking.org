:PROPERTIES:
:ID:       4a6e6370-49af-4b37-8b2b-083183cb1b9d
:END:
#+title: Networking

- [[https://github.com/1tayH/noisy][1tayH/noisy: Simple random DNS, HTTP/S internet traffic noise generator]]
- [[https://github.com/aleksandr-oliferuk/pcap2squid][aleksandr-oliferuk/pcap2squid: Recieve raw network trafic dump in pcap-format and parse it to squid-proxy log. Then generate report for lightsquid and shows it in Web UI]]
- [[https://github.com/carlmontanari/boxen][carlmontanari/boxen: put your network operating systems in a box!]]
- [[https://github.com/cbeuw/Cloak][cbeuw/Cloak: A censorship circumvention tool to evade detection by authoritarian state adversaries]]
- [[https://github.com/cbeuw/Cloak][cbeuw/Cloak: A censorship circumvention tool to evade detection by authoritarian state adversaries]]
- [[https://github.com/facebookincubator/katran][facebookincubator/katran: A high performance layer 4 load balancer]]
- [[https://github.com/garywill/linux-router][garywill/linux-router: Set Linux as router in one command. Support Internet sharing, redsocks, Wifi hotspot, IPv6. Can also be used for routing VM/containers üõ∞Ô∏è]]
- [[https://github.com/leozz37/jaguar][leozz37/jaguar: üêÜ CLI tool for testing socket connections]]
- [[https://github.com/MatsuriDayo/nekoray][MatsuriDayo/nekoray: Qt based cross-platform GUI proxy configuration manager (backend: v2ray / sing-box)]]
- [[https://github.com/microsoft/ethr][microsoft/ethr: Ethr is a Network Performance Measurement Tool for TCP, UDP & HTTP.]]
- [[https://github.com/narrowlink/narrowlink][narrowlink/narrowlink: Narrowlink securely connects devices and services together, even when both nodes are behind separate NAT]]
- [[https://github.com/zerotier/ZeroTierOne][(Nonfree license) zerotier/ZeroTierOne: A Smart Ethernet Switch for Earth]]
- [[https://github.com/nxtrace/NTrace-core][nxtrace/NTrace-core: An open source visual route tracking CLI tool]]
- [[https://github.com/OISF/suricata][OISF/suricata: Suricata git repository maintained by the OISF]]
- [[https://github.com/openwisp/openwisp-network-topology][openwisp/openwisp-network-topology: Network topology collector and visualizer. Collects network topology data from dynamic mesh routing protocols or other popular networking software like OpenVPN, allows to visualize the network graph, save daily snapshots that can be viewed in the future and more.]]
- [[https://packetpushers.net/][Packet Pushers - Where Too Much Technology Would Be Barely Enough]]
- [[https://github.com/prashantgupta24/firewalld-rest][prashantgupta24/firewalld-rest: A rest application to update firewalld rules on a linux server]]
- [[https://github.com/qaul/qaul.net][qaul/qaul.net: Internet Independent Wireless Mesh Communication App]]
- [[https://access.ripe.net/?originalUrl=https%3A%2F%2Fmy.ripe.net%2F%23%2Fcontacts][RIPE NCC Access ‚Äî RIPE Network Coordination Centre]]
- [[https://github.com/SagerNet/sing-box][SagerNet/sing-box: The universal proxy platform]]
- [[https://github.com/sysdream/chashell][sysdream/chashell: Chashell is a Go reverse shell that communicates over DNS. It can be used to bypass firewalls or tightly restricted networks.]]
- [[https://github.com/sysdream/ligolo][sysdream/ligolo: Reverse Tunneling made easy for pentesters, by pentesters https://sysdream.com/]]
- [[https://github.com/t1anz0ng/iftree][t1anz0ng/iftree: CLI, visualize network devices relation]]
- [[https://baturin.org/docs/iproute2/][Task-centered iproute2 user guide ‚Äî Daniil Baturin]]
- [[https://docs.openvswitch.org/en/latest/howto/lisp/][Using LISP tunneling ‚Äî Open vSwitch 2.16.90 documentation]]
- [[https://github.com/Warxim/petep][Warxim/petep: PETEP (PEnetration TEsting Proxy) is an open-source Java application for traffic analysis & modification using TCP/UDP proxies. PETEP is a useful tool for performing penetration tests of applications with various application protocols. ‚ö°]]
- [[https://github.com/Yawning/obfs4][Yawning/obfs4: The obfourscator (Courtesy mirror)]]

* 

http://xmodulo.com/centos-bgp-router-quagga.html

https://www.tldp.org/HOWTO/BRIDGE-STP-HOWTO/set-up-the-bridge.html
https://lists.linuxfoundation.org/pipermail/bridge/2017-December/010832.html
https://developers.redhat.com/blog/2018/10/22/introduction-to-linux-interfaces-for-virtual-networking/

https://bugzilla.redhat.com/show_bug.cgi?id=542405
oleg@guixsd ~$ sudo sysctl  net.bridge.bridge-nf-call-arptables=0
net.bridge.bridge-nf-call-arptables = 0
oleg@guixsd ~$ sudo sysctl net.bridge.bridge-nf-call-iptables=0
net.bridge.bridge-nf-call-iptables = 0

* Analyze
- [[https://serveradmin.ru/webpagetest-lokalnaya-ustanovka-i-nastroyka/][WebPageTest ‚Äî –ª–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ ‚Äî Server Admin]]
- [[https://serveradmin.ru/analiz-setevogo-trafika-v-noction-flow-analyzer/][–ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ Noction Flow Analyzer ‚Äî Server Admin]]

* ARP

- [[https://github.com/royhills/arp-scan][royhills/arp-scan: The ARP Scanner]]

* Backup
- [[https://github.com/ytti/oxidized][ytti/oxidized: Oxidized is a network device configuration backup tool. It's a RANCID replacement!]]

* Benchmark

** ab

- apache benchmark, which could be useful for rate limit test
  : ab -k -c 350 -n 20000 example.org/

** tools
- [[https://github.com/tylertreat/comcast][tylertreat/comcast: Simulating shitty network connections so you can build better systems.]]
- [[https://github.com/baidu/dperf][baidu/dperf: dperf is a network load tester for cloud.]]
- [[https://github.com/ddosify/ddosify][ddosify/ddosify: High-performance load testing tool, written in Golang.]]

* [[id:63242a98-634c-4236-999c-5b26d588b4d9][BGP]]
** AS
 - [[https://github.com/stevenpack/asroute][stevenpack/asroute: Interpret traceroute output to show names of ASN traversed]]

* bridge

- Create a bridge
  : ip link add name br0 type bridge

* Connections
** Fibre
- [[https://www.youtube.com/watch?v=EdR2cujwke4][(1) We just leveled up HARDCORE - Fibre Adventure - YouTube]]

* DHCP
- [[https://github.com/CyberShadow/dhcptest][CyberShadow/dhcptest: Cross-platform DHCP test client]]
- [[https://habr.com/ru/company/dsec/blog/333978/][–ê—Ç–∞–∫—É–µ–º DHCP / –ë–ª–æ–≥ –∫–æ–º–ø–∞–Ω–∏–∏ Digital Security / –•–∞–±—Ä]]

* Diagrams
- [[https://www.redhat.com/architect/diagramming-tools-network-architecture][Try these 5 diagramming tools for network architecture | Enable Architect]]

* eBPF
- [[https://github.com/polycube-network/polycube][polycube-network/polycube: eBPF/XDP-based software framework for fast network services running in the Linux kernel.]]

* /etc/hosts

- [[https://github.com/txn2/txeh][txn2/txeh: Go library and CLI utility for /etc/hosts management.]]

* Filtering
- [[https://habr.com/ru/company/timeweb/blog/586850/][–ü–æ–¥–Ω–∏–º–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø—Ä–æ–∫—Å–∏ Squid –Ω–∞ FreeBSD 13.0 / –•–∞–±—Ä]]

* Firewall
** netfilter
*** tools
1. conntrack-tools
2. nfacct
3. ulogd

* Firmware
- [[https://unix.stackexchange.com/questions/56614/send-file-by-xmodem-or-kermit-protocol-with-gnu-screen][serial port - Send file by xmodem or kermit protocol with GNU screen - Unix & Linux Stack Exchange]]

* [[id:8f93f297-e53d-4f15-80f8-47e3213f9ec5][HTTP]]

* ICMP
- [[https://github.com/m-ou-se/pong][m-ou-se/pong: Fake ping times.]]
- [[https://linux.die.net/man/8/omping][omping(8): test IP multicast - Linux man page]]
- [[https://github.com/oetiker/SmokePing][oetiker/SmokePing: The Active Monitoring System]]

* ip

- route traffic to 198.143.164.252/32 via secondary ip address 78.108.80.143
  : ip r a 198.143.164.252/32 via 78.108.80.254 src 78.108.80.143

- Bind port even if no IP address available:
: net.ipv4.ip_nonlocal_bind = 1

- Clean arp cache
  : ip -s -s neigh flush all

#+BEGIN_SRC yaml
  ethernet frame:
    preamble/sfd:
    destination address:
    source address:
    ethernet type:
    payload:
      ip header:
        1:
          version:
            size: 4 bytes
          ihl:
          type of service:
          total length:
        2:
          identification:
          flags:
          fragment offset:
        3:
          time to live:
          protocol:
          header checksum:
        4:
          source address:
        5:
          destination address:
        6: # rarely used
          options:
          padding:
    frame check sequence:
#+END_SRC

** Test gateway

- In =screen= session press Ctrl+C if successful
  : sh -c 'ip r delete default; ip r add default via 172.16.103.208; sleep 10; ip r delete default; ip r add default via 172.16.103.1'

* Juniper/Cisco

[[https://it-wtf.com/juniper/juniper-cisco-commands/][Juniper/Cisco —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥ | IT-WTF?!]]

–ö–æ–º–∞–Ω–¥—ã Cisco 	–ö–æ–º–∞–Ω–¥—ã Juniper 	–û–ø–∏—Å–∞–Ω–∏–µ
show run 	sh configuration 	Show running configuration
sh ver 	sh ver 	Show version
show ip interface brief 	show interface terse 	displays the status of interfaces configured for IP
show interface [intfc] 	show interfaces [intfc] detail 	displays the interface configuration, status and statistics.
show controller intfc 	show interfaces intfc extensive 	displays information about a physical port device
show interface | incl (proto|Desc) 	show interfaces description 	displays the interface configuration, status and statistics
show ip route 	show route 	displays summary information about entries in the routing table
show ip bgp summary 	show bgp summary 	displays the status of all Border Gateway Protocol (BGP) connections
show ip bgp net mask 	show route protocol bgp prefix 	will show you how that route is being advertised, look for the first line
show ip bgp net mask longer-prefixes 	show route range prefix 	will show you how that route is being advertised, look for the first line
show ip bgp regexp AS-regexp 	show route aspath-regexp ‚ÄúAS-regexp‚Äù 	displays routes matching the autonomous system (AS) path regular expression
show ip bgp neighbors neigh received-routes 	show route receive-protocol bgp neighshow route source-gateway neigh protocol bgp 	Shows whether a neighbor supports the route refresh capability
show ip bgp neighbor neigh advertised-routes 	show route advertising-protocol bgp neigh 	Shows whether a neighbor supports the route refresh capabilty
show clns neighbors 	show isis adjacency 	displays both ES and IS neighbors
show clns interface 	show isis interface 	shows specific information about each interface
show ip route isis 	show isis routes 	displays the current state of the the routing table
show isis topology 	show isis spf 	displays a list of all connected routers in all areas
show ip ospf interface 	show ospf neighbor 	shows neighbor ID, Priority, IP, & State if the neighbor router, dead time.
show ip ospf interface 	show ospf interface 	shows neighbor id, pri, state, dead time, address and interface
show ip route ospf 	show ospf route 	display the current state of the routing table
show ip ospf database 	show ospf database 	display list of information related to the OSPF database for a specific communication server
show version 	show version, show system uptime 	display the system hardware config., software version, and name and source of configuration files and boot images
show diags 	show chasis hardware 	displays power-on diagnostics status
show processes cpu 	show system process 	displays utilization statistics
show tech-support 	request support info 	displays the current software image, configuration, controllers, counters, stacks, interfaces, memory and buffers
show logging 	show log messages 	display the state of logging to the syslog
show route-map name 	show policy name 	displayall route-maps configured or only the one specified
show ip prefix-list name 	show policy name 	display information about a prefix list or prefix list entries
show ip community-list list 	configure,
show policy-options community name 	display routes that are permitted by BGP community list
show environment all 	show chassis environment 	displays temperature and voltage information on the console
ping dest 	ping dest rapid (for cisco like output)
ping dest (for unix like output) 	to check to see if a destination is alive
ping (setting source int) 	ping dest bypass-routing 	to check to see if a destination is alive
terminal monitor 	monitor start messages 	Change console terminal settings
terminal no monitor 	monitor stop 	Change console terminal settings
terminal length 0 	set cli screen-length 0 	sets the length for displaying command output

* keepalived
- [[https://tech-geek.ru/keepalived/][–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ–π —Å–µ—Ç–∏ –≤ Linux —Å keepalived]]
- [[https://www.altlinux.org/Keepalived][Keepalived ‚Äî ALT Linux Wiki]]
- [[http://www.linux-admins.net/2015/02/keepalived-using-unicast-track-and.html][Linux Administration: Keepalived using unicast, track and notify scripts]]

* LACP

[[https://support.f5.com/csp/article/K2289][Using advanced tcpdump filters]]
#+begin_example
  [root@kvm15:~]# tcpdump -pni any -e ether proto 0x8809 -vvv
  tcpdump: listening on any, link-type LINUX_SLL (Linux cooked v1), capture size 262144 bytes
  20:16:20.398110 Out 00:1b:21:8c:be:21 ethertype Slow Protocols (0x8809), length 126: LACPv1, length 110
          Actor Information TLV (0x01), length 20
            System 00:1b:21:8c:be:20, System Priority 65535, Key 9, Port 2, Port Priority 255
            State Flags [Activity, Aggregation, Synchronization, Collecting, Distributing]
            0x0000:  ffff 001b 218c be20 0009 00ff 0002 3d00
            0x0010:  0000
          Partner Information TLV (0x02), length 20
            System 64:64:9b:ac:5c:40, System Priority 127, Key 6, Port 14, Port Priority 127
            State Flags [Activity, Timeout, Aggregation, Synchronization, Collecting, Distributing]
            0x0000:  007f 6464 9bac 5c40 0006 007f 000e 3f00
            0x0010:  0000
          Collector Information TLV (0x03), length 16
            Max Delay 0
            0x0000:  0000 0000 0000 0000 0000 0000 0000
          Terminator TLV (0x00), length 0
#+end_example

* Learning
- [[https://disnetern.ru/10-samples-netstat-linux/][10 –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã Netstat –≤ Linux | IT Knowledge Base]]
- [[http://2f30.org/home.html][division by zero]]
- [[https://unix.stackexchange.com/questions/619068/the-difference-between-ip-link-down-and-physical-link-absence][linux - The difference between ip link down and physical link absence - Unix & Linux Stack Exchange]]
- [[https://upload.wikimedia.org/wikipedia/commons/3/37/Netfilter-packet-flow.svg][upload.wikimedia.org/wikipedia/commons/3/37/Netfilter-packet-flow.svg]]
- [[https://radiocrafts.com/why-is-multicasting-becoming-essential-for-mesh-networks/][Why is Multicasting Becoming Essential for Mesh Networks? - Radiocrafts]]
- [[https://disnetern.ru/net-type-attack/][–í–∏–¥—ã —Å–µ—Ç–µ–≤—ã—Ö –∞—Ç–∞–∫ | IT Knowledge Base]]
- [[https://habr.com/ru/company/karuna/blog/582292/][–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–π / –•–∞–±—Ä]]
- [[https://habr.com/ru/articles/716006/][–ò—Å—Ç–æ—Ä–∏—è –æ —Ç–æ–º, –∫–∞–∫ ¬´–Ω–µ–∫–æ–ø–∏—Ä—É–µ–º—ã–π¬ª —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª –∫–æ–Ω—Ü–µ–ø—Ü–∏—é —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–∞–º–∏ / –•–∞–±—Ä]]
- [[https://habr.com/ru/companies/first/articles/722878/][–ö–∞–∫–∏–µ –∫–∞–±–µ–ª–∏ –º–æ–∂–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –≤ —Å—Ç–æ–π–∫–µ –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä–∞? / –•–∞–±—Ä]]
- [[https://habr.com/ru/articles/725386/][–ö–∞–∫–æ–π —Ä–æ—É—Ç–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OpenWrt –∫—É–ø–∏—Ç—å –≤ 2023 –≥–æ–¥—É / –•–∞–±—Ä]]
- [[https://habr.com/ru/companies/stc_spb/articles/716078/][–ú–µ—Ç–æ–¥ –ø–æ–ª–∏—Ä–æ–≤–∫–∏ –≤–æ–ª–æ–∫–æ–Ω–Ω–æ-–æ–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ / –•–∞–±—Ä]]
- [[https://habr.com/ru/articles/467547/][–û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –†–ö–ù —Å –ø–æ–º–æ—â—å—é DNSTap –∏ BGP / –•–∞–±—Ä]]
- [[https://habr.com/ru/articles/270657/][–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –≤ –¥–æ–º–∞—à–Ω–µ–π —Å–µ—Ç–∏ / –•–∞–±—Ä]]
- [[https://disnetern.ru/diff-sfp-sfp-xfp-qsfp-qsfp-cfp-qsfp28-xenpac-x2-gbic/][–†–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É SFP, SFP+, XFP, QSFP/QSFP+, CFP, QSFP28 | IT Knowledge Base]]
- [[https://habr.com/ru/articles/727868/][–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: V2Ray, XRay, XTLS, Hysteria, Cloak –∏ –≤—Å–µ-–≤—Å–µ-–≤—Å–µ / –•–∞–±—Ä]]

* Mesh
- [[https://github.com/jech/babeld][jech/babeld: The Babel routing daemon]]
- [[https://github.com/slackhq/nebula][slackhq/nebula: A scalable overlay networking tool with a focus on performance, simplicity and security]]
- [[https://github.com/webmeshproj/webmesh][webmeshproj/webmesh: A simple, distributed, zero-configuration WireGuard mesh solution]]

* Misc
- [[https://github.com/IvanGlinkin/Host-enumeration][IvanGlinkin/Host-enumeration]]
- [[https://github.com/zhboner/realm][zhboner/realm: A network relay tool]]
- [[https://github.com/abdularis/LAN-Share][abdularis/LAN-Share: Cross platform LAN File transfer application built with Qt C++ framework]]

* Mobile
- [[https://habr.com/ru/companies/timeweb/articles/776040/][–°–∞–º —Å–µ–±–µ –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç. –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ 4G LTE / –•–∞–±—Ä]]

* Monitoring
- [[https://github.com/ntop/ntopng][ntop/ntopng: Web-based Traffic and Security Network Traffic Monitoring]]

* MTU
** [[https://community.cisco.com/t5/networking-knowledge-base/gre-tunnel-mtu-interface-mtu-and-fragmentation/ta-p/3673508][GRE Tunnel MTU, Interface MTU, and Fragmentation - Cisco Community]]
Whenever we create tunnel interfaces, the GRE IP MTU is automatically configured 24 bytes less than the outbound physical interface MTU. Ethernet interfaces have an MTU value of 1500 bytes. Tunnel interfaces by default will have 1476 bytes MTU. 24 bytes less the physical.

Why do we need tunnel MTU to be 24 bytes lower (or more) than interface MTU? Because GRE will add 4 bytes GRE header and another 20 bytes IP header. If your outbound physical interface is configured as ethernet, the frame size that will cross the wire is expected be 14 bytes more, 18 bytes if link is configured with 802.1q encapsulation. If the traffic source sends packet with 1476 bytes, GRE tunnel interface will add another 24 bytes as overhead before handing it down to the physical interface for transmission. Physical interface would see a total of 1500 bytes ready for transmission and will add L2 header (14 or 18 bytes for ethernet and 802.q respectively). This scenario would not lead to fragmentation. Life is good.

 

 

1.png

 

GRE traffic captured between R2 and R3 with a total of 1514 bytes

 

2.png

 

What if H1 sends 1477 bytes packet? When router (R2 in this case) receives the packet and routes it out to the GRE tunnel interface, it will see that the packet is larger than the tunnel interface IP MTU which is 1476. This will cause fragmentation. When a GRE tunnel fragments a packet, all fragmented packets will be encapsulated with GRE headers before handing it over to frame encapsulation. (Wireshark just reads the inner IP header and not the outer IP header for GRE)

 

3.png4.png5.png

 

Frame 319
	

Size (1491 bytes)
	

Frame 318
	

Size (82 bytes)

Ethernet
	

14
	

Ethernet
	

14

Outer IP Header
	

20
	

Outer IP Header
	

20

GRE
	

4
	

GRE
	

4

Original IP Header
	

20
	

Original IP Header
	

20

ICMP
	

1433
	

ICMP
	

24

 

When R3 receives the GRE packets, it will decapsulate the GRE headers and will transmit the fragmented packets (without reassembly) to H2. (Wireshark capture between R3 and H2)

 

6.png7.png8.png

 

Frame 4
	

Size (1467 bytes)
	

Frame 3
	

Size (58 bytes)

Ethernet
	

14
	

Ethernet
	

14

Original IP Header
	

20
	

Original IP Header
	

20

ICMP
	

1433
	

ICMP
	

24

 

This kind of situation where the GRE headend interface fragmented the packet, the receiving host (not the receiving tunnel) will be the one to reassemble the fragmented packets. In this case, H2. There will be extra work on the receiving host to reassemble the fragmented packets. This would mean that the NIC interface at the receiving end will have to put these packets into a buffer for proper reassembly.

Another example. What if the GRE interface‚Äôs MTU was increased above 1476 while retaining an ethernet MTU of 1500? Let‚Äôs say the GRE IP MTU was increased to 1477 bytes. This would increase the packet size that‚Äôs being handed over for transmission to ethernet to 1501 bytes and would indeed need fragmentation. This time, one GRE packet will be fragmented by the ethernet interface for transmission.

 

9.png

R2(config-if)#int tunnel 0

R2(config-if)#ip mtu 1477

%Warning: IP MTU value set 1477 is greater than the current transport value 1476, fragmentation may occur

*Jul 22 02:17:09.542: %TUN-4-MTUCONFIGEXCEEDSTRMTU_IPV4: Tunnel0 IPv4 MTU configured 1477 exceeds tunnel transport MTU 1476

 

Let‚Äôs send 1477 bytes from H1 to H2 (192.168.255.4)

 

10.png11.png12.png

 

Note: Wireshark reads the inner IP header of frame 1278 but since frame 1277 only has one IP header, the source and destination IPs captured by Wireshark are the terminating end-points.

 

Frame 1278
	

Size (1491 bytes)
	

Frame 1277
	

Size (58 bytes)

Ethernet
	

14
	

Ethernet
	

14

Outer IP Header
	

20
	

Outer IP Header
	

 

GRE
	

4
	

GRE
	

 

Original IP Header
	

20
	

Original IP Header
	

20

ICMP
	

1433
	

ICMP
	

24

 

As you would notice here, the GRE packet was fragmented into two frames. However, only one has GRE encapsulation (frame 1278) and the other doesn‚Äôt have GRE headers, only IP header (frame 1277).

The problem with this kind of setup is R3 would do extra work to reassemble the fragmented traffic.

H1:

ping 192.168.255.4 size 1477 repeat 100

Type escape sequence to abort.

Sending 100, 1477-byte ICMP Echos to 192.168.255.4, timeout is 2 seconds:

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Success rate is 100 percent (100/100), round-trip min/avg/max = 3/8/29 ms

 

R3:

sh ip traffic int eth0/1

 Ethernet0/1 IP-IF statistics :

  Rcvd:  200 total, 152100 total_bytes

         0 format errors, 0 hop count exceeded

         0 bad header, 0 no route

         0 bad destination, 0 not a router

         0 no protocol, 0 truncated

         0 forwarded

         200 fragments, 100 total reassembled

         0 reassembly timeouts, 0 reassembly failures

         0 discards, 100 delivers

  Sent:  1 total, 84 total_bytes 0 discards

         1 generated, 0 forwarded

         0 fragmented into, 0 fragments, 0 failed

  Mcast: 0 received, 0 received bytes

         0 sent, 0 sent bytes

  Bcast: 0 received, 0 sent

 

When R3 transmits the traffic to H2, the fragments were reassembled and sent with single frame.

 

13.png

 

Frame 964
	

Size (1491 bytes)

Ethernet
	

14

Original IP Header
	

20

ICMP
	

1457

 

When H2 respond with the ICMP request, it will reply with the same size causing the same scenario for R3 to R2. Both R2 and R3 may do double work, fragmentation and reassembly.

This is the reason why we don‚Äôt want GRE IP MTU and interface MTU to be less than 24 bytes apart. Some implementations recommend setting the GRE IP MTU to 1400 bytes to cover additional overhead especially when encryption comes into play (GRE/IPSEC). We do not want the exit interface to do the fragmentation because the tail-end of the GRE tunnel will be the one responsible to reassemble the fragmented data and this may cause high CPU when there is significant amount of traffic. Same with H2, R3 will allocate a buffer to place these fragmented packets for reassembly. Not to mention if there are any security devices in the path of the GRE tunnel and the packets arrived out of order, these security devices may drop the fragment causing other fragments to be dropped too.

 

Traffic with DF-bit set not discussed here.

* NAT

** 

- [[https://kslift.ru/nastroyka-routera-bez-nat/][–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞ –±–µ–∑ nat]]

** 

¬´–ù–∞—Ç–∏—Ç—å¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞–µ—Ç –Ω–∏ –ø—Ä–æ ¬´—á—Ç–æ¬ª, –Ω–∏ –ø—Ä–æ ¬´–∫—É–¥–∞¬ª. NAT - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è
–ø–æ–¥–º–µ–Ω—ã –∞–¥—Ä–µ—Å–∞ –≤ –ø–∞–∫–µ—Ç–µ –∏ —Ç–æ–ª—å–∫–æ. ¬´–ö—É–¥–∞¬ª –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–µ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏,
–∫–æ—Ç–æ—Ä–∞—è –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ NAT. –£ —Ç–µ–±—è –≤ —Å–∏—Å—Ç–µ–º–µ –µ—Å—Ç—å LO –∏,
–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –∫–∞–∫–∏–µ-—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã. –î–æ–ø—É—Å—Ç–∏–º, —É —Ç–µ–±—è –µ—Å—Ç—å eth0, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ—Ç—Ä–∏—Ç
–≤ –ª–æ–∫–∞–ª–∫—É, –∏ eth1, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ—Ç—Ä–∏—Ç –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç. –ï—Å–ª–∏ –ø–∞–∫–µ—Ç –ø—Ä–∏—à–µ–ª –∏–∑ eth –∏
—Ü–µ–ª—å—é —è–≤–ª—è–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å, —Ç–æ —ç—Ç–æ INPUT. –ï—Å–ª–∏ –ø–∞–∫–µ—Ç –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ
–ø—Ä–æ—Ü–µ—Å—Å–∞ —Ö–æ—á–µ—Ç –≤—ã–π—Ç–∏ –≤ eth, —Ç–æ —ç—Ç–æ OUTPUT. –ï—Å–ª–∏ –ø–∞–∫–µ—Ç —Ö–æ—á–µ—Ç –∏–∑ eth –ø–æ–ø–∞—Å—Ç—å –≤
eth (–º–∏–º–æ LO), —Ç–æ —ç—Ç–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∏–∑ PREROUTIMG - FORWARD -
POSTROUTING. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è NAT –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–º–µ–Ω–∏—Ç—å ip –∞–¥—Ä–µ—Å –≤ –ø–∞–∫–µ—Ç–µ. –ê–¥—Ä–µ—Å
–∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏/–∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –≠—Ç–∞ –ø–æ–¥–º–µ–Ω–∞ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å —Ç–∞–±–ª–∏—Ü–µ–π
–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏. –ú–∞—Å–∫–∞—Ä–∞–¥–∏–Ω–≥ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç DNAT/SNAT —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –∑–Ω–∞–Ω–∏—è
–∫–∞–∫–æ–π ip —Ç—ã –±—É–¥–µ—à—å –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å, –º–∞—Å–∫–∞—Ä–∞–¥ —Å–∞–º –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å. –ï—Å–ª–∏ —Ç—ã –∑–Ω–∞–µ—à—å
–∫–∞–∫–æ–π ip –±—É–¥–µ—à—å –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å, —Ç–æ –º–∞—Å–∫–∞—Ä–∞–¥–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ù–ï —Å–ª–µ–¥—É–µ—Ç, –¥–ª—è —ç—Ç–æ–≥–æ
–µ—Å—Ç—å SNAT/DNAT. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Å –ø–æ–º–æ—â—å—é iptables –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –º–µ—Ç–∫–∏ –Ω–∞ –ø–∞–∫–µ—Ç–∞—Ö,
–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ—Å—Ç–æ –ø–æ–π–º–∏, —á—Ç–æ —ç—Ç–æ –¥–≤–∞
—Ä–∞–∑–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–∞ (iptables –∏ routing), –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ. –¢–∞–º
–µ—â–µ –µ—Å—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º traffic control –∏–∑ –ø–∞–∫–µ—Ç–∞ iproute2, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å
–ø—Ä–æ–ø—É—Å–∫–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.

** 

–ó–∞–±—É–¥—å –ø—Ä–æ –º–∞—Å–∫–∞—Ä–∞–¥ –≤ —Ü–∏—Å–∫–µ - —Ç–∞–º –≤—Å—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ –¥—Ä—É–≥–æ–º—É. –ù–∞—á–∞—Ç—å —Ö–æ—Ç—è –±—ã —Å
—Ç–æ–≥–æ, —á—Ç–æ –µ—Å–ª–∏ —Ç—ã –Ω–µ —É–∫–∞–∂–µ—à—å –≤—Ö–æ–¥–Ω–æ–π –∏ –≤—ã—Ö–æ–¥–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã - NAT —Ç–∞–º –Ω–µ
–≤–∑–ª–µ—Ç–∏—Ç(–º–æ–º–µ–Ω—Ç —Å interface templates –æ–ø—É—Å—Ç–∏–º –ø–æ–∫–∞) –í Cisco NAT - —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π
–Ω–∞–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω —Å —Ñ–∞–π—Ä–≤–æ–ª–æ–º –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –æ–±—â–∏—Ö
route-map –Ω–∞–ø—Ä–∏–º–µ—Ä.  –í Linux NAT - —ç—Ç–æ —á–∞—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å
–ø—Ä–æ–¥–µ–ª–∞–Ω–∞ —Å –ø–∞–∫–µ—Ç–∞–º–∏ –≤ —Ä–∞–º–∫–∞—Ö —Ñ–∞–π—Ä–≤–æ–ª–∞. –¢–æ –µ—Å—Ç—å –≥—Ä—É–±–æ –≥–æ–≤–æ—Ä—è - –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ
–≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Ñ–∞–π—Ä–≤–æ–ª–∞.  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–∞–≤–¥–∞
—Ä–∞–∑–¥—Ä–∞–∂–∞—é—Ç - —Ç–æ –∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–∫–∞–∑–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤
POSTROUTING. –≠—Ç–æ –∫ —Å–ª–æ–≤—É —Ç–æ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –≤—ã–∫—Ä—É—Ç–∏—Ç—å—Å—è –º–µ—Ç–∫–∞–º–∏.

–ù–∞ ACL-—è—Ö —Å—Ç—Ä–æ–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ stateless —Ñ–∞–π—Ä–≤–æ–ª. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –≥–∏–±–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ - –ª—É—á—à–µ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Å—Ç–æ—Ä–æ–Ω—ã Zone-based firewall. –ù–∞ —Ç–µ—Ö —Ü–∏—Å–∫–∞—Ö —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —è —Ä–∞–±–æ—Ç–∞—é - –æ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ stateful-—Ñ–∞–π—Ä–≤–æ–ª–∞.

–ù–µ, –±–µ—Å—Å–ø–æ—Ä–Ω–æ, –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–µ–Ω firewall —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –Ω–æ –Ω–∞ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –º–∞—Å—à—Ç–∞–±–∞—Ö –±–µ–∑ –Ω–µ–≥–æ –æ—á–µ–Ω—å-–æ—á–µ–Ω—å —Ç–æ—Å–∫–ª–∏–≤–æ.

–ò–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ —É–∂ –ø–∏—Å—é–∫ —Å Linux, —á–µ–º –¥—Ä—ã—â–µ-–∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π —Ä–æ—É—Ç–µ—Ä. –ù—É –∞ Cisco –∫–∞–∫ –≤—Å–µ–≥–¥–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ - —ç—Ç–æ —Ü–µ–Ω–Ω–∏–∫ :-)

    route map –∫–∞–∫ –ø–æ–Ω—è–ª —ç—Ç–æ Policy Based Routing

–ù–µ —Ç–æ–ª—å–∫–æ. –ù–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –∫–∞–∫ PBR –≤ —Ç–æ–º —á–∏—Å–ª–µ

    –ö–∞–∫ –º–µ—Ç–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –≤—ã–∫—Ä—É—Ç–∏—Ç—å—Å—è? –≠—Ç–æ –∂–µ –ª–∏—à—å –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–æ—É—Ç–∏–Ω–≥–∞? –ò–ª–∏ —ç—Ç–æ –∏ –∏–º–µ–µ—Ç—Å—è –≤–≤–∏–¥—É(–∫–∞–∫ –≤ –º–æ–µ–º –ø—Ä–∏–º–µ—Ä–µ).

–ù–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫:

–ó–∞–¥–∞—á–∞ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—ë –ø—Ä–∏—à–µ–¥—à–µ–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å eth0 –Ω–∞—Ç–∏—Ç—å —Å –æ–¥–Ω–∏–º source-–∞–¥—Ä–µ—Å–æ–º, –∞ –ø—Ä–∏—à–µ–¥—à–µ–µ —Å eth2 - —Å –¥—Ä—É–≥–∏–º. –£–∫–∞–∑–∞—Ç—å -i –≤ POSTROUTING –Ω–µ–ª—å–∑—è. –í–∞—Ä–∏–∞–Ω—Ç —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã: –º–∞—Ä–∫–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã —Å eth0 –º–µ—Ç–∫–æ–π –¥–æ–ø—É—Å—Ç–∏–º 10, –∞ —Å eth2 - 20 –≤ PREROUTING. –í –ø—Ä–∞–≤–∏–ª–∞—Ö -j SNAT —É–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π -m mark.

* nc
** UDP
[[https://serverfault.com/questions/416205/testing-udp-port-connectivity][linux - Testing UDP port connectivity - Server Fault]]

  On server listen UDP port:
  : nc -ul 6111

  On client:
  : nc -u <server> 6111

* Packets
- [[https://github.com/pesos/rshark][pesos/rshark: Simple Packet Monitoring Tool]]
- [[https://github.com/thombashi/tcconfig][thombashi/tcconfig: A tc command wrapper. Make it easy to set up traffic control of network bandwidth/latency/packet-loss/packet-corruption/etc. to a network-interface/Docker-container(veth).]]

* Packets

- [[https://github.com/netspooky/pdiff][netspooky/pdiff: Binary Protocol Differ]]
- [[https://loicpefferkorn.net/ipdecap/][Ipdecap: remove encapsulation from pcap packets]]
- [[https://github.com/projectdiscovery/nuclei][projectdiscovery/nuclei: Nuclei is a fast tool for configurable targeted scanning based on templates offering massive extensibility and ease of use.]]
- [[https://github.com/dannagle/PacketSender][dannagle/PacketSender: Network utility for sending / receiving TCP, UDP, SSL, HTTP]]

- Find all clients connected to HTTP or HTTPS ports 
  : ss -o state established '( dport = :http or sport = :https )'

- Block all IPv4 addresses that has brute forcing our ssh server
  : for idiots in "$(cat /var/log/auth.log|grep invalid| grep -oE '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b')"; do iptables -A INPUT -s "$idiots" -j DROP; done

* Ping

  #+begin_src bash
    for ip in 10.0.0.{1..6}
    do
        if (timeout 1 ping -c 1 "$ip" &> /dev/null)
        then
            :
        else
            echo "$ip"
        fi
    done
  #+end_src

- [[https://github.com/shivammathur/IPpy][shivammathur/IPpy: Ping IP addresses and domains in parallel to find the accessible and inaccessible ones.]]

* Privacy
- [[https://ru.wikipedia.org/wiki/Psiphon][Psiphon ‚Äî –í–∏–∫–∏–ø–µ–¥–∏—è]]
- [[https://ru.wikipedia.org/wiki/Lantern][Lantern ‚Äî –í–∏–∫–∏–ø–µ–¥–∏—è]]
* [[id:0b6880f3-90c4-4052-b176-f59fd7219230][Proxy]]

* [[id:ed7ba502-c59a-4ab0-aada-6a0f342f20cd][rsync]]

* Scan
- [[https://github.com/Esc4iCEscEsc/skanuvaty][Esc4iCEscEsc/skanuvaty: Dangerously fast DNS/network/port scanner]]
- [[https://github.com/marco-lancini/goscan][marco-lancini/goscan: Interactive Network Scanner]]
- [[https://github.com/netxms/netxms][netxms/netxms: NetXMS - Open Source network and infrastructure monitoring and management]]
- [[https://github.com/pojntfx/liwasc][pojntfx/liwasc: List, wake and scan nodes in a network.]]
- [[https://github.com/s0md3v/Smap][s0md3v/Smap: a drop-in replacement for Nmap powered by shodan.io]]
- [[https://github.com/taythebot/archer][taythebot/archer: Distributed network and vulnerability scanner]]
- [[https://github.com/v-byte-cpu/sx][v-byte-cpu/sx: Fast, modern, easy-to-use network scanner]]
- [[https://github.com/Yariya/Zmap-ProxyScanner][Yariya/Zmap-ProxyScanner: A Thread Safe fast way to find proxies. Find 2000-5000 working http,socks4,socks5 proxies in one scan.]]

** UDP
- [[https://github.com/nullt3r/udpx][nullt3r/udpx: Fast, single-packet UDP scanner written in Go. Supports discovery of more than 45 services with the possibility to add your own. It is lightweight - grab a binary and run it anywhere you want. Linux, Mac Os and Windows are supported but can be built for more platforms.]]

* [[id:d5c0438f-65e6-4989-8a60-48e927f4a4d3][SMTP]]

* ss
- [[https://www.linuxtechi.com/ss-command-examples-monitor-socket-connections/][Top 14 SS Command Examples to Monitor Socket Connections]]

- kill socket
: ss -K dst 192.168.1.3 dport = 53152

* tcpdump
- [[https://danielmiessler.com/study/tcpdump/][A tcpdump Tutorial with Examples ‚Äî 50 Ways to Isolate Traffic | Daniel Miessler]]

- sshpass -p"$(pass show majordomo/private/ssh/router)" ssh sr1-dh507-508.intr -- tcpdump -w - -i ae113 -n -c 1000 | wireshark -k -i -

* Tools
- [[https://github.com/alttch/latencymon][alttch/latencymon: TCP/UDP/ICMP latency monitoring]]
- [[https://github.com/apernet/OpenGFW][apernet/OpenGFW: OpenGFW is a flexible, easy-to-use, open source implementation of GFW on Linux]]
- [[https://arkime.com/][Arkime: Network Analysis & Packet Capture]]
- [[https://github.com/c-grimshaw/gosniff][c-grimshaw/gosniff: A fancy-schmancy tcpdump-esque TUI, programmed in Go.]]
- [[https://github.com/chiakge/Linux-NetSpeed][chiakge/Linux-NetSpeed: Â∞ÜLinuxÁé∞Â∏∏Áî®ÁöÑÁΩëÁªúÂä†ÈÄüÈõÜÊàêÂú®‰∏ÄËµ∑]]
- [[https://github.com/devops-works/egress-auditor][devops-works/egress-auditor: Audit your egress connections and finally populate this OUTPUT chain !]]
- [[https://github.com/eNMS-automation/eNMS][eNMS-automation/eNMS: An enterprise-grade vendor-agnostic network automation platform.]]
- [[https://github.com/fofapro/fapro][fofapro/fapro: Fake Protocol Server]]
- [[https://github.com/fujiapple852/trippy][fujiapple852/trippy: A network diagnostic tool]]
- [[https://github.com/GyulyVGC/sniffnet][GyulyVGC/sniffnet: Application to comfortably monitor your network traffic]]
- [[https://github.com/hakluke/hakip2host][hakluke/hakip2host: hakip2host takes a list of IP addresses via stdin, then does a series of checks to return associated domain names.]]
- [[https://github.com/imsnif/bandwhich][imsnif/bandwhich: Terminal bandwidth utilization tool]]
- [[https://github.com/insomniacslk/dublin-traceroute][insomniacslk/dublin-traceroute: Dublin Traceroute is a NAT-aware multipath tracerouting tool]]
- [[https://github.com/laixintao/pingtop?tab=readme-ov-file][laixintao/pingtop: üèìPing multiple servers and show results in a top-like terminal UI.]]
- [[https://github.com/liamg/furious][liamg/furious: Go IP/port scanner with SYN (stealth) scanning and device manufacturer identification]]
- [[https://github.com/lmc999/RegionRestrictionCheck][lmc999/RegionRestrictionCheck: A bash script to check if your VPS's IP is available for various OTT platforms]]
- [[https://github.com/napalm-automation/napalm][napalm-automation/napalm: Network Automation and Programmability Abstraction Layer with Multivendor support]]
- [[https://github.com/nhorman/dropwatch][nhorman/dropwatch: user space utility to interface to kernel dropwatch facility]]
- [[https://noiseprotocol.org/][Noise Protocol Framework]]
- [[https://github.com/nsntrace/nsntrace][nsntrace/nsntrace: Perform network trace of a single process by using network namespaces.]]
- [[https://github.com/openspeedtest/Speed-Test][openspeedtest/Speed-Test: SpeedTest by OpenSpeedTest‚Ñ¢ is a Free and Open-Source HTML5 Network Performance Estimation Tool Written in Vanilla Javascript and only uses built-in Web APIs like XMLHttpRequest (XHR), HTML, CSS, JS, & SVG. No Third-Party frameworks or libraries are Required. Started in 2011 and moved to OpenSpeedTest.com dedicated Project/Domain Name in 2013.]]
- [[https://github.com/praetorian-inc/fingerprintx][praetorian-inc/fingerprintx: Standalone utility for service discovery on open ports!]]
- [[https://github.com/projectdiscovery/asnmap][projectdiscovery/asnmap: Go CLI and Library for quickly mapping organization network ranges using ASN information.]]
- [[https://github.com/projectdiscovery/mapcidr][projectdiscovery/mapcidr: Small utility program to perform multiple operations for a given subnet/CIDR ranges.]]
- [[https://github.com/Ripolak/chk][Ripolak/chk: A small CLI tool to check connection from a local machine to a remote target in various protocols.]]
- [[https://github.com/sc0tfree/netbyte][sc0tfree/netbyte: Netbyte is a Netcat-style tool that facilitates probing proprietary TCP and UDP services. It is lightweight, fully interactive and provides formatted output in both hexadecimal and ASCII.]]
- [[https://github.com/ShangRui-hash/nc-tls][ShangRui-hash/nc-tls: vimÊµÅÊåñÊ¥ûÈÄâÊâã‰ΩøÁî®goÁºñÂÜôÁöÑ‰∏Ä‰∏™TLS ËøûÊé•Áâà NC ,Áî®‰∫éËøûÁª≠ÂèëÈÄÅÂ§ö‰∏™httpsËØ∑Ê±ÇÊä•Êñá, ‰ªÖÊîØÊåÅmacOSÂíåLinux]]
- [[https://github.com/smallnest/mping][smallnest/mping: a multi-targets ping tool, which supports 10,000 packets/second, accurate latency]]
- [[https://github.com/snabbco/snabb][snabbco/snabb: Snabb: Simple and fast packet networking]]
- [[https://github.com/surban/aggligator][surban/aggligator: Aggregates multiple links (TCP, Bluetooth or similar) into one connection having their combined bandwidth and provides resiliency against failure of individual links.]]
- [[https://github.com/tenox7/ttg][tenox7/ttg: Display SNMP bandwidth usage similar to ping(1) output]]
- [[https://github.com/trojan-gfw/trojan][trojan-gfw/trojan: An unidentifiable mechanism that helps you bypass GFW.]]
- [[https://github.com/vel21ripn/nDPI][vel21ripn/nDPI: Open Source Deep Packet Inspection Software Toolkit]]
- [[https://github.com/vmxdev/sidmat][vmxdev/sidmat: Simple DNS matcher]]
- [[https://github.com/vmxdev/xenoeye/][vmxdev/xenoeye: Lightweight Netflow/IPFIX collector]]
- [[https://github.com/x-way/ip_compact][x-way/ip_compact: Compact a list of IP prefixes]]
- [[https://github.com/ycd/dstp][ycd/dstp: üß™ Run common networking tests against your site.]]
- [[https://github.com/zeek/zeek][zeek/zeek: Zeek is a powerful network analysis framework that is much different from the typical IDS you may know.]]
- [[https://github.com/ZingerLittleBee/netop][ZingerLittleBee/netop: Network Top]]
** [[https://www.opsdash.com/blog/network-performance-linux.html][Measuring Network Performance in Linux with qperf]]
How to measure TCP and UDP bandwidth and latency over private networks.

Want a quick benchmark of the network link between two servers? Compare the private networking feature offered by your favorite cloud providers? Wondering how much overhead a VPN adds?

Try qperf. It‚Äôs a quick, easy way to check TCP and UDP bandwidth and latencies between two servers.
Installing qperf

On CentOS/RHEL 7, qperf is available from the EPEL repository. Install it like this:

# enable the EPEL repo
$ sudo yum install epel-release

# install the package itself
$ sudo yum install qperf

The Ubuntu/Debian repositories do not have qperf, so you‚Äôll need to build it from source. This is thankfully quite easy:

# get the tools needed to build qperf
$ sudo apt-get install -y make gcc libc-dev

# download the qperf source tarball
$ wget https://www.openfabrics.org/downloads/qperf/qperf-0.4.9.tar.gz

# unpack it
$ tar xvf qperf-0.4.9.tar.gz

# build it
$ cd qperf-0.4.9
$ ./configure
$ make

# the qperf binary is now at qperf-0.4.9/src/qperf

Using qperf

You need to run qperf on two machines. On the first one, qperf is run in a ‚Äúserver‚Äù mode and on the second one, qperf can be invoked to run various tests.

Running qperf without any arguments starts it in server mode. On the second node, invoke it with the IP of the first server, and the test(s) to run. The tests we are interested in are:

    tcp_bw and udp_bw ‚Äì the rate of transfer over TCP and UDP, reported at byte-level (MB/s) and packet-level (messages/sec)
    tcp_lat and udp_lat ‚Äì the average per-hop time taken for a TCP or UDP packet

By default qperf runs each specified test for 2 seconds. Add a -v flag to get a verbose output. Here it is in action:

qperf in action
qperf in action

The above screencast shows the execution of the tcp_bw and tcp_lat tests. The first node (node1), with the IP 10.99.0.1, is running qperf in the server mode.

Here is a sample output of the UDP bandwidth and latency tests (you can list any or all tests in the same command line):

root@node2:~# qperf -v 10.99.0.1 udp_bw udp_lat
udp_bw:
    send_bw         =   248 MB/sec
    recv_bw         =   238 MB/sec
    msg_rate        =  7.25 K/sec
    send_cost       =   302 ms/GB
    recv_cost       =   547 ms/GB
    send_cpus_used  =   7.5 % cpus
    recv_cpus_used  =    13 % cpus
udp_lat:
    latency        =  46.7 us
    msg_rate       =  21.4 K/sec
    loc_cpus_used  =  11.5 % cpus
    rem_cpus_used  =    10 % cpus

You can also see the CPU that qperf had to consume to send and receive the data that it did. You can also see an even more detailed output with the -vv flag.

Instructing qperf to run the tests for a longer time, say 60s, reduces the influence of outliers (qperf only reports averages, and no other stats). You can do this by using the -t NN flag, like so:

root@node2:~# qperf -t 60 -v 10.99.0.1 tcp_bw tcp_lat
tcp_bw:
    bw              =   239 MB/sec
    msg_rate        =  3.65 K/sec
    time            =    60 sec
    send_cost       =   254 ms/GB
    recv_cost       =  1.15 sec/GB
    send_cpus_used  =  6.07 % cpus
    recv_cpus_used  =  27.6 % cpus
tcp_lat:
    latency        =  47.4 us
    msg_rate       =  21.1 K/sec
    time           =    60 sec
    loc_cpus_used  =    11 % cpus
    rem_cpus_used  =    10 % cpus

And finally, you can also choose the size of the message to be used for the tests. (You can also make it repeat the test with increasing sizes using the -oo option.) Here is qperf being run with a 4 kB packet size:

root@node2:~# qperf -v -m 4k 10.99.0.1 tcp_bw tcp_lat
tcp_bw:
    bw              =   220 MB/sec
    msg_rate        =    55 K/sec
    msg_size        =     4 KB
    send_cost       =   429 ms/GB
    recv_cost       =  1.16 sec/GB
    send_cpus_used  =   9.5 % cpus
    recv_cpus_used  =  25.5 % cpus
tcp_lat:
    latency        =   145 us
    msg_rate       =  6.91 K/sec
    msg_size       =     4 KB
    loc_cpus_used  =     7 % cpus
    rem_cpus_used  =     5 % cpus

Applying qperf

Here are some examples of where qperf can be useful:

    How does the private networking feature offered by Digital Ocean compare to, say, Linode‚Äôs in terms of network throughput and latency?
    Your containers are talking to each other over a Weave overlay network ‚Äì is this slowing things down?
    How much will adding encryption to a Weave network slow things down?

Interested in the answers to these questions? Let us know in the comments and we‚Äôll try to do a blog post about them in the future.
** –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–ø–æ–ª–æ–≥–∏—é –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å: –ø–æ–¥–±–æ—Ä–∫–∞ open source —Ä–µ—à–µ–Ω–∏–π –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —Å–µ—Ç–µ–π

–°–µ—Ç–µ–≤—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –∏ —Å–∏–º—É–ª—è—Ç–æ—Ä—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –û–¥–Ω–∞–∫–æ –∏ —Ç–µ –∏
–¥—Ä—É–≥–∏–µ –≤—ã—Å—Ç—É–ø–∞—é—Ç –Ω–µ–ø–ª–æ—Ö–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤
–æ–±–ª–∞—Å—Ç–∏ —Å–µ—Ç–µ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –í —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –ø–æ–¥–±–æ—Ä–∫–µ –º—ã —Ä–µ—à–∏–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å
–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –æ–±—Å—É–¥–∏—Ç—å –∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.

[[https://habrastorage.org/r/w1560/getpro/habr/upload_files/b20/5e1/5a8/b205e15a885786051685696bb6431752.jpg]]

–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: 2H Media / Unsplash.com

*** Containerlab

–ü–ª–∞—Ç—Ñ–æ—Ä–º—É Containerlab —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –∏–Ω–∂–µ–Ω–µ—Ä—ã Nokia –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç –ø–æ –ª–∏—Ü–µ–Ω–∑–∏–∏
[[https://github.com/srl-labs/containerlab/blob/main/LICENSE][BSD-3-Clause]]. –û–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –Ω–∞ –±–∞–∑–µ
–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Docker. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º CLI.

–†–µ—à–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º ‚Äî
–Ω–∞–ø—Ä–∏–º–µ—Ä, Nokia SR-Linux, Arista cEOS, Cisco XRd, Juniper cRPD. –í —Ç–æ –∂–µ –≤—Ä–µ–º—è
—É—Ç–∏–ª–∏—Ç–∞ —É–º–µ–µ—Ç –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –≤ –µ–¥–∏–Ω—É—é
—Ç–æ–ø–æ–ª–æ–≥–∏—é. –î–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ [[https://github.com/vrnetlab/vrnetlab][vrnetlab]] ¬´–∑–∞–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç¬ª –æ–±—ã—á–Ω—É—é –í–ú –≤–Ω—É—Ç—Ä—å
–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞. –£–∑–ª—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã TLS-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –ø–æ–ª—É—á–∞—é—Ç –∏—Ö
–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–º—É–ª—è—Ü–∏–∏.

–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Ç–∏–ª–∏—Ç—ã —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç [[https://containerlab.dev/lab-examples/lab-examples/][—Ä—è–¥ –∑–∞–≥–æ—Ç–æ–≤–æ–∫]] –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–∑–≤–µ—Ä—Ç–∫–∏
–ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π. –°—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ Containerlab
‚Äî –ø—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ —à–∏—Ä–æ–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –û–¥–∏–Ω –∏–∑
–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π [[https://juliopdx.com/2021/12/10/my-journey-and-experience-with-containerlab/][–æ—Ç–º–µ—Ç–∏–ª]] –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ [[https://docs.ansible.com/ansible/latest/getting_started/get_started_inventory.html][–∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏]] Ansible –∏
–ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ [[https://pynet.twb-tech.com/blog/nornir-an-introduction.html][Nornir]], —É–ø—Ä–æ—â–∞—é—â–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã–º–∏
—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏. –¢–∞–∫, —Å –ø–æ–º–æ—â—å—é Containerlab –æ–Ω –≤–æ—Å—Å–æ–∑–¥–∞–ª —Ç–æ–ø–æ–ª–æ–≥–∏—é —Å —á–µ—Ç—ã—Ä—å–º—è
–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞–º–∏ –Ω–∞ –±–∞–∑–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ [[https://ru.wikipedia.org/wiki/OSPF][OSPF]] (Open Shortest Path First) –∏ [[https://ru.wikipedia.org/wiki/Border_Gateway_Protocol][BGP]]
(Border Gateway Protocol).

*** Mininet

–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —Å–µ—Ç–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
—Å–µ—Ç–µ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ OpenFlow –∏ SDN. –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –Ω–∞
–±–∞–∑–µ [[https://ru.wikipedia.org/wiki/OpenFlow][OpenFlow]] –º–æ–∂–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏
–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏.

–£–∑–ª—ã —Å–µ—Ç–∏ –≤ Mininet [[https://github.com/mininet/mininet][–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç]] —Å–æ–±–æ–π bash-–ø—Ä–æ—Ü–µ—Å—Å—ã, –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –≤ —Å–µ—Ç–µ–≤–æ–º
–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏–º—ë–Ω. –¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ö–æ—Å—Ç—ã –Ω–∞ –æ–¥–Ω–æ–π –º–∞—à–∏–Ω–µ
–¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö –∏–º–µ–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –ï—â–µ –æ–¥–Ω–∞
—Ñ–∏—à–∫–∞ —É—Ç–∏–ª–∏—Ç—ã ‚Äî –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π [[https://opennetworking.org/mininet/][—Ä–µ–∂–∏–º]]. –¢–∞–∫, —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
–º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É —Ç–æ–ø–æ–ª–æ–≥–∏—é. –í —Ç–æ –∂–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏–µ [[https://webcms3.cse.unsw.edu.au/static/uploads/course/COMP3331/16s1/894894253a9d7bb9b3575af5092c2d80c9382bbbf860e4a9364cfae2bcf04cd6/Lab3a.pdf][–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Python
API]] –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏.

–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç [[https://www.brianlinkletter.com/2013/11/mininet-test-drive/][–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏]] –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –°—Ç—ç–Ω—Ñ–æ—Ä–¥—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ
–µ–≥–æ –ø—Ä–∏–º–µ–Ω—è–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –Ω–æ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ–µ–∫—Ç –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
–≤—É–∑–∞, –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫—Ä—É–ø–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, IBM. –í –ø—Ä–æ—à–ª–æ–º
–≥–æ–¥—É –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ [[https://github.com/IBM/k8s-netsim][–≤—ã—à–ª–∞]] —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–µ—Ç–µ–π Kubernetes. –í –Ω–µ–π —Ä–∞–±–æ—á–∏–µ
—É–∑–ª—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —Ö–æ—Å—Ç—ã Mininet, –∞ –ø–æ–¥—ã –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã ‚Äî —Å–µ—Ç–µ–≤—ã–µ
–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω.

Mininet –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ–¥ –ª–∏—Ü–µ–Ω–∑–∏–µ–π [[https://github.com/mininet/mininet/blob/master/LICENSE][BSD-3-Clause]].

*** Kathar√°

–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–¥–µ–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞ [[https://www.netkit.org/][Netkit]]. –ï–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞ [[https://compunet.ing.uniroma3.it/#!/group/compunet][–≥—Ä—É–ø–ø–∞]]
–∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏–∑ –¢—Ä–µ—Ç—å–µ–≥–æ —Ä–∏–º—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ (Roma Tre), –∑–∞–Ω–∏–º–∞—é—â–∏—Ö—Å—è –∏–∑—É—á–µ–Ω–∏–µ–º
—Å–µ—Ç–µ–π –∏ –∞—Å–ø–µ–∫—Ç–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. Kathar√° [[https://github.com/KatharaFramework/Kathara/blob/main/LICENSE][—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç]] –ø–æ
–ª–∏—Ü–µ–Ω–∑–∏–∏ GPL-3.0, –∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å—Ä–µ–¥–Ω–µ–º —Ä–∞–∑ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ
–º–µ—Å—è—Ü–µ–≤.

Kathar√° –ø–æ–∑–≤–æ–ª—è–µ—Ç [[https://www.brianlinkletter.com/2023/02/network-emulators-and-network-simulators-2023/][–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å]] –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –Ω–∞ –±–∞–∑–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Docker –∏–ª–∏
–∫–ª–∞—Å—Ç–µ—Ä–æ–≤ Kubernetes. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Windows, MacOS, Linux, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
SDN, [[https://en.wikipedia.org/wiki/Network_function_virtualization][NFV]] (Network function virtualization), –∞ —Ç–∞–∫–∂–µ BGP –∏ OSPF. –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
—Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ—Ç–æ–≤—ã–µ Docker-–æ–±—Ä–∞–∑—ã –Ω–∞ Debian 11 –∏ –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä AMD64 –∏
ARM64. –û–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–∞–∫–µ—Ç—ã –ü–û –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, [[https://ru.wikipedia.org/wiki/Quagga][Quagga]], [[https://en.wikipedia.org/wiki/FRRouting][FRRouting]],
[[https://p4.org/][P4]] –∏ [[https://en.wikipedia.org/wiki/Open_vSwitch][OpenVSwitch]].

–í —Ü–µ–ª–æ–º Kathar√° —É–ø—Ä–æ—â–∞–µ—Ç –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–æ–ª–æ–≥–∏–π –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–µ—Ç–µ–≤—ã–º
—Å—Ü–µ–Ω–∞—Ä–∏—è–º. –û–Ω–∏ [[https://ripe85.ripe.net/presentations/32-Kathara_RIPE85_FINAL.pdf][–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç]] —Å–æ–±–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–æ–º —Ç–æ–ø–æ–ª–æ–≥–∏–∏ (lab.conf) –∏
—Ñ–∞–π–ª–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –î–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è
—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –º–æ–∂–Ω–æ [[https://www.brianlinkletter.com/2023/02/network-emulators-and-network-simulators-2023/][–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å]] Python API. –†–∞–±–æ—Ç–∞—Ç—å —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º
–º–æ–∂–Ω–æ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –ù–æ –µ—Å—Ç—å –∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –≤–∏–¥–µ
–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ [[https://github.com/KatharaFramework/Netkit-Lab-Generator][Netkit-Lab-Generator]].

*** IMUNES

–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ [[https://github.com/imunes/imunes][—Ä–µ—à–µ–Ω–∏—è]] –º–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–æ—Ç–Ω–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π
—Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –º–∞—à–∏–Ω–µ. –í—Å–µ –±–ª–∞–≥–æ–¥–∞—Ä—è –¥–µ–ª–µ–Ω–∏—é —è–¥—Ä–∞ Linux –∏–ª–∏ FreeBSD –Ω–∞ –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–µ
–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–¥—ã. –í —Ç–æ –∂–µ –≤—Ä–µ–º—è IMUNES –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π
–º–∞—à–∏–Ω–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ UNIX-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ —Å–µ—Ä–≤–µ—Ä—ã
–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.

–ü—Ä–æ–µ–∫—Ç –≤—ã–ø—É—Å—Ç–∏–ª–∏ –ø–æ–¥ –ª–∏—Ü–µ–Ω–∑–∏–µ–π [[https://github.com/imunes/imunes.github.io/blob/master/LICENSE][CC BY 4.0]] –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏–∑
[[https://en.wikipedia.org/wiki/Ericsson_Nikola_Tesla][—Ö–æ—Ä–≤–∞—Ç—Å–∫–æ–π —Ç–µ–ª–µ–∫–æ–º-–∫–æ–º–ø–∞–Ω–∏–∏]], –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–π—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –≤ –ë–µ—Ä–∫–ª–∏,
–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è Boeing, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ FreeBSD Foundation, –∞ —Ç–∞–∫–∂–µ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞
–Ω–∞—É–∫–∏, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ —Å–ø–æ—Ä—Ç–∞ –•–æ—Ä–≤–∞—Ç–∏–∏. –ö–∞–∫ –æ—Ç–º–µ—á–∞—é—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–µ–π—á–∞—Å IMUNES
–ø—Ä–∏–º–µ–Ω—è—é—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ Ericsson Nikola Tesla, –∞ —Ç–∞–∫–∂–µ –≤
–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è—Ö –ó–∞–≥—Ä–µ–±—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.

[[https://habrastorage.org/r/w1560/getpro/habr/upload_files/543/f15/ce7/543f15ce7103ac6e647a1639551206af.jpeg]]

–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: Giorgio Grani / [[http://Unsplash.com][Unsplash.com]]

–í —Ü–µ–ª–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ä—ã–π, –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥—è—Ç —Ä–∞–∑ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ
–ª–µ—Ç. –¢–∞–∫, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å—Ä–∞–∑—É
–Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º —É–∑–ª–µ, —á—Ç–æ–±—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –º–æ–≥
–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å IPv4 –∏ IPv6. –¢–∞–∫–∞—è —Å—Ö–µ–º–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –≤ —É—Å–ª–æ–≤–∏—è—Ö –¥–µ—Ñ–∏—Ü–∏—Ç–∞
IPv4-–∞–¥—Ä–µ—Å–æ–≤ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–µ–≥–æ—Å—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –æ —á—ë–º –º—ã —É–∂–µ [[https://habr.com/ru/companies/vasexperts/articles/759908/][–ø–∏—Å–∞–ª–∏
–Ω–∞ —Ö–∞–±—Ä–µ]].

*** CORE

[[https://www.brianlinkletter.com/open-source-network-simulators/][–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç]] —Å–æ–±–æ–π —Ñ–æ—Ä–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ IMUNES –æ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏–∑ Boeing. –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç
[[https://github.com/coreemu/core][—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å]] —Å–µ—Ç–µ–≤—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥–∫–ª—é—á–∞—Ç—å
–º–æ–¥–µ–ª–∏—Ä—É–µ–º—É—é —Ç–æ–ø–æ–ª–æ–≥–∏—é –∫ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Å–µ—Ç–∏. CORE —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Linux –∏ FreeBSD, –∞
–¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã [[https://ru.wikipedia.org/wiki/XML][XML]]\-—Ñ–∞–π–ª—ã –∏ —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞
Python.

–°–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É—é—Ç —Å–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
—Å–µ—Ç–µ–π –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º. –í 2018 –≥–æ–¥—É –∫–æ–º–∞–Ω–¥–∞ Boeing [[https://github.com/coreemu/core/blob/master/LICENSE][–æ—Ç–∫—Ä—ã–ª–∞]] –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø–æ
–ª–∏—Ü–µ–Ω–∑–∏–∏ BSD-2-Clause. –°–µ–π—á–∞—Å —ç–º—É–ª—è—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö,
—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å IoT-—Å–µ—Ç—è–º–∏.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ [[https://finmars.co.uk/blog/6-common-open-research-emulator-core][–æ—Ç–º–µ—á–∞—é—Ç]] —É–¥–æ–±–Ω—ã–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ø—Ä–æ—Å—Ç—É—é
–Ω–∞—Å—Ç—Ä–æ–π–∫—É —ç–º—É–ª—è—Ü–∏–∏. –£—Ç–∏–ª–∏—Ç–∞ —Ç–∞–∫–∂–µ —É–º–µ–µ—Ç [[https://news.ycombinator.com/item?id=37843837][–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å]] —Ä–∞–±–æ—Ç—É —Å–µ—Ç–µ–π, —Å–æ—Å—Ç–æ—è—â–∏—Ö
–∏–∑ –º–æ–±–∏–ª—å–Ω—ã—Ö –∏ IoT-—É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –ù–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ
[[https://github.com/coreemu/core/discussions/536][—Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è]] —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ä–∞–±–æ—Ç–µ –ø–∞–∫–µ—Ç–æ–≤ [[https://en.wikipedia.org/wiki/FRRouting][FRR]] (Free Range
Routing).

*** Toxiproxy

–†–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑—É—á–∏—Ç—å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π –≤ —Å–µ—Ç–µ–≤–æ–π —Å—Ä–µ–¥–µ ‚Äî
[[https://github.com/Shopify/toxiproxy][–∏–º–∏—Ç–∏—Ä—É–µ—Ç]] –∞–Ω–æ–º–∞–ª–∏–∏ –∏ —Å–±–æ–∏: —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞,
–∏–∑–º–µ–Ω—è–µ—Ç –ø—Ä–æ–ø—É—Å–∫–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—á–µ–µ. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö
—ç–ª–µ–º–µ–Ω—Ç–æ–≤: TCP-–ø—Ä–æ–∫—Å–∏ –∏ –∫–ª–∏–µ–Ω—Ç–∞, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ —Å –Ω–∏–º –ø–æ HTTP. –ü–∏—Å–∞—Ç—å
—Å–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ [[https://github.com/Shopify/toxiproxy-ruby][–ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç]] —Å –ø–æ–º–æ—â—å—é Ruby API. –ö–ª–∏–µ–Ω—Ç
–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –¥–µ–º–æ–Ω—É Toxiproxy –ø–æ HTTP API.

–°—Ä–µ–¥–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏, —Å—Ä–µ–¥–∞–º–∏
—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ò–∑ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –æ—Ç–º–µ—á–∞—é—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
[[https://news.ycombinator.com/item?id=32116969][–ø–æ–¥–¥–µ—Ä–∂–∫–∏]] –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏ [[https://news.ycombinator.com/item?id=37850512][–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞]] –¥–ª—è
—É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.

–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ–º–ø–∞–Ω–∏—è Shopify, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –∫—Ä—É–ø–Ω—É—é e-commerce
–ø–ª–∞—Ç—Ñ–æ—Ä–º—É. –ï–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç –ø–æ –ª–∏—Ü–µ–Ω–∑–∏–∏ MIT, –∞ –∞–ø–¥–µ–π—Ç—ã –≤—ã—Ö–æ–¥—è—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
–≤ –≥–æ–¥.

*** Cloonix

–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç [[https://github.com/clownix/cloonix][–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å]] —Å–µ—Ç–∏ –Ω–∞ –±–∞–∑–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω –∏
–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: –ø–µ—Ä–≤—ã–µ –º–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è [[https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine][KVM]], –≤—Ç–æ—Ä—ã–µ ‚Äî —Å –ø–æ–º–æ—â—å—é
[[https://www.redhat.com/en/topics/containers/what-is-podman][Podman]] –∏ [[https://www.redhat.com/sysadmin/introduction-crun][crun]]. Cloonix –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ Linux-—Å–∏—Å—Ç–µ–º—ã. –°–æ–≥–ª–∞—Å–Ω–æ
–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, —É—Ç–∏–ª–∏—Ç–∞ [[https://clownix.net/doc_stored/build-33-00/html/index.html][–∑–∞—Ç–æ—á–µ–Ω–∞]] –ø–æ–¥ —Ä–∞–∑–≤–µ—Ä—Ç–∫—É –¥–µ–º–æ-—Å–µ—Ç–µ–π, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ
–∞–Ω—Ç–∏—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –ü–û –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å –Ω–∏–º. –õ–∏–Ω–∫–∏ –º–µ–∂–¥—É
—É–∑–ª–∞–º–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ [[https://xakep.ru/2017/09/04/open-vswitch/][Open vSwitch]] ‚Äî –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–º –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–µ –¥–ª—è
—Ä–∞–±–æ—Ç—ã —Å –≥–∏–ø–µ—Ä–≤–∏–∑–æ—Ä–∞–º–∏. –ï–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å –∑–∞–ø—É—â–µ–Ω –≤–Ω—É—Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
–∏–º–µ–Ω, –ø–æ—ç—Ç–æ–º—É –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É–∑–ª–æ–≤ –Ω–µ –Ω—É–∂–Ω—ã [[https://vasexperts.ru/resources/glossary/setevoj-most/][—Å–µ—Ç–µ–≤—ã–µ –º–æ—Å—Ç—ã]].

–ò–∑ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ [[https://blog.51cto.com/u_847102/5273171][–≤—ã–¥–µ–ª—è—é—Ç]] –Ω–∞–≥–ª—è–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∞ —Ç–∞–∫–∂–µ –º–µ—Ö–∞–Ω–∏–∫—É
drag-and-drop, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–ø–æ–ª–æ–≥–∏—é —Å–µ—Ç–∏. –ü–µ—Ä–≤—ã–µ
—É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ [[https://www.opennet.ru/opennews/art.shtml?num=34617][–æ—Ç–Ω–æ—Å—è—Ç—Å—è]] –µ—â—ë –∫ 2012 –≥–æ–¥—É, –Ω–æ —É—Ç–∏–ª–∏—Ç—É –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç
—Ä–∞–∑–≤–∏–≤–∞—Ç—å¬†‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥—è—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ –¥–≤–∞-—Ç—Ä–∏ –º–µ—Å—è—Ü–∞. –ï–µ –º–æ–∂–Ω–æ
–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ –ª–∏—Ü–µ–Ω–∑–∏–∏ [[https://github.com/clownix/cloonix#readme][AGPLv3]].

-----

–ß—Ç–æ –µ—â–µ –ø–æ—á–∏—Ç–∞—Ç—å –≤ –Ω–∞—à–µ–º –±–ª–æ–≥–µ –Ω–∞ –•–∞–±—Ä–µ:

- [[https://habr.com/ru/companies/vasexperts/articles/768990/][FCC, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ 5G: —á—Ç–æ —Å —Å–µ—Ç–µ–≤—ã–º –Ω–µ–π—Ç—Ä–∞–ª–∏—Ç–µ—Ç–æ–º]] ‚Äî —Ä–∞–∑–±–∏—Ä–∞–µ–º
  —Å–∏—Ç—É–∞—Ü–∏—é –≤ –°–®–ê, –Ω–∞—á–∏–Ω–∞—è —Å –¥–µ–π—Å—Ç–≤–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤ –∏ –¥–æ —Å–≤—è–∑–∏ —Ä–∞–∑–≤–∏—Ç–∏—è
  5G –∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Å —Ö–æ–¥–æ–º –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º net
  neutrality.
  
- [[https://habr.com/ru/companies/vasexperts/articles/766782/][–ö–∞–∫ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è
  –∏ –¥–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω local first –ø–æ–¥—Ö–æ–¥]] ‚Äî —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
  —Ä–µ—à–µ–Ω–∏–π –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, –∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø–æ–¥—Ö–æ–¥–∞.
  
- [[https://habr.com/ru/companies/vasexperts/articles/745106/][–£–≥—Ä–æ–∑–∞ DoS –∏
  —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ ICMP]] ‚Äî –æ–±—Å—É–∂–¥–∞–µ–º —Å–≤–µ–∂–∏–µ –ò–ë-–Ω–∞—Ö–æ–¥–∫–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
  –º–µ—Ö–∞–Ω–∏–∑–º–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏, –≤–∞—Ä–∏–∞–Ω—Ç –∞—Ç–∞–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã.
  
- [[https://habr.com/ru/companies/vasexperts/articles/764000/][–ö–∞–∫ –º–µ–Ω—è—é—Ç—Å—è
  –±–æ—Ç–Ω–µ—Ç—ã –∏ –º–µ—Ç–æ–¥—ã –±–æ—Ä—å–±—ã —Å –Ω–∏–º–∏]] ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –æ–±–∑–æ—Ä –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–Ω–µ—Ç–æ–≤, —Ç–∞–∫–∂–µ –ø—Ä–∏–≤–æ–¥–∏–º –∫–µ–π—Å—ã —Å –ª–∏–∫–≤–∏–¥–∞—Ü–∏–µ–π —Ç–∞–∫–∏—Ö —Å–µ—Ç–µ–π. –í
  –∫–∞—á–µ—Å—Ç–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ ‚Äî —Å–æ–±—Ä–∞–ª–∏ –Ω–µ–±–æ–ª—å—à–æ–π
  [[https://habr.com/ru/companies/vasexperts/articles/742238/][–¥–∞–π–¥–∂–µ—Å—Ç]].
  
- [[https://habr.com/ru/companies/vasexperts/articles/750270/][–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ
  –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ—Ü. —Å–µ—Ç–∏]] ‚Äî —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º, –ø–æ—á–µ–º—É –∫—Ä—É–ø–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏
  [[https://habr.com/ru/companies/vasexperts/articles/752678/][–∫–∞–∫–æ–π –≤–Ω–æ—Å—è—Ç
  –≤–∫–ª–∞–¥]] –≤ —ç—Ç—É —Å—Ñ–µ—Ä—É.
  
- [[https://habr.com/ru/companies/vasexperts/articles/771790/][–¢—Ä–µ–Ω–¥ –Ω–∞
  –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —à–∏—Ä–æ–∫–æ–ø–æ–ª–æ—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç]] ‚Äî –≥–æ–≤–æ—Ä–∏–º –æ —Å–ø—Ä–æ—Å–µ –Ω–∞ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ
  —Å–µ—Ç–∏, –ø—Ä–∞–∫—Ç–∏–∫–µ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º–∏ –≤ —Ç–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã, –ø–µ—Ä–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≤
  —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –°–®–ê –∏ –ø–ª–∞–Ω–∞—Ö –ø–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é –ø–æ–¥–æ–±–Ω–æ–π
  –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –¢–∞–∫–∂–µ
  [[https://habr.com/ru/companies/vasexperts/articles/764630/][–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º
  –º–∞—Ç–µ—Ä–∏–∞–ª–µ –Ω–∞ —Ö–∞–±—Ä–µ]] –º—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –æ –≤–ª–∏—è–Ω–∏–∏ —Ç–µ–ª–µ–∫–æ–º-–º–æ–Ω–æ–ø–æ–ª–∏—Å—Ç–æ–≤ –Ω–∞
  —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –º–∞—Å—Å–æ–≤–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –ø–æ–¥–æ–±–Ω—ã—Ö —Å–µ—Ç–µ–π –≤ –°–®–ê.
** WEB interface
- [[https://github.com/phpipam/phpipam][phpipam/phpipam: phpipam development repository]]

* Traffic shaping
- [[https://github.com/hkbakke/tc-gen][hkbakke/tc-gen: Modern linux traffic shaping made easy]]
- [[https://yandex.ru/search/?text=traffic%20shaping%20linux%20ssh%20%22tc%22][traffic shaping linux ssh "tc" ‚Äî –Ø–Ω–¥–µ–∫—Å: –Ω–∞—à–ª–æ—Å—å 3¬†—Ç—ã—Å.¬†—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤]]
- [[https://www.cyberciti.biz/faq/linux-traffic-shaping-using-tc-to-control-http-traffic/][tc: Linux HTTP Outgoing Traffic Shaping (Port 80 Traffic Shaping) - nixCraft]]
- [[https://yandex.ru/turbo/litl-admin.ru/s/linux/shejpim-trafik-linux-pri-pomoshhi-tc.html][–®–µ–π–ø–∏–º —Ç—Ä–∞—Ñ–∏–∫ Linux –ø—Ä–∏ –ø–æ–º–æ—â–∏ tc]]
- [[https://habr.com/ru/post/88624/][–®–µ–π–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ Linux / –•–∞–±—Ä]]
- [[https://www.google.com/search?q=shapping+traffic+arch&hl=en][shapping traffic arch - Google Search]]
- [[https://wiki.archlinux.org/title/Advanced_traffic_control#Using_tc_only][Advanced traffic control - ArchWiki]]
- [[https://yandex.ru/search/?text=iperf%20example][iperf example ‚Äî –Ø–Ω–¥–µ–∫—Å: –Ω–∞—à–ª–æ—Å—å 2¬†–º–ª–Ω¬†—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤]]
- [[https://www.google.com/search?q=iperf+example][iperf example - Google Search]]
- [[https://iperf.fr/iperf-doc.php][iPerf - iPerf3 and iPerf2 user documentation]]
- [[https://openmaniak.com/iperf.php][IPERF - The Easy Tutorial]]
- [[http://netwild.ru/iperf/][Iperf. –ß—Ç–æ —Ç–∞–∫–æ–µ –∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. | Netwild.ru]]
- [[https://losst.ru/kak-polzovatsya-iperf][–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è iperf | Losst]]
- [[https://iperf.fr/][iPerf - The TCP, UDP and SCTP network bandwidth measurement tool]]
- [[https://www.google.com/search?hl=en&q=traffic%20shaping%20linux%20ssh%20%22tc%22%20reserve%20ssh][traffic shaping linux ssh "tc" reserve ssh - Google Search]]
- [[https://wiki.4psa.com/display/KB/How+to+prioritize+VoIP+traffic+in+the+network][How to prioritize VoIP traffic in the network - 4PSA Knowledge Base - 4PSA Wiki]]

* Tunnels
** Misc
 - [[https://github.com/Dreamacro/clash][Dreamacro/clash: A rule-based tunnel in Go.]]
 - [[https://github.com/ekzhang/bore][ekzhang/bore: üï≥ bore is a simple CLI tool for making tunnels to localhost]]
 - obfs proxy
 - port knocking
 - Shadowsocks + v2ray
 - [[https://habr.com/ru/articles/781936/][–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ–¥—Å–µ—Ç–∏ IPv4 —á–µ—Ä–µ–∑ IPIP / –•–∞–±—Ä]]
   - [[https://lwn.net/Articles/614433/][[PATCH v4 net-next 0/7] net: foo-over-udp (fou) [LWN.net]]]
** GRE
 - [[https://community.hetzner.com/tutorials/linux-setup-gre-tunnel][Hetzner Online Community]]
 - [[https://github.com/puxxustc/gre][puxxustc/gre: Userspace GRE tunnel]]
* UPnP
- [[https://github.com/miniupnp/miniupnp][miniupnp/miniupnp: UPnP IGD implementation]]
* Virtual machines
- [[https://github.com/quyse/tracking_trackers][quyse/tracking_trackers: Tracking what tracks us]]

* VLAN

| cisco       | tp-link       |
| access port | untagged port |
| trunk port  | tagged port   |

* VXLAN
- [[https://blog.oddbit.com/post/2021-04-17-vm-ovs-vxlan/][Creating a VXLAN overlay network with Open vSwitch ¬∑ The Odd Bit]]
- [[https://habr.com/ru/post/344326/][–í–≤–µ–¥–µ–Ω–∏–µ –≤ VxLAN / –•–∞–±—Ä]]

* WOL
- [[https://github.com/mdom/wakeonweb][mdom/wakeonweb: Dashboard for wakeonlan]]
- [[https://github.com/vikmik/reboot-on-lan][vikmik/reboot-on-lan: Reboot a remote machine with a Wake-on-LAN packet]]

* –û–ª–∏—Ñ–µ—Ä –ö–Ω–∏–≥–∞ –ø–æ —Å–µ—Ç—è–º 6 –∏–∑–¥–∞–Ω–∏–µ

