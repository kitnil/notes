:PROPERTIES:
:ID:       99e3f313-1b9d-42e2-be41-0bab0f698329
:END:

#+title: Mail

* Services
- [[https://posteo.de/en][Email green, secure, simple and ad-free - posteo.de -]]
- [[https://parsio.io/][Parsio.io | Extract data from emails and any documents]]
- [[https://github.com/s0md3v/ote][s0md3v/ote: Generate Email, Register for anything, Get the OTP/Link]]
- [[https://www.mailersend.com/][Transactional email service that delivers - MailerSend]]
- [[https://emaillabs.io/en][Email Delivery Service | EmailLabs]]
- [[https://tempmailers.com/][Home - TempMailers | Temp Mail - Disposable Temporary Email]]
- [[https://www.mutantmail.com/][Single Mailbox for All Email IDs - Mutant Mail]]
- [[https://toot.aquilenet.fr/@civodul/108415563152256289][Ludovic Courtès: "I’m trying hard to love #PublicInbox, or to even …" - Mastodon (Aquilepouet)]]

* Cheatsheet
- movemail
  : movemail -vv --max-messages=1 --preserve --uidl

- Yandex send mail
  : curl --ssl-reqd --url 'smtps://smtp.yandex.ru:465' --user 'i18n.wugi@yandex.ru:xxxxxxxx' --mail-from 'i18n.wugi@yandex.ru' --mail-rcpt 'i18n.wugi@yandex.ru' --upload-file <(echo -e "From: i18n.wugi@yandex.ru\nTo: i18n.wugi@yandex.ru\nSubject: Test message\n\nHello.\nThis is a test message.\n\n")

* Tools
- [[https://github.com/axllent/mailpit][axllent/mailpit: An email and SMTP testing tool with API for developers]]
- [[https://github.com/leahneukirchen/mblaze][leahneukirchen/mblaze: Unix utilities to deal with Maildir]]
- [[https://github.com/mailhog/MailHog][mailhog/MailHog: Web and API based SMTP testing]]
- [[https://github.com/mailtutan/mailtutan][mailtutan/mailtutan: An SMTP server for test and development environments written in Rust]]
- [[https://github.com/ntk148v/mailproxy][ntk148v/mailproxy: A dead simple mail proxy]]
- [[https://github.com/reacherhq/check-if-email-exists][reacherhq/check-if-email-exists: Check if an email address exists without sending any email, written in Rust. Comes with a ⚙️ HTTP backend.]]
- [[https://github.com/resendlabs/react-email][resendlabs/react-email: 💌 Build and send emails using React]]
- [[https://github.com/sj26/mailcatcher][sj26/mailcatcher: Catches mail and serves it through a dream.]]
- [[https://github.com/stalwartlabs/mail-server][stalwartlabs/mail-server: Secure & Modern All-in-One Mail Server (IMAP, JMAP, SMTP)]]

** Services
- https://postmaster.google.com/

* Programms
- [[https://www.1secmail.com/][1sec MAIL: disposable temporary email]]
- [[https://github.com/AfterShip/email-verifier][AfterShip/email-verifier: A Go library for email verification without sending any emails.]]
- [[https://github.com/brokenprogrammer/mnotify][brokenprogrammer/mnotify: Simple email notification application.]]
- [[https://github.com/charmbracelet/pop][charmbracelet/pop: Send emails from your terminal 📬]]
- [[https://github.com/debricked/dmarc-visualizer][debricked/dmarc-visualizer: Analyse and visualize DMARC results using open-source tools]]
- [[https://github.com/decke/smtprelay][decke/smtprelay: Simple Golang SMTP relay/proxy server]]
- [[https://github.com/deepfence/PacketStreamer][deepfence/PacketStreamer: Distributed tcpdump for cloud native environments]]
- [[https://github.com/foxcpp/maddy][foxcpp/maddy: ✉️ Composable all-in-one mail server.]]
- [[https://www.gnu.org/software/anubis/manual/anubis.html][GNU Anubis Manual: GNU Anubis]]
- [[https://github.com/Harry-027/go-notify][Harry-027/go-notify: An email automation solution, written in Golang.]]
- [[https://lightmeter.io/][Home - Lightmeter]]
- [[https://github.com/honest-technology/api.unverified.email][honest-technology/api.unverified.email: A service to help with testing of sending the right emails]]
- [[https://github.com/jdufresne/fakesmtpd][jdufresne/fakesmtpd: Fake SMTP Server]]
- [[https://github.com/Jinnrry/PMail][Jinnrry/PMail: Private EMail Server]]
- [[https://gitlab.com/shackra/goimapnotify][Jorge Javier Araya Navarro / goimapnotify · GitLab]]
- [[https://github.com/knadh/listmonk][knadh/listmonk: High performance, self-hosted newsletter and mailing list manager with a modern dashboard. Go + React.]]
- [[https://maddy.email/][maddy is a mail server with PostgreSQL or CockroachDB database]]
- [[https://github.com/mjl-/mox][mjl-/mox: modern full-featured open source secure mail server for low-maintenance self-hosted email]]
- [[https://luxing.im/mutt-integration-with-gmail-using-oauth/][mutt integration with Gmail using OAuth – Luxing Huang]]
- [[https://github.com/pdobsan/mailctl][pdobsan/mailctl: Provide IMAP/SMTP clients with the capabilities of renewal and authorization of OAuth2 credentials.]]
- [[https://github.com/rtucker/imap2maildir][rtucker/imap2maildir: Backs up an IMAP mailbox to a maildir. Useful for backing up mail stored on free webmail providers, etc.]]
- [[https://github.com/sdushantha/tmpmail][sdushantha/tmpmail: ✉️ A temporary email right from your terminal]]
- [[https://git.sr.ht/~sircmpwn/aerc][~sircmpwn/aerc - sourcehut git]]
- [[https://github.com/stalwartlabs/smtp-server][stalwartlabs/smtp-server: Stalwart SMTP Server]]
- [[https://www.mailpiler.org/wiki/start][start - piler open source email archiving]]
- [[https://github.com/sup-heliotrope/sup][sup-heliotrope/sup: A curses threads-with-tags style email client (mailing list: supmua@googlegroups.com)]]
- [[https://github.com/tchajed/mailboat][tchajed/mailboat: Verified mail server]]
- [[https://github.com/the-djmaze/snappymail][the-djmaze/snappymail: Simple, modern & fast web-based email client]]
- [[https://github.com/tutao/tutanota][tutao/tutanota: Tutanota is an email service with a strong focus on security and privacy that lets you encrypt emails, contacts and calendar entries on all your devices.]]

* Clients
- [[https://github.com/soywod/himalaya][soywod/himalaya: 📫 Minimalist CLI email client, written in Rust.]]
- [[https://github.com/RainLoop/rainloop-webmail][RainLoop/rainloop-webmail: Simple, modern & fast web-based email client]]
** WEB
- [[https://www.mailpile.is/][Mailpile: e-mail that protects your privacy]]
** Notmuch
- [[https://github.com/teythoon/blaecksprutte][teythoon/blaecksprutte spam-tagger working on notmuch databases]]
- [[https://github.com/kmein/much][kmein/much: Minimalistic mail reader / client for notmuch]]
*** Front-end
- [[https://astroidmail.github.io/][Astroid Mail]]

* Spam filter
- [[https://www.rspamd.com/][Rspamd spam filtering system]]
- [[https://www.pyzor.org/en/latest/index.html][Welcome to Pyzor’s documentation! — Pyzor 1.0 documentation]]

* Learning
- [[https://www.learndmarc.com/][Learn and Test DMARC]]

* Libraries
- [[https://github.com/jstedfast/MailKit][jstedfast/MailKit: A cross-platform .NET library for IMAP, POP3, and SMTP.]]

* Gmail
- [[https://github.com/jessfraz/gmailfilters][jessfraz/gmailfilters: A tool to sync Gmail filters from a config file to your account.]]
- [[https://github.com/mbrt/gmailctl][mbrt/gmailctl: Declarative configuration for Gmail filters]]
- [[https://github.com/mxrch/GHunt][mxrch/GHunt: 🕵️‍♂️ Investigate Google Accounts with emails.]]

* debug
- [[https://mailcatcher.me/][MailCatcher]]

** [[https://galaxydata.ru/community/testirovanie-pochtovoy-rassylki-742][Тестирование Почтовой Рассылки - GalaxyData Community]]

Каждый почтовый сервис использует свои собственные алгоритмы проверки почты на
СПАМ, тем не менее, есть весьма полезный сервис, который анализирует письмо и
даёт рекомендации, если есть какие-то проблемы: www.mail-tester.com.

Если же проблема с попаданием в СПАМ уже имеется, есть смысл воспользоваться
инструментами для анализа, которые предоставляют почтовые сервисы:

– Яндекс: postoffice.yandex.ru
– Mail.Ru: postmaster.mail.ru
– Gmail.com: gmail.com/postmaster

* self-hosted
- [[https://github.com/progmaticltd/homebox][progmaticltd/homebox: A set of ansible scripts to build a personal mail server / private cloud / etc.]]
- [[https://gitlab.com/simple-nixos-mailserver/nixos-mailserver][simple-nixos-mailserver / nixos-mailserver · GitLab]]

* Swaks example

#+begin_example
mathieu@berlin ~$ swaks -t guix-ci@gnu.org -s fencepost.gnu.org:587 -tls -a LOGIN
Username: othacehe
Password: xxx
=== Trying fencepost.gnu.org:587...
*** Error connecting to fencepost.gnu.org:587:
*** 	IO::Socket::INET6: connect: timeout
#+end_example

* exim

exim -bhc 8.8.8.8

* Convert
** maildir to mailbox
[[https://wiki.dovecot.org/Migration/MailFormat][Migration/MailFormat - Dovecot Wiki]]
#+begin_example
  #!/usr/bin/env perl
  # dw-maildirtombox.pl
  # dw = Dovecot Wiki :-)
  # NOTE! The output file must not contain single quotes (')!
  # figure out which program to run
  $cmd="reformail -f1";
  system("$cmd </dev/null >/dev/null 2>/dev/null") == 0 or $cmd="formail";
  system("$cmd </dev/null >/dev/null 2>/dev/null") == 0
  or die "cannot find reformail or formail on your \$PATH!\nAborting";
  $dir=$ARGV[0];
  $outputfile=$ARGV[1];
  if (($outputfile eq '') || ($dir eq ''))
  { die "Usage: ./archivemail.pl mailbox outputfile\nAborting"; }
  if (!stat("Maildir/$dir/cur") || !stat("Maildir/$dir/new"))
  { die "Maildir/$dir is not a maildir.\nAborting"; }
  @files = (<Maildir/$dir/cur/*>,<Maildir/$dir/new/*>);
  foreach $file (@files) {
    next unless -f $file; # skip non-regular files
    next unless -s $file; # skip empty files
    next unless -r $file; # skip unreadable files
    $file =~ s/'/'"'"'/;  # escape ' (single quote)
    $run = "cat '$file' | $cmd >>'$outputfile'";
    system($run) == 0 or warn "cannot run \"$run\".";
  }
#+end_example

* Search

- [[https://github.com/filiphanes/fts-elastic][filiphanes/fts-elastic: ElasticSearch FTS implementation for the Dovecot mail server]]
- [[https://doc.dovecot.org/configuration_manual/fts/solr/][Solr FTS Engine — Dovecot documentation]]

* Suggestions

  #+begin_example
    Step 3: Further reading
    Email is as vital to doing business today as the telephone. But like any form
    of communication, email can be abused. What one employee thinks is funny,
    others might find annoying or even harassing.

    Communication with our co-workers can feel like walking through a minefield,
    but most of the time, all it takes is common sense. You don’t know how your
    co-workers are feeling when you send a funny email to everyone at the office.

    Here are some tips to consider:

    Be cautious with humour. Humour can easily get lost in translation without the
    right tone or facial expression.
    Add the email address last when you’re composing an email so that you don’t
    accidentally send it to the wrong person.
    Avoid starting an email with “I.” “I” immediately gives the recipient the
    message that you are more important than the person you are communicating
    with.
    Maintain formality. Treat email with the same respect you would if you were
    writing a letter.
    Never say anything in an email that you wouldn’t say in person.
    Nothing is confidential, so write your emails accordingly.
    Avoid putting words in ALL CAPS.
    Email is just one of many forms of communication. It’s faceless and
    emotionless, and some even claim that it will be the start of World War
    III. Make sure you think twice before hitting “send.”

    Key takeaways:
    Before you send an e-mail, consider if the recipient might find it hurtful
    Do not send inappropriate emails from your work email address
    Let’s use our common sense
  #+end_example

* [[https://www.kraxel.org/blog/2021/11/patch-mail-b4-notmuch/][Processing patch mails with b4 and notmuch]]

Nov 22, 2021 • Gerd Hoffmann

This blog post describes my mail setup, with a focus on how I handle patch email. Lets start with a general mail overview. Not going too deep into the details here, the internet has plenty of documentation and configuration tutorials.
Outgoing mail

Most of my machines have a local postfix configured for outgoing mail. My workstation and my laptop forward all mail (over vpn) to the company internal email server. All I need for this to work is a relayhost line in /etc/postfix/main.cf:

relayhost = [smtp.corp.redhat.com]

Most unix utilities (including git send-email) try to send mails using /usr/sbin/sendmail by default. This tool will place the mail in the postfix queue for processing. The name of the binary is a convention dating back to the days where sendmail was the one and only unix mail processing daemon.
Incoming mail

All my mail is synced to local maildir storage. I'm using offlineimap for the job. Plenty of other tools exist, isync is another popular choice.

Local mail storage has the advantage that reading mail is faster, especially in case you have a slow internet link. Local mail storage also allows to easily index and search all your mail with notmuch.
Filtering mail

I'm using server side filtering. The major advantage is that I always have the same view on all my mail. I can use a mail client on my workstation, the web interface or a mobile phone. Doesn't matter, I always see the same folder structure.
Reading mail

All modern email clients should be able to use maildir folders. I'm using neomutt. I also have used thunderbird and evolution in the past. All working fine.

The reason I use neomutt is that it is simply faster than GUI-based mailers, which matters when you have to handle alot of email. It is also easy very to hook up scripts, which is very useful when it comes to patch processing.
Outgoing patches

I'm using git send-email for the simple cases and git-publish for the more complex ones. Where "simple" typically is single changes (not a patch series) where it is unlikely that I have to send another version addressing review comments.

git publish keeps track of the revisions you have sent by storing a git tag in your repo. It also stores the cover letter and the list of people Cc'ed on the patch, so sending out a new revision of a patch series is much easier than with plain git send-email.

git publish also features config profiles. This is helpful for larger projects where different subsystems use different mailing lists (and possibly different development branches too).
Incoming patches

So, here comes the more interesting part: Hooking scripts into neomutt for patch processing. Lets start with the config (~/.muttrc) snippet:

# patch processing
bind	index,pager	p	noop			# default: print
macro	index,pager	pa	"<pipe-entry>~/.mutt/bin/patch-apply.sh<enter>"
macro	index,pager	pl	"<pipe-entry>~/.mutt/bin/patch-lore.sh<enter>"

First I map the 'p' key to noop (instead of print which is the default configuration), which allows to use two-key combinations starting with 'p' for patch processing. Then 'pa' is configured to run my patch-apply.sh script, and 'pl' runs patch-lore.sh.

Lets have a look at the patch-apply.sh script which applies a single patch:

#!/bin/sh

# store patch
file="$(mktemp ${TMPDIR-/tmp}/mutt-patch-apply-XXXXXXXX)"
trap "rm -f $file" EXIT
cat > "$file"

# find project
source ~/.mutt/bin/patch-find-project.sh
if test "$project" = ""; then
        echo "ERROR: can't figure project"
        exit 1
fi

# go!
clear
cd $HOME/projects/$project
branch=$(git rev-parse --abbrev-ref HEAD)

clear
echo "#"
echo "# try applying patch to $project, branch $branch"
echo "#"

if git am --message-id --3way --ignore-whitespace --whitespace=fix "$file"; then
        echo "#"
        echo "# OK"
        echo "#"
else
        echo "# FAILED, cleaning up"
        cp -v .git/rebase-apply/patch patch-apply-failed.diff
        cp -v "$file" patch-apply-failed.mail
        git am --abort
        git reset --hard
fi

The mail is passed to the script on stdin, so the first thing the script does is to store that mail in a temporary file. Next it goes try figure which project the patch is for. The logic for that is in a separate file so other scripts can share it, see below. Finally try to apply the patch using git am. In case of a failure store both decoded patch and complete email before cleaning up and exiting.

Now for patch-find-project.sh. This script snippet tries to figure the project by checking which mailing list the mail was sent to:

#!/bin/sh
if test "$PATCH_PROJECT" != ""; then
        project="$PATCH_PROJECT"
elif grep -q -e "devel@edk2.groups.io" "$file"; then
        project="edk2"
elif grep -q -e "qemu-devel@nongnu.org" "$file"; then
        project="qemu"
# [ ... more checks snipped ... ]
fi
if test "$project" = ""; then
        echo "Can't figure project automatically."
        echo "Use env var PATCH_PROJECT to specify."
fi

The PATCH_PROJECT environment variable can be used to override the autodetect logic if needed.

Last script is patch-lore.sh. That one tries to apply a complete patch series, with the help of the b4 tool. b4 makes patch series management an order of magnitude simpler. It will find the latest revision of a patch series, bring the patches into the correct order, pick up tags (Reviewed-by, Tested-by etc.) from replies, checks signatures and more.

#!/bin/sh

# store patch
file="$(mktemp ${TMPDIR-/tmp}/mutt-patch-queue-XXXXXXXX)"
trap "rm -f $file" EXIT
cat > "$file"

# find project
source ~/.mutt/bin/patch-find-project.sh
if test "$project" = ""; then
	echo "ERROR: can't figure project"
	exit 1
fi

# find msgid
msgid=$(grep -i -e "^message-id:" "$file" | head -n 1 \
	| sed -e 's/.*<//' -e 's/>.*//')

# go!
clear
cd $HOME/projects/$project
branch=$(git rev-parse --abbrev-ref HEAD)

clear
echo "#"
echo "# try queuing patch (series) for $project, branch $branch"
echo "#"
echo "# msgid: $msgid"
echo "#"

# create work dir
WORK="${TMPDIR-/tmp}/${0##*/}-$$"
mkdir "$WORK" || exit 1
trap 'rm -rf $file "$WORK"' EXIT

echo "# fetching from lore ..."
echo "#"
b4 am	--outdir "$WORK" \
	--apply-cover-trailers \
	--sloppy-trailers \
	$msgid || exit 1

count=$(ls $WORK/*.mbx 2>/dev/null | wc -l)
if test "$count" = "0"; then
	echo "#"
	echo "# got nothing, trying notmuch instead ..."
	echo "#"
	echo "# update db ..."
	notmuch new
	echo "# find thread ..."
	notmuch show \
		--format=mbox \
		--entire-thread=true \
		id:$msgid > $WORK/notmuch.thread
	echo "# process mails ..."
	b4 am	--outdir "$WORK" \
		--apply-cover-trailers \
		--sloppy-trailers \
		--use-local-mbox $WORK/notmuch.thread \
		$msgid || exit 1
	count=$(ls $WORK/*.mbx 2>/dev/null | wc -l)
fi

echo "#"
echo "# got $count patches, trying to apply ..."
echo "#"
if git am -m -3 $WORK/*.mbx; then
	echo "#"
	echo "# OK"
	echo "#"
else
	echo "# FAILED, cleaning up"
	git am --abort
	git reset --hard
fi

First part (store mail, find project) of the script is the same as patch-apply.sh. Then the script goes get the message id of the mail passed in and feeds that into b4. b4 will go try to find the email thread on lore.kernel.org. In case this doesn't return results the script will go query notmuch for the email thread instead and feed that into b4 using the --use-local-mbox switch.

Finally it tries to apply the complete patch series prepared by b4 with git am.

So, with all that in place applying a patch series is just two key strokes in neomutt. Well, almost. I still need an terminal on the side which I use to make sure the correct branch is checked out, to run build tests etc.
