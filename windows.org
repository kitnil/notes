:PROPERTIES:
:ID:       7f1b6f8f-43bc-4fd3-8124-72af003678e5
:END:
#+title: Windows

- [[https://github.com/randyrants/sharpkeys][randyrants/sharpkeys: SharpKeys is a utility that manages a Registry key that allows Windows to remap one key to any other key.]]
- aio-runtimes
- [[https://github.com/shaswata56/WindowsXP][shaswata56/WindowsXP: This is the leaked source code of Windows XP Service Pack 1]]
- [[https://www.workspacer.org/][workspacer - tiling window manager for Windows 10]]
- [[https://github.com/mentebinaria/retoolkit][mentebinaria/retoolkit: Reverse Engineer's Toolkit]]
- [[https://github.com/Tylous/ZipExec][Tylous/ZipExec: A unique technique to execute binaries from a password protected zip]]
- [[https://github.com/paranoidninja/EtwTi-Syscall-Hook][paranoidninja/EtwTi-Syscall-Hook: A simple program to hook the current process to identify the manual syscall executions on windows]]
- [[https://github.com/portapps/portapps][portapps/portapps: 🛰 Collection of portable apps for Windows]]
- [[https://github.com/rgl/elasticsearch-setup][rgl/elasticsearch-setup: elasticsearch oss installer for windows.]]
- [[https://github.com/sdushantha/recycle-bin-themes][sdushantha/recycle-bin-themes: Silly icons for the Windows Recycle Bin]]
- [[https://github.com/BaseMax/FirstAssemblyWindows][BaseMax/FirstAssemblyWindows: Create a tiny Windows graphical application using pure Assembly. (MASM)]]

* AD
- [[https://shellz.club/2021/07/26/obtaining-ntds-dit.html][Dumping Active Directory Credentials | shellz.club]]
- [[https://github.com/OPENCYBER-FR/RustHound][OPENCYBER-FR/RustHound: Active Directory data collector for BloodHound written in rust. 🦀]]

* Android
- [[https://github.com/Paving-Base/APK-Installer][Paving-Base/APK-Installer: An Android Application Installer for Windows]]

* Audio
- [[https://old.reddit.com/r/windows/comments/ftsu8z/need_a_way_to_get_a_list_of_all_audio_output/][Get a list of all audio output devices via command line]]
  : Get-CimInstance win32_sounddevice | fl *
  : wmic sounddev list full

* Awesome
- [[https://github.com/auctors/free-lunch][auctors/free-lunch: A curated list of free Windows software, online services and resources.]]

* Bloat
- [[https://github.com/builtbybel/bloatbox][builtbybel/bloatbox: ☑️🌠 Remove Bloatwares from Windows 10]]
- [[https://github.com/builtbybel/privatezilla][builtbybel/privatezilla: 👀👮🐢🔥Performs a privacy & security check of Windows 10]]
- [[https://github.com/ChrisTitusTech/win10script][ChrisTitusTech/win10script: This is the Ultimate Windows 10 Script from a creation from multiple debloat scripts and gists from github.]]
- [[https://github.com/safing/portmaster][safing/portmaster: Love Freedom - Block Mass Surveillance]]

* BTRFS

#+begin_src markdown
  [Windows on btrfs - The Cool Blog](https://www.lilysthings.org/blog/windows-on-btrfs/)

  > # The Cool Blog
  > 
  > ## 4-20-23: Windows on btrfs
  > 
  > [
  > 
  > Part 2
  > 
  > ](https://www.lilysthings.org/blog/windows-on-btrfs-2/)
  > 
  > Hello and Welcome back to The Cool Blog here on The Cool Site.
  > 
  > So for the past year and a half or so I've been using the fantastic [Windows btrfs driver](https://github.com/maharmstone/btrfs) for easily sharing files between my Windows and Linux dualboot. The driver works great and basically fully supports everything that both operating systems could ever want (and let me tell you transparent compression and copy on write on Windows is so fucking nice). If you dualboot Windows and Linux I highly recommend using this for external drives instead of using NTFS with Linux.
  > 
  > Anyway [maharmstone](https://github.com/maharmstone), the creator of the driver, has also been working on another project called [Quibble](https://github.com/maharmstone/quibble). Quibble is an open source reimplentation of the Windows bootloader that has the incredibly awesome feature of allowing one to boot Windows off of other filesystems. It can boot it off of anything that it has an EFI driver for and that Windows can read. Theoretically nothing is stopping you from booting Windows 11 off of FAT32 (Although I'm sure that Windows would have some issues with that as XP was the last version that let you boot off of FAT32)
  > 
  > Quibble has been something that I had previously messed with in the past but could never get to work. The last release had been from 2021 and I never cared enough to actually compile the much newer source sode. A few weeks ago though there was a new release so I though fuck it and decided to try it. I downloaded the latest release of Quibble, stuck it in my EFI partition, used their [ntfs2btrfs](https://github.com/maharmstone/ntfs2btrfs) tool to convert my existing Windows partition to btrfs, edited the Quibble config file to point to the right partition and rebooted... and immediately forgot this laptop's dumbass UEFI doesn't let me pick an EFI file to boot from. After 10 minutes of me trying to remember how to use efibootmgr I was able to add it to the boot options and actually reboot.
  > 
  > [![](https://www.lilysthings.org/blog/windows-on-btrfs/images/bootmenu.jpg)](https://www.lilysthings.org/blog/windows-on-btrfs/images/bootmenu.jpg)
  > 
  > The Quibble boot menu
  > 
  > The boot menu of Quibble looks like if you took grub, made it HiDPI aware, and added nicer fonts. Considering my failed attempts in the past where it would never find the partition I wasn't expecting much when I selected Windows.
  > 
  > [![](https://www.lilysthings.org/blog/windows-on-btrfs/images/booting.jpg)](https://www.lilysthings.org/blog/windows-on-btrfs/images/booting.jpg)
  > 
  > [![](https://www.lilysthings.org/blog/windows-on-btrfs/images/booting2.jpg)](https://www.lilysthings.org/blog/windows-on-btrfs/images/booting2.jpg)
  > 
  > [![](https://www.lilysthings.org/blog/windows-on-btrfs/images/logonui.jpg)](https://www.lilysthings.org/blog/windows-on-btrfs/images/logonui.jpg)
  > 
  > Holy shit it actually fucking worked.
  > 
  > [![](https://www.lilysthings.org/blog/windows-on-btrfs/images/diskproperties.JPG)](https://www.lilysthings.org/blog/windows-on-btrfs/images/diskproperties.JPG)
  > 
  > I really wasn't expecting it to work. Well since we're at the login screen I signed in and was immediately hearing error sounds even before the desktop loaded. I forgot to take screenshots but it was the AMD stuff from the Microsoft Store failing to launch. This takes us into the one downside (or feature depending on how you see it). "Windows 10 apps", basically things you would get from the Microsoft Store don't work. Your first thought might be "who cares nobody gets anything from the Microsoft Store" but this means that Windows Terminal doesn't work and you're stuck with the shitty default powershell and command prompt apps and I can't play Minecraft Bedrock.
  > 
  > Oh well...
  > 
  > Anyway with it seemingly working perfectly I rebooted into Arch Linux so I could do transparent compression on this. This was when I realized that the ntfs2btrfs program didn't do things perfectly. Immediately when I tried to write anything to it dmesg was filled with errors and the filesystem remounted as read only. As I am an idiot I didn't really know how I could fix this at the moment. Btrfs check said everything was fine.
  > 
  > I decided to make a new btrfs partition and just copy over all the files and see if that would boot. I was shocked to see that it did and now that I had a clean and uncorrupted filesystem it was time for the incredibly dumb idea I had.
  > 
  > There are no directories in the Windows and Linux roots that share the same name so you should be able to boot them both from the same partition without any file conflicts. After a reboot into Linux, installing Arch with pacstrap, and fucking with grub.
  > 
  > [![](https://www.lilysthings.org/blog/windows-on-btrfs/images/rootlinux.jpg)](https://www.lilysthings.org/blog/windows-on-btrfs/images/rootlinux.jpg)
  > 
  > [![](https://www.lilysthings.org/blog/windows-on-btrfs/images/windowsroot.JPG)](https://www.lilysthings.org/blog/windows-on-btrfs/images/windowsroot.JPG)
  > 
  > I see absolutely no way that this could go wrong /s
  > 
  > This kinda just works. The btrfs driver for Windows is incredibly solid so once you get past the bootloader there really isn't anything weird. It just does its thing. One final thought of mine is that since Quibble supports booting Windows from a btrfs subvolume if you wanted to not have to worry about splitting up your SSD for a dual boot you could have Windows and Linux on one partition on separate subvolumes. Honestly that sounds like something I might do (Assuming Windows Update doesn't break this).
  > 
  > Anyway that's all I have this time. This was just a dumb thing I ended up doing tonight and I really needed something to write about.
  > 
  > I don't know how to end things.
#+end_src

* ChatGPT
** How to enter a host namespace inside a windows nanoserver container?

In Windows Nano Server, it is not possible to enter a host namespace directly from within a container. This is because the Nano Server operating system does not include the necessary kernel components to support this feature.

However, there are some workarounds that you can use to achieve similar functionality. One option is to run your container in Hyper-V isolation mode, which creates a lightweight virtual machine for each container instance. With this approach, you can configure the VM to share the same network namespaces as the host, giving your container access to the same networking resources.

Another option is to use a tool like WinNFSd or Dokan to mount the host's file system inside the container. This allows you to access files and directories on the host system from within the container, effectively giving you access to the host namespace.

It's worth noting that both of these approaches come with some limitations and trade-offs, so you should carefully consider your specific needs before deciding which one to use.

** How to control Windows host namespace with Kubernetes?

To control the Windows host namespace with Kubernetes, you can use the Windows Host Process in process (HIP) container runtime. The HIP container runtime allows containers to share the same process namespace as the host, which is required for some scenarios on Windows.

Here are the steps to follow:

    Install the HIP container runtime on your Windows nodes. You can find instructions for installation here: https://github.com/microsoft/hcsshim/blob/master/docs/HIP.md

    Create a Pod with a container that specifies the hostPID: true field in its PodSpec. This will allow the container to share the same process namespace as the host.

    Specify the windowsProcessOptions field in the container's security context with the appropriate settings to configure the container's process on the host. This field supports a variety of options including priority class, job object name, and more.

    Deploy the Pod to your Kubernetes cluster and verify that the container is running with the same process namespace as the host.

Note that using the HIP container runtime requires elevated privileges on the Windows nodes, so be sure to follow best practices for securing your Kubernetes cluster.

* PowerShell DSC

PowerShell DSC stands for Desired State Configuration, and it is a feature of PowerShell, Microsoft's powerful command-line tool for system administration. PowerShell DSC is a configuration management tool that enables you to define the desired state of a Windows host, as well as the configuration of applications and services running on that host.

With PowerShell DSC, you can create declarative configuration scripts in PowerShell that define the following:

    The resources that should be installed on a Windows host, such as software packages or Windows features.
    The configuration settings for those resources, such as registry keys or file permissions.
    The dependencies between different resources, ensuring that they are installed in the correct order.

Once you have defined your desired state configuration script, you can apply it to one or more Windows hosts using PowerShell. PowerShell DSC will compare the current state of the host to the desired state described in the script, and then automatically make changes to bring the host into the desired state.

PowerShell DSC is particularly useful for managing the configuration of large fleets of Windows hosts, such as those used in cloud environments or by service providers. It can help to automate the deployment and management of infrastructure, reducing the risk of configuration errors and improving the reliability of your systems.

** Learning
- [[https://kunaludapi.blogspot.com/2015/09/multiple-ways-to-install-software.html][vGeek: Multiple ways to Install Software remotely on Windows - Method 6 PowerShell DSC (Desired State Configuration)]]
- [[https://habr.com/ru/companies/microsoft/articles/253497/][Быстрая настройка серверов с помощью PowerShell Desired State Configuration / Хабр]]

** [[https://learn.microsoft.com/ru-ru/powershell/dsc/getting-started/wingettingstarted?view=dsc-1.1][Начало работы с Desired State Configuration (DSC) для Windows - PowerShell | Microsoft Learn]]
: Install-Module 'PSDscResources' -Verbose

** Choco

[[https://petri.com/deploying-software-using-desired-state-configuration/][Deploying Software Using Desired State Configuration - Petri IT Knowledgebase]]

There is already a DSC module named cChoco in the PowerShell Gallery. This is
for installing Chocolatey and Chocolatey packages. The (c) prefix in cChoco
does mean that someone in the PowerShell community, not Microsoft, wrote this
module. You need to ensure that this module, as well as any packages you may
install with it, have been vetted according to your company’s policies for
open-source software. To install Chocolatey and subsequently Chocolatey
packages, use the DSC resources contained in the cChoco
module. cChocoInstaller installs the Chocolatey package and
cChocoPackageInstaller installs any Chocolatey package from the repository.

#+begin_example
  Configuration packageDemo {
    Import-DscResource -ModuleName cChoco
    Node TgtPull {
        cChocoinstaller Install {
            InstallDir = "C:\Choco"
            }

        cChocoPackageInstaller Install7Zip {
            Name = '7Zip.install'
            DependsOn = '[cChocoInstaller]Install'
            }
        }
    }
  PackageDemo
#+end_example

* Cheat sheet

- If you're encountering display or graphics issues, you can press
  Ctrl+Shift+Win+B to force Windows to take action. This shortcut alerts the
  system to a potential graphics issue, which results in Windows restarting
  your video driver.

- [[https://github.com/prometheus-community/windows_exporter/issues/459][Only the service and CPU collectors are working · Issue #459 · prometheus-community/windows_exporter]]
  : lodctr /R
  : winmgmt.exe /RESYNCPERF

- Enable administrator account
  : net user administrator /active:yes

- Allow =vagrant= user to listen 8080 port on all networking interfaces
  : etsh http add urlacl url = http://+:8080/ user=vagrant

* Containers
- [[https://github.com/jsturtevant/dockerfiles-windows][jsturtevant/dockerfiles-windows: Docker files based on windows containers]]

* Deprecated
- [[https://github.com/hectorm/docker-qemu-win2000][hectorm/docker-qemu-win2000: A Docker image for Windows 2000 Advanced Server with SP4.]]

* Distributions
- [[https://habr.com/ru/company/tomhunter/blog/501560/][«Я тише шептуна в открытом поле» или что такое Ninjutsu-OS / Хабр]]
- [[https://github.com/pbatard/Fido][pbatard/Fido: A PowerShell script to download Windows ISOs or the UEFI Shell]]
- [[https://github.com/AveYo/MediaCreationTool.bat][AveYo/MediaCreationTool.bat: Universal MCT wrapper script for all Windows 10/11 versions from 1507 to 21H2!]]
- [[https://github.com/ValdikSS/windows2usb][ValdikSS/windows2usb: Windows 7/8/8.1/10/11 ISO to Flash Drive burning utility for Linux (MBR/GPT, BIOS/UEFI, FAT32/NTFS)]]
- [[https://github.com/Atlas-OS/Atlas][Atlas-OS/Atlas: An open and transparent modification of the Windows 10 operating system, designed to optimize performance, and latency.]]
- [[https://github.com/jakejarvis/y2k][jakejarvis/y2k: 💾 Windows Me®, but fully isolated and disposable — the way it was meant to be.]]
- [[https://github.com/pbatard/Fido][pbatard/Fido: A PowerShell script to download Windows ISOs or the UEFI Shell]]
** Windows 11
- [[https://github.com/rcmaehl/WhyNotWin11][rcmaehl/WhyNotWin11: Detection Script to help identify why your PC isn't Windows 11 Release Ready]]
- [[https://github.com/HerMajestyDrMona/Windows11DragAndDropToTaskbarFix][HerMajestyDrMona/Windows11DragAndDropToTaskbarFix: "Windows 11 Drag & Drop to the Taskbar (Fix)" fixes the missing "Drag & Drop to the Taskbar" support in Windows 11. It works with the new Windows 11 taskbar and does not require nasty changes like UndockingDisabled or restoration of the classic taskbar.]]
*** Utilities
- [[https://github.com/ntdevlabs/tiny11builder][ntdevlabs/tiny11builder: Scripts to build a trimmed-down Windows 11 image.]]

* DLL
- [[https://github.com/hotnops/RemoteDebugView][hotnops/RemoteDebugView: A DLL that serves OutputDebugString content over a TCP connection]]
- [[https://github.com/ORCx41/KnownDllUnhook][GitHub - ORCx41/KnownDllUnhook: Replace the .txt section of the current loaded modules from \KnownDlls\ to bypass edrs]]
- [[https://github.com/NUL0x4C/AtomLdr][NUL0x4C/AtomLdr: A DLL loader with advanced evasive features]]

* Drivers
- [[https://github.com/NattyNarwhal/vmwmouse][NattyNarwhal/vmwmouse: VMware mouse driver for Windows 3.1]]

* eBPF
- [[https://learn.microsoft.com/en-us/azure/aks/azure-cni-powered-by-cilium][Configure Azure CNI Powered by Cilium in Azure Kubernetes Service (AKS) (Preview) - Azure Kubernetes Service | Microsoft Learn]]
- [[https://cloudblogs.microsoft.com/opensource/2022/02/22/getting-linux-based-ebpf-programs-to-run-with-ebpf-for-windows/][Getting Linux based eBPF programs to run with eBPF for Windows - Microsoft Open Source Blog]]
- [[https://github.com/microsoft/ebpf-for-windows][microsoft/ebpf-for-windows: eBPF implementation that runs on top of Windows]]

* Explorer
- [[https://github.com/valinet/ExplorerPatcher][valinet/ExplorerPatcher: This project aims to enhance the working environment on Windows]]

* Proxy

Could you recommend free and open source server proxy for Windows?

Yes, here are some free and open-source proxy servers that you can use on Windows:

Squid: Squid is a widely used, full-featured proxy server that can run on Windows.

TinyProxy: TinyProxy is a lightweight proxy server that can run on Windows. It's designed for ease of use and low resource consumption.

Privoxy: Privoxy is a non-caching, privacy-enhancing web proxy that can run on Windows.

HAProxy: HAProxy is a high-performance proxy server that can run on Windows. It's designed for load balancing and proxying HTTP traffic.

All of these proxy servers have active communities, documentation, and are customizable to meet your specific needs. You can choose the one that best fits your requirements.

Could you list more?
Sure, here are some other free and open-source proxy servers for Windows:

Squid
Privoxy
Tiny Proxy
Varnish Cache
Nginx
HAProxy
Apache Traffic Server
Caddy Server
ReverseHTTP
stunnel
You may choose the one that fits your needs the best and try it out.

And more?

Certainly, here are some additional open-source proxy servers for Windows:

*** Squid: a widely-used proxy server for Unix and Linux-based systems, but also available for Windows.
*** Tinyproxy: a lightweight and easy-to-configure proxy server.
*** Privoxy: a non-caching web proxy with advanced filtering capabilities for enhancing privacy, modifying web page data and HTTP headers, controlling access, and removing ads and other obnoxious Internet junk.
*** 3Proxy: a tiny free proxy server, suitable for small network.
**** [[https://www.youtube.com/watch?v=uIwCecQ-Leo][Памятка по настройке]]
1. Настрока сети
2. Скачиваем 3proxy с официального сайта для Windows (Распаковываем на рабочий стол архив)
3. Создаём конфиг 3proxy.txt в папке C:\Users\Администратор\Desktop\3proxy-0.8.11\bin
4. Переходим в командной строке в дирректорию cd C:\Users\Администратор\Desktop\3proxy-0.8.11\bin
5. Устанавливаем 3proxy как службу 3proxy.exe --install 3proxy.txt
6. Проверяем службу 3proxy через диспетчер задач
7. Окрываем порт (диапазон портов) Панель управлени - Система и безопасность - Брандмауэр виндовс - Дополнительные параметры - Правила для входящих подключений - Создать правило - Для порта - Указываем порт - Даём имя правилу.
8. Проверяем прокси
**** My configuration
- Test connection with curl
: curl -v --data-urlencode --proxy socks5://vagrant:$(pass show windows.local/3proxy/admin)@10.0.1.6:1080 ifconfig.co
*** Delegate: an advanced open source proxy server that can function as a HTTP, mail, SOCKS or proxying VPN server.
*** Keep in mind that these servers may require some technical expertise to install, configure and maintain.

* Nameserver

How to show current nameservers in Windows powershell?

In Windows PowerShell, you can use the nslookup command to show the current nameservers. To do this, open the PowerShell prompt and type the following command:

nslookup -querytype=ns

This will display the nameservers for the current computer. If you want to query the nameservers for a specific domain, you can use the following command:

php

nslookup -querytype=ns <domain-name>

Replace <domain-name> with the name of the domain you want to query.

* File systems
- [[https://github.com/billziss-gh/winfsp][billziss-gh/winfsp: Windows File System Proxy - FUSE for Windows]]
- [[https://habr.com/ru/company/ruvds/blog/578292/][Кунг-фу стиля Linux: файловые системы пользовательского пространства теперь доступны и в Windows / Хабр]]
- [[https://github.com/ufrisk/MemProcFS][ufrisk/MemProcFS: The Memory Process File System]]

** NFS

#+begin_example
win+r
shell:startup

mount -o anon \\192.168.0.144\srv S:
mount -o anon \\192.168.0.144\srv\games N:
#+end_example

* ISO

#+begin_src xml
  <disk type='file' device='cdrom'>
    <driver name='qemu' type='raw'/>
    <source file='/srv/lib/admin/Windows 10 (v21h1) x64 PRO by KulHunter v2 (esd) [En].iso'/>
    <target dev='sdb' bus='sata'/>
    <readonly/>
    <boot order='1'/>
    <address type='drive' controller='0' bus='0' target='0' unit='1'/>
  </disk>
#+end_src
* Kubernetes
- [[https://lippertmarkus.com/2021/11/05/k8s-win22-hostprocess/][Getting started with Windows HostProcess Containers in Kubernetes]]
- [[https://kubernetes.io/blog/2022/12/13/windows-host-process-containers-ga/][Kubernetes 1.26: Windows HostProcess Containers Are Generally Available | Kubernetes]]
- [[https://github.com/ptylenda/kubernetes-for-windows][ptylenda/kubernetes-for-windows: Ansible playbooks and Packer templates for creating hybrid Windows/Linux Kubernetes 1.10+ cluster with experimental Flannel pod network (host-gw backend)]]

** Kubelet service
[[https://github.com/sixeyed/k8s-win/blob/master/setup/win-2019-worker.ps1][k8s-win/win-2019-worker.ps1 at master · sixeyed/k8s-win · GitHub]]
#+begin_src powershell
  Param(
      [parameter(Mandatory = $true)] $ManagementIP
  )

  $KUBERNETES_VERSION="1.15.1"

  Start-Service docker  

  # tag the image kube uses for Pause
  docker image pull mcr.microsoft.com/windows/nanoserver:1809
  docker image tag mcr.microsoft.com/windows/nanoserver:1809 microsoft/nanoserver:latest

  # download the Kube binaries
  mkdir -p C:\k\logs
  cd C:\k
  $ProgressPreference=’SilentlyContinue’
  iwr -outf kubernetes-node-windows-amd64.tar.gz "https://dl.k8s.io/v$KUBERNETES_VERSION/kubernetes-node-windows-amd64.tar.gz"

  tar -xkf kubernetes-node-windows-amd64.tar.gz -C C:\k
  mv C:\k\kubernetes\node\bin\*.exe C:\k

  # install all the bits - adapted from
  # https://raw.githubusercontent.com/microsoft/SDN/master/Kubernetes/flannel/start.ps1

  $NetworkMode="overlay"
  $ClusterCIDR="10.244.0.0/16"
  $KubeDnsServiceIP="10.96.0.10"
  $ServiceCIDR="10.96.0.0/12"
  $InterfaceName="Ethernet"
  $LogDir="C:\k`logs"

  $BaseDir = "c:\k"
  $NetworkMode = $NetworkMode.ToLower()
  $NetworkName = "vxlan0"
  $GithubSDNRepository = 'Microsoft/SDN'

  # Use helpers to setup binaries, conf files etc.
  $helper = "c:\k\helper.psm1"
  if (!(Test-Path $helper))
  {
      Start-BitsTransfer "https://raw.githubusercontent.com/$GithubSDNRepository/master/Kubernetes/windows/helper.psm1" -Destination c:\k\helper.psm1
  }
  ipmo $helper

  $install = "c:\k\install.ps1"
  if (!(Test-Path $install))
  {
      Start-BitsTransfer "https://raw.githubusercontent.com/$GithubSDNRepository/master/Kubernetes/windows/install.ps1" -Destination c:\k\install.ps1
  }

  # Download files, move them, & prepare network
  powershell $install -NetworkMode "$NetworkMode" -clusterCIDR "$ClusterCIDR" -KubeDnsServiceIP "$KubeDnsServiceIP" -serviceCIDR "$ServiceCIDR" -InterfaceName "'$InterfaceName'" -LogDir "$LogDir"

  # Register node
  powershell $BaseDir\start-kubelet.ps1 -RegisterOnly -NetworkMode $NetworkMode
  ipmo C:\k\hns.psm1
  RegisterNode

  # run kube components as Windows services - adapted from 
  # https://raw.githubusercontent.com/microsoft/SDN/master/Kubernetes/flannel/register-svc.ps1

  $KubeletSvc="kubelet"
  $KubeProxySvc="kube-proxy"
  $FlanneldSvc="flanneld2"
  $Hostname=$(hostname).ToLower()

  iwr -outf nssm.zip https://nssm.cc/ci/nssm-2.24-101-g897c7ad.zip
  Expand-Archive nssm.zip
  mv C:\k\nssm\nssm-2.24-101-g897c7ad\win64\*.exe C:\k

  # register & start flanneld
  .\nssm.exe install $FlanneldSvc C:\flannel\flanneld.exe
  .\nssm.exe set $FlanneldSvc AppParameters --kubeconfig-file=c:\k\config --iface=$ManagementIP --ip-masq=1 --kube-subnet-mgr=1
  .\nssm.exe set $FlanneldSvc AppEnvironmentExtra NODE_NAME=$Hostname
  .\nssm.exe set $FlanneldSvc AppDirectory C:\flannel
  .\nssm.exe start $FlanneldSvc

  # register & start kubelet
  .\nssm.exe install $KubeletSvc C:\k\kubelet.exe
  .\nssm.exe set $KubeletSvc AppParameters --hostname-override=$Hostname --v=6 --pod-infra-container-image=mcr.microsoft.com/k8s/core/pause:1.0.0 --resolv-conf=""  --enable-debugging-handlers --cluster-dns=$KubeDnsServiceIP --cluster-domain=cluster.local --kubeconfig=c:\k\config --hairpin-mode=promiscuous-bridge --image-pull-progress-deadline=20m --cgroups-per-qos=false  --log-dir=$LogDir --logtostderr=false --enforce-node-allocatable="" --network-plugin=cni --cni-bin-dir=c:\k\cni --cni-conf-dir=c:\k\cni\config
  .\nssm.exe set $KubeletSvc AppDirectory C:\k
  .\nssm.exe start $KubeletSvc

  # register & start kube-proxy
  .\nssm.exe install $KubeProxySvc C:\k\kube-proxy.exe
  .\nssm.exe set $KubeProxySvc AppDirectory c:\k
  GetSourceVip -ipAddress $ManagementIP -NetworkName $NetworkName
  $sourceVipJSON = Get-Content sourceVip.json | ConvertFrom-Json 
  $sourceVip = $sourceVipJSON.ip4.ip.Split("/")[0]
  .\nssm.exe set $KubeProxySvc AppParameters --v=4 --proxy-mode=kernelspace --feature-gates="WinOverlay=true" --hostname-override=$Hostname --kubeconfig=c:\k\config --network-name=vxlan0 --source-vip=$sourceVip --enable-dsr=false --cluster-cidr=$ClusterCIDR --log-dir=$LogDir --logtostderr=false
  .\nssm.exe set $KubeProxySvc DependOnService $KubeletSvc
  .\nssm.exe start $KubeProxySvc
#+end_src

** Windows container support? · Issue #1300 · canonical/microk8s
docker tag mcr.microsoft.com/k8s/core/pause:1.2.0 kubeletwin/pause

* Learning
- [[https://blog.dave.tf/post/new-kubernetes/][A better Kubernetes, from the ground up · blog.dave.tf]]
- [[https://learn.microsoft.com/en-us/powershell/dsc/overview?view=dsc-2.0][Desired State Configuration 2.0 - PowerShell | Microsoft Learn]]
- [[https://github.com/Kyome22/RunCat_for_windows][Kyome22/RunCat_for_windows: A cute running cat animation on your windows taskbar.]]
- [[https://github.com/mytechnotalent/Hacking-Windows][mytechnotalent/Hacking-Windows: A FREE Windows C development course where we will learn the Win32API and reverse engineer each step utilizing IDA Free in both an x86 and x64 environment.]]
- [[https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/extract][Windows commands | Microsoft Learn]]
- [[https://www.youtube.com/watch?v=GgWk1b2pXYA][Язык Си - Как создать и открыть окно с помощью функций WinAPI. - YouTube]]

** What is awk alternative in windows powershell?
In Windows PowerShell, you can use the Select-String cmdlet as an alternative to the awk utility. The Select-String cmdlet allows you to search for text patterns in one or more files and display the matching lines. Here's an example of how you could use Select-String to perform a similar operation to awk:

vbnet
Copy code
Get-Content example.txt | Select-String 'pattern'
In this example, Get-Content is used to read the contents of the file example.txt, and Select-String is used to search for lines that contain the text 'pattern'. The matching lines are then displayed on the console.

You can also use other cmdlets in Windows PowerShell, such as Get-ChildItem and ForEach-Object, to perform more complex text processing operations. For example, you could use the following code to extract specific columns of data from a text file:

javascript
Copy code
Get-Content example.txt | ForEach-Object { $_ -split '\s+' } | Select-Object -Index 2, 4
This code reads the contents of example.txt, splits each line into fields using the -split operator, and then selects the 2nd and 4th fields using Select-Object.

Keep in mind that while Select-String and other Windows PowerShell cmdlets can provide similar functionality to awk, the syntax and operations may be different, so it's a good idea to familiarize yourself with the Windows PowerShell environment before diving into complex operations.

* Linux
- [[https://github.com/Fmstrat/winapps][Fmstrat/winapps: Run Windows apps such as Microsoft Office in Linux (Ubuntu/Fedora) and GNOME/KDE as if they were a part of the native OS, including Nautilus integration.]]
- [[https://www.opennet.ru/opennews/art.shtml?num=56640][Cassowary - обвязка для бесшовной работы с Windows-приложениями в Linux]]

* Menu
- [[https://github.com/novoid/integratethis][novoid/integratethis: Integrate programs or scripts into common tools like Windows Explorer context menu]]
- [[https://github.com/lextm/windowsterminal-shell][lextm/windowsterminal-shell: Install/uninstall scripts for Windows Terminal context menu items]]

* MicroSoft Windows 10 utilities

  [[https://www.youtube.com/watch?v=BXXgbGwEnYw][Chris Titus Tech - The Best Windows 10 Tools I use on every installation]]
  - O&O ShutUp10 :: privacy
  - ninite.com :: packaged utilities

* Networking
- [[https://github.com/henrypp/simplewall][henrypp/simplewall: Simple tool to configure Windows Filtering Platform (WFP) which can configure network activity on your computer.]]
- [[https://github.com/immense/Remotely][immense/Remotely: A remote control and remote scripting solution, built with .NET 5, Blazor, SignalR Core, and WebRTC.]]
- [[https://github.com/miroslavpejic85/p2p][miroslavpejic85/p2p: 🖥️ Remote Desktop P2P based. Portable, No configuration or installation needed, communicate your endpoint to the peer, and vice versa, press connect and enjoy. 🖥️]]
- [[https://github.com/ValdikSS/GoodbyeDPI][ValdikSS/GoodbyeDPI: GoodbyeDPI—Passive Deep Packet Inspection blocker and Active DPI circumvention utility (for Windows)]]
** VPN
*** WireGuard
- [[https://habr.com/ru/post/585962/][WireGuard клиент для Windows на основе BoringTun / Хабр]]
*** L2TP
  - [[https://help.keenetic.com/hc/ru/articles/360000581969-%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BA-VPN-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D1%83-L2TP-IPSec-%D0%B8%D0%B7-Windows][Подключение к VPN-серверу L2TP/IPSec из Windows – Keenetic]]

** iSCI
- [[https://server.vpnwp.com/proxmox/use-your-nas-as-a-steam-library-truenas-iscsi-basics/][Use your NAS as a Steam Library - TrueNAS + iSCSI Basics]]
  - [[https://www.youtube.com/watch?v=9JL-RVUHj6o&t=272s][(68) Use your NAS as a Steam Library - TrueNAS + iSCSI Basics - YouTube]]

** SMB
- [[https://docs.microsoft.com/en-us/troubleshoot/windows-server/networking/guest-access-in-smb2-is-disabled-by-default][Guest access in SMB2 is disabled - Windows Server | Microsoft Docs]]
  1. Open the Local Group Policy Editor (gpedit.msc).
  2. In the console tree, select Computer Configuration > Administrative Templates > Network > Lanman Workstation.
  3. For the setting, right-click Enable insecure guest logons and select Edit.
  4. Select Enabled and select OK.

* Logging
- [[https://github.com/Yamato-Security/EnableWindowsLogSettings][Yamato-Security/EnableWindowsLogSettings: Documentation and scripts to properly enable Windows event logs.]]

* Packer
- [[https://github.com/luciusbono/Packer-Windows10][luciusbono/Packer-Windows10: A Packer build for Windows 10]]
- [[https://github.com/andif888/packer-windows-vsphere-iso][andif888/packer-windows-vsphere-iso: This repo builds automatically Windows VM templates (Windows 11, Windows 10, Server 2019, Server 2022) for VMware vSphere environment using Hashicorp's Packer using freely available Windows Eval ISOs.]]
- [[https://github.com/Baune8D/packer-windows-desktop][Baune8D/packer-windows-desktop: Build a basic Windows desktop image for use with Vagrant.]]

* Productivity

- [[https://github.com/AutoDarkMode/Windows-Auto-Night-Mode][AutoDarkMode/Windows-Auto-Night-Mode: Automatically switches between the dark and light theme of Windows 10 and Windows 11]]
- [[https://github.com/EsportToys/MouseTray][EsportToys/MouseTray: Simple tray app to quickly adjust Windows cursor speed.]]
- [[https://github.com/EsportToys/TPMouse][EsportToys/TPMouse: A virtual trackball for Windows, via vim-like homerow controls.]]
- [[https://github.com/FancyWM/fancywm][FancyWM/fancywm: FancyWM - a dynamic tiling window manager for Windows 10/11]]
- [[https://github.com/google/glazier][google/glazier: A tool for automating the installation of the Microsoft Windows operating system on various device platforms.]]
- [[https://github.com/henrypp/chrlauncher][henrypp/chrlauncher: Small and very fast portable launcher and updater for Chromium.]]
- [[https://github.com/LGUG2Z/yatta][LGUG2Z/yatta: A tiling window manager for Windows 10 based on binary space partitioning]]
- [[https://github.com/M2Team/NanaZip][M2Team/NanaZip: The 7-Zip derivative intended for the modern Windows experience.]]
- [[https://github.com/marticliment/ElevenClock][marticliment/ElevenClock: ElevenClock: Customize Windows 11 taskbar clock]]
- [[https://github.com/mmozeiko/wcap][mmozeiko/wcap: simple and efficient screen recording utility for Windows]]
- [[https://github.com/null-dev/winwait][null-dev/winwait: Execute a commands when processes launch or close - Windows only]]
- [[https://github.com/pit-ray/win-vind][pit-ray/win-vind: You can operate Windows with key bindings like Vim.]]
- [[https://github.com/Sanakan8472/copy-dialog-lunar-lander][Sanakan8472/copy-dialog-lunar-lander: Play lunar lander in you windows file copy dialog]]
- [[https://github.com/Sq00ky/RunAsPasswd][Sq00ky/RunAsPasswd: A RunAs clone with the ability to specify the password as an argument.]]
- [[https://github.com/stnkl/EverythingToolbar][stnkl/EverythingToolbar: Everything integration for the Windows taskbar.]]
- [[https://github.com/tarkah/grout][tarkah/grout: Simple tiling window manager for Windows]]
- [[https://github.com/tenox7/cmdsave][tenox7/cmdsave: dump contents of cmd.exe console window buffer to a file]]
- [[https://github.com/TheJoeFin/Text-Grab][TheJoeFin/Text-Grab: Use OCR in Windows 10 quickly and easily with Text Grab. With optional background process and popups.]]
- [[https://github.com/veler/DevToys][veler/DevToys: A Swiss Army knife for developers.]]
- [[https://github.com/workspacer/workspacer][workspacer/workspacer: a tiling window manager for Windows]]
- [[https://github.com/xmichelo/Beeftext][xmichelo/Beeftext: A text snippet tool for Windows.]]

* Registry
- [[https://github.com/zodiacon/RegExp][zodiacon/RegExp: Registry Explorer - enhanced Registry editor/viewer]]
- [[https://github.com/GossiTheDog/HiveNightmare][GossiTheDog/HiveNightmare: Exploit allowing you to read registry hives as non-admin on Windows 10 and 11]]

* Remote Desktop
- [[https://github.com/ps1337/reinschauer][A PoC to remotely control Windows machines over Websockets.]]
- [[https://woshub.com/how-to-allow-multiple-rdp-sessions-in-windows-10/][How to Allow Multiple RDP Sessions in Windows 10 and 11? | Windows OS Hub]]
- [[https://tecadmin.net/how-to-enable-multiple-rdp-sessions-on-windows-server/][How To Enable Multiple RDP Sessions on Windows Server – TecAdmin]]
- [[https://github.com/quantumcore/paradoxiaRAT][quantumcore/paradoxiaRAT: ParadoxiaRat : Native Windows Remote access Tool.]]
- [[https://serveradmin.ru/top-besplatnyh-programm-dlya-udalyonnogo-dostupa/][Топ 10 бесплатных программ для удалённого доступа — Server Admin]]

* Security
- [[https://github.com/antonioCoco/RemotePotato0][antonioCoco/RemotePotato0: Just another "Won't Fix" Windows Privilege Escalation from User to Domain Admin.]]
- [[https://github.com/cfalta/MicrosoftWontFixList][cfalta/MicrosoftWontFixList: A list of vulnerabilities or design flaws Microsoft does not intend to fix. Since the number is growing, I decided to make a list.]]
- [[https://github.com/bol-van/win10_antishit][bol-van/win10_antishit: windows 10 remove shit functions]]
- [[https://github.com/crazy-max/WindowsSpyBlocker][crazy-max/WindowsSpyBlocker: Block spying and tracking on Windows]]
- [[https://github.com/t3l3machus/hoaxshell][t3l3machus/hoaxshell: An unconventional Windows reverse shell, currently undetected by Microsoft Defender and various other AV solutions, solely based on http(s) traffic.]]

* SSH
- [[https://github.com/billziss-gh/sshfs-win][billziss-gh/sshfs-win: SSHFS For Windows]]

* Terminals
- [[https://conemu.github.io/][ConEmu - Handy Windows Terminal]]

* Tools
- [[https://github.com/0x7c13/Notepads][0x7c13/Notepads: A modern, lightweight text editor with a minimalist design.]]
- [[https://github.com/AbhishekSinhaCoder/Collection-of-Useful-Scripts][AbhishekSinhaCoder/Collection-of-Useful-Scripts: This is a collection of useful scripts from various sources]]
- [[https://github.com/amake/innosetup-docker][amake/innosetup-docker: Docker image to create Windows installer executables with Inno Setup]]
- [[https://github.com/aristocratos/btop4win][aristocratos/btop4win: btop++ for windows]]
- [[https://github.com/cairoshell/cairoshell][cairoshell/cairoshell: Cairo is a customizable, intuitive desktop environment for Windows.]]
- [[https://github.com/ChrisTitusTech/winutil][ChrisTitusTech/winutil: Chris Titus Tech's Windows Utility - Install Programs, Tweaks, Fixes, and Updates]]
- [[https://github.com/clong/DetectionLab][clong/DetectionLab: Automate the creation of a lab environment complete with security tooling and logging best practices]]
- [[https://github.com/Code52/carnac][Code52/carnac: A utility to give some insight into how you use your keyboard]]
- [[https://github.com/countercept/chainsaw][countercept/chainsaw: Rapidly Search and Hunt through Windows Event Logs]]
- [[https://github.com/cyberark/PipeViewer][cyberark/PipeViewer: A tool that shows detailed information about named pipes in Windows]]
- [[https://github.com/d2phap/ImageGlass][d2phap/ImageGlass: 🏞 A lightweight, versatile image viewer]]
- [[https://github.com/diced/zipline][diced/zipline: Zipline is a ShareX/file upload server that is easy to use, packed with features and can be setup in one command!]]
- [[https://github.com/elliot40404/starman][elliot40404/starman: A simple yet intuitive cli app for managing startup applications on windows.]]
- [[https://github.com/felixse/FluentTerminal][felixse/FluentTerminal: A Terminal Emulator based on UWP and web technologies.]]
- [[https://github.com/File-New-Project/EarTrumpet][File-New-Project/EarTrumpet: EarTrumpet - Volume Control for Windows]]
- [[https://github.com/files-community/Files][files-community/Files: Building the best File Manager for Windows]]
- [[https://github.com/firefart/reboot][firefart/reboot: Reboot is a simple golang based windows service that initiates a reboot upon receiving a specific message on a TCP server]]
- [[https://github.com/gerardog/gsudo][gerardog/gsudo: Sudo for Windows]]
- [[https://github.com/gurnec/SetScreenResolution][gurnec/SetScreenResolution: a small Windows utility to change the screen resolution via the command line]]
- [[https://github.com/horsicq/PDBRipper][horsicq/PDBRipper: PDBRipper is a utility for extract an information from PDB-files.]]
- [[https://github.com/jamesstringerparsec/Easy-GPU-PV][jamesstringerparsec/Easy-GPU-PV: A Project dedicated to making GPU Partitioning on Windows easier!]]
- [[https://github.com/LGUG2Z/komokana][LGUG2Z/komokana: Automatic application-aware keyboard layer switching for Windows]]
- [[https://github.com/LGUG2Z/whkd][LGUG2Z/whkd: A simple hotkey daemon for Windows]]
- [[https://github.com/maharmstone/quibble][maharmstone/quibble: Quibble - the custom Windows bootloader]]
- [[https://github.com/medusalix/winmix][medusalix/winmix: Control the volume of individual applications from the command line]]
- [[https://github.com/namazso/OpenHashTab][namazso/OpenHashTab: 📝 File hashing and checking shell extension]]
- [[https://github.com/Neo23x0/Raccine][Neo23x0/Raccine: A Simple Ransomware Vaccine]]
- [[https://github.com/odedshimon/BruteShark][odedshimon/BruteShark: Network Analysis Tool]]
- [[https://github.com/olafhartong/sysmon-modular][olafhartong/sysmon-modular: A repository of sysmon configuration modules]]
- [[https://github.com/persistent-security/SMShell][persistent-security/SMShell: PoC for a SMS-based shell. Send commands and receive responses over SMS from mobile broadband capable computers]]
- [[https://portapps.io/apps/][Portapps - Portable Applications]]
- [[https://learn.microsoft.com/en-us/sysinternals/downloads/procmon][Process Monitor - Sysinternals | Microsoft Learn]]
- [[https://github.com/rcmaehl/MSEdgeRedirect][rcmaehl/MSEdgeRedirect: A Tool to Redirect News, Search, Widgets, Weather and More to Your Default Browser]]
- [[https://github.com/rgl/windows-vagrant][rgl/windows-vagrant: Windows 10/11/2019/2022 Base Vagrant Box (https://app.vagrantup.com/rgl)]]
- [[https://github.com/robiot/AlphaClicker][robiot/AlphaClicker: 🖱️ Windows Autoclicker with a modern ui]]
- [[https://github.com/rocksdanister/lively][rocksdanister/lively: Free and open-source software that allows users to set animated desktop wallpapers and screensavers.]]
- [[https://www.rlatour.com/setvol/index.html][SetVol - free command line utility to set your Windows master volume level]]
- [[https://github.com/SoftEtherVPN/SoftEtherVPN_Stable][SoftEtherVPN/SoftEtherVPN_Stable: Cross-platform multi-protocol VPN software. This repository is officially managed by Daiyuu Nobori, the founder of the project. Pull requests should be sent to the master repository at https://github.com/SoftEtherVPN/SoftEtherVPN.]]
  - [[https://www.comss.ru/page.php?id=3019][SoftEther VPN - Скачать бесплатно. VPN-сервисы]]
- [[https://github.com/veler/DevToys][veler/DevToys: A Swiss Army knife for developers.]]
- [[https://github.com/vitoplantamura/BugChecker][vitoplantamura/BugChecker: SoftICE-like kernel debugger for Windows 11]]
- [[https://github.com/winsw/winsw][winsw/winsw: A wrapper executable that can run any executable as a Windows service, in a permissive license.]]
- [[https://github.com/Wox-launcher/Wox][Wox-launcher/Wox: Launcher for Windows, an alternative to Alfred and Launchy.]]
- [[https://github.com/xanderfrangos/twinkle-tray][xanderfrangos/twinkle-tray: Easily manage the brightness of your monitors in Windows from the system tray]]
- [[https://github.com/yariker/MsiFinder][yariker/MsiFinder: A tool for finding and diagnosing Windows Installer products and components.]]

* TRIM
- Free space on lvm-thin regardless of storage disk type spinner or ssd
  : Optimize-Volume -DriveLetter C -ReTrim -Verbose

* Vagrant
- [[https://github.com/PioneerCode/pioneer-windows-development-environment][PioneerCode/pioneer-windows-development-environment: Create a Windows development enviroment with Packer, Vagrant & Chocolatey]]

* Window manager
- [[https://github.com/LGUG2Z/komorebi][LGUG2Z/komorebi: Another tiling window manager for Windows 10 based on binary space partitioning]]

* WinRM

** Could you show me simple winrm curl example?

Sure, here is a simple WinRM curl example using the Invoke-WebRequest cmdlet in PowerShell:

php

$uri = "http://<winrm_host>:5985/wsman"
$username = "<username>"
$password = "<password>"
$auth = "Basic"
$headers = @{Authorization = "$auth " + [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("$username`:$password"))}

Invoke-WebRequest -Uri $uri -Method POST -Headers $headers -ContentType "application/soap+xml;charset=UTF-8" -Body '<s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope" xmlns:wsmid="http://schemas.dmtf.org/wbem/wsman/identity/1/wsmanidentity.xsd" xmlns:wsm="http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd"><s:Header><wsmid:Identify/></s:Header><s:Body/></s:Envelope>'

Replace <winrm_host>, <username>, and <password> with the appropriate values for your WinRM server.

This example sends an Identify request to the WinRM server, which can be used to verify that the server is running and accessible. If the server is running and accessible, the server will respond with an IdentifyResponse message.

** Same in Bash.

Certainly! Here is a simple WinRM curl example using the curl command in Bash:

bash

winrm_host="<winrm_host>"
username="<username>"
password="<password>"

auth=$(echo -n "$username:$password" | base64)
uri="http://${winrm_host}:5985/wsman"

curl -X POST \
  -H "Authorization: Basic $auth" \
  -H "Content-Type: application/soap+xml;charset=UTF-8" \
  -d '<s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope" xmlns:wsmid="http://schemas.dmtf.org/wbem/wsman/identity/1/wsmanidentity.xsd" xmlns:wsm="http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd"><s:Header><wsmid:Identify/></s:Header><s:Body/></s:Envelope>' \
  $uri

Replace <winrm_host>, <username>, and <password> with the appropriate values for your WinRM server.

This example sends an Identify request to the WinRM server, which can be used to verify that the server is running and accessible. If the server is running and accessible, the server will respond with an IdentifyResponse message.

** Show me how to run powershell script by uploading it via curl in bash.

Sure! Here's an example of how to upload and execute a PowerShell script on a remote Windows host via WinRM using the curl command in Bash:

bash

winrm_host="<winrm_host>"
username="<username>"
password="<password>"
script_path="<path/to/powershell/script.ps1>"

auth=$(echo -n "$username:$password" | base64)
uri="http://${winrm_host}:5985/wsman"

# Encode the PowerShell script as a Base64 string
script_content=$(cat $script_path | base64 -w 0)

# Construct the PowerShell command to execute the script
powershell_command="powershell.exe -encodedCommand $script_content"

# Construct the SOAP request to execute the PowerShell command
soap_request="<s:Envelope xmlns:s='http://www.w3.org/2003/05/soap-envelope' xmlns:wsmid='http://schemas.dmtf.org/wbem/wsman/identity/1/wsmanidentity.xsd' xmlns:wsm='http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd'><s:Header><wsmid:Identify/></s:Header><s:Body><wsm:Invoke><wsm:Action>http://schemas.microsoft.com/wbem/wsman/1/windows/shell/invoke</wsm:Action><wsm:Shell><wsm:InputStreams>stdin</wsm:InputStreams><wsm:OutputStreams>stdout stderr</wsm:OutputStreams></wsm:Shell><wsm:Command>$powershell_command</wsm:Command></wsm:Invoke></s:Body></s:Envelope>"

# Send the SOAP request via WinRM using curl
curl -X POST \
  -H "Authorization: Basic $auth" \
  -H "Content-Type: application/soap+xml;charset=UTF-8" \
  -d "$soap_request" \
  $uri

Replace <winrm_host>, <username>, <password>, and <path/to/powershell/script.ps1> with the appropriate values for your WinRM server and PowerShell script.

This example uploads the PowerShell script to the remote Windows host, encodes it as a Base64 string, and then executes it using the powershell.exe command. The output of the script (both standard output and standard error) is returned in the WinRM response.

** What is SOAP above?

SOAP stands for Simple Object Access Protocol. It is a messaging protocol used to exchange structured information between applications over a network, typically using HTTP or HTTPS as the transport protocol.

SOAP messages are XML-based and consist of an envelope that describes the message, a header that contains optional application-specific information, and a body that contains the actual message content. SOAP messages can be used to invoke remote methods or exchange structured data between applications.

In the context of WinRM, SOAP is used as the underlying protocol for communication between the WinRM client and server. When a WinRM client sends a command or request to a WinRM server, it constructs a SOAP message and sends it to the server over HTTP or HTTPS. The server then processes the request and sends a SOAP response back to the client. The SOAP messages used by WinRM are specific to the WS-Management protocol, which is a web services protocol used for managing systems and devices.

* WSA
- [[https://github.com/alesimula/wsa_pacman][alesimula/wsa_pacman: A GUI package manager and package installer for Windows Subsystem for Android (WSA)]]
- [[https://github.com/voletro/wsa-toolbox][voletro/wsa-toolbox: A Windows 11 application to easily install and use the Windows Subsystem For Android™ package on your computer.]]

* WSL
- [[https://github.com/alesimula/wsa_pacman][alesimula/wsa_pacman: A GUI package manager and package installer for Windows Subsystem for Android (WSA)]]
- [[https://github.com/fortuneteller2k/nix-config][fortuneteller2k/nix-config: NixOS configuration (also on WSL)]]
- [[https://github.com/microsoft/wslg][microsoft/wslg: Enabling the Windows Subsystem for Linux to include support for Wayland and X server related scenarios]]
- [[https://github.com/nix-community/NixOS-WSL][nix-community/NixOS-WSL: NixOS on WSL(2) maintainer=@nzbr]]
- [[https://github.com/pxlrbt/move-wsl][pxlrbt/move-wsl: Easily move your WSL distros VHDX file to a new location.]]
- [[https://github.com/sdrush/nixos-wsl][sdrush/nixos-wsl]]
- [[https://devblogs.microsoft.com/commandline/systemd-support-is-now-available-in-wsl/][Systemd support is now available in WSL! - Windows Command Line]]
- [[https://habr.com/ru/companies/otus/articles/522402/][WSL эксперименты. Часть 2 / Хабр]]
