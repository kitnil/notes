
* Learning
- [[https://github.com/tektoncd/pipeline/commit/c30d3aa0230faab3be210fccac19f7bb7ddd658f][Add HostNetwork Support to PodTemplate in TaskRun Pod · tektoncd/pipeline@c30d3aa]]
  - [[https://github.com/tektoncd/pipeline/blob/c30d3aa0230faab3be210fccac19f7bb7ddd658f/pkg/pod/pod.go][pipeline/pod.go at c30d3aa0230faab3be210fccac19f7bb7ddd658f · tektoncd/pipeline]]
  - [[https://github.com/tektoncd/pipeline/blob/c30d3aa0230faab3be210fccac19f7bb7ddd658f/pkg/apis/pipeline/pod/template.go][pipeline/template.go at c30d3aa0230faab3be210fccac19f7bb7ddd658f · tektoncd/pipeline]]
  - [[https://github.com/tektoncd/pipeline/blob/c82f201a2df3b3e7069e8740cb59fad55648b4ce/docs/podtemplates.md][pipeline/podtemplates.md at c82f201a2df3b3e7069e8740cb59fad55648b4ce · tektoncd/pipeline]]
- [[https://github.com/tektoncd/pipeline/issues/1461][Add structural OpenAPI schema to Tekton CRDs · Issue #1461 · tektoncd/pipeline]]

* ChatGPT

** I need a mechanism in tekton similar to jenkins lock resources. Does it exist?

Yes, Tekton has a feature called "Task Concurrency" which allows you to limit the number of concurrent runs of a Task. This is similar to the "Lockable Resources" plugin in Jenkins.

You can define a TaskRun with a taskRuns section that specifies the maximum number of concurrent runs of a Task. For example:

yaml

apiVersion: tekton.dev/v1beta1
kind: TaskRun
metadata:
  name: my-taskrun
spec:
  taskRef:
    name: my-task
  taskRuns:
    - name: my-task
      maxConcurrency: 1

In this example, the my-task Task can only be run by one TaskRun at a time, because it has maxConcurrency: 1. If another TaskRun tries to run my-task while a previous run is still running, it will be queued until the first run completes.

You can also use a label selector to group related TaskRun objects together and limit concurrency within that group. For example:

yaml

apiVersion: tekton.dev/v1beta1
kind: TaskRun
metadata:
  name: my-taskrun
spec:
  taskRef:
    name: my-task
  taskRuns:
    - name: my-task
      labelSelector:
        matchLabels:
          my-group: "group-1"
      maxConcurrency: 2

In this example, the my-task Task can be run by up to two TaskRuns at a time within the group with the label my-group: "group-1". If more than two TaskRun objects try to run my-task within that group, the excess runs will be queued until the running jobs complete.

Note that Task Concurrency is a feature that is currently in beta in Tekton, so it may be subject to change in the future.

** How tekton could start build?

In Tekton, a build is initiated by creating a PipelineRun object that references a Pipeline and a set of input parameters. When a PipelineRun is created, Tekton creates a TaskRun for each Task in the Pipeline, and then executes each TaskRun in sequence.

Each Task in the Pipeline specifies a set of steps to execute. A Task can run a single container or a sequence of containers, depending on the steps defined in the Task. The containers specified in the Task can be built from source or obtained from an image registry.

Once a TaskRun completes successfully, the PipelineRun creates the next TaskRun in the sequence, until all TaskRuns in the Pipeline have completed successfully. If any TaskRun fails, the PipelineRun is marked as failed, and no further TaskRuns are executed.

Overall, to start a build in Tekton, you need to:

    Create a Pipeline that defines the sequence of Tasks to execute.
    Define the Tasks in the Pipeline, and specify the steps to execute in each Task.
    Create a PipelineRun object that references the Pipeline, and specifies the input parameters for the Pipeline.
    Tekton creates a TaskRun for each Task in the Pipeline, and executes each TaskRun in sequence, until all TaskRuns have completed successfully.

** Could build be started by a webhook?

Yes, Tekton allows you to trigger builds using webhooks. Here are the general steps to set this up:

    Create a TriggerTemplate resource that defines how the incoming webhook payload should be parsed and what pipeline resources it should create. For example:

yaml

apiVersion: tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: my-trigger-template
spec:
  params:
    - name: revision
      description: Git revision to build
      default: main
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineResource
      metadata:
        name: source-repo
      spec:
        type: git
        params:
          - name: url
            value: https://github.com/my-org/my-repo.git
          - name: revision
            value: $(params.revision)

This TriggerTemplate resource defines a parameter named revision and creates a PipelineResource of type git that points to a specific revision of a GitHub repository.

    Create a TriggerBinding resource that maps the incoming webhook payload to the parameters defined in the TriggerTemplate. For example:

yaml

apiVersion: tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: my-trigger-binding
spec:
  params:
    - name: revision
      value: $(body.head_commit.id)

This TriggerBinding resource extracts the head_commit.id field from the incoming webhook payload and maps it to the revision parameter defined in the TriggerTemplate.

    Create a Trigger resource that binds the TriggerTemplate and TriggerBinding together and specifies the event type and namespace to listen for. For example:

yaml

apiVersion: tekton.dev/v1beta1
kind: Trigger
metadata:
  name: my-trigger
spec:
  binding:
    name: my-trigger-binding
  template:
    name: my-trigger-template
  interceptors:
    - cel:
        filter: "body.repository.full_name == 'my-org/my-repo' && body.ref == 'refs/heads/main'"
  eventTypes:
    - push
  namespaceSelector:
    matchNames:
      - my-namespace

This Trigger resource binds the my-trigger-binding and my-trigger-template resources together, specifies that it should listen for push events on the my-namespace namespace, and includes an interceptor that filters out any events that do not match a specific repository and branch.

    Configure your source code hosting provider (e.g. GitHub, GitLab, etc.) to send a webhook payload to the Tekton event listener service whenever a relevant event occurs. The webhook URL should be in the following format: http://<tekton-listener-service>/v1/webhooks/<trigger-binding-name>.

When a relevant webhook event is received, Tekton will create a PipelineRun resource using the Pipeline specified in the TriggerTemplate and the PipelineResources created by the TriggerBinding.
