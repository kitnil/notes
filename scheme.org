:PROPERTIES:
:ID:       5dc36734-8b61-45c8-aa50-9cc5a05e605f
:END:
#+title: Scheme

Minimalist dialect of the [[id:0da5d4f2-d463-4079-b764-a77d3e800de7][Lisp]].

- [[https://github.com/google/schism][google/schism: A self-hosting Scheme to WebAssembly compiler]]
- [[https://github.com/metaphorm/international-scheme][metaphorm/international-scheme: Translating the Scheme programming language to every human language.]]
- [[https://github.com/srfi-explorations/srfi-test][srfi-explorations/srfi-test: Collecting up-to-date test suites for SRFIs]]
- [[https://github.com/srfi-explorations/emacs-srfi/tree/0820be47f39bd63ece2e5b13b1e4a2df49fe663b][srfi-explorations/emacs-srfi at 0820be47f39bd63ece2e5b13b1e4a2df49fe663b]]
- [[https://www.altlinux.org/Scheme][Scheme â€” ALT Linux Wiki]]
- [[http://mumble.net/%257Ecampbell/scheme/style.txt][Riastradh's Lisp Style Rules]]
- http://library.readscheme.org
- https://www.greghendershott.com/fear-of-macros/Transform_.html
- [[https://ecraven.github.io/r7rs-benchmarks/][ecraven.github.io/r7rs-benchmarks/]]
- [[https://call-with.cc/][call-with.cc]]
- [[https://github.com/ufo5260987423/scheme-langserver][ufo5260987423/scheme-langserver: Scheme language server]]

* Operating system
- [[https://github.com/siraben/zkeme80][siraben/zkeme80: An assembler and operating system for the TI-84+ written in Scheme, Forth and Z80 assembly.]]

* Implementations
- [[https://github.com/asskovalev/erlscheme][asskovalev/erlscheme: Basic scheme implemented on top of erlang]]
- [[https://www-sop.inria.fr/indes/fp/Bigloo/][Bigloo]]
** Learning
- [[https://github.com/TFKls/Heath][TFKls/Heath: A simple scheme-like language.]]
- [[https://github.com/fluentpython/lispy][fluentpython/lispy: Learning with Peter Norvig's lis.py interpreter]]
- [[https://beautifulracket.com/explainer/continuations.html][Beautiful Racket: Continuations]]
- [[https://exercism.org/tracks/scheme][Scheme on Exercism]]
- [[https://www.erichgrunewald.com/posts/using-scheme-to-find-the-median-of-two-sorted-integer-lists/][Using Scheme to Find the Median of Two Sorted Integer Lists]]
- [[https://standards.scheme.org/unofficial/errata-corrected-r7rs.pdf][errata-corrected-r7rs.pdf]]
- [[https://schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-2.html#%_toc_start][Revised^5 Report on the Algorithmic Language Scheme]]
** Videos
- [[https://www.twitch.tv/videos/1011771746][(1) Nada Amin's keynote "Staged Relational Interpreters: Running Backwards, Faster" - Twitch]]

* Programs

- [[https://github.com/ebzzry/usync][ebzzry/usync: A simple site-to-site synchronization tool]]

* Misc
- [[https://github.com/kristineorten/sorting-in-scheme][kristineorten/sorting-in-scheme: Implementing sorting algorithms in Scheme]]

* Libraries
- [[https://github.com/etaoins/llambda][etaoins/llambda: Scheme R7RS frontend for LLVM]]

* Snippets

#+BEGIN_SRC scheme
  (use-modules (srfi srfi-9))
  (define-record-type <foo>
    (make-foo x)
    foo?
    (x foo-x))
#+END_SRC
#+begin_example
  scheme@(guile-user)> ,expand (foo-x bar)
  $2 = (let ((s bar))
    (if ((@@ (srfi srfi-9) eq?)
         ((@@ (srfi srfi-9) struct-vtable) s)
         <foo>)
      ((@@ (srfi srfi-9) struct-ref) s 0)
      (let ((s* s))
        ((@@ (srfi srfi-9) throw)
         'wrong-type-arg
         'foo-x
         "Wrong type argument: ~S"
         ((@@ (srfi srfi-9) list) s*)
         ((@@ (srfi srfi-9) list) s*)))))
#+end_example

#+begin_src scheme
  (define (change e1 e2 lst)
    (cond ((null? lst) '())
          ((eq? e1 (car lst)) (cons e2 (change e1 e2 (cdr lst))))
          (else (cons (car lst) (change e1 e2 (cdr lst))))))

  ;; This function basically changes every element that is equal to e1 to e2 in
  ;; a list.
  ;;
  ;; > (change 1 999 '(1 2 1 3 1 4 1 5 1))
  ;; (999 2 999 3 999 4 999 5 999)
#+end_src

* call/cc

Like return from function:
#+BEGIN_SRC scheme
  (let ((my-val (call/cc (lambda (the-continuation)
                           (display "This will be executed\n")
                           (the-continuation 5)
                           (display "This will not be executed\n")))))
    (display my-val))
#+END_SRC

* SRFI

- [[https://srfi.schemers.org/srfi-166/srfi-166.html][SRFI 166: Monadic Formatting]]
- [[https://srfi.schemers.org/srfi-200/srfi-200.html][SRFI 200: Pattern Matching]]

* Tools

** LSP
Subject: LSP Server for Scheme (and more ...)
Date: Fri, 10 Jun 2022 22:05:12 +0000 (2 hours, 18 minutes, 54 seconds ago)

Hi Guilers!

I want to share a couple of things I have being working on that you may find
useful.

1) I developed an LSP Server for Scheme. For those that don't know the
Language Server Protocol (LSP), it is meant for adding programming language
support for IDEs and editors that implement the protocol (nowadays most of
them support it).

For now I am focusing on Guile 3 and CHICKEN 5. The idea is to write as much
R7RS for common code as possible (like representing documents, fetching word
under cursor etc.) and leave implementation specific code to dedicated
files. So far I managed to implement auto-completion, fetch signature, fetch
documentation and jump to definition.

Repo: https://codeberg.org/rgherdt/scheme-lsp-server

2) An LSP server without a client is quite useless, so I'm also sharing an
emacs-lsp client:

Repo: https://codeberg.org/rgherdt/emacs-lsp-scheme

I will create a PR to melpa for this. Until it is merged, you can clone the
repo somewhere, 'load' it and follow the instructions in the README to
activate it.

Usage is based on interaction with the REPL, which is based on Emacs's
built-in scheme inferior-mode. So you have to load the file (say by typing C-c
C-l on a buffer) in order to get access to symbols imported from other
modules.

Note: for daily use you probably should stick to Geiser, since its Guile
support is obviously much more mature. It can still become useful for other
Schemes though, and is a good way to develop the LSP server without leaving
Emacs ;)

3) The whole idea behind LSP is to improve language support across multiple
IDEs/editors. So I started a proof of concept in VS Code:

https://codeberg.org/rgherdt/vscode-scheme-lsp

Since I don't use VS Code, I don't expect spending much time on it. I also
don't know how a lispy LSP client should/could look like in VS Code. If you
have ideas, or want to contribute/take over this, feel free to contact me. It
is not documented nor published yet, but already works for the functionality
mentioned (there are a couple of command to launch a REPL and load files on
it). I will investigate how to automate installation of the LSP server before
publishing it and let you know.

Everything is on an early stage of development, and APIs may change. I tested
it using following software:
- Guile 3.0.8
- Emacs 27.1 and 28.1
- Debian Bullseye and Ubuntu 18.04

Any questions, suggestions, critics and contributions are more than
welcome. We can also reach me on @libera's #guile, #chicken, #scheme channels
by the name rgherdt.

Have a nice weekend you all!

Ricardo
