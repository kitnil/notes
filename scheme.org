#+title: Scheme

Minimalist dialect of the [[file:lisp.org][Lisp]].

- [[https://github.com/google/schism][google/schism: A self-hosting Scheme to WebAssembly compiler]]
- [[https://github.com/metaphorm/international-scheme][metaphorm/international-scheme: Translating the Scheme programming language to every human language.]]
- [[https://github.com/srfi-explorations/srfi-test][srfi-explorations/srfi-test: Collecting up-to-date test suites for SRFIs]]
- [[https://github.com/srfi-explorations/emacs-srfi/tree/0820be47f39bd63ece2e5b13b1e4a2df49fe663b][srfi-explorations/emacs-srfi at 0820be47f39bd63ece2e5b13b1e4a2df49fe663b]]
- [[https://www.altlinux.org/Scheme][Scheme â€” ALT Linux Wiki]]
- [[http://mumble.net/%257Ecampbell/scheme/style.txt][Riastradh's Lisp Style Rules]]
- http://library.readscheme.org
- https://www.greghendershott.com/fear-of-macros/Transform_.html

* Programs

- [[https://github.com/ebzzry/usync][ebzzry/usync: A simple site-to-site synchronization tool]]

* Libraries
- [[https://github.com/etaoins/llambda][etaoins/llambda: Scheme R7RS frontend for LLVM]]

* Snippets

#+BEGIN_SRC scheme
  (use-modules (srfi srfi-9))
  (define-record-type <foo>
    (make-foo x)
    foo?
    (x foo-x))
#+END_SRC
#+begin_example
  scheme@(guile-user)> ,expand (foo-x bar)
  $2 = (let ((s bar))
    (if ((@@ (srfi srfi-9) eq?)
         ((@@ (srfi srfi-9) struct-vtable) s)
         <foo>)
      ((@@ (srfi srfi-9) struct-ref) s 0)
      (let ((s* s))
        ((@@ (srfi srfi-9) throw)
         'wrong-type-arg
         'foo-x
         "Wrong type argument: ~S"
         ((@@ (srfi srfi-9) list) s*)
         ((@@ (srfi srfi-9) list) s*)))))
#+end_example

* call/cc

Like return from function:
#+BEGIN_SRC scheme
  (let ((my-val (call/cc (lambda (the-continuation)
                           (display "This will be executed\n")
                           (the-continuation 5)
                           (display "This will not be executed\n")))))
    (display my-val))
#+END_SRC
