* News

  ixbt 3dnews overclockers anontech

* Sipser

  - automata
  - finite automation

* Wiki
- [[https://acawiki.org/Home][AcaWiki]]

* Helper
- [[https://github.com/emacsmirror/spray][emacsmirror/spray: A speed reading mode]]
- [[https://github.com/laxyapahuja/bunken][laxyapahuja/bunken: A chrome extension to download ebooks directly from Goodreads.]]

* Проф. литература.txt

﻿Порекомендовать, конечно, хочется много всего, но я понимаю, что чем больше будет объем рекомендуемого материала, тем меньше вероятность ознакомления с ним. В связи с этим в качестве необходимого минимума предлагаю 2 книги:
1. Немет, Эви, Снайдер, Гарт, Хейн, Трент, Уэйли, Бэн “Unix и Linux: руководство системного администратора”;
2. Лутц “Изучаем Python".


Обе книги переведены на русский язык, дают минимум необходимой информации для работы на позиции специалиста технической поддержки. После ознакомления с вышеперечисленными книгами и накопления опыта работы в саппорте, можно попробовать выстроить фундамент:
1. курс математического анализа. Конкретный учебник рекомендовать не могу. Предлагаю за основу взять Фихтенгольца “Курс дифференциального и интегрального исчисления”. Это самый простой и доступный учебник по анализу, но он несколько устарел. Как следствие придется дополнить его Тер-Крикоровым с Шабулиным “Курс математического анализа” и Зоричем “Математический анализ”;
2. курс линейной алгебры и аналитической геометрии. Подойдет Умнов;
3. курс теории вероятностей и мат. статистики. Подойдет Хакимуллин;
4. теория систем и системный анализ, можно взять Волкова;
5. теория автоматического управления, Ким;
6. Кормен, “Алгоритмы. Построение и анализ”;
7. Kozierok, “TCP/IP guide”;
8. Таненбаум “Архитектура компьютера”;
9. Таненбаум “Современные операционные системы”;
10. Bovet “Understanding the linux kernel”;
11. курс MIT по базам данных;
Список фундаментальных книг, конечно, нужно дополнять. Это набросок.
Книги, из которых можно получить “прикладные” знания в области разработки корпоративного ПО:
1. Sierra “Head first Java”;
2. Evans “Java in a nutshell”;
3. Bloch “Effective Java”;
4. Goetz “Java concurrency in a practice”;
5. The Java language specification;
6. The Java virtual machine specification;
7. Date “An introduction to database system”;
8. Hernandez “Database design for mere mortals”;
9. Sedgewick “Algorithms”;
10. Schaefer “Pro Spring”;
11. Pascal “Practical issues in database management”;
12. Koskela “Effective unit testing”;
13. West “Head first object-oriented analysis and design”;
14. Freeman “Head first design patterns”;
15. Martin “Clean code”;
16. Robert W. Kernighan Rob Pike "The Practice of Programming”;
17. Rick Kazman “Software architecture in practice";
18. Monson-Haefel “97 Things Every Software Architect Should Know”;
19. Eric J. Evans “Domain driven design”;
20. Nick Tune, Scott Millet “Patterns, Practices and principles of domain-driven design”;
21. Jeff Sussna “Designing Delivery”;
22. Gojko Adzic “Bridging the gap …” и “Specification by example";
23. MSDN patterns & practices;
24. Paul Butcher “Seven Concurrency models in seven weeks”;
25. Мартин "Идеальный программист. Как стать профессионалом разработки ПО” ;
26. Software architecture fundamentals. Курсы Marc Richards и Neal Ford;
27. Joel Spolsky “Joel on Software”;
28. Elliot “Hibernate”;
29. Walls “Spring in action”;
30. Fowler “Patterns of enterprise application architecture”;
31. Fowler “Analysis patterns”;
32. Beck “Implemenation patterns”;
33. Duvall “Continious integration”;
34. Nickoloff “Docker in action”;
35. Bakkum “Mongodb in action”;
36. Schwartz “High performance MySQL”;
Книги, из которых можно получить “прикладные” знания в области обслуживания и построения инфраструктуры:
1. Shaw “Learn C the Hard Way: A clear & Direct Introduction To Modern C Programming”;
2. Kroah-Hartman “Linux device drivers” (автор невероятно отзывчивый человек, отвечает практически на все письма, старается помочь);
3. курсы CCNA/JNCIA, CCNP/JNCIS, CCIE/{JNCIP, JNCIE} - лучший источник практических знаний по сетям;
4. Nickoloff “Docker in action”;
5. Bakkum “Mongodb in action”;
6. Schwartz “High performance MySQL”;
7. Taylor “Learning chef”;
8. Ferguson “Jenkins: The Definitive Guide”;
9. Nelson-Smith “Test-Driven infrastructure with chef”


На практике достаточно часто встречаются ситуации, когда путь обучения идет не от получения фундаментальных знаний к прикладным, а наоборот. Сначала осваиваются простейшие типовые манипуляции, а затем, по мере углубления в предметную область, осваиваются фундаментальные знания. Плюс такого способа обучения заключается в самомотивации (когда можно быстро получить результат, это приятно, и наоборот, когда для получения результата требуются годы изучения и практики, возникает желание все бросить). Минус такого способа обучения в большом количестве ошибок на начальном этапе, узости кругозора, невозможности применения оптимальных решений ввиду личной неосведомленности. Помимо прочего процесс обучения сверху вниз таит в себе риск остановки процесса обучения на этапе получения прикладных навыков, т.к. возникает ложное ощущение всезнания.
В приведенные выше списки не включен огромный пласт литературы, с которой также стоит ознакомиться. Предполагается, что аккуратный читатель по мере получения новых знаний, сможет самостоятельно обнаружить собственные упущения, найти подходящую литературу для их закрытия.
Помимо сказанного выше, стоит добавить, что занимаясь исключительно чтением литературы, стать профессионалом невозможно. Требуется постоянная практика и широкий кругозор. Для получения практических навыков и расширения кругозора, предлагаю участвовать в разработке проектов с открытым исходным кодом. Это не обязательно должны быть популярные проекты вроде spring, docker, mariadb и т.п. Чем менее проект известен, тем больше он нуждается в контрибьюторах, тем выше шансы сделать что-то действительно значимое. Для расширения кругозора нельзя зацикливаться на изучении какой-то одной технологии, приложения или языка. Например, если Вы изучили Java, попробуйте изучить что-то совершенно иное, например lisp или, изучив chef, посмотрите на ansible и puppet. Берите лучшее, что есть во всех проектах. Это, в том числе, поможет углубить знания и улучшить качество их применения.
