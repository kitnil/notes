:PROPERTIES:
:ID:       9c64447f-9474-4b29-9cc4-7be791261d98
:END:
- [[https://github.com/spring-projects-experimental/spring-native?auto_subscribed=false][spring-projects-experimental/spring-native: Spring Native provides beta support for compiling Spring applications to native executables using GraalVM native-image compiler.]]
- [[https://github.com/team-dodn/spring-boot-kotlin-template][team-dodn/spring-boot-kotlin-template: SpringBoot basic structure template based on Kotlin]]

- oleg@guixsd ~$ curl http://localhost:8981/actuator/; echo
  : {"_links":{"self":{"href":"http://localhost:8981/actuator","templated":false},"health":{"href":"http://localhost:8981/actuator/health","templated":false},"health-path":{"href":"http://localhost:8981/actuator/health/{*path}","templated":true},"info":{"href":"http://localhost:8981/actuator/info","templated":false}}}

* Learning
- [[https://github.com/christoph-gardner/springBootTutorial][christoph-gardner/springBootTutorial]]
- [[https://dzone.com/articles/deploying-microservices-spring-cloud-vs-kubernetes][Deploying Microservices: Spring Cloud vs. Kubernetes - DZone Cloud]]
- [[https://www.youtube.com/watch?v=ZIjqDIdFyBw][Getting Started with Spring Authorization Server - YouTube]]
- [[https://github.com/manuelernesto/kotlin-spring-boot-rest-api][manuelernesto/kotlin-spring-boot-rest-api: Sharing how to work with @Kotlin and @spring boot in an uncomplicated way]]
- [[https://piotrminkowski.com/2023/03/13/microservices-with-spring-boot-3-and-spring-cloud/][Microservices with Spring Boot 3 and Spring Cloud]]
- [[https://spring.io/projects/spring-authorization-server][Spring Authorization Server]]
- [[https://piotrminkowski.com/2022/11/03/spring-boot-3-observability-with-grafana/][Spring Boot 3 Observability with Grafana - Piotr's TechBlog]]
- [[https://www.youtube.com/watch?v=vUo3cTE3Y0g][Алексей Нестеров — Spring Cloud в эру Kubernetes - YouTube]]
- [[https://proglib.io/p/spring-data-mongodb][Знакомство со Spring Data MongoDB]]
- [[https://habr.com/ru/articles/755550/][Как скомпилировать Spring Boot приложение в native image с помощью GraalVm и развернуть его с помощью Docker / Хабр]]
- [[https://habr.com/ru/companies/piter/articles/580670/][Книга «Head First. Паттерны проектирования. 2-е издание» / Хабр]]
- [[https://habr.com/ru/company/jugru/blog/341026/][Что такое Spring Cloud и как его готовить – интервью с Евгением Борисовым и Кириллом Толкачёвым / Хабр]]

** Why people use Spring Boot framework?

People use the Spring Boot framework for several reasons:

    Easy to set up: Spring Boot provides an easy way to set up a new project with a minimum amount of configuration required. This makes it easier for developers to get started quickly with a new project.

    Rapid Development: With its out-of-the-box features, developers can save time by not having to write boilerplate code, which speeds up the development process.

    Versatility: Spring Boot is a highly flexible framework that can be used for developing a wide range of applications, from simple microservices to complex, enterprise-level applications.

    Integration with other technologies: Spring Boot provides seamless integration with other popular Java technologies such as Hibernate, Spring Security, and Thymeleaf, making it easier to build comprehensive applications.

    Large Community: Spring Boot has a large and active community of developers who are constantly contributing to its development and improvement. This community provides a wealth of resources and support, making it easier to find answers to any questions that arise during development.

** DTO

In Spring framework, DTO (Data Transfer Object) is a design pattern used to transfer data between layers or components of an application. It is commonly used to encapsulate and transfer data between the presentation layer (UI) and the service or persistence layer.

DTOs are often used to simplify the communication between different layers by providing a standardized way to package and transmit data. They typically contain only the relevant fields and information needed for the specific use case, and they are often immutable.

DTOs can be used to:

1. Transfer data from the database or service layer to the presentation layer.
2. Define the API contract for data exchange between different services or microservices.
3. Aggregate multiple entities or domain objects into a single object to reduce the number of network calls.

DTOs are lightweight objects that usually contain only getters and setters for the data fields they are transferring. They are not intended to contain business logic or perform computations.

In Spring, DTOs are often used in conjunction with mapping frameworks like ModelMapper or MapStruct to easily convert between DTOs and domain entities or other data objects.

The use of DTOs helps in achieving loose coupling between different layers of an application and promotes separation of concerns by keeping the business logic separate from data transfer and presentation concerns.

** Top concepts of the Spring framework that are important to know:

    Inversion of Control (IoC): Spring's core principle is the IoC container, which is responsible for managing the lifecycle of objects and their dependencies. It allows you to declare your dependencies and let the framework handle the object creation and wiring.

    Dependency Injection (DI): DI is a key feature of Spring. It allows you to inject dependencies into a class rather than having the class create or find the dependencies itself. This promotes loose coupling between components and makes testing easier.

    Aspect-Oriented Programming (AOP): AOP complements object-oriented programming by providing a way to modularize cross-cutting concerns such as logging, transaction management, and security. Spring AOP enables you to define aspects that can be applied to multiple components.

    Spring MVC: Spring MVC is a web application framework built on top of the Spring framework. It follows the Model-View-Controller architectural pattern and provides features for building flexible and scalable web applications.

    Spring Boot: Spring Boot is an opinionated framework that simplifies the setup and configuration of Spring applications. It provides a convention-over-configuration approach, autoconfiguration capabilities, and an embedded container, allowing you to quickly get started with Spring development.

    Spring Data: Spring Data is a subproject of the Spring framework that provides a consistent and simplified data access API for working with relational databases, NoSQL databases, and other data storage technologies. It eliminates boilerplate code and provides common CRUD operations and querying capabilities.

    Transaction Management: Spring offers a powerful and flexible framework for transaction management. It supports declarative transaction management using annotations or XML configuration, as well as programmatic transaction management.

    Spring Security: Spring Security is a comprehensive security framework that provides authentication, authorization, and other security features for Spring-based applications. It integrates well with Spring MVC and offers various mechanisms for securing your application.

    Spring Testing: Spring provides a testing framework that supports unit testing, integration testing, and end-to-end testing of Spring applications. It includes features like dependency injection for test classes, support for mocking dependencies, and integration with popular testing frameworks like JUnit and Mockito.

These are just some of the key concepts and features of the Spring framework. Spring offers a vast ecosystem with many more modules and features that cater to different application development needs.

** @Service annotation

The =@Service=  annotation is one of the stereotype annotations provided by the Spring framework. It is used to indicate that a particular class is a service component in the application.

In Spring, a service component represents the business logic layer of an application. It typically contains the implementation of business operations and interacts with repositories, other services, or external systems. The =@Service=  annotation serves as a marker and helps in organizing and identifying such components.

To use the =@Service=  annotation, you need to follow these steps:

1. First, you need to include the =@Service=  annotation on the class declaration of your service component.

#+begin_src java
  @Service
  public class MyService {
      // Service implementation code...
  }
#+end_src

2. Ensure that the class is managed by the Spring container. You can achieve this by either annotating the class with =@Component=  or using component scanning to automatically detect and register the service component.
  
3. You can inject the service component into other components, such as controllers or other services, using dependency injection. For example, you can use the =@Autowired=  annotation to inject the service instance into a controller.
  
#+begin_src java
  @Controller
  public class MyController {

      private final MyService myService;

      @Autowired
      public MyController(MyService myService) {
          this.myService = myService;
      }

      // Controller methods that use the service...
  }
#+end_src

The Spring container will scan for components annotated with =@Service=  and automatically instantiate and manage them as beans. These beans can then be injected into other components, promoting loose coupling and modular development.

It's worth noting that the =@Service= annotation is a specialization of the =@Component= annotation and has the same effect. However, using =@Service=  helps in more accurately conveying the purpose and role of the annotated class within the application's architecture.

* Documentation

- https://spring.io/guides/gs/messaging-rabbitmq/
- https://spring.io/guides/gs/accessing-data-mongodb/
- [[https://seroter.com/2020/01/28/lets-try-out-the-new-durable-replicated-quorum-queues-in-rabbitmq/][Let’s try out the new durable, replicated quorum queues in RabbitMQ – Richard Seroter's Architecture Musings]]
- [[https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-logging][Spring Boot Features]]

* Monitoring
- [[https://github.com/Scalify/spring_exporter][Scalify/spring_exporter: Spring actuator Exporter for https://prometheus.io]]

* Programs
- [[https://github.com/weiwosuoai/WeBlog][weiwosuoai/WeBlog: 📗 Spring Boot + Vue 3.2 + Vite 前后端分离博客]]

* Libraries
- [[https://github.com/spring-projects/spring-vault][spring-projects/spring-vault: Provides familiar Spring abstractions for HashiCorp Vault]]

* Debug
#+begin_src yaml
  logging:
    level:
      root: DEBUG
      org.springframework.web: DEBUG
      com.howtodoinjava: DEBUG
      org.hibernate: DEBUG

  log4j:
    logger:
      org.springframework.web: DEBUG
#+end_src

* Alternatives
- [[https://en.wikipedia.org/wiki/Play_Framework][Play Framework - Wikipedia]]
  - [[https://habr.com/ru/sandbox/64752/][Play framework + Scala — from zero to hero / Хабр]]

* Actuator

- [[https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html][Production-ready Features]]
- https://spring.io/guides/gs/centralized-configuration/

- oleg@guixsd ~$ curl localhost:8981/actuator/refresh -d {} -H "Content-Type: application/json"

- management.endpoints.web.exposure.include=*

- [[https://habr.com/ru/company/otus/blog/650871/][Мониторинг приложения Spring Boot с помощью Micrometer, Prometheus и Grafana, используя пользовательские метрики / Хабр]]
