
* Tools
- [[https://github.com/mehdy/keepalived-exporter][mehdy/keepalived-exporter: Prometheus Keepalived exporter]]

* ChatGPT

** How to say keepalived to become master manually?

To manually force Keepalived to become the master node, you can use the keepalived command with the --takeover option. This option causes Keepalived to immediately take over as the master node, even if the current master is still running.

Here's the command to force Keepalived to become the master:

css

sudo keepalived --takeover

Note that running this command will override the normal behavior of Keepalived, which is to use the VRRP protocol to elect a master node based on priority and other factors. You should only use this command when you need to manually intervene in the Keepalived failover process.

Also, keep in mind that manually forcing Keepalived to become the master node can cause network disruption if it's not done carefully. Make sure that the current master node is no longer functioning before forcing a takeover.

** What other ways to do the same thing?

In addition to the keepalived --takeover command, there are other ways to manually force Keepalived to become the master node:

    Modify the priority of the Keepalived process: Each Keepalived process has a priority value, and the node with the highest priority becomes the master. You can modify the priority of the Keepalived process manually to make it the highest. You can do this by editing the Keepalived configuration file (/etc/keepalived/keepalived.conf) and setting the priority directive to a higher value than the current master node.

    Stop the Keepalived process on the current master: If the current master node is still running but you want to force a takeover, you can stop the Keepalived process on the current master. This will cause Keepalived to detect a failure on the master node and trigger a failover. You can do this by running the sudo service keepalived stop command on the current master node.

    Modify the virtual IP address: The VRRP protocol used by Keepalived relies on a shared virtual IP address that is used by the master node. You can manually modify the virtual IP address to force Keepalived to switch to a new master node. You can do this by editing the Keepalived configuration file (/etc/keepalived/keepalived.conf) and setting the virtual_ipaddress directive to a new IP address that is not currently in use.

Note that these methods should be used with caution, and only when necessary. Manually intervening in the Keepalived failover process can cause network disruption and should only be done when absolutely necessary.

** Could multiple keepalived be running on a single host?

Yes, it is possible to run multiple instances of Keepalived on a single host, as long as each instance uses a unique set of configuration files and IP addresses.

To run multiple instances of Keepalived, you need to create separate configuration files for each instance, and specify a unique vrrp_instance name and virtual IP address for each instance. You can then start each instance of Keepalived using a different configuration file.

For example, to run two instances of Keepalived, you could create two configuration files /etc/keepalived/keepalived-1.conf and /etc/keepalived/keepalived-2.conf, with the following contents:

csharp

# /etc/keepalived/keepalived-1.conf
vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id 1
    priority 100
    virtual_ipaddress {
        192.168.0.10/24
    }
}

# /etc/keepalived/keepalived-2.conf
vrrp_instance VI_2 {
    state MASTER
    interface eth0
    virtual_router_id 2
    priority 100
    virtual_ipaddress {
        192.168.0.20/24
    }
}

In this example, the first instance of Keepalived uses the virtual IP address 192.168.0.10, while the second instance uses the virtual IP address 192.168.0.20. Each instance uses a unique virtual_router_id and vrrp_instance name.

To start the first instance of Keepalived, you could use the following command:

bash

sudo keepalived -f /etc/keepalived/keepalived-1.conf

To start the second instance, you would use a similar command, but specify the path to the second configuration file:

bash

sudo keepalived -f /etc/keepalived/keepalived-2.conf

Keep in mind that running multiple instances of Keepalived can increase complexity and may not be necessary for most use cases. It's important to ensure that each instance is configured correctly and that there are no conflicts between the virtual IP addresses used by each instance.

** Keepalived uses several ports for communication, depending on the configuration and the protocol used. Here are some of the commonly used ports:

    VRRP (Virtual Router Redundancy Protocol) uses UDP port 112.

    The control socket used by Keepalived to communicate with its daemon process uses TCP port 8080 by default, but this can be changed in the configuration file.

    The SNMP (Simple Network Management Protocol) agent used by Keepalived listens on UDP port 161.

    The notification messages sent by Keepalived when a transition occurs can be sent over SMTP (Simple Mail Transfer Protocol) on TCP port 25, or over SNMP traps on UDP port 162.

It's important to note that these ports can be customized in the Keepalived configuration file, so the actual ports used may vary depending on the configuration. Additionally, Keepalived may use other ports depending on the specific features and configuration options used.

** How to find all virtual router id in a network?

To find all virtual router IDs (VRIDs) in a network that is using the Virtual Router Redundancy Protocol (VRRP), you can use various methods depending on your network environment and tools available. Here are a few approaches:

    Network Device Management Interface: If you have access to the management interface of the routers participating in VRRP, you can log in to each device individually and check their configuration or operational status. Look for VRRP-related configurations and identify the VRID values assigned to each router. The exact commands or steps may vary based on the router vendor and operating system.

    Network Monitoring Tools: Utilize network monitoring tools that support VRRP monitoring and discovery. These tools can scan the network, detect VRRP-enabled routers, and provide information about the associated VRIDs. Examples of such tools include Nagios, Zabbix, PRTG Network Monitor, or SolarWinds Network Performance Monitor.

    Network Scanning Utilities: You can use network scanning utilities like Nmap or Angry IP Scanner to scan the network and identify devices running VRRP. These tools can reveal the IP addresses and open ports associated with VRRP-enabled routers. Once you obtain the IP addresses, you can connect to each device individually and retrieve the VRID information.

    Dynamic Host Configuration Protocol (DHCP): In some cases, VRRP routers may be configured as DHCP servers for specific subnets. By inspecting the DHCP lease information on client devices, you may find the IP address of the default gateway, which could correspond to a VRRP router. Then, you can access that router and retrieve the VRID details.

Remember that the specific method to discover VRIDs will depend on your network infrastructure, the management capabilities of your devices, and the tools at your disposal. It's important to consult the documentation or support resources for your networking equipment and related software to find the most appropriate and accurate method for your environment.

** Show me nmap example how to find all virtual router id in a network.

To find all Virtual Router IDs (VRIDs) in a network using Nmap, you can utilize the NSE (Nmap Scripting Engine) scripts specific to the Cisco HSRP protocol. Here's an example command:

nmap -p 1985 --script=hsrp-v2-info <target IP range>

Let's break down the command:

    nmap is the command-line tool itself.
    -p 1985 specifies that we are targeting port 1985, which is the default port used by HSRP (Hot Standby Router Protocol).
    --script=hsrp-v2-info instructs Nmap to use the "hsrp-v2-info" script from its NSE script library.

Replace <target IP range> with the desired IP range or specific IP addresses you want to scan.

Once executed, Nmap will send HSRP-specific requests to each target and retrieve information about the Virtual Router IDs for any devices running HSRP. The results will indicate the discovered VRIDs along with other relevant details.

Note: Ensure that you have permission to scan the network and comply with any legal and ethical guidelines when performing network scanning activities.
