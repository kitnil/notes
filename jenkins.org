
* Learn
- [[https://cheatsheet.dennyzhang.com/cheatsheet-jenkins-groovy-A4][CheatSheet: Jenkins & Groovy – CheatSheet]]
- [[https://github.com/wardviaene/jenkins-course][wardviaene/jenkins-course: This is the repository with all the resources for the Jenkins training on Udemy]]

* Shared libs
- [[https://github.com/wcm-io-devops/jenkins-pipeline-library][wcm-io-devops/jenkins-pipeline-library: wcm.io Jenkins Pipeline Library for CI/CD]]
- [[https://github.com/mschuchard/jenkins-devops-libs][mschuchard/jenkins-devops-libs: Collection of Jenkins Pipeline shared libraries for common DevOps software.]]
- [[https://github.com/fabric8io/fabric8-jenkinsfile-library][fabric8io/fabric8-jenkinsfile-library: This repository contains a library of reusable Jenkinsfiles that you can use on your projects. Its reused by the fabric8 console to associate Jenkinsfiles to projects]]

* Examples
- [[https://github.com/hoto/jenkinsfile-examples][hoto/jenkinsfile-examples: Executable examples of Jenkinsfiles.]]

* Plugins
- https://github.com/jenkinsci/workflow-aggregator-plugin

* Conference
- [[https://github.com/jenkinsci/ui-ux-hackfest-2020/tree/master/presentations][ui-ux-hackfest-2020/presentations at master · jenkinsci/ui-ux-hackfest-2020]]

* Tools

- [[https://github.com/jessfraz/jenkins-dsl][jessfraz/jenkins-dsl: Jenkins DSLs for my Jenkins instance, keeps forks up to date, mirrors repositories to private git, builds all Dockerfiles and more.]]
- [[https://github.com/jenkinsci/ircbot-plugin][jenkinsci/ircbot-plugin: Jenkins ircbot plugin]]
- [[https://github.com/jenkinsci/jenkinsfile-runner-github-actions][jenkinsci/jenkinsfile-runner-github-actions: Jenkins single-shot master GitHub Action POC]]
- [[https://github.com/jenkinsci/jenkinsfile-runner][jenkinsci/jenkinsfile-runner: A command line tool to run Jenkinsfile as a function]]
- [[https://github.com/Nike-Inc/bartlett][Nike-Inc/bartlett: A simple Jenkins command line client to serve your needs.]]
- [[https://github.com/jenkinsci/packaging][jenkinsci/packaging: Native packaging for Jenkins]]

** Configuration
- [[https://github.com/edx/jenkins-configuration][edx/jenkins-configuration: A collection of utilities for configuring a Jenkins instance and its plugins]]

* Tests
- [[https://github.com/jenkinsci/JenkinsPipelineUnit][jenkinsci/JenkinsPipelineUnit: Framework for unit testing Jenkins pipelines]]

* Scripted pipeline
** Mark as skipped
   import org.jenkinsci.plugins.pipeline.modeldefinition.Utils
   Utils.markStageSkippedForConditional(STAGE_NAME)
* NGINX

#+BEGIN_SRC nginx
  server {
      listen 80;
      server_name jenkins.majordomo.ru;
      location / {
          proxy_set_header Access-Control-Allow-Origin *;
          rewrite     ^   https://$server_name$request_uri?;
      }
  }

  server {
      listen 443 ssl;
      server_name jenkins.majordomo.ru;

      ssl on;
      ssl_certificate /etc/nginx/ssl/majordomo/majordomo.ru.pem;
      ssl_certificate_key /etc/nginx/ssl/majordomo/majordomo.ru.key;
      ssl_stapling on;
      ssl_stapling_verify on;
      ssl_trusted_certificate /etc/nginx/ssl/majordomo/ocsp-chain.pem;
      resolver 172.16.103.2 172.16.102.2;
      client_max_body_size 5m;

      location ~ ^/job/webservices/job/apache2-php74/job/buildBadge/lastBuild/badge/ {
          proxy_set_header Access-Control-Allow-Origin *;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-NginX-Proxy true;
          proxy_set_header X-Forwarded-Proto https;
          proxy_set_header If-Range $http_if_range;
          proxy_pass http://jenkins.intr/$uri$is_args$args;
          proxy_request_buffering off;
          proxy_ssl_session_reuse off;
          proxy_set_header Host jenkins.intr;
          proxy_redirect off;
          proxy_send_timeout 1800;
          proxy_read_timeout 1800;
          proxy_connect_timeout 480;
      }

      # # https://jenkins.intr/job/webservices/job/apache2-php73/job/master/lastSuccessfulBuild/artifact/result-test/coverage-data/vm-state-dockerNode/wordpress.png
      # location ~ ^(/job/webservices/job/[0-9a-z]+/job/[0-9a-z]+/[0-9a-z]+/artifact/result-test/coverage-data/vm-state-dockerNode/[0-9a-z]+\.png)$ {
      #     proxy_set_header Access-Control-Allow-Origin *;
      #     proxy_set_header X-Real-IP $remote_addr;
      #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      #     proxy_set_header X-NginX-Proxy true;
      #     proxy_pass https://jenkins.intr/$1;
      #     proxy_ssl_session_reuse off;
      #     proxy_set_header Host $http_host;
      #     proxy_redirect off;
      #     proxy_send_timeout 150;
      #     proxy_read_timeout 150;
      #     proxy_http_version 1.1;
      #     proxy_set_header Connection "";
      #     proxy_buffer_size 128k;
      #     proxy_buffers 4 256k;
      # }

  }

  server {
      listen 80;
      server_name  jenkins jenkins.intr;
      rewrite ^(.*) https://jenkins.intr$1 permanent;
  }
  server {
      listen 443 ssl;
      server_name jenkins jenkins.intr;
      ssl_certificate                 /etc/nginx/ssl/jenkins.intr.pem;
      ssl_certificate_key             /etc/nginx/ssl/jenkins.intr.key;
      ssl on;
      location / {
          include /etc/nginx/ipsets/mjnet.conf;
          include /etc/nginx/ipsets/intr.conf;
          deny all;
          proxy_connect_timeout 480;
          proxy_request_buffering off;
          proxy_send_timeout 1800;
          proxy_read_timeout 1800;
          proxy_pass http://jenkins;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto https;
          proxy_set_header Range $http_range;
          proxy_set_header If-Range $http_if_range;
       }
  }

#+END_SRC

* Plugins

** Chromium

- https://chrome.google.com/webstore/detail/jenkins-status-tab/bpfcpdnjoengdphlnneoilmphaelapnn?hl=en-US

** Jenkins

  - [[https://github.com/jenkinsci/jenkins-scripts/tree/master/scriptler][jenkins-scripts/scriptler at master · jenkinsci/jenkins-scripts]]
    - [[https://plugins.jenkins.io/scriptler/][Scriptler | Jenkins plugin]]
  - [[https://github.com/teh/jenkins-plugins-to-nix/blob/master/metadata.py][jenkins-plugins-to-nix]]
  - [[https://plugins.jenkins.io/view-job-filters][View Job Filters | Jenkins plugin]]
  - [[https://plugins.jenkins.io/extra-columns][Extra Columns | Jenkins plugin]]
  - [[https://plugins.jenkins.io/next-executions][next-executions | Jenkins plugin]]
  - [[https://plugins.jenkins.io/job-dsl][Job DSL | Jenkins plugin]]

* Docker

- [[https://github.com/jenkinsci/docker-ssh-agent][jenkinsci/docker-ssh-agent: Docker image for Jenkins agents connected over SSH]]
- [[https://www.previous.cloudbees.com/node/27416][Triggering Docker pipelines with Jenkins | CloudBees]]
- [[https://www.previous.cloudbees.com/node/27431][Automating Application Releases with Docker | CloudBees]]

* Awesome

- [[https://www.cloudbees.com/resources/devops-radio/episode-62-eli-lilly-nick-liffen-embarks-jenkins-journey][Episode 62: Eli Lilly's Nick Liffen Embarks on the Jenkins Journey]]
- [[https://github.com/sahilsk/awesome-jenkins][sahilsk/awesome-jenkins: A curated list of awesome Jenkins plugins, links and]]

* Cheatsheet

  - Groovy Git author
    #+BEGIN_SRC groovy
      script{
       def COMMITTER_EMAIL = bat(
          script: "git --no-pager show -s --format='%%ae'",
          returnStdout: true).split('\r\n')[2].trim() 
          echo "COMMITTER_EMAIL: ${COMMITTER_EMAIL}" 
      }
    #+END_SRC

  - Declarative libraries
    #+begin_example
      libraries {
        lib('f@1')
      }
    #+end_example

  - [[https://devops.stackexchange.com/questions/2191/how-to-decrypt-jenkins-passwords-from-credentials-xml][encryption - How to decrypt Jenkins passwords from credentials.xml? - DevOps Stack Exchange]]
    #+begin_example
      Luckily there is a hudson.util.Secret.decrypt() function which can be used for this, so:

      In Jenkins, go to: /script page.
      Run the following command: println(hudson.util.Secret.decrypt("{XXX=}"))
      or: println(hudson.util.Secret.fromString("{XXX=}").getPlainText())
      where {XXX=} is your encrypted password. This will print the plain password.

      To do opposite, run:
      println(hudson.util.Secret.fromString("some_text").getEncryptedValue())
    #+end_example

  - Cancell all Jenkins jobs
    #+BEGIN_SRC groovy
      // https://jenkins.intr/script

      import java.util.ArrayList
      import hudson.model.*;
      import jenkins.model.Jenkins

      // Remove everything which is currently queued
      def q = Jenkins.instance.queue
      for (queued in Jenkins.instance.queue.items) {
          q.cancel(queued.task)
      }

      // stop all the currently running jobs
      for (job in Jenkins.instance.items) {
          stopJobs(job)
      }

      def stopJobs(job) {
          if (job in com.cloudbees.hudson.plugins.folder.Folder) {
              for (child in job.items) {
                  stopJobs(child)
              }    
          } else if (job in org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject) {
              for (child in job.items) {
                  stopJobs(child)
              }
          } else if (job in org.jenkinsci.plugins.workflow.job.WorkflowJob) {

              if (job.isBuilding()) {
                  for (build in job.builds) {
                      build.doKill()
                  }
              }
          }
      }
    #+END_SRC

  - [[https://docs.openstack.org/infra/jenkins-job-builder/project_workflow_multibranch.html?highlight=suppress][Multibranch Pipeline Project — jenkins-job-builder 3.2.1.dev2 documentation]]
  - [[https://github.com/jenkinsci][Jenkins]]
  - [[https://jenkins.io/solutions/pipeline/][Pipeline as Code with Jenkins]]
  - [[https://dzone.com/refcardz/continuous-delivery-with-jenkins-workflow?chapter=12][Continuous Delivery With Jenkins Workflow - DZone - Refcardz]]

  - Post build status to GitLab
    [[https://github.com/jenkinsci/gitlab-plugin/issues/462]]
    #+BEGIN_SRC groovy
      post {
          success {
              echo 'posting success to GitLab'updateGitlabCommitStatus(name: 'jenkins-build', state: 'success')
          }
          failure {
              echo 'postinng failure to GitLab'updateGitlabCommitStatus(name: 'jenkins-build', state: 'failed')
          }
      }
    #+END_SRC

  - Post build status to Alerta
    #+BEGIN_SRC shell
      curl -XPOST "https://alerta.wugi.info/api/alert" -H "Authorization: Key NWEDx50esczaQEoIhPkJG_pG4ntQ8FENawq-tcDK" -H "Content-type: application/json" -d "{\"resource\": \"jenkins\", \"event\": \"job.success\", \"environment\": \"Production\", \"severity\": \"major\", \"correlate\": [], \"service\": [\"Linux servers\"], \"group\": null, \"value\": \"FAIL\", \"text\": \"fail job fiore https://jenkins.wugi.info/job/fiore/lastBuild/console\", \"tags\": [], \"attributes\": {}, \"origin\": null, \"type\": null, \"createTime\": \"2019-03-23T20:45:34.393Z\", \"timeout\": null, \"rawData\": null, \"customer\": null\"]\"}"
    #+END_SRC

  - Git my packages
    #+BEGIN_SRC groovy
      node {
          dir("${HOME}/src/guix") {
              GIT_COMMIT_EMAIL = sh (
                  script: "git log --author='Oleg Pykhalov' --format='%s' | awk '/gnu: Add/ { print substr($NF, 1, length($NF)-1) }'",
                  returnStdout: true
              ).trim()
              echo "${GIT_COMMIT_EMAIL}"
          }
      }
    #+END_SRC

    #+BEGIN_SRC groovy
      guix build $(PAGER= git log --author='go.wigust@gmail.com' --format='%s' --grep='gnu: Add' | grep -v 'Revert ' | awk '{ print $3 }' | sed 's|\.||' | sort | grep -v '^sound' | grep -v '^premake4' | tr '\n' ' ') premake
    #+END_SRC

* Misc

https://stackoverflow.com/a/53804057

A relatively safe way to handle this situation is to store your credentials is the credentials system in Jenkins (that way you do not have to include the credentials in the JenkinsFile), and using a deploy token (available for Gitlab 10.7 and later) for the relevant repository. That token allows you to provide read-only rights to the repository.

Step 1 - setup the deploy token in GitLab

From the GitLab documentation

    You can create as many deploy tokens as you like from the settings of your project:

        Log in to your GitLab account.
        Go to the project you want to create Deploy Tokens for.
        Go to Settings > Repository.
        Click on “Expand” on Deploy Tokens section.
        Choose a name and optionally an expiry date for the token.
        Choose the desired scopes.
        Click on Create deploy token.
        Save the deploy token somewhere safe. Once you leave or refresh the page, you won’t be able to access it again.

Step 2 - Saving the deploy token in Jenkins' credentials system

Since the deploy tokens have a username and password, pick that as the type in the steps below. Write down the id you will use in this step (see below) as you will need it in your pipeline declaration.

From the Jenkins documentation

    To add new global credentials to your Jenkins instance:

        If required, ensure you are logged in to Jenkins (as a user with the Credentials > Create permission).
        From the Jenkins home page (i.e. the Dashboard of the Jenkins classic UI), click Credentials > System on the left.
        Under System, click the Global credentials (unrestricted) link to access this default domain.
        Click Add Credentials on the left. Note: If there are no credentials in this default domain, you could also click the add some credentials link (which is the same as clicking the Add Credentials link).
        From the Kind field, choose the type of credentials to add.
        From the Scope field, choose either:

                Global - if the credential/s to be added is/are for a Pipeline project/item. Choosing this option applies the scope of the credential/s to the Pipeline project/item "object" and all its descendent objects.
                System - if the credential/s to be added is/are for the Jenkins instance itself to interact with system administration functions, such as email authentication, agent connection, etc. Choosing this option applies the scope of the credential/s to a single object only.

        Add the credentials themselves into the appropriate fields for your chosen credential type:

            (...)
                Username and password - specify the credential’s Username and Password in their respective fields. (...)

        In the ID field, specify a meaningful credential ID value - for example, jenkins-user-for-xyz-artifact-repository. You can use upper- or lower-case letters for the credential ID, as well as any valid separator character. However, for the benefit of all users on your Jenkins instance, it is best to use a single and consistent convention for specifying credential IDs. Note: This field is optional. If you do not specify its value, Jenkins assigns a globally unique ID (GUID) value for the credential ID. Bear in mind that once a credential ID is set, it can no longer be changed.
        Specify an optional Description for the credential/s.
        Click OK to save the credentials.

Step 3 - Use the credentials in your pipeline declaration

You can use the credentials in your jenkinsFile like so:

pipeline {
  stages {
    stage('Clone stage') {
       steps {
         git url: 'https://gitlab.com/[username]/[my-repo].git', branch: 'master', credentialsId: 'my-gitlab-repo-creds'
       }
    }
  }    
}

In the above example I assume you picked the id my-gitlab-repo-creds in step 2.

* katakoda

** Launch Jenkins

Launch Jenkins as a Docker Container with the following command:

docker run -d -u root --name jenkins \
    -p 8080:8080 -p 50000:50000 \
    -v /root/jenkins_2112:/var/jenkins_home \
    jenkins/jenkins:2.112-alpine

All plugins and configurations get persisted to the host (ssh root@host01) at _/root/jenkins2112. Port 8080 opens the web dashboard, 50000 is used to communicate with other Jenkins agents. Finally, the image has an alpine base to reduce the size footprint.

Load Dashboard
You can load the Jenkins' dashboard via the following URL https://2886795316-8080-cykoria04.environments.katacoda.com/

The username is admin with the password the default 344827fbdbfb40d5aac067c7a07b9230

On your own system, the password can be found via docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword

It may take a couple of seconds for Jenkins to finish starting and be available. In the next steps, you'll use the dashboard to configure the plugins and start building Docker Images.

** Configure Docker Plugin
The first step is to configure the Docker plugin. The plugin is based on a Jenkins Cloud plugin. When a build requires Docker, it will create a "Cloud Agent" via the plugin. The agent will be a Docker Container configured to talk to our Docker Daemon.

The Jenkins build job will use this container to execute the build and create the image before being stopped. The Docker Image will be stored on the configured Docker Daemon. The Image can then be pushed to a Docker Registry ready for deployment.

Task: Install Plugin
Within the Dashboard, select Manage Jenkins on the left.
On the Configuration page, select Manage Plugins.
Manage Plugins page will give you a tabbed interface. Click Available to view all the Jenkins plugins that can be installed.
Using the search box, search for Docker. There are multiple Docker plugins, select Docker using the checkbox under the Cloud Providers header.


Click Install without Restart at the bottom.
The plugins will now be downloaded and installed. Once complete, click the link Go back to the top page.
Your Jenkins server can now be configured to build Docker Images.

** Add Docker Agent
Once the plugins have been installed, you can configure how they launch the Docker Containers. The configuration will tell the plugin which Docker Image to use for the agent and which Docker daemon to run the containers and builds on.

The plugin treats Docker as a cloud provider, spinning up containers as and when the build requires them.

Task: Configure Plugin
This step configures the plugin to communicate with a Docker host/daemon.

Once again, select Manage Jenkins.
Select Configure System to access the main Jenkins settings.
At the bottom, there is a dropdown called Add a new cloud. Select Docker from the list.
The Docker Host URI is where Jenkins launches the agent container. In this case, we'll use the same daemon as running Jenkins, but you could split the two for scaling. Enter the URL tcp://172.17.0.52:2345
Use Test Connection to verify Jenkins can talk to the Docker Daemon. You should see the Docker version number returned.
The Host IP address is the IP of your build agent / Docker Host.

Task: Configure Docker Agent Template
The Docker Agent Template is the Container which will be started to handle your build process.

Click Docker Agent templates... and then Add Docker Template. You can now configure the container options.

Set the label of the agent to docker-agent. This is used by the Jenkins builds to indicate it should be built via the Docker Agent we're defining.

For the Docker Image, use benhall/dind-jenkins-agent:v2. This image is configured with a Docker client and available at https://hub.docker.com/r/benhall/dind-jenkins-agent/

Under Container Settings, In the "Volumes" text box enter /var/run/docker.sock:/var/run/docker.sock. This allows our build container to communicate with the host.

For Connect Method select Connect with SSH. The image is based on the Jenkins SSH Slave image meaning the default Inject SSH key will handle the authenication.

Make sure it is Enabled.

Click Save.

Jenkins can now start a Build Agent as a container when required.

** Create Build Project 
This step creates a new project which Jenkins will build via our new agent. The project source code is at https://github.com/katacoda/katacoda-jenkins-demo. The repository has a Dockerfile; this defines the instructions on how to produce the Docker Image. Jenkins doesn't need to know the details of how our project is built.

Task: Create New Job
On the Jenkins dashboard, select Create new jobs
Give the job a friendly name such as Katacoda Jenkins Demo, select Freestyle project then click OK.
The build will depend on having access to Docker. Using the "Restrict where this project can be run" we can define the label we set of our configured Docker agent. The set "Label Expression" to docker-agent. You should have a configuration of "Label is serviced by no nodes and 1 cloud".
If you see the error message There’s no agent/cloud that matches this assignment. Did you mean ‘master’ instead of ‘docker-agent’?, then the Docker plugin and the Docker Agent has not been Enabled. Go back to configure the system options and enable both checkboxes.

Select the Repository type as Git and set the Repository to be https://github.com/katacoda/katacoda-jenkins-demo.
We can now add a new build step using the Add Build Step dropdown. Select Execute Shell.
Because the logical of how to build is specified in our Dockerfile, Jenkins only needs to call build and specify a friendly name.
In this example, use the following commands.

Copy to Clipboardls
docker info
docker build -t katacoda/jenkins-demo:${BUILD_NUMBER} .
docker tag katacoda/jenkins-demo:${BUILD_NUMBER} katacoda/jenkins-demo:latest
docker images
The first stage lists all the files in the directory which will be built. When calling docker build we use the Jenkins build number as the image tag. This allows us to version our Docker Images. We also tag the build with latest.

At this point, or in an additional step, you could execute a docker push to upload the image to a centralised Docker Registry.

Our build is now complete. Click Save.

** Build Project
We now have a configured job that will build Docker Images based on our Git repository. The next stage is to test and try it.

Task: Build
On the left-hand side, select Build Now. You should see a build scheduled with a message "(pending—Waiting for next available executor)".

In the background, Jenkins is launching the container and connecting to it via SSH. Sometimes this can take a while to configure the Docker Agent. The error "(pending—Jenkins doesn’t have label docker-agent)" is while Jenkins waits for the Docker Agent to start.

You can see the progress using docker logs --tail=10 jenkins

It's normal for this to take a few moments to complete.

** View Console Output
Once the build has completed you should see the Image and Tags using the Docker CLI docker images.

What was built into the Docker Image was a small HTTP server. You can launch it using: docker run -d -p 80:80 katacoda/jenkins-demo:latest

Using cURL you should see the server respond: curl host01

Jenkins will have the console output of our build, available via the dashboard. You should be able to access it below:

https://2886795316-8080-cykoria04.environments.katacoda.com/job/Katacoda%20Jenkins%20Demo/1/console

If you rebuilt the project, you would see a version 2 image created and the :latest tag reattached.

* External
- [[https://github.com/bmustiata/jenny][bmustiata/jenny: Command line Jenkinsfile runner written in groovy. Does not need a Jenkins installation to run the Jenkinsfile.]]
