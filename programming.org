:PROPERTIES:
:ID:       61c1eb90-d2f0-4ffc-afcd-9ae6015284c6
:END:
#+title: Programming

From [[https://docs.google.com/spreadsheets/d/e/2PACX-1vSr58Xg4DVX2WdmAkv3hE2ITJ3fPeNUmRFe0Ekro53U-ACFrhcUkV8PlUm4ddcn53Uh-5UIezZtZZgc/pubhtml][Матрица компетентности программиста (hexlet версия)]].
* [[id:9e8b7575-c30f-40ab-b385-fd552f497ad4][Languages]]
* Асинхронное программирование
  - Промисы
  - Сопрограммы
  - Async
  - Await
  - Модель акторов
  - Каналы
* В базу из кода
  - Работа с базой напрямую (через драйверы)
  - ORM
  - ActiveRecord
  - Repository
  - QueryBuilder
  - Data Mapper
* Web
  - [[id:8f93f297-e53d-4f15-80f8-47e3213f9ec5][HTTP]]
  - [[id:bcfe625c-3692-4fa6-9495-0e1cec13869b][HTML]]
  - Микрофреймворки
  - Роутинг
  - Шаблонизация
  - Фреймворки
* Web-servers
  - Модели работы
    - Process
    - Thread
    - Event loop
  - Cgi
  - Fastcgi
* Эксплуатация/[[id:fbe9d2d4-6cf7-46b3-a5f3-5913dcc046f2][Деплой]]
  - Автоматизация
    - [[id:bad92cfe-f645-4e04-8c87-434b8f7581be][Ansible]]
  - Миграции
  - Мониторинг
  - Vagrant
  - Неизменяемая инфраструктура
  - Контейнерная виртуализация
    - [[id:3059c391-8471-4f6d-ac2c-c4838d2e9d84][Docker]]
  - https://12factor.net/
* Структуры данных/типы
  - Массивы
  - Ассоциативные массивы/Словари
  - Связаные списки
  - Графы/Деревья
  - Очереди
* Алгоритмы
  - Сортировка массивов (любая)
  - Алгоритмическая сложность
  - Обход деревьев
  - Операции над списками
    - вставка
    - удаление
    - переворот
    - поиск циклов
    - …
  - Топологическая сортировка
* Информатика
  - Детерминированнось
  - Побочные эффекты
  - Идемпотентность
  - Чистые функции
  - Системы счисления и операции с ними
  - Рекурсивный процесс
  - Итеративный процесс
  - Императивный
  - Декларативный
  - Функции высшего порядка
  - Параметрический полиморфизм
  - Полиморфизм включения
  - Блокировка
    - Пессимистическая
    - Оптимистичская
* Архитектура ЭВМ
  - Общее устройство компьютеров
  - Понимание принципов работы процессора и исполнения машинного кода
    - Опкоды
    - Ассемблер
* Операционные системы
  - Процесс
    - Понятие
    - Состояния
    - Жизненный цикл
    - Сигналы
  - Поток
    - Понятие
    - Состояния
    - Жизненный цикл
    - Сигналы
  - IPC
    - Пайпы
    - Сокеты
  - Виртуальная память
* Сети
  - IP адрес/порты
  - MAC адрес
  - HTTP
  - TCP/IP общие принципы работы
  - UDP	Модель OCI
* [[id:3f027dd6-89a5-44c3-bfb8-9d421d4b7e4e][UNIX]]
* Качество
  - Юнит тесты
  - Автоматизированное тестирования
  - Непрерывная интеграция
  - Системные тесты
  - Непрерывная доставка
* Организация работы
  - Система контроля версий
    - [[id:f6070005-df9c-4f22-9df4-d5730ecb5dd4][Git]]
  - Автоматизированная настройка рабочего окружения
* [[id:ecedc1be-e7e1-4827-a162-09d4e9adb6bf][Математика]]
  - Теория множеств
  - Булева алгебра
  - Комбинаторика
  - Теория автоматов
  - Теория графов
  - Статистика
  - Теория категорий
* Базы данных
  - [[id:f6476502-fc22-43c1-9cd8-95d0fa1d75b5][ANSI SQL]]
  - Индексы
  - Транзакционность (ACID)
  - MVCC
  - Уровни изоляции
* Проектирование/Разработка
  - Модули (неймспейсы)
  - Функциональная декомпозиция
  - Уровневое проектирование
  - Принцип одного уровня абстракции (барьеры абстракции)
  - Entity-Relationship model
  - Архитектурные шаблоны (в широком смысле)
  - DDD (Единый язык)
* Парадигмы
  - Процедурное программирование
  - Функциональное программирование
  - Автоматное программирование
  - Объектно-ориентированное программирование
  - Логическое программирование
* Распределенные системы
  - Семантика передачи сообщений
  - Очереди (rabbitmq)
  - Stateless/Statefull
  - Service Discovery (consul)
  - CAP теорема
* Процессы
  - Гибкая разработка (Agile)
  - Бережливое производство
  - Экстремальное программирование

*

- [[https://github.com/amitness/learning][amitness/learning: Becoming better at data science every day]]

*

- [[https://github.com/ethereum/solidity][ethereum/solidity: Solidity, the Contract-Oriented Programming Language]]
- [[https://github.com/tallesl/Rich-Hickey-fanclub][tallesl/Rich-Hickey-fanclub: "every time I watch one of his talks I feel like someone has gone in and organized my brain"]]
- [[https://github.com/sdiehl/write-you-a-haskell][sdiehl/write-you-a-haskell: Building a modern functional compiler from first principles. (http://dev.stephendiehl.com/fun/)]]
- [[https://github.com/sukritishah15/DS-Algo-Point][sukritishah15/DS-Algo-Point: This repository contains codes for various data structures and algorithms in C, C++, Java, Python, C#, Go, JavaScript, PHP, Kotlin and Scala]]
- [[https://github.com/zv/SICP-guile][zv/SICP-guile: SICP in Guile & Emacs Lisp]]
- [[https://github.com/ACES-DYPCOE/Must_Know_Resources][ACES-DYPCOE/Must_Know_Resources: The repository contains a learning path for some domains and interesting must do things in the tech field as a college Student]]
- [[https://github.com/mitmath/18S191][mitmath/18S191: Course 18.S191 at MIT, fall 2020 - Introduction to computational thinking with Julia:]]
- [[https://github.com/daolf/Most-recommended-programming-books][daolf/Most-recommended-programming-books: The most recommended programming books of all-time.]]
- [[https://github.com/leandrotk/functional-programming-learning-path][leandrotk/functional-programming-learning-path: A Learning Path for Functional Programming]]
- [[https://github.com/hoanhan101/algo][hoanhan101/algo: 101+ coding interview problems with detailed solutions, test cases, and program analysis]]
- [[https://github.com/s0md3v/hardcodes][s0md3v/hardcodes: find hardcoded strings from source code]]
- [[https://github.com/twcamper/sicp-kindle][twcamper/sicp-kindle: Structure and Interpretation of Computer Programs, 2nd Edition, by Harold Abelson and Gerald Jay Sussman with Julie Sussman, The MIT Press. formatted and built for mobi/kindle]]
- [[https://github.com/hnccbits/Algorithm-Visualizer][hnccbits/Algorithm-Visualizer]]
- [[https://github.com/datastacktv/data-engineer-roadmap][datastacktv/data-engineer-roadmap: Roadmap to becoming a data engineer in 2021]]
- https://firststeps.ru/
- https://firststeps.ru/asm/tasm1.html
- [[https://habr.com/ru/post/112953/][Что нужно знать про арифметику с плавающей запятой / Хабр]]
- [[https://habr.com/ru/company/edison/blog/315724/][Обучаемся самостоятельно: подборка видеокурсов по Computer Science / Блог компании Edison / Хабр]]
- [[https://github.com/nonunicorn/onelinerhub][nonunicorn/onelinerhub: Lib with nearly 800 (and counting) minimalistic code pieces with clear explanation @ onelinerhub.com]]
- [[https://github.com/KikyTokamuro/Simple-Functional-Programming][KikyTokamuro/Simple-Functional-Programming: Функциональное программирование простым языком + примеры]]
- [[https://github.com/rcarriga/viscal][rcarriga/viscal: A visual representation of the lambda calculus and animation of beta reduction.]]
- [[https://tree-sitter.github.io/tree-sitter/][Tree-sitter｜Introduction]]
- [[https://www.quartz-scheduler.org/documentation/2.3.1-SNAPSHOT/faq.html][Frequently Answered Questions about Quartz]]
- [[https://www.linuxlinks.com/excellent-free-tutorials-learn-agda/][Excellent Free Tutorials to Learn Agda - LinuxLinks]]
- [[https://choosealicense.com/][Choose an open source license | Choose a License]]
- [[https://www.craftinginterpreters.com/a-virtual-machine.html][A Virtual Machine · Crafting Interpreters]]
- [[https://github.com/Algo-Phantoms/Algo-Tree][Algo-Phantoms/Algo-Tree: Algo-Tree is a collection of Algorithms and data structures which are fundamentals to efficient code and good software design. Creating and designing excellent algorithms is required for being an exemplary programmer. It contains solutions in various languages such as C++, Python and Java.]]
- [[https://www.youtube.com/watch?v=mmvHC3UgYmg][(17) Не морочьте мне голову со своим функциональным программированием / Виталий Брагилевский - YouTube]]
- [[https://godbolt.org/][Compiler Explorer]]
- [[http://minikanren.org/][miniKanren.org]]
- [[https://github.com/emojicode/emojicode][emojicode/emojicode: 😀😜🔂 World’s only programming language that’s bursting with emojis]]
- [[https://github.com/xioacd99/study-is-wonderful][xioacd99/study-is-wonderful: awesome public courses and wonderful study resource]]
- [[https://www.thecodedmessage.com/posts/programming-integers/][Choosing the Right Integers :: The Coded Message]]
- [[https://github.com/yourtion/30dayMakeOS][yourtion/30dayMakeOS: 《30天自制操作系统》源码中文版。自己制作一个操作系统（OSASK）的过程]]

* Video
- [[https://www.youtube.com/watch?v=NzIZzvbplSM][Data61 fp-course - Part #1: syntax, Optional, List]]
