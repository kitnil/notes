#+title: Programming

From [[https://docs.google.com/spreadsheets/d/e/2PACX-1vSr58Xg4DVX2WdmAkv3hE2ITJ3fPeNUmRFe0Ekro53U-ACFrhcUkV8PlUm4ddcn53Uh-5UIezZtZZgc/pubhtml][Матрица компетентности программиста (hexlet версия)]].
* [[file:languages.org][Languages]]
* Асинхронное программирование
  - Промисы
  - Сопрограммы
  - Async
  - Await
  - Модель акторов
  - Каналы
* В базу из кода
  - Работа с базой напрямую (через драйверы)
  - ORM
  - ActiveRecord
  - Repository
  - QueryBuilder
  - Data Mapper
* Web
  - [[file:http.org][HTTP]]
  - [[file:html.org][HTML]]
  - Микрофреймворки
  - Роутинг
  - Шаблонизация
  - Фреймворки
* Web-servers
  - Модели работы
    - Process
    - Thread
    - Event loop
  - Cgi
  - Fastcgi
* Эксплуатация/Деплой
  - Автоматизация
    - [[file:ansible.org][Ansible]]
  - Миграции
  - Мониторинг
  - Vagrant
  - Неизменяемая инфраструктура
  - Контейнерная виртуализация
    - [[file:docker.org][Docker]]
  - https://12factor.net/
* Структуры данных/типы
  - Массивы
  - Ассоциативные массивы/Словари
  - Связаные списки
  - Графы/Деревья
  - Очереди
* Алгоритмы
  - Сортировка массивов (любая)
  - Алгоритмическая сложность
  - Обход деревьев
  - Операции над списками
    - вставка
    - удаление
    - переворот
    - поиск циклов
    - …
  - Топологическая сортировка
* Информатика
  - Детерминированнось
  - Побочные эффекты
  - Идемпотентность
  - Чистые функции
  - Системы счисления и операции с ними
  - Рекурсивный процесс
  - Итеративный процесс
  - Императивный
  - Декларативный
  - Функции высшего порядка
  - Параметрический полиморфизм
  - Полиморфизм включения
  - Блокировка
    - Пессимистическая
    - Оптимистичская
* Архитектура ЭВМ
  - Общее устройство компьютеров
  - Понимание принципов работы процессора и исполнения машинного кода
    - Опкоды
    - Ассемблер
* Операционные системы
  - Процесс
    - Понятие
    - Состояния
    - Жизненный цикл
    - Сигналы
  - Поток
    - Понятие
    - Состояния
    - Жизненный цикл
    - Сигналы
  - IPC
    - Пайпы
    - Сокеты
  - Виртуальная память
* Сети
  - IP адрес/порты
  - MAC адрес
  - HTTP
  - TCP/IP общие принципы работы
  - UDP	Модель OCI
* [[file:unix.org][UNIX]]
* Качество
  - Юнит тесты
  - Автоматизированное тестирования
  - Непрерывная интеграция
  - Системные тесты
  - Непрерывная доставка
* Организация работы
  - Система контроля версий
    - [[file:git.org][Git]]
  - Автоматизированная настройка рабочего окружения
* [[file:math.org][Математика]]
  - Теория множеств
  - Булева алгебра
  - Комбинаторика
  - Теория автоматов
  - Теория графов
  - Статистика
  - Теория категорий
* Базы данных
  - [[file:sql.org][ANSI SQL]]
  - Индексы
  - Транзакционность (ACID)
  - MVCC
  - Уровни изоляции
* Проектирование/Разработка
  - Модули (неймспейсы)
  - Функциональная декомпозиция
  - Уровневое проектирование
  - Принцип одного уровня абстракции (барьеры абстракции)
  - Entity-Relationship model
  - Архитектурные шаблоны (в широком смысле)
  - DDD (Единый язык)
* Парадигмы
  - Процедурное программирование
  - Функциональное программирование
  - Автоматное программирование
  - Объектно-ориентированное программирование
  - Логическое программирование
* Распределенные системы
  - Семантика передачи сообщений
  - Очереди (rabbitmq)
  - Stateless/Statefull
  - Service Discovery (consul)
  - CAP теорема
* Процессы
  - Гибкая разработка (Agile)
  - Бережливое производство
  - Экстремальное программирование

*

- [[https://github.com/amitness/learning][amitness/learning: Becoming better at data science every day]]

*

- [[https://github.com/ethereum/solidity][ethereum/solidity: Solidity, the Contract-Oriented Programming Language]]
- [[https://github.com/tallesl/Rich-Hickey-fanclub][tallesl/Rich-Hickey-fanclub: "every time I watch one of his talks I feel like someone has gone in and organized my brain"]]
- [[https://github.com/sdiehl/write-you-a-haskell][sdiehl/write-you-a-haskell: Building a modern functional compiler from first principles. (http://dev.stephendiehl.com/fun/)]]
- [[https://github.com/sukritishah15/DS-Algo-Point][sukritishah15/DS-Algo-Point: This repository contains codes for various data structures and algorithms in C, C++, Java, Python, C#, Go, JavaScript, PHP, Kotlin and Scala]]
- [[https://github.com/zv/SICP-guile][zv/SICP-guile: SICP in Guile & Emacs Lisp]]
- [[https://github.com/ACES-DYPCOE/Must_Know_Resources][ACES-DYPCOE/Must_Know_Resources: The repository contains a learning path for some domains and interesting must do things in the tech field as a college Student]]
- [[https://github.com/mitmath/18S191][mitmath/18S191: Course 18.S191 at MIT, fall 2020 - Introduction to computational thinking with Julia:]]
- [[https://github.com/daolf/Most-recommended-programming-books][daolf/Most-recommended-programming-books: The most recommended programming books of all-time.]]
- [[https://github.com/leandrotk/functional-programming-learning-path][leandrotk/functional-programming-learning-path: A Learning Path for Functional Programming]]
- [[https://github.com/hoanhan101/algo][hoanhan101/algo: 101+ coding interview problems with detailed solutions, test cases, and program analysis]]
- [[https://github.com/s0md3v/hardcodes][s0md3v/hardcodes: find hardcoded strings from source code]]
- [[https://github.com/twcamper/sicp-kindle][twcamper/sicp-kindle: Structure and Interpretation of Computer Programs, 2nd Edition, by Harold Abelson and Gerald Jay Sussman with Julie Sussman, The MIT Press. formatted and built for mobi/kindle]]
- [[https://github.com/hnccbits/Algorithm-Visualizer][hnccbits/Algorithm-Visualizer]]

* Video
- [[https://www.youtube.com/watch?v=NzIZzvbplSM][Data61 fp-course - Part #1: syntax, Optional, List]]
