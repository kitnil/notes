:PROPERTIES:
:ID:       5f97ab36-6f72-47ef-b0cd-3fc6cf39d827
:END:
#+title: systemd

- [[https://github.com/NullSense/fuzzy-sys][NullSense/fuzzy-sys: Utility tool for using systemctl interactively]]
- [[https://github.com/DankBSD/complexd][DankBSD/complexd: A complex of daemons implementing systemd APIs required by desktop environments]]
- [[https://github.com/alexdelorenzo/grub2systemd][grub2systemd]]
- [[https://www.freedesktop.org/software/systemd/man/systemd.service.html#ExecStart=][systemd.service]]
- [[https://github.com/joehillen/sysz][joehillen/sysz: An fzf terminal UI for systemctl]]
- [[https://github.com/systemd/mkosi][systemd/mkosi: 💽 Build Bespoke OS Images]]
- [[https://serverfault.com/questions/1053187/systemd-fails-to-run-in-a-docker-container-when-using-cgroupv2-cgroupns-priva/1054414#1054414][Systemd fails to run in a docker container when using cgroupv2 (--cgroupns=private) - Server Fault]]

* Learning
- [[https://habr.com/ru/company/ruvds/blog/724676/][Как отправлять и обрабатывать графические уведомления на bash / Хабр]]

* journald
- [[https://www.loggly.com/ultimate-guide/using-journalctl/][Using journalctl - The Ultimate Guide To Logging]]
- journalctl -b -1  -p "emerg".."crit"
- journalctl CONTAINER_NAME=taskexecutor -f
- journalctl -o json --output-fields=MESSAGE,PRIORITY,_PID,SYSLOG_IDENTIFIER,_SYSTEMD_UNIT | grep -v 'iptables\|zabbix-agent' | lnav

* 

https://archlinux.org.ru/forum/topic/12616/

#+begin_example
[Unit]
Description=Transmission BitTorrent Daemon
After=network.target run-media-wigust-hdd.mount
Requires=run-media-wigust-hdd.mount
[Service]
User=transmission
Type=notify
ExecStart=/usr/bin/transmission-daemon -f --log-error
[Install]
WantedBy=multi-user.target
#+end_example

#+begin_example
[Unit]
Description=MediaTomb Daemon
After=network.target run-media-wigust-hdd.mount
Requires=run-media-wigust-hdd.mount
[Service]
EnvironmentFile=/etc/conf.d/mediatomb
ExecStart=/usr/bin/mediatomb -p $MT_PORT -u $MT_USER -g $MT_GROUP \
  -P $MT_PIDFILE -l $MT_LOGFILE -m $MT_HOME -f $MT_CFGDIR $MT_OPTIONS
Restart=on-failure
RestartSec=5
[Install]
WantedBy=multi-user.target
#+end_example

[[https://shtsh.blogspot.com/2012/05/systemd.html][Немного о linux: Пробуем на вкус systemd]]



[Service]
Type = simple
ExecStart = /usr/sbin/clamd --foreground=yes
Restart = on-failure
IOSchedulingPriority = 7
CPUSchedulingPolicy = 5
Nice = 19
PrivateTmp = true
MemoryLimit=500M
CPUQuota=50%



#+begin_example
  #!/bin/bash
  
  trap 'kill $(jobs -p)' EXIT
  
  /opt/test/service &
  PID=$!
  
  /bin/systemd-notify --ready
  
  while(true); do
      FAIL=0
  
      kill -0 $PID
      if [[ $? -ne 0 ]]; then FAIL=1; fi
  
  #    curl http://localhost/test/
  #    if [[ $? -ne 0 ]]; then FAIL=1; fi
  
      if [[ $FAIL -eq 0 ]]; then /bin/systemd-notify WATCHDOG=1; fi
  
      sleep 1
  done
#+end_example

- [[https://www.freedesktop.org/software/systemd/man/kernel-command-line.html][kernel-command-line]]
  : systemd.default_timeout_start_sec=

- [[https://www.freedesktop.org/software/systemd/man/kernel-command-line.html][kernel-command-line]]
  : systemd.mask=

  1. home.mount
  2. mount--home.service

** NixOS

- Mask xorg (x11)
  : systemd.mask=display-manager.service

* Tools
- [[https://github.com/pop-os/system-updater][pop-os/system-updater: Systemd services for checking for and applying system updates.]]

* [[https://declassed.art/en/blog/2022/06/19/running-systemd-without-systemd-syslogd][Running systemd without systemd-journald | Declassed Art]]

Here's what I did in the first place:

systemctl stop systemd-journald

It printed:

Warning: Stopping systemd-journald.service, but it can still be activated by:
systemd-journald-dev-log.socket
systemd-journald.socket
systemd-journald-audit.socket

Good to know. I'll use this knowledge later on.

But now, is the system still operational? Yes, it is.
Does anything go to /var/log/syslog? Yes, it goes.
So far so good? - No. It gets resurrected very soon.

What's next? Let's try to disable it completely:

systemctl mask systemd-journald
Created symlink /etc/systemd/system/systemd-journald.service → /dev/null.

shutdown -r now

My container got restarted without problems, but it took more time than usual.

Checking output from ps aux, I see no systemd-journald However, nothing goes to /var/log/syslog That's because of missing /dev/log which is needed by rsyslog.

To fix this, let's review units printed by systemctl stop systemd-journald. The only of them, namely /lib/systemd/system/systemd-journald-dev-log.socket, has interesting stuff.

Normally, if we can say so about systemd, the listening socket is located at /run/systemd/journal/dev-log and /dev/log is a symlink to it.

We don't need that, so:

systemctl mask systemd-journald-dev-log.socket
Created symlink /etc/systemd/system/systemd-journald-dev-log.socket → /dev/null.

Rsyslog depends on syslog.socket unit that creates /run/systemd/journal/syslog socket. The reliable method to fix that is to copy /lib/systemd/system/syslog.socket to /etc/systemd/system/ and change socket path (ListenDatagram option) to /dev/log.

Rebooted.

It works. Not like a charm, though. Remaining systemd components complain about missing journal socket. I don't think it's worth to play with my production VPS same way.

I don't want to try this on a KVM container.
I don't want to try this on another my laptop.

I give up. Enough swimming in shit, I'm awaited by more interesting things.

But for LXC this seems to work. However I wouldn't use this approach in production.

* Cheat sheet

[[https://news.ycombinator.com/item?id=31822932][Ask HN: What do you use VMs for regularly? | Hacker News]]

> VM to only run a browser in there, to keep the memory under control

For other Linux users out there — a VM is not needed for this, use a cgroup
with memory limits. It's very easy to do with systemd, but can be done without
it:

  $ systemd-run --user --pty --property MemoryHigh=2G firefox

The kernel will prevent Firefox from using more than 2 GiBs of RAM by forcing
it into swap (including all child processes). To quote
systemd.resource-control(5):

> Specify the throttling limit on memory usage of the executed processes in
this unit. Memory usage may go above the limit if unavoidable, but the
processes are heavily slowed down and memory is taken away aggressively in
such cases. This is the main mechanism to control memory usage of a unit.

If you'd rather have it OOMed, use MemoryMax=2G.

There are lots of other interesting controllers that can put limits on disk
and network I/O, CPU usage, etc.
