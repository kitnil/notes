- catch example
#+BEGIN_SRC scheme
  (define (ensure-ownership file uid gid)
    (catch 'system-error
      (lambda ()
        (chown file uid gid))
      (lambda args
        (if (= EPERM (system-error-errno args))
            (let ((st (lstat file)))
              (or (and (= uid (stat:uid st)) (= gid (stat:gid st)))
                  (apply throw args)))
            (apply throw args)))))

#+END_SRC

- $HOME/.guix-profile/bin/guile -q -L /gnu/store/…-geiser-0.9-1.9581e61/share/geiser/guile/ -L ~/src/guix

- python-on-guile 1.2.1

- Binary

You can't produce a pre-compiled machine code binary of your guile
program.  I believe you can use the environment variable
GUILE_JIT_THRESHOLD set to zero to have your code compiled to
machine code on first use.

$ GUILE_JIT_THRESHOLD=0 guile my-program.scm

You can also start execution of your guile program from C using
the techniques described in the section "Programming in C" in the
Guile Reference Manual.

- Debug (origin Message-ID: <87mukwlil1.fsf@ambrevar.xyz>)
  : ,backtrace #:full? #t

  or shorter
  : ,bt #:full? #t

- Split URL
  #+BEGIN_EXAMPLE
    scheme@(guile-user)> (string->uri "https://github.com/foo/bar/archive/whatnot")
    $2 = #<<uri> scheme: https userinfo: #f host: "github.com" port: #f path: "/foo/bar/archive/whatnot" query: #f fragment: #f>
    scheme@(guile-user)> (uri-host $2)
    $3 = "github.com"
    scheme@(guile-user)> (split-and-decode-uri-path (uri-path $2))
    $4 = ("foo" "bar" "archive" "whatnot")
  #+END_EXAMPLE

- List files in directory
  #+BEGIN_EXAMPLE
    scheme@(guile-user)> ,use (ice-9 ftw)
    scheme@(guile-user)> (scandir "/")
    $2 = ("." ".." "bin" "boot" "data" "dev" "etc" "gnu" "home" "lost+found" "mnt" "proc" "root" "run" "sys" "tmp" "var")
  #+END_EXAMPLE

#+BEGIN_SRC guile
(map (lambda (flag) (if (= (length flag) 2) (let ((value (last flag))) (if (store-file-name? value) (strip-store-file-name value) value)) (first flag))) (map (cut string-split <> #\=) (string-split (string-delete #\" (nix-output "build.nix" "--strict" "--eval" "-A" "overlay.php73.configureFlags")) #\space)))

(begin (use-modules (srfi srfi-26) (ice-9 ftw) (ice-9 match)) (let ((dir "/gnu/store/xvm6m6d7vd55v5yc9v6apybrd5f9kxz2-swh-plugins-lv2-1.0.16/lib/lv2/")) (match (scandir dir) (("." ".." file ...) (string-join (map (cut string-append dir <>) file) ":")))))
#+END_SRC
