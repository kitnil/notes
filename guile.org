* Awesome
- [[https://notabug.org/ZelphirKaltstahl][Zelphir Kaltstahl - NotABug.org: Free code hosting]]
- [[https://jeko.frama.io/][Accueil - Carnet du Hacker Guile]]
- [[https://github.com/artyom-poptsov/metabash][artyom-poptsov/metabash: Metabash!]]
- [[https://github.com/tmtvl/guile-netpbm][tmtvl/guile-netpbm: Utilities for making PBM, PGM, and PPM files with Guile]]
- CMOD-PLAY 4.1 available

* Windows

#+begin_example
From: Pikachu Hy via General Guile related discussions <guile-user@gnu.org>
Subject: No Guile on Windows? (was: My Guile Hacker Handbook)
To: "guile-user" <guile-user@gnu.org>
Date: Thu, 13 Aug 2020 21:02:50 +0800 (3 hours, 21 minutes, 9 seconds ago)
Message-ID: <173e7ea79c0.ede1dc0922320.6522978963678912839@zoho.com.cn>
User-Agent: ZohoCN Mail
Reply-to: Pikachu Hy <pikachuhy@zoho.com.cn>

hi,
I build a msvc-version guile on Windows 10.

https://github.com/PikachuHy/guile-1.6.7/releases/tag/v20200813

Best wishes,
PikachuHy
#+end_example

* Cheatsheet

- catch example
#+BEGIN_SRC scheme
  (define (ensure-ownership file uid gid)
    (catch 'system-error
      (lambda ()
        (chown file uid gid))
      (lambda args
        (if (= EPERM (system-error-errno args))
            (let ((st (lstat file)))
              (or (and (= uid (stat:uid st)) (= gid (stat:gid st)))
                  (apply throw args)))
            (apply throw args)))))

#+END_SRC

- $HOME/.guix-profile/bin/guile -q -L /gnu/store/…-geiser-0.9-1.9581e61/share/geiser/guile/ -L ~/src/guix

- python-on-guile 1.2.1

- Binary

You can't produce a pre-compiled machine code binary of your guile
program.  I believe you can use the environment variable
GUILE_JIT_THRESHOLD set to zero to have your code compiled to
machine code on first use.

$ GUILE_JIT_THRESHOLD=0 guile my-program.scm

You can also start execution of your guile program from C using
the techniques described in the section "Programming in C" in the
Guile Reference Manual.

- Debug (origin Message-ID: <87mukwlil1.fsf@ambrevar.xyz>)
  : ,backtrace #:full? #t

  or shorter
  : ,bt #:full? #t

- Split URL
  #+BEGIN_EXAMPLE
    scheme@(guile-user)> (string->uri "https://github.com/foo/bar/archive/whatnot")
    $2 = #<<uri> scheme: https userinfo: #f host: "github.com" port: #f path: "/foo/bar/archive/whatnot" query: #f fragment: #f>
    scheme@(guile-user)> (uri-host $2)
    $3 = "github.com"
    scheme@(guile-user)> (split-and-decode-uri-path (uri-path $2))
    $4 = ("foo" "bar" "archive" "whatnot")
  #+END_EXAMPLE

- List files in directory
  #+BEGIN_EXAMPLE
    scheme@(guile-user)> ,use (ice-9 ftw)
    scheme@(guile-user)> (scandir "/")
    $2 = ("." ".." "bin" "boot" "data" "dev" "etc" "gnu" "home" "lost+found" "mnt" "proc" "root" "run" "sys" "tmp" "var")
  #+END_EXAMPLE

#+BEGIN_SRC guile
(map (lambda (flag) (if (= (length flag) 2) (let ((value (last flag))) (if (store-file-name? value) (strip-store-file-name value) value)) (first flag))) (map (cut string-split <> #\=) (string-split (string-delete #\" (nix-output "build.nix" "--strict" "--eval" "-A" "overlay.php73.configureFlags")) #\space)))

(begin (use-modules (srfi srfi-26) (ice-9 ftw) (ice-9 match)) (let ((dir "/gnu/store/xvm6m6d7vd55v5yc9v6apybrd5f9kxz2-swh-plugins-lv2-1.0.16/lib/lv2/")) (match (scandir dir) (("." ".." file ...) (string-join (map (cut string-append dir <>) file) ":")))))
#+END_SRC

* Libs

- [[https://gitlab.com/mjbecze/guile-srfi-89/][srfi-89 implementation for guile]]
- [[https://github.com/aconchillo/guile-oauth/][guile-oauth 0.5.0 released]]

* Examples
- [[https://notabug.org/ZelphirKaltstahl/guile-examples/src/65ba7cead2983f1ceb8aa2d4eedfe37734e5ca56/web-development/example-03-serve-static-assets][Guile web server example serving static files]] 

** bytestructures
   #+begin_src scheme

     scheme@(git structs)> (bytestructure-descriptor-size (bs:struct `(("x" ,(bs:pointer uint8)) ("y" ,size_t))))
     $20 = 12
     scheme@(git structs)> %host-type
     $21 = "i586-pc-gnu"


     Compare with the correct answer:

     $ guix environment --ad-hoc -C -s i686-linux guile guile-bytestructures  -- guile

     [...]

     scheme@(guile-user)> ,use(bytestructures guile)
     scheme@(guile-user)> %host-type
     $1 = "i686-unknown-linux-gnu"
     scheme@(guile-user)> (bytestructure-descriptor-size (bs:struct `(("x" ,(bs:pointer uint8))("y" ,size_t))))
     $2 = 8


     More specifically, the size of ‘size_t’ is wrong, but pointer size is
     right:

     scheme@(git structs)>  (bytestructure-descriptor-size size_t)
     $27 = 8
     scheme@(git structs)>  (bytestructure-descriptor-size uintptr_t )
     $28 = 8
     scheme@(git structs)>  (bytestructure-descriptor-size (bs:pointer uint8))
     $29 = 4


     ‘numeric.scm’ in bytestructures reads:

     (define arch32bit? (cond-expand
                         (lp32  #t)
                         (ilp32 #t)
                         (else  #f)))

     ;; …

     (define uintptr_t (if arch32bit?
                           uint32
                           uint64))

     (define size_t uintptr_t)


     But (bytestructures guile numeric-data-model) has this:

     (define data-model
       (if (= 4 (sizeof '*))
           (if (= 2 (sizeof int))
               'lp32
               'ilp32)
           (cond
            ((= 8 (sizeof int))  'ilp64)
            ((= 4 (sizeof long)) 'llp64)
            (else                'lp64))))

     (cond-expand-provide
      (current-module)
      (list architecture data-model))
   #+end_src
