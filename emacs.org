- Get all agenda TODOs programmatically
  #+BEGIN_SRC emacs-lisp
    (org-map-entries '(cons (nth 4 (org-heading-components))
                            (list (org-get-deadline-time nil)))
                     "/!TODO" 'agenda)
  #+END_SRC

- Save current (system) clipboard before replacing it with the Emacs's text
  : (setq save-interprogram-paste-before-kill t)

- Open file and close current buffer
  : C-x C-v ffap-alternate-file

- [[https://www.reddit.com/r/emacs/comments/52lnad/from_helm_to_ivy_a_user_perspective/d7pj9mz/][Setup ivy move,copy,rename]]

- Refactor code [[http://manuel-uberti.github.io/emacs/2018/02/10/occur/][manuel-uberti.github.io]]

* Awesome

** Mark H Weaver <mhw@netris.org>
   - https://sbp.io/
   - http://www.informatimago.com/linux/emacs-on-user-mode-linux.html

* Mailing

** Mu4e
   [[https://emacs.stackexchange.com/a/12932/15092][Setup mu4e and offlineimap]]

** Gnus

*** Sent mail

 > The Gnus manual (Section 5.5, Archived Messages) explains how to archive
 > messages sent by me locally, in a "classic" mail kind of group; that is,
 > nnfolder, nnml or something of the sort.  But I would like to store them
 [ 4 more citation lines. Click/Enter to show. ]
 > on the IMAP server, in the Sent folder the server so handily provides.
 > GUI user agents such as Sylpheed and Claws seem to know how to do this,
 > can Gnus be told to do it?
 >
 > If not, I can hack it by always Bcc'ing myself and having a filter on
 > the server to direct those copies to the folder.  But I would rather not
 > have to.

 You can use gnus-message-archive-group to store messages in imap folder.

 I use three Sent folders: one for usenet posts, second for email to
 mailing lists and third for all other (standard emails).

 '(gnus-message-archive-group 
    (quote (("^[^:]+$" "nnimap:Posted") 
    ("^nnimap:Lists/" "nnimap:Posted-List") 
    (".*" "nnimap:Sent"))))

 BTW I use "server less" dovecot to access Maildir folders via IMAP:

 '(gnus-secondary-select-methods 
    (nnimap "" (nnimap-stream shell) (imap-shell-program "~/bin/imap")))

*** Gnus nnimap missing messages
    C-u M-g in the Group buffer with the problematic group selected.
    See <https://lists.gnu.org/archive/html/emacs-devel/2017-12/msg00624.html>.

* Org
  - [[http://kitchingroup.cheme.cmu.edu/blog/2014/02/04/Literate-programming-example-with-Fortran-and-org-mode/][Literate programing example]]

* Info

  - [[https://lists.gnu.org/archive/html/help-gnu-emacs/2018-01/msg00150.html][Splitting and merging nodes]]
  - [[http://mbork.pl/2014-12-27_Info_dispatch][Info dispatch]]
  - [[https://www.emacswiki.org/emacs/Icicles_-_Info_Enhancements][Icicles - Info Enhancements]]

* Etags

Origin: https://lists.gnu.org/archive/html/help-gnu-emacs/2017-12/msg00155.html
#+BEGIN_SRC sh
  etags --language=none --regex="/[[:space:]]*Definition[[:space:]\n]+[[:space:]]*\([[:alnum:]_]+\)[[:space:]]*\n/\1/m" Homotopies.v
#+END_SRC

* Dired

  Origin https://peterreavy.wordpress.com/2011/05/04/emacs-dired-tips/

  - I’m using Emacs 23.1, primarily on Windows 7, and want to make a
    note of some Dired tips for my own use.
    : ! will run a shell command on the marked files or the file at point.

  - So, to look at the end of a log file on a remote server (and since
    I have Cygwin installed):
    : ! tail RET

  - To copy the name of the file at point, in order to make use of it
    elsewhere, use dired-copy-filename-as-kill, which is bound to
    w. To make it copy the absolute path:
    : 0 w

  - To copy the path to the folder you’re looking at in dired:
    : M-< w

  - To create an archive of the currently marked files using 7zip:
    : ! 7z a zipfilename * RET

  - To extract the archive of the file at point:
    : ! 7z e * RET

  - From dired, to search for files containing a string, just do this,
    remembering that your regexp will be case-sensitive:
    : M-x find-grep-dired

* Misc
  Origin https://lists.gnu.org/archive/html/guix-devel/2017-07/msg00039.html.

  Talk about:
  - =require=
  - =after-init-hook=
  - Directory with Guix compiled files

  Origin https://lists.gnu.org/archive/html/guix-devel/2017-07/msg00057.html.
  #+BEGIN_SRC emacs-lisp
    (unless (require 'foo nil t)
      (message "Error during loading 'foo'!!!"))
  #+END_SRC

  Or like this:

  #+BEGIN_SRC emacs-lisp
    (with-demoted-errors "%S" (require 'foo))
  #+END_SRC

  If you want to have a warning in a pop-up buffer, then:

  #+BEGIN_SRC emacs-lisp
    (unless (require 'foo nil t)
      (display-warning 'oops "Error during loading 'foo'!!!"))
  #+END_SRC

** #emacs bot
   : g "validate.el"

* epkg

attic/debian-changelog-mode
attic/easy-lentic
attic/malabar-mode
attic/selftest
attic/sql-mssql

mirror/atom-one-dark-theme
mirror/gnus-autocheck
mirror/smartwin
mirror/syslog-mode

mirror/jda
mirror/auth-password-store
mirror/ob-clojurescript
mirror/wanderlust
mirror/zoutline
#+BEGIN_EXAMPLE
  natsu@magnolia /srv/src/epkgs$ git submodule update
  error: Server does not allow request for unadvertised object 0a83b8fa074571023a10aed263d2ee7d865a49f7
  Fetched in submodule path 'mirror/auth-password-store', but it did not contain 0a83b8fa074571023a10aed263d2ee7d865a49f7. Direct fetching of that commit failed.
#+END_EXAMPLE
