:PROPERTIES:
:ID:       7a8cc0da-2743-4fcf-98c7-5d84a99d706c
:END:
#+TITLE: Emacs
#+DATE: <2020-08-15 13:18>
#+TAGS: emacs gnus magit erc

#+begin_example
    ####### #     #    #     #####   #####
    #       ##   ##   # #   #     # #     #
    #       # # # #  #   #  #       #
    #####   #  #  # #     # #        #####
    #       #     # ####### #             #
    #       #     # #     # #     # #     #
    ####### #     # #     #  #####   #####


    #     # ####### ######  #       ######
    #  #  # #     # #     # #       #     #
    #  #  # #     # #     # #       #     #
    #  #  # #     # ######  #       #     #
    #  #  # #     # #   #   #       #     #
    #  #  # #     # #    #  #       #     #
     ## ##  ####### #     # ####### ######
#+end_example

* Community
** People
*** zk-phi
 - [[https://github.com/zk-phi][zk-phi (zk-phi)]]
*** Wilfred
 - https://github.com/Wilfred
*** Mark H Weaver <mhw@netris.org>
 - https://sbp.io/
 - http://www.informatimago.com/linux/emacs-on-user-mode-linux.html
** Conferences
 - https://emacsconf.org/videos/2019/
 - [[https://www.youtube.com/watch?v=7NBAmkHHFS0][(251) Functional programming: an (Emacs) Lisp view 2/n - YouTube]]
** Social media
- [[https://t.me/emacsorgmode][Telegram: Contact @emacsorgmode]]
** Newsgroups
   - gmane.emacs.gnus.general
   - gmane.discuss
   - gmane.emacs.help
   - gmane.test
* Distributions
- [[https://github.com/declantsien/emacs-ng][declantsien/emacs-ng: Emacs Webrender front]]
- [[https://github.com/declantsien/emacs-webrender][declantsien/emacs-webrender: Emacs Webrender CI]]
* Library
- [[https://github.com/jcs-elpa/logms][jcs-elpa/logms: Log message with clickable links to context]]
- [[https://github.com/jethrokuan/filenotify-recursive][jethrokuan/filenotify-recursive: Recursive watchers for Emacs]]
- [[https://github.com/pyspa/emacs-wasm-loader][pyspa/emacs-wasm-loader: This gives Emacs awesome power!]]
* Mailing

** Mu4e
   - [[https://emacs.stackexchange.com/a/12932/15092][Setup mu4e and offlineimap]]
   - [[https://github.com/mickeynp/mu4e-query][mickeynp/mu4e-query: S-expression-based query language for mu / mu4e]]

** Notmuch
- [[https://github.com/emacsmirror/notmuch-maildir][emacsmirror/notmuch-maildir]]

** Gnus

*** Articles
- [[https://notabug.org/jbranso/emacs.d/src/master/lisp/init-gnus.org][jbranso/emacs.d: My .emacs.d/ configurations. - NotABug.org: Free code hosting]]

*** Sent mail

 > The Gnus manual (Section 5.5, Archived Messages) explains how to archive
 > messages sent by me locally, in a "classic" mail kind of group; that is,
 > nnfolder, nnml or something of the sort.  But I would like to store them
 [ 4 more citation lines. Click/Enter to show. ]
 > on the IMAP server, in the Sent folder the server so handily provides.
 > GUI user agents such as Sylpheed and Claws seem to know how to do this,
 > can Gnus be told to do it?
 >
 > If not, I can hack it by always Bcc'ing myself and having a filter on
 > the server to direct those copies to the folder.  But I would rather not
 > have to.

 You can use gnus-message-archive-group to store messages in imap folder.

 I use three Sent folders: one for usenet posts, second for email to
 mailing lists and third for all other (standard emails).

 '(gnus-message-archive-group 
    (quote (("^[^:]+$" "nnimap:Posted") 
    ("^nnimap:Lists/" "nnimap:Posted-List") 
    (".*" "nnimap:Sent"))))

 BTW I use "server less" dovecot to access Maildir folders via IMAP:

 '(gnus-secondary-select-methods 
    (nnimap "" (nnimap-stream shell) (imap-shell-program "~/bin/imap")))

*** mbsync
#+BEGIN_SRC emacs-lisp
  (defun my-gnus-retrieve-group ()
    (when (memq this-command '(gnus-topic-get-new-news-this-topic
                               gnus-group-get-new-news-this-group))
      (let ((pr-groups
             (seq-filter (lambda (g)
                           (string-match "^nnimap\\+NPR:" g))
                         (gnus-group-process-prefix
                          current-prefix-arg))))
        (message "Fetching mail for %d group(s)" (length pr-groups))
        (when pr-groups
          (call-process
           nil nil nil
           "/usr/bin/mbsync"
           (mapconcat (lambda (g)
                        (format "pr:%s"
                                (replace-regexp-in-string
                                 "\\." "/"
                                 (nth 1 (split-string g ":")))))
                      pr-groups " "))))))
                               
  (add-hook 'gnus-get-new-news-hook #'my-gnus-retrieve-group)
#+END_SRC

*** Gnus nnimap missing messages
    C-u M-g in the Group buffer with the problematic group selected.
    See <https://lists.gnu.org/archive/html/emacs-devel/2017-12/msg00624.html>.

* Learning
- [[https://www.masteringemacs.org/article/emacs-builtin-elisp-cheat-sheet][Emacs's Builtin Elisp Cheat Sheet - Mastering Emacs]]
- [[https://www.youtube.com/watch?v=LTC6SP7R1hA&t=2s][(4) From vanilla Emacs to Bash IDE in 17 minutes - YouTube]]
** Documentation
- [[https://github.com/ThomasFKJorna/emacs-docs][ThomasFKJorna/emacs-docs: The documentation website Emacs deserves]]

* Misc

  - [[https://github.com/xenodium/dwim-shell-command][xenodium/dwim-shell-command: Emacs shell commands with DWIM behaviour]]

  - [[https://github.com/noncog/rofi-chemacs][noncog/rofi-chemacs: An Emacs profile switcher and manager using Chemacs2 and Rofi!]]

  - [[https://www.fosskers.ca/en/blog/contributing-to-emacs][Colin Woodbury - Contributing to Emacs]]

  - [[https://github.com/vincentbernat/junos-mode][vincentbernat/junos-mode: Emacs major mode for JunOS configuration file]]

  - [[https://github.com/Jimx-/emacs-gl][Jimx-/emacs-gl: OpenGL bindings for Emacs Lisp]]

  - <91a58d2052f11b5f01a6ce41ebe93380@finder.org> Re: Mouse-hovering over 'mouse-face' overlays/regions on a TTY Emacs

  - [[https://web.archive.org/web/20070703163718/http://www.shellarchive.co.uk/Emacs.html][<m25z5n6e6y.fsf@gmail.com> Mouse-hovering over 'mouse-face' overlays/regions on a TTY Emacs]]

  - Delete holidays
  #+begin_src emacs-lisp
    (setq general-holidays nil)
    (setq local-holidays nil)
    (setq christian-holidays nil)
    (setq hebrew-holidays nil)
    (setq islamic-holidays nil)
  #+end_src

  - [[https://github.com/emacs-lsp/lsp-gitpod][emacs-lsp/lsp-gitpod One-click Emacs web IDE]]

  - [[https://github.com/redguardtoo/shenshou][redguardtoo/shenshou: download subtitles from opensubtitles.org]]

  - [[https://github.com/codota/TabNine][codota/TabNine: AI Smart Compose for Your Code]]

  - [[https://www.youtube.com/playlist?list=PLYOSimvBtiX4M67TG8sXdVnzkiKg_9gMk][(49) GNU Emacs/overthewire.org/wargames/bandit - YouTube]]

  - [[https://gneve-webma-dev.blogspot.com/][GNEVE WebMa branch devel blog Video editor]]

  - [[https://lists.gnu.org/archive/html/emacsconf-discuss/2019-11/msg00000.html][Emacs conference]]

  - XTerm colors
    http://skybert.net/emacs/colourful-tty-emacs/

  - replace mode-line long mods names
    https://www.masteringemacs.org/article/hiding-replacing-modeline-strings

  - Read from feauture
    : (read-from-minibuffer "Favorite food: " nil nil nil nil '("Ice Cream" "Cake"))

  - Prettify JSON with Python
    : C-u M-| python3 -m json.tool

  - Emacs distributions:
    + Spacemacs is beautiful!  http://spacemacs.org/
      + [[https://github.com/paperwm/gnome-shell-mode][paperwm/gnome-shell-mode: Spacemacs layer for developing gnome-shell extensions]]
    + prelude https://github.com/bbatsov/prelude
    + Graphene https://github.com/rdallasgray/graphene
    + Emacs Bootstrap http://emacs-bootstrap.com/
    + Frontmacs https://github.com/thefrontside/frontmacs
    + Steve Purcell's config https://github.com/purcell/emacs.d
      I personally cloned his a long time ago.
    + [[https://github.com/emacs-ng/emacs-ng][emacs-ng/emacs-ng: A new approach to Emacs - Including TypeScript, Threading, Async I/O, and WebRender.]]

  - [[https://stackoverflow.com/questions/10895930/right-align-text-in-emacs][Align text left]]

  - Mouse yank
    #+BEGIN_EXAMPLE
      <HappyPonyLand> how do you feel about mouse-yank-at-point?
                  ,*** tsdh (~Thunderbi@portal.shd.de) has quit: Quit:
                      tsdh  [11:59]
         <angrybacon> HappyPonyLand: Pretty mandatory when using
                      `(mouse-avoidance-mode 'banish)`  [12:00]
    #+END_EXAMPLE

  Origin https://lists.gnu.org/archive/html/guix-devel/2017-07/msg00039.html.

  Talk about:
  - =require=
  - =after-init-hook=
  - Directory with Guix compiled files

  Origin https://lists.gnu.org/archive/html/guix-devel/2017-07/msg00057.html.
  #+BEGIN_SRC emacs-lisp
    (unless (require 'foo nil t)
      (message "Error during loading 'foo'!!!"))
  #+END_SRC

  Or like this:

  #+BEGIN_SRC emacs-lisp
    (with-demoted-errors "%S" (require 'foo))
  #+END_SRC

  If you want to have a warning in a pop-up buffer, then:

  #+BEGIN_SRC emacs-lisp
    (unless (require 'foo nil t)
      (display-warning 'oops "Error during loading 'foo'!!!"))
  #+END_SRC

 - [[https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=b799cc271d69fc494da1fe04ca8ec6c529a19a19][Add support for the OpenPGP header to Emacs]]
 - [[https://github.com/chuntaro/emacs-keypression][chuntaro/emacs-keypression: Keystroke visualizer for GUI version Emacs.]]
 - [[https://ardiyu07.github.io/blog/2014/02/05/en-coding-with-emacs-and-e2wm-brilliant/][Coding with Emacs and e2wm, a brilliant Emacs windows manager - Yuri Ardila - Personal Blog]]
 - [[http://techtrickery.com/tearing-out-the-emacs-window-manager.html][Tearing out the Emacs windows manager]]
 - [[https://github.com/ROCKTAKEY/grugru][ROCKTAKEY/grugru: Rotate text at point in Emacs.]]
 - [[https://andreyorst.gitlab.io/posts/2020-05-10-making-emacs-tabs-look-like-in-atom/][Making Emacs tabs look like in Atom – Andrey Orst]]

 - [[https://github.com/xuchunyang/another-emacs-server][xuchunyang/another-emacs-server: An Emacs server built on HTTP and JSON]]

 - (add-to-list 'display-buffer-alist '("^\\*shell\\*" . (display-buffer-same-window)))

 - helm-locate-create-db-command

 - [[https://tech.toryanderson.com/2020/04/15/simulating-c-u-args-to-lambda-wrapped-functions/][Simulating `C-u` args to lambda-wrapped functions | Tech.ToryAnderson.com]]

 - [[https://github.com/xuchunyang/describe-symbol][xuchunyang/describe-symbol]]

 - [[https://gitlab.com/ideasman42/emacs-spell-fu][Campbell Barton / emacs-spell-fu · GitLab]]

 - [[https://projectile.readthedocs.io/en/latest/projects/#configuring-projectiles-behavior][Projects - Projectile: The Project Interaction Library for Emacs]]
 There are a few variables that are intended to be customized via .dir-locals.el.
     for compilation - projectile-project-compilation-cmd
     for testing - projectile-project-test-cmd
     for running - projectile-project-run-cmd
 When these variables have their default value of nil, Projectile runs
 the default command for the current project type. You can override
 this behavior by setting them to either a string to run an external
 command or an Emacs Lisp function:
 (setq projectile-test-cmd #'custom-test-function)

 - [[https://github.com/Malabarba/nameless][Malabarba/Nameless: Less is more. Hide package namespace in your emacs-lisp code]]

 - [[https://github.com/xuchunyang/curl-to-elisp][xuchunyang/curl-to-elisp: Convert cURL command to Emacs Lisp code]]

 - [[https://oremacs.com/2015/01/17/setting-up-ediff/][Setting up Ediff · (or emacs]]

 - [[https://github.com/rougier/nano-sidebar][rougier/nano-sidebar: Emacs package to have configurable sidebars on a per frame basis.]]

 - [[http://teaching.sociology.ul.ie/bhalpin/wordpress/?p=602][Emacs and org-mode for sending mailshots | Sociology, Statistics and Software]]

 - elisp panel for exwm https://www.reddit.com/r/emacs/comments/cz3py2/pure_elisp_panel_for_exwm/

 - chromium weather
   #+BEGIN_SRC emacs
   (setq lexical-binding t)

 (setq weather-timer      
       (run-with-timer
        0 900
        (lambda ()
          (let ((outfile "d:\\download\\weather.png"))
            (start-process
             "weather"
             nil
             "C:/Program Files (x86)/Google/Chrome/Application/chrome.exe"
             "--headless"
             (concat "--screenshot=" outfile)
             "--window-size=1000,600"
             "--hide-scrollbars"  
             "https://www.bbc.co.uk/weather/2643743#daylink-0")

            ;; wait a bit to make sure the new image is ready
            (run-with-timer
             10 nil
             (lambda ()
               (let ((img (create-image outfile)))
                 (with-current-buffer (get-buffer-create"*weather*")
                   (erase-buffer)
                   (image-flush img)
                   (insert-image img)
                   (setq cursor-type nil)))))
            ))))
   #+END_SRC

 - Ignore errors during require
   #+BEGIN_SRC emacs-lisp
     (ignore-errors
       (require 'google-contacts))
   #+END_SRC
  
 - Apply multiple Git patches

 Gnus way:
 Message-ID: <87h87i7dny.fsf@gmail.com>
 In Gnus, I press "#" to mark one or more messages with the "process
 mark" ((gnus) Other Marks), then I press "|" (gnus-summary-pipe-output),
 then I type "(cd ~/guix && git am)" to cd to my Guix checkout and apply
 the patches.  This works pretty well for me.

 Debbugs way:
 Message-ID: <87o91v7ela.fsf@ambrevar.xyz>
 From the summary view, I can press M-m (debbugs-gnu-apply-patch).
 It asks me for a directory, I point to guix, and then I get the error

 - https://libreneitor.com/how-to-set-up-emacs-to-edit-the-linux-kernel/

 - org-mode evaluate code block in Docker container

   You can use docker-tramp.

   Then you would be able to run src blocks on docker using dir header
   param like ‘:dir /docker:user@container:/‘ (similar to running src
   blocks on remote machine using tramp)

 - [[http://www.emacs-bootstrap.com/][Emacs Bootstrap:. Select your favorite programming languages, and your init file will be generated for you]]

 - [[https://www.youtube.com/watch?v=GuEqRmCjy6E][2019-04-03: Emacs as a C++ IDE - Jeff Trull, Ben Deane, Dirk Jagdmann]]

 - add new keywords
   #+BEGIN_SRC elisp
     (font-lock-add-keywords 'c++-mode
        '(("\\<\\(override\\|noexcept\\)\\>") . font-lock-keyword-face))
   #+END_SRC

 - jump to first parsed error in compilation buffer
   #+BEGIN_SRC elisp
     (setq compilation-scroll-output 'first-error)
   #+END_SRC

 - tramp colors
   #+BEGIN_SRC emacs-lisp
     (require 'tramp)

      (defun pasztor-set-background-color ()
         "*Set the background color according to the remote file name."
         (interactive)
         (if buffer-file-name
             (with-parsed-tramp-file-name buffer-file-name 'tramp
              (let ((host (tramp-host buffer-file-name)))
                (cond ((equal tramp-host "foo") (set-background-color "blue"))
                      ((equal tramp-host "bar") (set-background-color "red"))
                      ...
                      (t (set-background-color "black")))))))

      (add-hook 'find-file-hooks 'pasztor-set-background-color)
      (add-hook 'find-file-not-found-hooks 'pasztor-set-background-color)
   #+END_SRC

 - ditaa :: convert artist-mode to svg diagram
 - [[https://github.com/dalanicolai/sketch-mode][dalanicolai/sketch-mode: Quickly create/draw/paint SVG sketches with keyboard and mouse]]

 - Elisp Snippet - Kill Buffer and Window On Shell Process Termination
   #+BEGIN_SRC emacs-lisp
     (defun jt-shell-sentinel (process event)
       "Kill buffer and window on shell process termination."
       (when (not (process-live-p process))
         (let ((buf (process-buffer process)))
           (when (buffer-live-p buf)
            (with-current-buffer buf
               (kill-buffer)
               (delete-window))))))
     (add-hook 'shell-mode-hook (lambda () (set-process-sentinel (get-buffer-process (buffer-name) ) #'jt-shell-sentinel)))
   #+END_SRC

 - Get all agenda TODOs programmatically
   #+BEGIN_SRC emacs-lisp
     (org-map-entries '(cons (nth 4 (org-heading-components))
                             (list (org-get-deadline-time nil)))
                      "/!TODO" 'agenda)
   #+END_SRC

 - Save current (system) clipboard before replacing it with the Emacs's text
   : (setq save-interprogram-paste-before-kill t)

 - Open file and close current buffer
   : C-x C-v ffap-alternate-file

 - Replace hex with decimal
   #+BEGIN_SRC emacs-lisp
     (defun hex2dec ()
       (interactive)
       (when (looking-at "[a-fA-F0-9]+")
         (replace-match (format "%d" (string-to-number (match-string 0)
                                                       16)))))
   #+END_SRC

 - [[https://www.reddit.com/r/emacs/comments/52lnad/from_helm_to_ivy_a_user_perspective/d7pj9mz/][Setup ivy move,copy,rename]]

 - Refactor code [[http://manuel-uberti.github.io/emacs/2018/02/10/occur/][manuel-uberti.github.io]]

** #emacs bot
   : g "validate.el"

   #+BEGIN_EXAMPLE
     <alephnull> You need a (progn (form1) (form2)) for that.
            <tt> alephnull: progn?
     <alephnull> ,progn
         <fsbot> nil  ..(symbol)
     <alephnull> ,g elisp progn  [10:13]
         <fsbot> rudybot: g elisp progn
       <rudybot> fsbot: progn - Programming in Emacs Lisp
                 https://www.gnu.org/software/emacs/manual/html_node/eintr/progn.html
   #+END_EXAMPLE

** Optimization
- [[https://emacspeak.blogspot.com/2020/08/start-emacs-in-defun.html][EMACSPEAK The Complete Audio Desktop: Start Emacs In A Defun]]

** Unsorted
- [[https://github.com/twlz0ne/emacsq-sh][twlz0ne/emacsq-sh: Helper script to run `emacs -Q`]]
- [[https://github.com/ChillarAnand/real-auto-save][ChillarAnand/real-auto-save: Automatically save your all your buffers/files at regular intervals in Emacs!]]
- [[https://github.com/zkry/yaml.el][zkry/yaml.el: YAML parser in Elisp]]
- [[https://github.com/rmuslimov/browse-at-remote][rmuslimov/browse-at-remote: Browse target page on github/bitbucket from emacs buffers]]
- [[https://github.com/apjanke/ronn-ng][apjanke/ronn-ng: Ronn-NG: An updated fork of ronn. Build man pages from Markdown.]]
- [[https://github.com/amno1/dired-auto-readme][amno1/dired-auto-readme: An Emacs package to automatically display a README file when one is present in a dired buffer.]]
- [[https://puntoblogspot.blogspot.com/2012/10/github-emacs-org-protocol-github-lines.html][puntoblogspot: github -> emacs : org-protocol-github-lines]]
- [[https://github.com/emacscollective/epkg][emacscollective/epkg: Browse the Emacsmirror package database]]
- [[https://emacsmirror.net/manual/epkg/Listing-Packages.html#Listing-Packages][Listing Packages (Epkg User Manual)]]
- [[https://dev.to/rfaulhaber/writing-an-emacs-module-in-rust-3pg5][Writing an Emacs module in Rust - DEV]]
- [[https://git.savannah.gnu.org/cgit/emacs.git/patch/lisp/textmodes/texinfo.el?id=05bffa1f0e3e04a501801d8e7417b623ac78a584][git.savannah.gnu.org/cgit/emacs.git/patch/lisp/textmodes/texinfo.el?id=05bffa1f0e3e04a501801d8e7417b623ac78a584]]
- [[https://www.reddit.com/r/emacs/comments/iam7q6/reduce_you_interaction_with_nonorg_files/][Reduce you interaction with non-org files : emacs]]
- [[https://github.com/tecosaur/org-pandoc-import][tecosaur/org-pandoc-import: Save yourself from non-org formats, thanks to pandoc]]
- [[https://ag91.github.io/blog/2020/08/14/slack-messages-in-your-org-agenda/][Slack messages in your Org Agenda - Where parallels cross]]
- [[https://github.com/jwiegley/alert][jwiegley/alert: A Growl-like alerts notifier for Emacs]]
- [[https://github.com/tttuuu888/package-loading-notifier][tttuuu888/package-loading-notifier: Notify when packages are loaded]]
- [[https://github.com/purcell/inheritenv][purcell/inheritenv: Make emacs temp buffers inherit buffer-local environment variables]]
- [[https://github.com/zainab-ali/pair-tree.el][zainab-ali/pair-tree.el: An Emacs Lisp cons cell explorer]]
- [[https://github.com/casouri/iscroll][casouri/iscroll: Smooth scrolling over images in Emacs]]
- [[https://github.com/skeezix/emacs-attacks][skeezix/emacs-attacks: Simple top-down wargame for Emacs]]
- [[https://github.com/Boruch-Baum/emacs-crossword][Boruch-Baum/emacs-crossword: Play/Download crossword puzzles in Emacs]]
- [[https://github.com/sergiruiztrepat/chemtable][sergiruiztrepat/chemtable: Periodic table of the elements]]
- [[https://www.metalevel.at/ediprolog/][ediprolog — Emacs does Interactive Prolog]]
- [[https://medium.com/@breakslabs/emacs-and-the-tramp-b7c547a63539][Emacs and the Tramp. Emacs Tramp mode is fantastic. But… | by Break Shit Labs | Aug, 2020 | Medium]]
- [[https://www.reddit.com/r/emacs/comments/i9kscx/emacs_nyc_video_release_bring_your_text_to_life/][Emacs NYC Video Release: Bring Your Text to Life the Easy Way with GNU Hyperbole : emacs]]
- [[https://www.reddit.com/r/Fedora/comments/i8o258/more_sway_goodies_for_fedora_pure_gtk_emacs/][More sway goodies for Fedora - Pure GTK emacs : Fedora]]
- [[https://elpa.gnu.org/packages/cpio-mode.html][GNU ELPA - cpio-mode]]
- [[https://github.com/conao3/dired-lsi.el/tree/0f4038c8b47f6cfc70f82062800700c14c9912c2][conao3/dired-lsi.el at 0f4038c8b47f6cfc70f82062800700c14c9912c2]]
- [[https://github.com/conao3/dired-posframe.el/tree/1a21eb9ad956a0371dd3c9e1bec53407d685f705][conao3/dired-posframe.el at 1a21eb9ad956a0371dd3c9e1bec53407d685f705]]
- [[https://github.com/zellerin/dynamic-graphs][zellerin/dynamic-graphs]]
- [[https://github.com/fujimisakari/emacs-go-expr-completion/tree/66bba78f52a732b978848e3a4c99fa2afeb6c25f][fujimisakari/emacs-go-expr-completion at 66bba78f52a732b978848e3a4c99fa2afeb6c25f]]
- [[https://github.com/emacs-helm/helm-selector/tree/a1920a885830693dd9b1d6af3dd60f1915d976f4][emacs-helm/helm-selector at a1920a885830693dd9b1d6af3dd60f1915d976f4]]
- [[https://github.com/ndwarshuis/org-ml][ndwarshuis/org-ml: (formerly om.el) A functional library for org-mode]]
- [[https://github.com/mineo/yatemplate/][mineo/yatemplate: Simple file templates for Emacs with YASnippet]]
- [[https://github.com/DarwinAwardWinner/with-simulated-input][DarwinAwardWinner/with-simulated-input: Test your interactive elisp functions non-interactively!]]
- [[https://github.com/cyberthal/treefactor/blob/master/treefactor.el][treefactor/treefactor.el at master · cyberthal/treefactor]]
- [[https://treefactor-docs.nfshost.com/2-commands/3-org-refactor-heading/][org-refactor-heading Treefactor documentation]]
- [[https://github.com/caiohcs/my-emacs][caiohcs/my-emacs: This is my personal Emacs configuration.]]
- [[https://ag91.github.io/blog/2020/08/28/org-crypt-and-logbook-how-they-can-work-together-for-a-secure-agenda/][Org crypt and LOGBOOK: how they can work together for a secure agenda. - Where parallels cross]]
- [[https://github.com/TxGVNN/gitlab-pipeline][TxGVNN/gitlab-pipeline: Emacs tool to show gitlab-pipeline]]
- [[https://karl-voit.at/2020/08/29/vkbackup/][My Backup Script: Rsync-Based With Orgmode-Friendly Summary and Desktop Notifications]]
- [[https://github.com/nbfalcon/flycheck-projectile][nbfalcon/flycheck-projectile: Project-wide flycheck errors]]
- [[https://github.com/purcell/flymake-flycheck][purcell/flymake-flycheck: Use any Emacs flycheck checker as a flymake backend]]
- [[https://github.com/QiangF/imbot/blob/master/imbot.el][imbot/imbot.el at master · QiangF/imbot]]
- [[https://github.com/damon-kwok/modern-sh][damon-kwok/modern-sh: An Emacs minor mode for editing shell script.]]
- [[https://github.com/laishulu/emacs-vterm-manager][laishulu/emacs-vterm-manager: Manages vterm buffers with configuration files.]]
- [[https://github.com/bard/emacs-director][bard/emacs-director: Simulate Emacs user sessions. For end-to-end testing and hands-free screencast recording]]
- [[https://github.com/sheijk/hideshowvis][sheijk/hideshowvis: Add little +/- icons in the Emacs fringe for regions which hideshow.el can hide.]]
** Characters

  - •
  - §
 #+BEGIN_EXAMPLE
   Firefox key fixes for Emacs users

   ,*

   Hi all,

   Ever closed a tab when you wanted to kill some text? Ever opened a new window
   when you wanted to go to the next line? No more! Someone even compiled his own
   firefox version to fix this. But the discussion of this article revealed, you
   don't need to:

   Goto about:config and

   ,* Set ui.key.accelKey to 18 (swaps Ctrl and Alt basically)

   ,* Set devtools.editor.keymap to emacs
 #+END_EXAMPLE

 - https://www.reddit.com/r/emacs/comments/ceyrkz/define_a_custom_keybinding_for_a_specific_project/

 - https://www.reddit.com/r/emacs/comments/cf8r83/easier_editing_of_elisp_regexps/eu8nzd4/

 #+BEGIN_SRC emacs-lisp
   (defun my-re-builder ()
     (setq reb-regexp (substring-no-properties (thing-at-point 'sexp))))

   (advice-add 're-builder :before #'my-re-builder)
 #+END_SRC

 #+BEGIN_SRC emacs-lisp
   -*- lexical-binding: t -*-

   (defun my-edit-regexp-re-builder ()
     (interactive)
     (save-excursion
       (let* ((string-start (or (nth 8 (syntax-ppss))
                                (error "not in a string")))
              (string-end (progn
                            (goto-char string-start)
                            (forward-sexp 1)
                            (point)))
              (reb-regexp (read (buffer-substring-no-properties
                                 string-start
                                 string-end))))

         (re-builder)

         (let ((finisher (lambda ()
                           (interactive)
                           (reb-quit)
                           (delete-region string-start string-end)
                           (insert (let ((print-escape-newlines t))
                                     (prin1-to-string reb-regexp))))))

           (local-set-key (kbd "<f1>") finisher)))))
 #+END_SRC
 - http://emacs.1067599.n8.nabble.com/

* Implementations
- [[https://github.com/leahneukirchen/te][leahneukirchen/te: tiny emacs]]
- [[https://github.com/federicotdn/pimacs][federicotdn/pimacs: Pimacs partial, experimental implementation of an Elisp (Emacs Lisp) interpreter, written in Go.]]
- [[https://github.com/vlaci/nix-doom-emacs][vlaci/nix-doom-emacs: doom-emacs packaged for Nix]]

* Programming
** Modules
*** Rust
- [[https://dev.to/rfaulhaber/writing-an-emacs-module-in-rust-3pg5][Writing an Emacs module in Rust - DEV]]
** Java

 I use minimal setup of standard java-mode (for indentation, imenu
 support, etc) and javaimp package (available in GNU ELPA, see
 list-packages) which provides completion when adding imports (taking
 dependency info from Maven or Gradle).

 For more complete support I'd look at lsp or eglot, though I don't use
 them myself and thus cannot tell the details.

 JDEE I think is rather outdated and probably won't work :-(

** Lua

: Eduardo Ochs
: Message-ID: <CADs++6hLZc1L4gthC1W9+b3n_kZ4MjesG6v4xkWwXE6R7Y1xAA@mail.gmail.com>

about a month ago I asked on the Lua mailing list if anyone there had
tried to create an Emacs module that would load Lua and then start a
Lua interpreter and let Emacs call it...

I received this answer,

  http://lua-users.org/lists/lua-l/2021-03/msg00084.html

and today I finally had time to compile that code on Debian and test
it. It looks prototype-ishy, but it is surprisingly functional - if we
run something that returns several values, like the second sexp here,

  (emlua-dostring "a = 22")
  (emlua-dostring "return a+33, '44', {}")

it retuns a vector like this,

  ["55" "44" "table: 0x55f5e0a15a10"]

with tostring-ed versions of all its return values, and if we run
something that yields an error it returns a string with Lua's error
message.

I haven't played much with it yet.
Happy hacking =),

  Eduardo Ochs
  http://angg.twu.net/#eev
  http://angg.twu.net/emacsconf2020.html


   #+begin_src c
     // This file:
     //   http://angg.twu.net/emacs-lua/emlua.cpp.html
     //   http://angg.twu.net/emacs-lua/emlua.cpp
     //           (find-angg "emacs-lua/emlua.cpp")
     // Author: <nerditation@outlook.com>
     //    See: http://lua-users.org/lists/lua-l/2021-03/msg00084.html
     // Some comments by: Eduardo Ochs <eduardoochs@gmail.com>
     //
     // emlua.cpp - a emacs module that runs Lua code.
     // Adapted from the code that nerditation sent to lua-l.
     // Nerditation's original instructions on how to compile this were just this line:
     //   g++ -IZ:/emacs/include -IZ:/Lua/include -shared emlua -o emlua.dll -LZ:/Lua/lib -llua
     // My notes on how to compile this on Debian are at the end of this file.
     //
     // (defun e () (interactive) (find-fline "~/usrc/emacs-lua/emlua.cpp"))

     #include <vector>
     #include <emacs-module.h>
     #include <lua.hpp>

     int plugin_is_GPL_compatible;

     // TODO: convert lua values to elisp values in a meaningful way.
     // PLACEHOLDER: call `luaL_tolstring` on everything
     static emacs_value lua_to_elisp(lua_State *L, emacs_env *env, int i) {
             size_t size;
             auto s = luaL_tolstring(L, i, &size);
             return env->make_string(env, s, size);
     }

     #define EMACS_ENV_KEY "*emacs_env"

     // ef_xxx is elisp function so uses emacs-module-func protocol
     // basically a wrapper around the Lua `dostring` function
     // returns a vector containing the multiple (possibly zero) return values (called `tostring` on them) of the Lua code
     // returns an error message on failure
     static emacs_value ef_lua_dostring(emacs_env *env, ptrdiff_t nargs, emacs_value *args, void *data) {
             // closure data is lua_State
             lua_State *L = (lua_State *)data;
             // the env is valid on for this callstack
             lua_pushlightuserdata(L, env);
             lua_setfield(L, LUA_REGISTRYINDEX, EMACS_ENV_KEY);
             // string length: emacs uses signed type (ptrdiff_t), Lua uses unsigned type (size_t)
             ptrdiff_t len = 0;
             // emacs didn't provide API to `borrow` the string
             // we are forced to make a copy and then Lua will copy it again
             env->copy_string_contents(env, args[0], nullptr, &len);
             auto buffer = std::vector<char>(len);
             env->copy_string_contents(env, args[0], buffer.data(), &len);
             //assert(buffer.back() == '\0');
             auto status = luaL_dostring(L, buffer.data());
             if (status != LUA_OK) {
                     auto ret = lua_to_elisp(L, env, -1);
                     lua_settop(L, 0);
                     return ret;
             }
             auto multret = std::vector<emacs_value>{};
             int retcount = lua_gettop(L);
             multret.reserve(retcount);
             for (int i = 1; i <= retcount; ++i) {
                     multret.push_back(lua_to_elisp(L, env, i));
             }
             lua_settop(L, 0);
             return env->funcall(env, env->intern(env, "vector"), multret.size(), multre
          0K ..t.data());
     }

     // lf_xxx is lua function so use lua_CFunction protocol
     static int lf_message(lua_State *L)
     {
             lua_getfield(L, LUA_REGISTRYINDEX, EMACS_ENV_KEY);
             auto *env = (emacs_env *)lua_touserdata(L, -1);
             size_t size;
             auto s = luaL_tolstring(L, 1, &size);
             emacs_value args[1] = {env->make_string(env, s, size)};
             env->funcall(env, env->intern(env, "message"), 1, args);
             return 0;
     };

     extern "C" {
     int emacs_module_init(struct emacs_runtime *ert) noexcept
     {
             emacs_env *env = ert->get_environment(ert);
             lua_State *L = luaL_newstate();
             luaL_openlibs(L);
             // register Lua callable function(s)
             lua_pushcfunction(L, lf_message);
             lua_setglobal(L, "message");
             // register elisp callable function(s)
             emacs_value func = env->make_function(
                             env,
                             1, // min_arity,
                             1, // max_arity,
                             &ef_lua_dostring,
                             "run string as Lua code",
                             L
                             );
             emacs_value symbol = env->intern(env, "emlua-dostring");
             emacs_value args[] = {symbol, func};
             env->funcall(env, env->intern(env, "defalias"), 2, args);
             return 0;
     }
     } // extern "C"


     /*
     # (find-es "emacs" "vterm-recompile")
     # (find-sh "locate emacs-module.h")
     # (find-sh "locate lua.hpp")
     # (find-sh "locate liblua5.3")
     # (find-fline "~/bigsrc/emacs27/src/emacs-module.h")
     # (find-fline "/usr/include/lua5.1/lua.hpp")
     # (find-fline "/usr/include/lua5.3/lua.hpp")

      (eepitch-shell)
      (eepitch-kill)
      (eepitch-shell)

     # (find-fline "~/emacs-lua/")
     cd ~/emacs-lua/
     ls -lAF
     g++ -I$HOME/bigsrc/emacs27/src \
         -I/usr/include/lua5.3 \
         -shared \
         emlua.cpp \
         -o emlua.so \
         -llua5.3

     # (find-fline "~/emacs-lua/")
     # (find-fline "~/emacs-lua/" "emlua.so")
     # (load       "~/emacs-lua/emlua.so")

     (emlua-dostring "return 22")
     (emlua-dostring "return 22+33")
     (emlua-dostring "return 22+33, 44")
     (emlua-dostring "a = 22")
     (emlua-dostring "return a")

     ,*/
     ..                                                  100% 25.5M=0s

     2021-04-18 08:33:42 (25.5 MB/s) - written to stdout [4406/4406]


   #+end_src

** Prolog
- [[https://www.metalevel.at/ediprolog/][ediprolog — Emacs does Interactive Prolog]]

** Nix
- [[https://github.com/talyz/fromElisp][talyz/fromElisp: An Emacs Lisp reader in Nix.]]
- [[https://github.com/nix-community/emacs2nix][nix-community/emacs2nix: Automatically generate Nix expressions for Emacs packages]]

** Python

 - [[https://github.com/muffinmad/emacs-pdb-capf][muffinmad/emacs-pdb-capf: Completion-at-point function for pdb (Python debugger)]]

* Snippets

** Open dired in SHELL

   https://www.bennee.com/~alex/blog/2018/04/07/working-with-dired/
   #+BEGIN_SRC emacs-lisp
     (defun my-dired-frame (directory)
       "Open up a dired frame which closes on exit."
       (interactive)
       (switch-to-buffer (dired directory))
       (local-set-key
        (kbd "C-x C-c")
        (lambda ()
          (interactive)
          (kill-this-buffer)
          (save-buffers-kill-terminal 't))))
   #+END_SRC

** Serve files over HTTP

   A somewhat trivial hack around web-server package and its file server
   example, fixed up to work with Emacs 26 (and 25, I guess), and to
   serve the files over LAN, not just within localhost.

   I find myself needing to serve contents of a directory over LAN pretty
   much every other month. I used a shell alias for a Python script, but
   tonight I thought, why not do it from Emacs?

   Usage: M-x my/serve-this to serve the contents of the directory
   associated with the current buffer; M-x my/stop-server to stop
   serving.

   Hope you find this useful.

   #+BEGIN_SRC emacs-lisp
     ;;;; A webserver in Emacs, because why not.
     ;;;; Basically a fast replacement for serve_this in Fish.

     

     (use-package web-server
       :config
       (defvar my/file-server nil "Is the file server running? Holds an instance if so.")

       (defun my/ws-start (handlers port &optional log-buffer &rest network-args)
         "Like `ws-start', but unbroken for Emacs 25+."
         (let ((server (make-instance 'ws-server :handlers handlers :port port))
               (log (when log-buffer (get-buffer-create log-buffer))))
           (setf (process server)
                 (apply
                  #'make-network-process
                  :name "ws-server"
                  :service (port server)
                  :filter 'ws-filter
                  :server t
                  :nowait nil
                  :family 'ipv4
                  :coding 'no-conversion
                  :plist (append (list :server server)
                                 (when log (list :log-buffer log)))
                  :log (when log
                         (lambda (proc request message)
                           (let ((c (process-contact request))
                                 (buf (plist-get (process-plist proc) :log-buffer)))
                             (with-current-buffer buf
                               (goto-char (point-max))
                               (insert (format "%s\t%s\t%s\t%s"
                                               (format-time-string ws-log-time-format)
                                               (first c) (second c) message))))))
                  network-args))
           (push server ws-servers)
           server))

       (defun my/serve-this (&optional port)
         "Start a file server on a `PORT', serving the content of directory
     associated with the current buffer's file."
         (interactive "nPort: ")
         ;; Taken from http://eschulte.github.io/emacs-web-server/File-Server.html#File-Server.
         (if my/file-server
             (message "File server is already running!")
           (progn
             (setf my/file-server
                   (le
          0K .xical-let ((docroot (if (buffer-file-name)
                                              (file-name-directory (buffer-file-name))
                                            (expand-file-name default-directory))))
                     (my/ws-start
                      (lambda (request)
                        (with-slots (process headers) request
                          (let ((path (substring (cdr (assoc :GET headers)) 1)))
                            (if (ws-in-directory-p docroot path)
                                (if (file-directory-p path)
                                    ;; TODO a better ws-send-directory-list
                                    (ws-send-directory-list process
                                                            (expand-file-name path docroot)
                                                            "^[^\.]")
                                  (ws-send-file process (expand-file-name path docroot)))
                              (ws-send-404 process)))))
                      port
                      nil                    ;no log buffer
                      :host "0.0.0.0")))
             (message "Serving files on port %d" port))))

       (defun my/stop-server ()
         "Stop the file server if running."
         (interactive)
         (if my/file-server
             (progn
               (ws-stop my/file-server)
               (setf my/file-server nil)
               (message "Stopped the file server."))
           (message "No file server is running."))))


     

     (provide 'init-web-server)
     ..                                                   100%  103M=0s

     2018-04-09 21:08:00 (103 MB/s) - written to stdout [3350/3350]


   #+END_SRC

* Tests
- [[https://elpa.zilongshanren.com/melpa-stable/ert-junit-0.2.el][elpa.zilongshanren.com/melpa-stable/ert-junit-0.2.el]]
* Tips
- [[https://old.reddit.com/r/emacs/comments/xyo2fo/orgmode_vterm_tmux/][org-mode + vterm + tmux == ❤️❤️❤️ : emacs]]
* Tools
- [[https://github.com/beacoder/everlasting-scratch][beacoder/everlasting-scratch: The scratch buffer that lasts forever.]]
- [[https://github.com/borkdude/clj2el][borkdude/clj2el: Transpile Clojure to Emacs Lisp!]]
- [[https://github.com/ChanderG/toodoo.el][ChanderG/toodoo.el: A magical interface to manage Todos built ontop of Org]]
- [[https://github.com/DarwinAwardWinner/with-simulated-input][DarwinAwardWinner/with-simulated-input: Test your interactive elisp functions non-interactively!]]
- [[https://xenodium.com/dwim-shell-command-with-template-prompts/][dwim-shell-command with template prompts]]
- [[https://github.com/emacsmirror/cycle-at-point][emacsmirror/cycle-at-point: Cycle (rotate) the thing under the cursor]]
- [[https://github.com/etern/edit-as-format][etern/edit-as-format: Edit document as other format, in Emacs, using Pandoc]]
- [[https://github.com/hraban/emacs-nix][hraban/emacs-nix: Emacs from source using Nix]]
- [[https://github.com/karthink/dired-hist][karthink/dired-hist: Traverse dired history in Emacs]]
- [[https://github.com/Ladicle/consult-tramp][Ladicle/consult-tramp: consult-tramp is a command to select tramp targets. Supported completion sources are ssh config, known hosts, and docker containers.]]
- [[https://github.com/mmontone/emacs-inspector][mmontone/emacs-inspector: Inspection tool for Emacs Lisp objects.]]
- [[https://github.com/rayw000/translate-mode][rayw000/translate-mode: Paragraph-oriented Emacs minor mode for doing translation jobs.]]
- [[https://github.com/schoettl/list-transform][schoettl/list-transform: Transform a bullet list to a sentence and vice versa in Emacs.]]
** Bug report

 [[http://manuel-uberti.github.io//emacs/2018/05/25/display-version/][A fancy Emacs version – manu.el]]
 #+BEGIN_SRC emacs-lisp
   (defun mu--os-version ()
     "Call `lsb_release' to retrieve OS version."
     (replace-regexp-in-string
      "Description:\\|[\t\n\r]+" ""
      (with-temp-buffer
        (and (eq 0
                 (call-process "lsb_release" nil '(t nil) nil "-d"))
             (buffer-string)))))

   (defun mu--gnome-version ()
     "Call `gnome-shell' to retrieve GNOME version."
     (with-temp-buffer
       (and (eq 0
                (call-process "gnome-shell" nil '(t nil) nil "--version"))
            (buffer-string))))

   ;;;###autoload
   (defun mu-display-version ()
     "Display Emacs version and system details in a temporary buffer."
     (interactive)
     (let ((buffer-name "*version*"))
       (with-help-window buffer-name
         (with-current-buffer buffer-name
           (insert (emacs-version) "\n")
           (insert "\nRepository revision: " emacs-repository-version "\n")
           (when (and system-configuration-options
                      (not (equal system-configuration-options "")))
             (insert "\nConfigured using:\n"
                     system-configuration-options))
           (insert "\n\nOperating system: " (mu--os-version) "\n")
           (insert "Window system: " (getenv "XDG_SESSION_TYPE") "\n")
           (insert "Desktop environment: " (mu--gnome-version))))))
 #+END_SRC

** CI
- [[https://github.com/TxGVNN/gitlab-pipeline][TxGVNN/gitlab-pipeline: Emacs tool to show gitlab-pipeline]]

** Copilot
 - [[https://github.com/zerolfx/copilot.el][zerolfx/copilot.el: An unofficial Copilot plugin for Emacs.]]
** Dired

   Origin https://peterreavy.wordpress.com/2011/05/04/emacs-dired-tips/

   - I’m using Emacs 23.1, primarily on Windows 7, and want to make a
     note of some Dired tips for my own use.
     : ! will run a shell command on the marked files or the file at point.

   - So, to look at the end of a log file on a remote server (and since
     I have Cygwin installed):
     : ! tail RET

   - To copy the name of the file at point, in order to make use of it
     elsewhere, use dired-copy-filename-as-kill, which is bound to
     w. To make it copy the absolute path:
     : 0 w

   - To copy the path to the folder you’re looking at in dired:
     : M-< w

   - To create an archive of the currently marked files using 7zip:
     : ! 7z a zipfilename * RET

   - To extract the archive of the file at point:
     : ! 7z e * RET

   - [[https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=9b01badf7cf7bb6cd64bc8d39564b46ae74b889f][dereference symbol links]]

   - From dired, to search for files containing a string, just do this,
     remembering that your regexp will be case-sensitive:
     : M-x find-grep-dired

 [[https://alexschroeder.ch/wiki/2020-07-16_Emacs_everything][Alex Schroeder: 2020-07-16 Emacs everything]]
 #+BEGIN_SRC emacs-lisp
   (eval-after-load "dired"
     '(require 'dired-x))

   (setq dired-recursive-deletes 'always
         dired-recursive-copies 'always
         dired-deletion-confirmer 'y-or-n-p
         dired-clean-up-buffers-too nil
         delete-by-moving-to-trash t
         ;; trash-directory "~/.Trash/emacs"
         dired-dwim-target t
         dired-guess-shell-alist-user
             '(("\\.pdf\\'" "evince")
               ("\\.jpg\\'" "feh"))
         dired-listing-switches "-alv")
 #+END_SRC

- [[https://github.com/johannes-mueller/dired-gitignore.el][johannes-mueller/dired-gitignore.el: dired minor mode to ignore files that are to be ignored by git]]

** echo area
   - [[https://github.com/ThibautVerron/echo-sth.el][ThibautVerron/echo-sth.el: Make use of an empty echo area to display some information]]
** elfeed

- [[https://github.com/areina/elfeed-cljsrn][areina/elfeed-cljsrn: A mobile client for Elfeed built with React Native and written in ClojureScript.]]
- [[https://github.com/karthink/elfeed-tube][karthink/elfeed-tube: Youtube integration for Elfeed, the feed reader for Emacs]]
- [[http://codingquark.com/emacs/2020/04/19/elfeed-protocol-ttrss.html][Elfeed with Tiny Tiny RSS]]


 If you have multiple computers and you subscribe to RSS feeds - which you probably do, it would be great if you could read the feeds from all your computers and have the feeds’ read state synchronized.

 Tiny Tiny RSS runs on a server, aggregates your feeds, shows them with a web interface and exposes API for clients - such as elfeed - to consume.

 To talk to ttrss, elfeed needs to know the APIs where comes elfeed-protocol to rescue. elfeed-protocol will authenticate with your ttrss server, fetch feeds and displays in elfeed like they were native feeds added to elfeed.

 The setup is short:

     Install elfeed, elfeed-protocol (from melpa, or clone it)
     Setup ttrss on your server
     Configure elfeed-protocol to authenticate and fetch from ttrss

 #+BEGIN_SRC emacs-lisp
   (setq elfeed-use-curl nil)
   (setq elfeed-protocol-ttrss-maxsize 200) ;; bigger than 200 is invalid

   (setq elfeed-feeds
         '(
           ("ttrss+https://username@domain/tt-rss"
            :password "")
           ))
        
   (elfeed-protocol-enable)
 #+END_SRC

 I need to (setq elfeed-use-curl nil) because Freedombox requires me to sign in first before I can access the URL. This way, elfeed first asks me for my Freedombox creds, then uses :password to authenticate with ttrss.

 Here is my elfeed config on github: link.

 #+BEGIN_SRC emacs-lisp
   (require 'elfeed)
   (require 'elfeed-protocol)

   (setq elfeed-use-curl nil)
   (elfeed-set-timeout 36000)

   (defvar cq/youtube-dl-path)
   (defvar cq/youtube-dl-output-dir)

   (global-set-key (kbd "C-x w") 'elfeed)

   (add-hook 'elfeed-new-entry-hook
             (elfeed-make-tagger :feed-url "youtube\\.com"
                                 :add '(video youtube)))

   (setq cq/youtube-dl-path "/home/codingquark/programs/ytdl/youtube-dl")
   (setq cq/youtube-dl-output-dir "~/Videos/")

   ;; Schedule feed update for every day at 3PM
   (run-at-time "15:00" nil 'elfeed-update)

   (defun cq/elfeed-download-video ()
     "Download a video using youtube-dl."
     (interactive)
     (async-shell-command (format "%s -o \"%s%s\" -f bestvideo+bestaudio %s"
                                  cq/youtube-dl-path
                                  cq/youtube-dl-output-dir
                                  "%(title)s.%(ext)s"
                                  (elfeed-entry-link elfeed-show-entry))))

   (setq elfeed-protocol-ttrss-maxsize 200) ; bigger than 200 is invalid
   (setq elfeed-feeds
         '(
           ("youwannaknowright"
            :password (shell-command-to-string "pass --clip personal/Root/Important/Freedombox")
            )))

   (setq elfeed-log-level 'debug)

   ;; (setq elfeed-feeds
   ;;       '(;; "http://planet.emacsen.org/atom.xml"
   ;;         ("http://planet.emacslife.com/atom.xml" emacs)
   ;;         "http://codingquark.com/feed.xml"
   ;;         "http://blog.stephenwolfram.com/feed/"
   ;;         "https://www.lightbluetouchpaper.org/feed/"
   ;;         "http://blog.jaysinh.com/feed.xml"
   ;;         "esr.ibiblio.org/?feed=rss2"
   ;;         "http://idevji.com/feed"
   ;;         "http://jordi.inversethought.com/feed/"
   ;;         "http://www.shakthimaan.com/news.xml"
   ;;         "https://static.fsf.org/fsforg/rss/blogs.xml"
   ;;         "http://technomancy.us/feed/atom.xml"
   ;;         "http://www.aidalgolland.net/feed.xml"
   ;;         "http://www.dijkstrascry.com/rss.xml"
   ;;         "https://binaryredneck.net/rss/"
   ;;         "https://ftfl.ca/blog/index.rss"
   ;;         "http://planet.gentoo.org"
   ;;         "https://lwn.net/headlines/rss"
   ;;         "https://cjb.sh/articles/feed.xml"
   ;;         "https://rjlipton.wordpress.com/feed/"
   ;;         ;; "https://www.jwz.org/blog/feed"
   ;;         "http://www.antipope.org/charlie/blog-static/atom.xml"
   ;;         "https://usesthis.com/feed.atom"
   ;;         "https://blog.liw.fi/index.atom"
   ;;         "http://www.earth.li/~noodles/blog/feed.xml"
   ;;         "http://0pointer.net/blog/index.rss20"
   ;;         "kushaldas.in/rss.xml"
   ;;         "http://ebb.org/bkuhn/blog/rss.xml"

   ;;         ;; PODCASTS
   ;;         ;; ("http://podcasts.joerogan.net/feed" podcasts) ;; joe rogan experience
   ;;         ;; ("https://lexfridman.com/category/ai/feed/" podcasts)
   ;;         ))

   (elfeed-protocol-enable)

   (provide 'init-elfeed)
 #+END_SRC

- [[https://github.com/SqrtMinusOne/elfeed-summary][SqrtMinusOne/elfeed-summary: Feed summary interface for elfeed]]

*** elfeed like interface for youtube
- [[https://github.com/emacsmirror/ytdious][emacsmirror/ytdious: Query / Preview YouTube via Invidious]]

** epkg

 attic/debian-changelog-mode
 attic/easy-lentic
 attic/malabar-mode
 attic/selftest
 attic/sql-mssql

 mirror/atom-one-dark-theme
 mirror/gnus-autocheck
 mirror/smartwin
 mirror/syslog-mode

 mirror/jda
 mirror/auth-password-store
 mirror/ob-clojurescript
 mirror/wanderlust
 mirror/zoutline
 #+BEGIN_EXAMPLE
   natsu@magnolia /srv/src/epkgs$ git submodule update
   error: Server does not allow request for unadvertised object 0a83b8fa074571023a10aed263d2ee7d865a49f7
   Fetched in submodule path 'mirror/auth-password-store', but it did not contain 0a83b8fa074571023a10aed263d2ee7d865a49f7. Direct fetching of that commit failed.
 #+END_EXAMPLE

** [[https://rednosehacker.com/combo-guix-shell-emacs-envrc-el?pk_campaign=rss-feed][Combo : Guix shell + Emacs envrc.el — Red Nose Hacker]]

Combo : Guix shell + Emacs envrc.el
April 7, 2023

Guile Logo

When I edit Guile code in Emacs, there are some tools relying on the environment to work (i.e. Emacs extensions like Geiser, Flycheck-Guile).
Parts of this environment are project specific while others are shared across projects.
So I ended up setting manually my environment usually following these few steps:

$ guix shell guile
$ export GUILE_LOAD_PATH="$PWD:$GUILE_LOAD_PATH$
$ emacs some-script.scm



I did turn it into a script I cast as a spell but still, I wanted to go further.
And one day…

I read this thread from a Guix mailing list. Almost what I am looking for, a bit rough.

And later this post from David Thompson's blog. Which lead me to the Gitlab account of Andrew Whatson with use cases.

They paved the way. I feel I can give it a try.

David wrote about direnv.el which run all the things starting from Emacs in the environment made by direnv.

So let's go!

$ guix install direnv emacs-direnv



At the end of my .bashrc:

eval "$(direnv hook bash)"



In my Emacs configuration:

(use-package direnv
 :config
 (direnv-mode))



Finally, inside the .envrc file of your simple Guile project:

eval $(guix shell guile --search-paths)
export GUILE_LOAD_PATH="$PWD:$GUILE_LOAD_PATH="



Now all you need to do is fire Emacs up, open a file from one of your Guile project and taste the fun.

Oh wait! If you are like me, you may open several files from different projects to copy/paste, evaluate s-expressions, whatever… The thing is, the actual Emacs environment is the one from the first file opened. Too bad.

Fortunately, Steve Purcell already solved the problem with envrc.el ! Let's make the switch.

$ guix remove emacs-direnv
$ guix install emacs-envrc



And also substitute envrc.el from direnv.el in your Emacs configuration:

(use-package envrc
 :config
 (envrc-global-mode))



Let me know how it feels ;)

Thank you very much for reading this article! Hope you learned something!

Don't hesitate to give me your opinion, suggest an idea for improvement, report an error, or ask a question ! I would be so glad to discuss about the topic covered here with you ! You can reach me here.

Don't miss out on the next ones ! Either via RSS or via e-mail !

** eshell

 - C-c C-r :: move to output
 - C-u C-c C-r :: move to output and narrow
 - C-x C-j :: dired-jump

- [[https://github.com/akreisher/eshell-syntax-highlighting][akreisher/eshell-syntax-highlighting: Syntax highlighting for Eshell]]

** gnupg
#+begin_example
  Message-ID: <ddf2cd8a-c89f-18a3-146e-16b53260e103@gmail.com>

  To allow a GnuPG passphrase in the Emacs minibuffer, I use the external Emacs
  package pinentry.el in loopback mode*:

  (setq epg-pinentry-mode 'loopback)

  Unfortunately, this doesn't work on Debain-based systems without upgrading the
  pinentry source (use: git://git.gnupg.org/pinentry.git).

  But it turns out that pinentry.el may not be required any more.  It is enough
  to add to the file ~/.gnupg/gpg.conf the line:

      pinentry-mode loopback

  and to ~/.gnupg/gpg-agent.conf:

      allow-loopback-pinentry

  Restart gpg-agent and that's it.  The most obvious difference is that
  pinentry.el provides a more informative prompt, e.g.,

      [[1399721]@slewsys.org] Please enter the passphrase to unlock the OpenPGP
     secret key:
      "Andrew L. Moore <alm@slewsys.org>"
      255-bit EDDSA key, ID 0x0AB16F2E536D3DB5,
      created 2021-11-01.:

  versus when GnuPG runs PINEntry in loopback mode:

      Enter passphrase:

  Notably, the PINEntry manual warns:

    Having Emacs get the passphrase is convenient, however, it is a
    significant security risk. Emacs is a huge program, which doesn't
    provide any process isolation to speak of. As such, having it handle
    the passphrase adds a huge chunk of code to the user's trusted
    computing base. Because of this concern, Emacs doesn't enable this by
    default...

  I'm not sure if one of the methods above is more secure in this regard.

  ------------------------------------------------------------------------

  ,* The full configuration of pinentry.el is as follows:

  In ~/.emacs or other config file, add:

      (require 'pinentry)

      (setq epg-pinentry-mode 'loopback)
      (pinentry-start)

  In ~/.gnupg/gpg-agent.conf add:

      allow-loopback-pinentry
      allow-emacs-pinentry

  Then restart gpg-agent.
#+end_example

** Etags

 Origin: https://lists.gnu.org/archive/html/help-gnu-emacs/2017-12/msg00155.html
 #+BEGIN_SRC sh
   etags --language=none --regex="/[[:space:]]*Definition[[:space:]\n]+[[:space:]]*\([[:alnum:]_]+\)[[:space:]]*\n/\1/m" Homotopies.v
 #+END_SRC

** EWW

 [[https://alexschroeder.ch/wiki/2020-07-16_Emacs_everything][Alex Schroeder: 2020-07-16 Emacs everything]]
 And I like to follow Gemini and Gopher links from my browser, so here’s how to
 handle them:
 #+BEGIN_SRC emacs-lisp
   (advice-add 'eww-browse-url :around 'asc:eww-browse-url)

   (defun asc:eww-browse-url (original url &optional new-window)
     "Handle gemini links."
     (cond ((string-match-p "\\`\\(gemini\\|gopher\\)://" url)
            (require 'elpher)
            (elpher-go url))
           (t (funcall original url new-window))))
 #+END_SRC

** Firefox

 A tiny tip for those using elfeed for youtube subs

 I recently switched from web-based feedbro to elfeed for managing my
 RSS/Atom feeds and while the default setup is close to perfect for my
 needs, it bugged me a bit that every link opened in firefox. I would
 like at the very least the youtube links to open directly in my media
 player without having to first copy the url and then pass it as an
 argument. As it turns out reading documentation helps, and you can
 pattern match which function opens links (by default elfeed uses
 browse-url with the b shortcut):

 #+BEGIN_SRC emacs-lisp
   (defun browse-url-mpv (url &optional new-window)
       (start-process "mpv" "*mpv*" "mpv" url))

   (setq browse-url-browser-function '(("https:\\/\\/www\\.youtube." . browse-url-mpv)
       ("." . browse-url-firefox)))
 #+END_SRC

** High light
- [[https://github.com/casouri/undo-hl][casouri/undo-hl: Highlight undo operations so you never get lost]]
** Info

   - [[https://lists.gnu.org/archive/html/help-gnu-emacs/2018-01/msg00150.html][Splitting and merging nodes]]
   - [[http://mbork.pl/2014-12-27_Info_dispatch][Info dispatch]]
   - [[https://www.emacswiki.org/emacs/Icicles_-_Info_Enhancements][Icicles - Info Enhancements]]

** Jinja
   - [[https://github.com/clarete/templatel][clarete/templatel: Jinja inspired template language for Emacs Lisp]]
** Libraries
- [[https://github.com/ROCKTAKEY/rii][ROCKTAKEY/rii: Reversible input interface for multiple input.]]

** Ligatures
- [[https://github.com/mickeynp/ligature.el][mickeynp/ligature.el: Display typographical ligatures in Emacs]]
** LSP
- [[https://github.com/manateelazycat/nox][manateelazycat/nox: Nox is a lightweight, high-performance LSP client for Emacs]]
** Magit
 - magit-cherry
 - [[https://github.com/wandersoncferreira/code-review][wandersoncferreira/code-review: Code Reviews with Emacs]]
 - [[https://github.com/paulotome/emacstool][paulotome/emacstool: Using Emacs Ediff as Git Merge/Difftool]]
** mode-line
- [[https://github.com/Stebalien/i3bar.el/tree/7c182fef33578ae32f945758123601396de227d0][Stebalien/i3bar.el at 7c182fef33578ae32f945758123601396de227d0]]
** Navigation
- [[https://github.com/jcs-elpa/atl-long-lines][jcs-elpa/atl-long-lines: Turn off truncate-lines when the line is long.]] This plugin enable/disable truncate-lines base on the line length your cursor currently on.
- [[https://github.com/gexplorer/counsel-ag-popup][gexplorer/counsel-ag-popup: The power of searching with ag using counsel with transient popups Magit style.]]

** Org
   - [[https://github.com/NicolasPetton/nroam][NicolasPetton/nroam: Org-roam backlinks within org-mode buffers]]
   - [[https://github.com/ngirard/org-noweb][ngirard/org-noweb: Easier Literate Programming using Org mode]]
   - [[https://gitlab.com/joukeHijlkema/org-gantt][jouke hijlkema / org-gantt · GitLab]]
   - [[https://github.com/ndwarshuis/org-ml][ndwarshuis/org-ml: (formerly om.el) A functional library for org-mode]]
   - [[https://github.com/mskorzhinskiy/org-linked-tasks][mskorzhinskiy/org-linked-tasks]]
   - [[https://github.com/org-roam/org-roam-server][org-roam/org-roam-server: A Web Application to Visualize the Org-Roam Database]]
   - [[http://kitchingroup.cheme.cmu.edu/blog/2014/02/04/Literate-programming-example-with-Fortran-and-org-mode/][Literate programing example]]
   - [[https://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=a06f41ad2ca786a70940297fd832a649196be9be][emacs.git - Emacs source repository]]
   - [[https://github.com/Trevoke/org-gtd.el][Trevoke/org-gtd.el: A package for using GTD using org-mode (beta)]]
   - [[https://github.com/conao3/org-generate.el][conao3/org-generate.el: Generate template files/folders from one org document]]
   - [[https://github.com/io12/org-fragtog][io12/org-fragtog: Automatically toggle org-mode latex fragment previews as the cursor enters and exits them]]
   - [[https://github.com/milouse/fronde][milouse/fronde: A static website generator for Emacs Org mode]]
** Podcasts
 - [[https://emacscast.org/][EmacsCast | EmacsCast]]
*** Keys
  - C-c C-t :: show how much function changed in diff
** po-mode
#+begin_quote
'f' (fuzzy), 'u' (untranslated), RET (edit the current translation, open an
Emacs window) and 'C-c C-c' (accept the translation, close the Emacs window).
Upper case letters for the reverse order... And the rest are nice-to-have
features, like 'V' to execute msgfmt and so on.
#+end_quote
** RSS
- [[https://gitlab.com/ambrevar/emacs-webfeeder][Ambrevar / Emacs Webfeeder · GitLab]]
** Shell
- [[https://github.com/Overdr0ne/shelldon][Overdr0ne/shelldon]]
- [[https://github.com/mathiasdahl/shell-underscore][mathiasdahl/shell-underscore: Add _ as a shorthand in shell mode for the last shell output]]

** Slack
- [[https://ag91.github.io/blog/2020/08/14/slack-messages-in-your-org-agenda/][Slack messages in your Org Agenda - Where parallels cross]]
** Snippets
- [[https://github.com/mineo/yatemplate/][mineo/yatemplate: Simple file templates for Emacs with YASnippet]]
** sudo
- [[https://github.com/alpha-catharsis/sudo-utils/tree/089f7833fa256f293284a6286bf9cb2b78eff40d][alpha-catharsis/sudo-utils at 089f7833fa256f293284a6286bf9cb2b78eff40d]]
** Tabs
- [[https://github.com/casouri/highres-tab-line][casouri/highres-tab-line: High-res tab-line icons]]
** Themes
- [[https://github.com/ashton314/amethyst][ashton314/amethyst: An elegant Emacs setup optimized for non-technical writers]]

** Tramp
   - [[https://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=3da0d3852923f0a20157f72aba6d8896019559f8][emacs.git - Emacs source repository]]
   - tramp-auto-auth.el --- TRAMP automatic authentication library <877e74skek.fsf@oitofelix.com>
   - tramp-use-scp-direct-remote-copying
*** Connection methods

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'tramp-methods
      '("myssh"
        (tramp-login-program        "ssh")
        (tramp-login-args           (("-l" "%u") ("-p" "%p") ("%c")
                                     ("-e" "none") ("-t" "-t") ("%h")
                                     ("\"/bin/sh -i\"")))
        (tramp-async-args           (("-q")))
        (tramp-remote-shell         "/bin/sh")
        (tramp-remote-shell-login   ("-l"))
        (tramp-remote-shell-args    ("-c"))))
  #+END_SRC
  Btw, another test worth a try would be to use method "sshx" instead of
  "ssh". Does this make a difference?

*** Tramp on Guix

Subject: Re: emacs tramp in remote guix
Date: Sat, 12 Feb 2022 19:04:02 +0100 (14 minutes, 53 seconds ago)
Message-ID: <87leyghsh9.fsf@yahoo.com.br>

Josselin Poiret

I personally use

#+begin_src emacs-lisp :lexical no
  (require 'tramp)

  (connection-local-set-profile-variables
   'guix-system
   '((tramp-remote-path . (tramp-own-remote-path))))

  (connection-local-set-profiles
   '(:application tramp :protocol "sudo" :machine "hostname")
   'guix-system)
#+end_src

for tramp on my own machine.  The symbol 'tramp-own-remote-path uses the
login shell of the target to determine the environment to use, so is
well suited for guix.  You may need to adjust the :protocol and :machine
keys of the connection-local-set-profiles call for your use case though.

** Undo
- [[https://github.com/jackkamm/undo-propose-el][jackkamm/undo-propose-el: Navigate the emacs undo history by staging undo's in a temporary buffer]]
** VTerm
   - [[https://github.com/ration/find-trace-paths][ration/find-trace-paths: Find paths from error traces and allow to scroll through and click into them]]
   - [[https://gitlab.com/niklaseklund/dtache][Niklas Eklund / dtache · GitLab]]

** WEB
   - [[https://github.com/karlicoss/cloudmacs][karlicoss/cloudmacs: Selfhost your Emacs and access it in browser]]

** YAML

emacs-libyaml example:
   #+begin_src emacs-lisp
     (mapcar (lambda (x)
               (gethash "name" x))
             (gethash "steps"
                      (yaml-read-file "~/archive/src/filestash/.drone.yml")))
   #+end_src

* Projects

- Ivan Yonchovski @yyoncho (responsible for lsp-mode, dap-mode, and and other LSP things)
- Nicholas Vollmer @progfolio (responsible for Straight, Elpaca, and Doct)
- Vasilij Schneidermann @wasamasa (responsible for nov.el, circe, eyebrowse, and shackle)
- Henrik Lissner @hlissner (responsible for Doom Emacs, and assorted packages)
- Oleh Krehel @abo-abo (responsible for Swiper, Hydra, Avy, and Lispy)
- Protesilaos Stavrou @protesilaos (responsible for Modus themes, Denote, and others)
- The Free Software Foundation ⎋ (principal organisational sponsor of the GNU project)
- The Org Project ⎋ (responsible for org-mode)
- Daniel Mendler @minad (responsible for Consult, Vertico, Corfu, and other UI packages)
- Timothy @tecosaur (responsible for survey, and a few other things)
- Jonas Bernoulli @tarsius (responsible for Magit, Transient, and others)
