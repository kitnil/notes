- [https://github.com/xuchunyang/curl-to-elisp][xuchunyang/curl-to-elisp: Convert cURL command to Emacs Lisp code]

- [https://oremacs.com/2015/01/17/setting-up-ediff/][Setting up Ediff · (or emacs]

- [http://teaching.sociology.ul.ie/bhalpin/wordpress/?p=602][Emacs and org-mode for sending mailshots | Sociology, Statistics and Software]

- elisp panel for exwm https://www.reddit.com/r/emacs/comments/cz3py2/pure_elisp_panel_for_exwm/

- chromium weather
  #+BEGIN_SRC emacs
  (setq lexical-binding t)

(setq weather-timer      
      (run-with-timer
       0 900
       (lambda ()
         (let ((outfile "d:\\download\\weather.png"))
           (start-process
            "weather"
            nil
            "C:/Program Files (x86)/Google/Chrome/Application/chrome.exe"
            "--headless"
            (concat "--screenshot=" outfile)
            "--window-size=1000,600"
            "--hide-scrollbars"  
            "https://www.bbc.co.uk/weather/2643743#daylink-0")

           ;; wait a bit to make sure the new image is ready
           (run-with-timer
            10 nil
            (lambda ()
              (let ((img (create-image outfile)))
                (with-current-buffer (get-buffer-create"*weather*")
                  (erase-buffer)
                  (image-flush img)
                  (insert-image img)
                  (setq cursor-type nil)))))
           ))))
  #+END_SRC

- Ignore errors during require
  #+BEGIN_SRC emacs-lisp
    (ignore-errors
      (require 'google-contacts))
  #+END_SRC
  
- Apply multiple Git patches

Gnus way:
Message-ID: <87h87i7dny.fsf@gmail.com>
In Gnus, I press "#" to mark one or more messages with the "process
mark" ((gnus) Other Marks), then I press "|" (gnus-summary-pipe-output),
then I type "(cd ~/guix && git am)" to cd to my Guix checkout and apply
the patches.  This works pretty well for me.

Debbugs way:
Message-ID: <87o91v7ela.fsf@ambrevar.xyz>
From the summary view, I can press M-m (debbugs-gnu-apply-patch).
It asks me for a directory, I point to guix, and then I get the error

- https://libreneitor.com/how-to-set-up-emacs-to-edit-the-linux-kernel/

- org-mode evaluate code block in Docker container

  You can use docker-tramp.

  Then you would be able to run src blocks on docker using dir header
  param like ‘:dir /docker:user@container:/‘ (similar to running src
  blocks on remote machine using tramp)

- [[http://www.emacs-bootstrap.com/][Emacs Bootstrap:. Select your favorite programming languages, and your init file will be generated for you]]

- [[https://www.youtube.com/watch?v=GuEqRmCjy6E][2019-04-03: Emacs as a C++ IDE - Jeff Trull, Ben Deane, Dirk Jagdmann]]

- add new keywords
  #+BEGIN_SRC elisp
    (font-lock-add-keywords 'c++-mode
       '(("\\<\\(override\\|noexcept\\)\\>") . font-lock-keyword-face))
  #+END_SRC

- jump to first parsed error in compilation buffer
  #+BEGIN_SRC elisp
    (setq compilation-scroll-output 'first-error)
  #+END_SRC

- tramp colors
  #+BEGIN_SRC emacs-lisp
    (require 'tramp)

     (defun pasztor-set-background-color ()
        "*Set the background color according to the remote file name."
        (interactive)
        (if buffer-file-name
            (with-parsed-tramp-file-name buffer-file-name 'tramp
             (let ((host (tramp-host buffer-file-name)))
               (cond ((equal tramp-host "foo") (set-background-color "blue"))
                     ((equal tramp-host "bar") (set-background-color "red"))
                     ...
                     (t (set-background-color "black")))))))

     (add-hook 'find-file-hooks 'pasztor-set-background-color)
     (add-hook 'find-file-not-found-hooks 'pasztor-set-background-color)
  #+END_SRC

- ditaa :: convert artist-mode to svg diagram

- Elisp Snippet - Kill Buffer and Window On Shell Process Termination
  #+BEGIN_SRC emacs-lisp
    (defun jt-shell-sentinel (process event)
      "Kill buffer and window on shell process termination."
      (when (not (process-live-p process))
        (let ((buf (process-buffer process)))
          (when (buffer-live-p buf)
           (with-current-buffer buf
              (kill-buffer)
              (delete-window))))))
    (add-hook 'shell-mode-hook (lambda () (set-process-sentinel (get-buffer-process (buffer-name) ) #'jt-shell-sentinel)))
  #+END_SRC

- Get all agenda TODOs programmatically
  #+BEGIN_SRC emacs-lisp
    (org-map-entries '(cons (nth 4 (org-heading-components))
                            (list (org-get-deadline-time nil)))
                     "/!TODO" 'agenda)
  #+END_SRC

- Save current (system) clipboard before replacing it with the Emacs's text
  : (setq save-interprogram-paste-before-kill t)

- Open file and close current buffer
  : C-x C-v ffap-alternate-file

- Replace hex with decimal
  #+BEGIN_SRC emacs-lisp
    (defun hex2dec ()
      (interactive)
      (when (looking-at "[a-fA-F0-9]+")
        (replace-match (format "%d" (string-to-number (match-string 0)
                                                      16)))))
  #+END_SRC

- [[https://www.reddit.com/r/emacs/comments/52lnad/from_helm_to_ivy_a_user_perspective/d7pj9mz/][Setup ivy move,copy,rename]]

- Refactor code [[http://manuel-uberti.github.io/emacs/2018/02/10/occur/][manuel-uberti.github.io]]

* Awesome

** zk-phi
- [https://github.com/zk-phi][zk-phi (zk-phi)]

** Wilfred
- https://github.com/Wilfred

** Mark H Weaver <mhw@netris.org>
- https://sbp.io/
- http://www.informatimago.com/linux/emacs-on-user-mode-linux.html

* Mailing

** Mu4e
   [[https://emacs.stackexchange.com/a/12932/15092][Setup mu4e and offlineimap]]

** Gnus

*** Sent mail

 > The Gnus manual (Section 5.5, Archived Messages) explains how to archive
 > messages sent by me locally, in a "classic" mail kind of group; that is,
 > nnfolder, nnml or something of the sort.  But I would like to store them
 [ 4 more citation lines. Click/Enter to show. ]
 > on the IMAP server, in the Sent folder the server so handily provides.
 > GUI user agents such as Sylpheed and Claws seem to know how to do this,
 > can Gnus be told to do it?
 >
 > If not, I can hack it by always Bcc'ing myself and having a filter on
 > the server to direct those copies to the folder.  But I would rather not
 > have to.

 You can use gnus-message-archive-group to store messages in imap folder.

 I use three Sent folders: one for usenet posts, second for email to
 mailing lists and third for all other (standard emails).

 '(gnus-message-archive-group 
    (quote (("^[^:]+$" "nnimap:Posted") 
    ("^nnimap:Lists/" "nnimap:Posted-List") 
    (".*" "nnimap:Sent"))))

 BTW I use "server less" dovecot to access Maildir folders via IMAP:

 '(gnus-secondary-select-methods 
    (nnimap "" (nnimap-stream shell) (imap-shell-program "~/bin/imap")))

*** Gnus nnimap missing messages
    C-u M-g in the Group buffer with the problematic group selected.
    See <https://lists.gnu.org/archive/html/emacs-devel/2017-12/msg00624.html>.

* Org
  - [[http://kitchingroup.cheme.cmu.edu/blog/2014/02/04/Literate-programming-example-with-Fortran-and-org-mode/][Literate programing example]]

* Info

  - [[https://lists.gnu.org/archive/html/help-gnu-emacs/2018-01/msg00150.html][Splitting and merging nodes]]
  - [[http://mbork.pl/2014-12-27_Info_dispatch][Info dispatch]]
  - [[https://www.emacswiki.org/emacs/Icicles_-_Info_Enhancements][Icicles - Info Enhancements]]

* Etags

Origin: https://lists.gnu.org/archive/html/help-gnu-emacs/2017-12/msg00155.html
#+BEGIN_SRC sh
  etags --language=none --regex="/[[:space:]]*Definition[[:space:]\n]+[[:space:]]*\([[:alnum:]_]+\)[[:space:]]*\n/\1/m" Homotopies.v
#+END_SRC

* Dired

  Origin https://peterreavy.wordpress.com/2011/05/04/emacs-dired-tips/

  - I’m using Emacs 23.1, primarily on Windows 7, and want to make a
    note of some Dired tips for my own use.
    : ! will run a shell command on the marked files or the file at point.

  - So, to look at the end of a log file on a remote server (and since
    I have Cygwin installed):
    : ! tail RET

  - To copy the name of the file at point, in order to make use of it
    elsewhere, use dired-copy-filename-as-kill, which is bound to
    w. To make it copy the absolute path:
    : 0 w

  - To copy the path to the folder you’re looking at in dired:
    : M-< w

  - To create an archive of the currently marked files using 7zip:
    : ! 7z a zipfilename * RET

  - To extract the archive of the file at point:
    : ! 7z e * RET

  - From dired, to search for files containing a string, just do this,
    remembering that your regexp will be case-sensitive:
    : M-x find-grep-dired

* Misc

  - [[https://lists.gnu.org/archive/html/emacsconf-discuss/2019-11/msg00000.html][Emacs conference]]

  - XTerm colors
    http://skybert.net/emacs/colourful-tty-emacs/

  - replace mode-line long mods names
    https://www.masteringemacs.org/article/hiding-replacing-modeline-strings

  - Read from feauture
    : (read-from-minibuffer "Favorite food: " nil nil nil nil '("Ice Cream" "Cake"))

  - Prettify JSON with Python
    : C-u M-| python3 -m json.tool

  - Emacs distributions:
    + Spacemacs is beautiful!  http://spacemacs.org/
    + prelude https://github.com/bbatsov/prelude
    + Graphene https://github.com/rdallasgray/graphene
    + Emacs Bootstrap http://emacs-bootstrap.com/
    + Frontmacs https://github.com/thefrontside/frontmacs
    + Steve Purcell's config https://github.com/purcell/emacs.d
      I personally cloned his a long time ago.

  - [[https://stackoverflow.com/questions/10895930/right-align-text-in-emacs][Align text left]]

  - Mouse yank
    #+BEGIN_EXAMPLE
      <HappyPonyLand> how do you feel about mouse-yank-at-point?
                  ,*** tsdh (~Thunderbi@portal.shd.de) has quit: Quit:
                      tsdh  [11:59]
         <angrybacon> HappyPonyLand: Pretty mandatory when using
                      `(mouse-avoidance-mode 'banish)`  [12:00]
    #+END_EXAMPLE

  Origin https://lists.gnu.org/archive/html/guix-devel/2017-07/msg00039.html.

  Talk about:
  - =require=
  - =after-init-hook=
  - Directory with Guix compiled files

  Origin https://lists.gnu.org/archive/html/guix-devel/2017-07/msg00057.html.
  #+BEGIN_SRC emacs-lisp
    (unless (require 'foo nil t)
      (message "Error during loading 'foo'!!!"))
  #+END_SRC

  Or like this:

  #+BEGIN_SRC emacs-lisp
    (with-demoted-errors "%S" (require 'foo))
  #+END_SRC

  If you want to have a warning in a pop-up buffer, then:

  #+BEGIN_SRC emacs-lisp
    (unless (require 'foo nil t)
      (display-warning 'oops "Error during loading 'foo'!!!"))
  #+END_SRC

** #emacs bot
   : g "validate.el"

   #+BEGIN_EXAMPLE
     <alephnull> You need a (progn (form1) (form2)) for that.
            <tt> alephnull: progn?
     <alephnull> ,progn
         <fsbot> nil  ..(symbol)
     <alephnull> ,g elisp progn  [10:13]
         <fsbot> rudybot: g elisp progn
       <rudybot> fsbot: progn - Programming in Emacs Lisp
                 https://www.gnu.org/software/emacs/manual/html_node/eintr/progn.html
   #+END_EXAMPLE

* Bug report

[[http://manuel-uberti.github.io//emacs/2018/05/25/display-version/][A fancy Emacs version – manu.el]]
#+BEGIN_SRC emacs-lisp
  (defun mu--os-version ()
    "Call `lsb_release' to retrieve OS version."
    (replace-regexp-in-string
     "Description:\\|[\t\n\r]+" ""
     (with-temp-buffer
       (and (eq 0
                (call-process "lsb_release" nil '(t nil) nil "-d"))
            (buffer-string)))))

  (defun mu--gnome-version ()
    "Call `gnome-shell' to retrieve GNOME version."
    (with-temp-buffer
      (and (eq 0
               (call-process "gnome-shell" nil '(t nil) nil "--version"))
           (buffer-string))))

  ;;;###autoload
  (defun mu-display-version ()
    "Display Emacs version and system details in a temporary buffer."
    (interactive)
    (let ((buffer-name "*version*"))
      (with-help-window buffer-name
        (with-current-buffer buffer-name
          (insert (emacs-version) "\n")
          (insert "\nRepository revision: " emacs-repository-version "\n")
          (when (and system-configuration-options
                     (not (equal system-configuration-options "")))
            (insert "\nConfigured using:\n"
                    system-configuration-options))
          (insert "\n\nOperating system: " (mu--os-version) "\n")
          (insert "Window system: " (getenv "XDG_SESSION_TYPE") "\n")
          (insert "Desktop environment: " (mu--gnome-version))))))
#+END_SRC

* epkg

attic/debian-changelog-mode
attic/easy-lentic
attic/malabar-mode
attic/selftest
attic/sql-mssql

mirror/atom-one-dark-theme
mirror/gnus-autocheck
mirror/smartwin
mirror/syslog-mode

mirror/jda
mirror/auth-password-store
mirror/ob-clojurescript
mirror/wanderlust
mirror/zoutline
#+BEGIN_EXAMPLE
  natsu@magnolia /srv/src/epkgs$ git submodule update
  error: Server does not allow request for unadvertised object 0a83b8fa074571023a10aed263d2ee7d865a49f7
  Fetched in submodule path 'mirror/auth-password-store', but it did not contain 0a83b8fa074571023a10aed263d2ee7d865a49f7. Direct fetching of that commit failed.
#+END_EXAMPLE

* Snippets

** Open dired in SHELL

   https://www.bennee.com/~alex/blog/2018/04/07/working-with-dired/
   #+BEGIN_SRC emacs-lisp
     (defun my-dired-frame (directory)
       "Open up a dired frame which closes on exit."
       (interactive)
       (switch-to-buffer (dired directory))
       (local-set-key
        (kbd "C-x C-c")
        (lambda ()
          (interactive)
          (kill-this-buffer)
          (save-buffers-kill-terminal 't))))
   #+END_SRC

** Serve files over HTTP

   A somewhat trivial hack around web-server package and its file server
   example, fixed up to work with Emacs 26 (and 25, I guess), and to
   serve the files over LAN, not just within localhost.

   I find myself needing to serve contents of a directory over LAN pretty
   much every other month. I used a shell alias for a Python script, but
   tonight I thought, why not do it from Emacs?

   Usage: M-x my/serve-this to serve the contents of the directory
   associated with the current buffer; M-x my/stop-server to stop
   serving.

   Hope you find this useful.

   #+BEGIN_SRC emacs-lisp
     ;;;; A webserver in Emacs, because why not.
     ;;;; Basically a fast replacement for serve_this in Fish.

     

     (use-package web-server
       :config
       (defvar my/file-server nil "Is the file server running? Holds an instance if so.")

       (defun my/ws-start (handlers port &optional log-buffer &rest network-args)
         "Like `ws-start', but unbroken for Emacs 25+."
         (let ((server (make-instance 'ws-server :handlers handlers :port port))
               (log (when log-buffer (get-buffer-create log-buffer))))
           (setf (process server)
                 (apply
                  #'make-network-process
                  :name "ws-server"
                  :service (port server)
                  :filter 'ws-filter
                  :server t
                  :nowait nil
                  :family 'ipv4
                  :coding 'no-conversion
                  :plist (append (list :server server)
                                 (when log (list :log-buffer log)))
                  :log (when log
                         (lambda (proc request message)
                           (let ((c (process-contact request))
                                 (buf (plist-get (process-plist proc) :log-buffer)))
                             (with-current-buffer buf
                               (goto-char (point-max))
                               (insert (format "%s\t%s\t%s\t%s"
                                               (format-time-string ws-log-time-format)
                                               (first c) (second c) message))))))
                  network-args))
           (push server ws-servers)
           server))

       (defun my/serve-this (&optional port)
         "Start a file server on a `PORT', serving the content of directory
     associated with the current buffer's file."
         (interactive "nPort: ")
         ;; Taken from http://eschulte.github.io/emacs-web-server/File-Server.html#File-Server.
         (if my/file-server
             (message "File server is already running!")
           (progn
             (setf my/file-server
                   (le
          0K .xical-let ((docroot (if (buffer-file-name)
                                              (file-name-directory (buffer-file-name))
                                            (expand-file-name default-directory))))
                     (my/ws-start
                      (lambda (request)
                        (with-slots (process headers) request
                          (let ((path (substring (cdr (assoc :GET headers)) 1)))
                            (if (ws-in-directory-p docroot path)
                                (if (file-directory-p path)
                                    ;; TODO a better ws-send-directory-list
                                    (ws-send-directory-list process
                                                            (expand-file-name path docroot)
                                                            "^[^\.]")
                                  (ws-send-file process (expand-file-name path docroot)))
                              (ws-send-404 process)))))
                      port
                      nil                    ;no log buffer
                      :host "0.0.0.0")))
             (message "Serving files on port %d" port))))

       (defun my/stop-server ()
         "Stop the file server if running."
         (interactive)
         (if my/file-server
             (progn
               (ws-stop my/file-server)
               (setf my/file-server nil)
               (message "Stopped the file server."))
           (message "No file server is running."))))


     

     (provide 'init-web-server)
     ..                                                   100%  103M=0s

     2018-04-09 21:08:00 (103 MB/s) - written to stdout [3350/3350]


   #+END_SRC

* Characters

 - •
 - §
#+BEGIN_EXAMPLE
  Firefox key fixes for Emacs users

  ,*

  Hi all,

  Ever closed a tab when you wanted to kill some text? Ever opened a new window
  when you wanted to go to the next line? No more! Someone even compiled his own
  firefox version to fix this. But the discussion of this article revealed, you
  don't need to:

  Goto about:config and

  ,* Set ui.key.accelKey to 18 (swaps Ctrl and Alt basically)

  ,* Set devtools.editor.keymap to emacs
#+END_EXAMPLE

- https://www.reddit.com/r/emacs/comments/ceyrkz/define_a_custom_keybinding_for_a_specific_project/

- https://www.reddit.com/r/emacs/comments/cf8r83/easier_editing_of_elisp_regexps/eu8nzd4/

#+BEGIN_SRC emacs-lisp
  (defun my-re-builder ()
    (setq reb-regexp (substring-no-properties (thing-at-point 'sexp))))

  (advice-add 're-builder :before #'my-re-builder)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  -*- lexical-binding: t -*-

  (defun my-edit-regexp-re-builder ()
    (interactive)
    (save-excursion
      (let* ((string-start (or (nth 8 (syntax-ppss))
                               (error "not in a string")))
             (string-end (progn
                           (goto-char string-start)
                           (forward-sexp 1)
                           (point)))
             (reb-regexp (read (buffer-substring-no-properties
                                string-start
                                string-end))))

        (re-builder)

        (let ((finisher (lambda ()
                          (interactive)
                          (reb-quit)
                          (delete-region string-start string-end)
                          (insert (let ((print-escape-newlines t))
                                    (prin1-to-string reb-regexp))))))

          (local-set-key (kbd "<f1>") finisher)))))
#+END_SRC
tramp-auto-auth.el --- TRAMP automatic authentication library <877e74skek.fsf@oitofelix.com>
- http://emacs.1067599.n8.nabble.com/

* Magit

** Procedures
- magit-cherry

** Keys
 - C-c C-t :: show how much function changed in diff

* Conference

https://emacsconf.org/videos/2019/
* Java

I use minimal setup of standard java-mode (for indentation, imenu
support, etc) and javaimp package (available in GNU ELPA, see
list-packages) which provides completion when adding imports (taking
dependency info from Maven or Gradle).

For more complete support I'd look at lsp or eglot, though I don't use
them myself and thus cannot tell the details.

JDEE I think is rather outdated and probably won't work :-(

