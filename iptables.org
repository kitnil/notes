:PROPERTIES:
:ID:       9cb7bab3-5342-4c3b-bd61-a5fd4a06dee8
:END:
: sysctl -w net.ipv4.conf.all.route_localnet=1

#+begin_example
  # Generated by iptables-save v1.6.0 on Fri Jun 26 14:52:04 2020
  ,*filter
  :INPUT ACCEPT [1293576:626675826]
  :FORWARD DROP [0:0]
  :OUTPUT ACCEPT [1176614:715727503]
  :DOCKER - [0:0]
  :DOCKER-ISOLATION-STAGE-1 - [0:0]
  :DOCKER-ISOLATION-STAGE-2 - [0:0]
  :DOCKER-USER - [0:0]
  COMMIT
  # Completed on Fri Jun 26 14:52:04 2020
  # Generated by iptables-save v1.6.0 on Fri Jun 26 14:52:04 2020
  ,*nat
  :PREROUTING ACCEPT [8351:486090]
  :INPUT ACCEPT [8150:470162]
  :OUTPUT ACCEPT [3259:194379]
  :POSTROUTING ACCEPT [0:0]
  :DOCKER - [0:0]
  -A PREROUTING -i eth1.80@eth1 -p tcp -m tcp -d 78.108.80.44/32 --dport 80 -j DNAT --to-destination 127.0.0.1:8080
  -A PREROUTING -i eth1.80@eth1 -p tcp -m tcp -d 78.108.80.44/32 --dport 443 -j DNAT --to-destination 127.0.0.1:8443
  -A POSTROUTING -j MASQUERADE
  COMMIT
  # Completed on Fri Jun 26 14:52:04 2020
#+end_example

- [[https://github.com/MaxKellermann/ferm][MaxKellermann/ferm: ferm is a frontend for iptables]]
- [[https://github.com/mrash/psad][mrash/psad: psad: Intrusion Detection and Log Analysis with iptables]]
- [[https://linuxconfig.org/collection-of-basic-linux-firewall-iptables-rules][Collection of basic Linux Firewall iptables rules - LinuxConfig.org]]
- [[https://logi.cc/en/2010/07/netfilter-log-format/][Netfilter Log Format]]
- [[https://github.com/Nudin/iptable_vis][Nudin/iptable_vis: visualise your iptables chains]]
- [[https://github.com/jpylypiw/easywall][jpylypiw/easywall: Web interface for easy use of the IPTables firewall on Linux systems written in Python3.]]
- [[https://github.com/bmaeser/iptables-boilerplate][bmaeser/iptables-boilerplate: rock solid default firewall-rules for webhosts]]
- [[https://webguy.vip/example-of-iptables/][Example of IPTABLES — Web Guy]]
- [[https://habr.com/ru/company/selectel/blog/511392/][xtables-addons: фильтруем пакеты по странам / Хабр]]

- iptables -t nat -A POSTROUTING -o br0 -j MASQUERADE
- iptables -A FORWARD -i br0 -o br154.154 -m state --state RELATED,ESTABLISHED -j ACCEPT
- iptables -A FORWARD -i br154.154 -o br0 -j ACCEPT

- show counters
  : viddy /bin/sh -c "'sudo iptables -n -L -v; sudo iptables -n -L -v -t nat'"

- reset counters
  : sudo iptables -Z 

- iptables -A INPUT -p udp -m udp --dport 53 -m string --string "abacre" --algo kmp --to 1500 -j DROP

* [[https://gist.github.com/tomasinouk/eec152019311b09905cd][Some examples of SNAT, DNAT with iptables with comments]]

    mainly used in start-up script

How to test 'safely'

When we play with iptables aka firewall we might end up in situation, where we execute rule, which has unforseen impact - lock yourself out. Recovering from this situation is necessity.

    How to:

        Enable reboot via SMS.
        Test all commands in shell first before putting them into Start-up script. This way the command will be wiped out, when unit is rebooted.

masquarade all outgoing packets to be WLAN0 IP

iptables -t nat -A PREROUTING -s 192.168.1.2 -i eth0 -j MASQUERADE

All packets leaving eth0 will have src eth0 ip address

iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to 192.168.1.1

Match rule specifying a source port

    Below makes sure packets from Eth Devices have correct source IP Address Notice, when specifying a port, protocol needs to be specified as well

iptables -t nat -A POSTROUTING -o wlan0 -s 192.168.1.2 -p udp --dport 16020 -j SNAT --to 10.1.1.7:51889
iptables -t nat -A POSTROUTING -o wlan0 -s 192.168.1.2 -p tcp --dport 21 -j SNAT --to 10.1.1.7:21
iptables -t nat -A POSTROUTING -o wlan0 -s 192.168.1.3 -j SNAT --to 10.1.1.9


# Packets destined for IP 10.1.1.7 will be forwaded to 192.168.1.2 UDP,TCP
# Packets destined for IP 10.1.1.9 will be forwaded to 192.168.1.3 UDP,TCP
# Does work with ping (ICMP) correctly
iptables -t nat -A PREROUTING -i wlan0 -d 10.1.1.7 -j DNAT --to-destination 192.168.1.2
iptables -t nat -A PREROUTING -i wlan0 -d 10.1.1.9 -j DNAT --to-destination 192.168.1.3

Packets destined for IP 10.1.1.7 will be forwaded to 192.168.1.2 UDP,TCP

    Does NOT work with ping (ICMP) correctly, does not handle ICMP protocol WLAN IP reply on a ping without

iptables -t nat -A PREROUTING -p tcp -i wlan0 -d 10.1.1.7 -j DNAT --to-destination 192.168.1.2
iptables -t nat -A PREROUTING -p udp -i wlan0 -d 10.1.1.7 -j DNAT --to-destination 192.168.1.2

Change SNMP port of outgoing SNMP messages

iptables -t nat -A OUTPUT -p udp --dport 162 -j DNAT --to-destination 192.168.1.33:1162

Add secondary IP to WLAN0

ip addr add 10.1.1.7/24 dev wlan0
ip addr add 10.1.1.9/24 dev wlan0

List all IP addresses asign to wlan0

ip add list dev wlan0
All packets leaving eth1 will change source IP to 192.168.20.1

iptables -t nat -A POSTROUTING -o eth1 -j SNAT --to 192.168.20.1

All TCP packets leaving eth1 on port 443 will change source IP to 192.168.20.1

iptables -t nat -A POSTROUTING -o eth1 -s 192.168.1.22 -p tcp --dport 443 -j SNAT --to 192.168.20.1:443

All ICMP packets leaving eth1 will change source IP to 192.168.20.1

iptables -t nat -A POSTROUTING -o eth1 -s 192.168.1.22 -p icmp -j SNAT --to 192.168.20.1

All supported packets leaving eth1 which have source IP 192.168.1.22 will change source IP to 192.168.20.1

iptables -t nat -A POSTROUTING -o eth1 -s 192.168.1.22 -p all -j SNAT --to 192.168.20.1

SNAT on dynamically assign interface

    usage with WIFI dual mode where WiFi can be AP and STA at the same time add to start-up script

# assuming wlan1 is STA interface
ip=$(ip -o addr show up primary scope global wlan1 |
      while read -r num dev fam addr rest; do echo ${addr%/*}; done)
echo $ip

# all packets leaving wlan1 will change source IP to STA interface IP
iptables -t nat -A POSTROUTING -o wlan1 -j SNAT --to $ip

Block traffic from ETH0 to Cell except NTP

Order is important as the DROP will end up after allowing communication with NTP server. For that reason we need to INSERT the rules. If used APPEND the order of commands have to be reversed to ensure DROP is the last.

iptables -I FORWARD -i eth0 -o usb0 -j DROP
iptables -I FORWARD -d pool.ntp.org -i eth0 -o usb0 -j ACCEPT

Block traffic on ETH1 based on ports

Useful when you have a device behind the router and want to limit it's ability to use/exploit resources on the router.

    Use with caution as you can lock yourself out.

# Block port 80 (http) only on ETH1 interface
iptables -t filter -A INPUT -i eth1 -p tcp --dport 80 -j DROP
# Block port 443 (https) only on ETH1 interface
iptables -t filter -A INPUT -i eth1 -p tcp --dport 80 -j DROP
# Block port 22 (ssh) only on ETH1 interface
iptables -t filter-A INPUT -i eth1 -p tcp --dport 22 -j DROP
# Block ping (icmp) on ETH1 interface unit does not response to ping
iptables -t filter -A INPUT -i eth1 -p icmp -j DROP

Check NAT table

The iptables table needs to be specified for listing. EG. nat, mangle.

iptables -t nat -L -n -v

* ChatGPT

** How to transparently proxy a port from one IP address to another with iptables?

To transparently proxy a port from one IP address to another using iptables, you can use the REDIRECT target.

Here is an example command to redirect incoming traffic on port 80 from IP address 192.168.1.100 to IP address 192.168.1.200:

css

iptables -t nat -A PREROUTING -p tcp -d 192.168.1.100 --dport 80 -j DNAT --to-destination 192.168.1.200:80
iptables -t nat -A POSTROUTING -j MASQUERADE

This will redirect all incoming traffic to IP address 192.168.1.100 on port 80 to IP address 192.168.1.200 on port 80. The second line enables NAT so that the destination IP address is changed back to the original source IP address when the response is sent back.

Note that for this to work, the machine running iptables needs to have IP forwarding enabled. This can be done with the following command:

sysctl -w net.ipv4.ip_forward=1

Additionally, make sure to save the iptables rules so that they persist across reboots. This can be done with the following command:

javascript

iptables-save > /etc/iptables/rules.v4

This will save the current iptables rules to the specified file, which can then be loaded at boot time using the iptables-restore command.

To specify a more precise rule for enabling NAT and changing the destination IP address back to the original source IP address, you can use the following iptables command:

iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -d 192.168.1.200 -p tcp --dport 80 -j SNAT --to-source 192.168.1.100

This command specifies the source network as 192.168.1.0/24 (change this to match your specific network), the destination IP address as 192.168.1.200, the protocol as TCP, and the destination port as 80 (change this to match the port you are forwarding). It then uses the SNAT target to change the source IP address to 192.168.1.100, which is the original source IP address of the incoming traffic.

Note that this rule should be used in addition to the DNAT rule in the previous answer, which forwards incoming traffic to the destination IP address. Together, these two rules will enable transparent proxying of the specified port from one IP address to another.

* PREROUTING vs OUTPUT

One needs to pay close attention between local packets, and network packets,
when using iptables. Local packets are packets created on the local machine,
whereas network packets are packets received. PREROUTING works on network
packets, for instance what you would get on a router device. Since in this
case it's all local, then one must use OUTPUT instead of PREROUTING to
redirect the packets. The necessary rule is therefore.

iptables -t nat -A OUTPUT     -p tcp --dport 4567 -j REDIRECT --to 8443

https://i.stack.imgur.com/ZCSl9.png

- [[https://stackoverflow.com/questions/64768982/http-iptable-prerouting-rule-is-not-working][nat - HTTP iptable PREROUTING rule is not working - Stack Overflow]]
  - [[https://danielmiessler.com/study/iptables/][An IPTABLES Primer - Daniel Miessler]]
