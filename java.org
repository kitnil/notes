:PROPERTIES:
:ID:       dfd6af21-1df2-4813-a70f-56e65f4a3939
:END:
#+title: Java

#+BEGIN_SRC java
  //usr/bin/env javac "$0" && exec /usr/bin/env java HelloWorld

  public class HelloWorld {
     public static void main(String[] args) {
        // Prints "Hello, World" in the terminal window.
        System.out.println("Hello, World");
     }
  }
#+END_SRC

https://www.youtube.com/watch?v=t1-YZ6bF-g0
- Arrays.stream(new String[] {"hello", "world", "guys"}).sorted().findFirst()
- Arrays.stream(new String[] {"where", "hello", "world", "guys"}).filter(str -> str.startsWith("w")).sorted().forEach(System.out::println))

- [[https://github.com/java-decompiler/jd-gui][java-decompiler/jd-gui: A standalone Java Decompiler GUI]]
- [[https://github.com/redisson/redisson][redisson/redisson: Redisson - Redis Java client with features of In-Memory Data Grid. Over 50 Redis based Java objects and services: Set, Multimap, SortedSet, Map, List, Queue, Deque, Semaphore, Lock, AtomicLong, Map Reduce, Publish / Subscribe, Bloom filter, Spring Cache, Tomcat, Scheduler, JCache API, Hibernate, MyBatis, RPC, local cache ...]]
- [[https://github.com/winterbe/java8-tutorial][winterbe/java8-tutorial: Modern Java - A Guide to Java 8]]
- [[https://github.com/eugenp/tutorials][eugenp/tutorials: Just Announced - "Learn Spring Security OAuth":]]
- [[https://github.com/hierynomus/sshj][hierynomus/sshj: ssh, scp and sftp for java]]
- [[http://www.pythontutor.com/visualize.html][JAVA Code Visualisation]]
- [[https://github.com/jesseduffield/lazynpm][jesseduffield/lazynpm: terminal UI for npm]]
- [[https://github.com/ufuu/Java-JDK10][ufuu/Java-JDK10: Java version 1.1 + JDK 1.0 and very early Java applets, developed 1995 to 1996.]]
- [[https://sr.ht/~ruivieira/java/][java: A collection of Java projects]]
- [[https://opensource.com/article/21/10/monitor-java-linux-jconsole][Monitor your Java on Linux with jconsole | Opensource.com]]
- [[https://github.com/HumbleUI/JWM][HumbleUI/JWM: Cross-platform window management and OS integration library for Java]]
- [[https://github.com/winder/Universal-G-Code-Sender][winder/Universal-G-Code-Sender: A cross-platform G-Code sender for GRBL, Smoothieware, TinyG and G2core.]]
- [[https://habr.com/ru/post/548700/][Сбор метрик Spring Boot приложения c помощью Prometheus и Grafana / Хабр]]

* Implementations
- [[https://github.com/kimtg/Javelin][kimtg/Javelin: Javelin is a dialect of Lisp. It is designed to be an embedded language (minimal Lisp for the Java Virtual Machine).]]
- [[https://github.com/phillbush/jvm][phillbush/jvm: simple java virtual machine]]

* Learning

- [[https://wscp.dev/posts/tech/java-pattern-matching/][Java 21 makes me actually like Java again - WSCP's blog]]

- [[https://www.tabnine.com/code/java/classes/org.gitlab4j.api.NotesApi][org.gitlab4j.api.NotesApi java code examples | Tabnine]]

- [[https://piotrminkowski.com/2023/02/13/best-practices-for-java-apps-on-kubernetes/][Best Practices for Java Apps on Kubernetes - Piotr's TechBlog]]

- [[https://www.youtube.com/watch?v=gVQijiDliuI&list=PLz-qdc-PbYk6ikoEsdn4VZ4HUkKPVPMXp&index=3][(156) Spring Core: 5000 ways to build and wire your Spring Beans | Spring Core - Masterclass - YouTube]]
  1. Constructor injection or “Constructor dependency injection”
  2. @Autowired
     - Field injection
     - Alternatives:
       - @Inject
       - @Resource
  3. Setter injection

  @ComponentScan annotation
  @Component
  @Service

- [[https://www.youtube.com/watch?v=xN6yXgeZdWs&list=PLz-qdc-PbYk6ikoEsdn4VZ4HUkKPVPMXp&index=2][(156) Spring Core: You First Spring Application | Spring Core - Masterclass - YouTube]]
  - @Configuration
    - @Bean
  - “ApplicationContextConfiguration”
    - getBean

- [[https://www.youtube.com/watch?v=4BD6pF7dkkc&list=PLz-qdc-PbYk6ikoEsdn4VZ4HUkKPVPMXp&index=4][(156) Spring Transaction Management: Finally Understandable | Spring Core - Masterclass - YouTube]]

  org.springframework spring-tx
  org.springframework spring-jdbc :: utilities, execute SQL calls to database

  Proxies, Spring transaction or database management
  @Value comes from some “properties” file or from some server

  Instead of PostgreSQL or MySQL could use com.h2database - an embeded Java database.

  “Transaction” is a “database connection”.
  @EnableTransactionManagement annotation requires @Bean “transaction manager”

  @Transactional annotation makes every public method in class
  “transactional”, which means it opens up and closes database connections
  automatically.  @Transactional could be applied to a single method instead.

  For logs you could use
  ‘TransactionSynchronizationManager.isActualTransactionActive’ with
  ‘System.out.println’.

  Everything above is handled by a “proxy” (CGLIB - is a library which Spring
  uses).

  - Inner class
    #+begin_src java
      new FixedValue() {
          @Override
          public Object loadObject() throws Exception {
              return "moeooow by cglib";
          }
      }
    #+end_src
    is equal to lambda
    #+begin_src java
      (FixedValue) () -> "moeooow by cglib"
    #+end_src

- [[https://opensource.com/article/22/6/maps-groovy-vs-java][Handling maps in Groovy vs Java | Opensource.com]]

- [[https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html][Maven – Introduction to the Standard Directory Layout]]

- [[https://twitter.com/debugagent/status/1491075324805001219?t=pJat2j-HN-iRfY3CY5f6qQ][Shai Almog on Twitter: "I'm very excited about my new series of videos. I feel they can make an impact. These are short, bite-sized videos on debugging and troubleshooting software. I call them 🦆 𝟭𝟰𝟬 𝗦𝗲𝗰𝗼𝗻𝗱 𝗗𝘂𝗰𝗸𝗹𝗶𝗻𝗴𝘀 🦆 (credit @TomGranot) This, my friends, is a 🧵 of 🦆..." / Twitter]]

- [[https://arxiv.org/pdf/2202.05906.pdf][Towards Build Verifiability for Java-based SystemsTowards Build Verifiability for Java-based Systems - 2202.05906.pdf]]

  org.springframework spring-context

- [[https://gist.github.com/egeneralov/60ced37da0b40008a7b3345c89a280b9][java-opts-discover-cgroup-limits.txt]]
  : -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1 -XshowSettings:vm

** What is static method in Java?
In Java, a static method is a method that belongs to a class rather than an instance of the class. Unlike non-static methods, which can be called on an instance of the class, static methods can be called directly on the class itself, without having to create an instance of the class first.

A static method is declared using the "static" keyword in its declaration, like this:

csharp
Copy code
public static void myMethod() {
  // Code for the static method
}
Static methods are commonly used for utility functions that don't require access to instance-specific data, and are therefore shared across all instances of the class. For example, a static method could be used to perform a mathematical calculation, generate a random number, or format a string in a specific way.

Static methods can access only static variables and other static methods within the same class. They cannot access instance variables or methods, as they do not have access to an instance of the class.

Here's an example of how you might use a static method:

csharp
Copy code
public class MyClass {
  public static int add(int a, int b) {
    return a + b;
  }
}

// Call the static method directly on the class
int result = MyClass.add(1, 2);

** What is meta class in Java?

A meta class in Java is a class that defines the structure of other classes. In other words, a meta class is a blueprint for creating instances of classes. It defines the fields, methods, and behaviors of the class that it represents. The term "meta class" is often used to describe the structure of the class hierarchy in object-oriented programming languages. In Java, the meta class is represented by the java.lang.Class class, which provides information about the structure of classes at runtime. You can use the java.lang.Class class to perform a variety of tasks, such as introspecting the structure of classes, accessing the fields and methods of classes, and creating instances of classes dynamically.

** How could I list everything Java class could provide?

You can use the java.lang.Class class in Java to get information about a class, including its methods, fields, constructors, and interfaces. The getMethods() method of java.lang.Class returns an array of Method objects that represents all the public methods declared in the class, including those declared in superclasses. The getFields() method returns an array of Field objects that represents all the public fields declared in the class, including those declared in superclasses. The getConstructors() method returns an array of Constructor objects that represents all the public constructors declared in the class. The getInterfaces() method returns an array of Class objects that represent all the interfaces implemented by the class.

Here is an example that demonstrates how to use these methods:

scss

import java.lang.reflect.Method;
import java.lang.reflect.Field;
import java.lang.reflect.Constructor;

public class Main {
  public static void main(String[] args) throws Exception {
    Class clazz = Class.forName("java.lang.String");

    System.out.println("Methods:");
    Method[] methods = clazz.getMethods();
    for (Method method : methods) {
      System.out.println(method);
    }

    System.out.println("Fields:");
    Field[] fields = clazz.getFields();
    for (Field field : fields) {
      System.out.println(field);
    }

    System.out.println("Constructors:");
    Constructor[] constructors = clazz.getConstructors();
    for (Constructor constructor : constructors) {
      System.out.println(constructor);
    }

    System.out.println("Interfaces:");
    Class[] interfaces = clazz.getInterfaces();
    for (Class anInterface : interfaces) {
      System.out.println(anInterface);
    }
  }
}

*** run example

$ javac -classpath .:/run_dir/junit-4.12.jar:target/dependency/* -d . Main.java
$ java -classpath .:/run_dir/junit-4.12.jar:target/dependency/* Main
Methods:
public boolean java.lang.String.equals(java.lang.Object)
public int java.lang.String.length()
public java.lang.String java.lang.String.toString()
public int java.lang.String.hashCode()
public void java.lang.String.getChars(int,int,char[],int)
public int java.lang.String.compareTo(java.lang.String)
public int java.lang.String.compareTo(java.lang.Object)
public int java.lang.String.indexOf(java.lang.String,int)
public int java.lang.String.indexOf(int)
public int java.lang.String.indexOf(int,int)
public int java.lang.String.indexOf(java.lang.String)
public static java.lang.String java.lang.String.valueOf(int)
public static java.lang.String java.lang.String.valueOf(float)
public static java.lang.String java.lang.String.valueOf(boolean)
public static java.lang.String java.lang.String.valueOf(long)
public static java.lang.String java.lang.String.valueOf(double)
public static java.lang.String java.lang.String.valueOf(java.lang.Object)
public static java.lang.String java.lang.String.valueOf(char)
public static java.lang.String java.lang.String.valueOf(char[])
public static java.lang.String java.lang.String.valueOf(char[],int,int)
public java.util.stream.IntStream java.lang.String.codePoints()
public boolean java.lang.String.isEmpty()
public char java.lang.String.charAt(int)
public int java.lang.String.codePointAt(int)
public int java.lang.String.codePointBefore(int)
public int java.lang.String.codePointCount(int,int)
public int java.lang.String.offsetByCodePoints(int,int)
public byte[] java.lang.String.getBytes(java.nio.charset.Charset)
public void java.lang.String.getBytes(int,int,byte[],int)
public byte[] java.lang.String.getBytes(java.lang.String) throws java.io.UnsupportedEncodingException
public byte[] java.lang.String.getBytes()
public boolean java.lang.String.contentEquals(java.lang.StringBuffer)
public boolean java.lang.String.contentEquals(java.lang.CharSequence)
public boolean java.lang.String.equalsIgnoreCase(java.lang.String)
public int java.lang.String.compareToIgnoreCase(java.lang.String)
public boolean java.lang.String.regionMatches(boolean,int,java.lang.String,int,int)
public boolean java.lang.String.regionMatches(int,java.lang.String,int,int)
public boolean java.lang.String.startsWith(java.lang.String)
public boolean java.lang.String.startsWith(java.lang.String,int)
public boolean java.lang.String.endsWith(java.lang.String)
public int java.lang.String.lastIndexOf(int)
public int java.lang.String.lastIndexOf(java.lang.String,int)
public int java.lang.String.lastIndexOf(java.lang.String)
public int java.lang.String.lastIndexOf(int,int)
public java.lang.String java.lang.String.substring(int,int)
public java.lang.String java.lang.String.substring(int)
public java.lang.CharSequence java.lang.String.subSequence(int,int)
public java.lang.String java.lang.String.concat(java.lang.String)
public java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)
public java.lang.String java.lang.String.replace(char,char)
public boolean java.lang.String.matches(java.lang.String)
public boolean java.lang.String.contains(java.lang.CharSequence)
public java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)
public java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)
public java.lang.String[] java.lang.String.split(java.lang.String)
public java.lang.String[] java.lang.String.split(java.lang.String,int)
public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])
public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.Iterable)
public java.lang.String java.lang.String.toLowerCase()
public java.lang.String java.lang.String.toLowerCase(java.util.Locale)
public java.lang.String java.lang.String.toUpperCase(java.util.Locale)
public java.lang.String java.lang.String.toUpperCase()
public java.lang.String java.lang.String.trim()
public java.lang.String java.lang.String.strip()
public java.lang.String java.lang.String.stripLeading()
public java.lang.String java.lang.String.stripTrailing()
public boolean java.lang.String.isBlank()
public java.util.stream.Stream java.lang.String.lines()
public java.util.stream.IntStream java.lang.String.chars()
public char[] java.lang.String.toCharArray()
public static java.lang.String java.lang.String.format(java.lang.String,java.lang.Object[])
public static java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])
public static java.lang.String java.lang.String.copyValueOf(char[],int,int)
public static java.lang.String java.lang.String.copyValueOf(char[])
public native java.lang.String java.lang.String.intern()
public java.lang.String java.lang.String.repeat(int)
public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
public final void java.lang.Object.wait() throws java.lang.InterruptedException
public final native java.lang.Class java.lang.Object.getClass()
public final native void java.lang.Object.notify()
public final native void java.lang.Object.notifyAll()
Fields:
public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER
Constructors:
public java.lang.String(byte[])
public java.lang.String(byte[],int,int)
public java.lang.String(byte[],java.nio.charset.Charset)
public java.lang.String(byte[],java.lang.String) throws java.io.UnsupportedEncodingException
public java.lang.String(byte[],int,int,java.nio.charset.Charset)
public java.lang.String(java.lang.StringBuilder)
public java.lang.String(java.lang.StringBuffer)
public java.lang.String(char[],int,int)
public java.lang.String(char[])
public java.lang.String(java.lang.String)
public java.lang.String()
public java.lang.String(byte[],int,int,java.lang.String) throws java.io.UnsupportedEncodingException
public java.lang.String(byte[],int)
public java.lang.String(byte[],int,int,int)
public java.lang.String(int[],int,int)
Interfaces:
interface java.io.Serializable
interface java.lang.Comparable
interface java.lang.CharSequence

** What is public class in Java?

In Java, a public class is a class that can be accessed from anywhere in the program. A class is considered public if it is declared with the "public" keyword. This means that any other class in the program can create an object of this class, call its methods, or access its fields. Public classes are an important concept in Java as they allow for the creation of reusable code and objects that can be used throughout a program.

** What is public static method in Java?

In Java, a public static method is a method that is declared with the "public" and "static" access modifiers.

The "public" access modifier means that the method can be accessed from anywhere in the code, including outside of the class that defines it. The "static" modifier means that the method belongs to the class and can be invoked without creating an instance of the class.

A public static method can be called using the class name, without creating an instance of the class. For example:

csharp

public class MyClass {
   public static void myMethod() {
      // method code goes here
   }
}

// Call the method
MyClass.myMethod();

** What is private static method in Java?

A private static method in Java is a method that is declared with the "private" access modifier and "static" keyword. The "private" access modifier means that the method can only be accessed within the same class in which it is declared. The "static" keyword means that the method belongs to the class rather than an instance of the class, and can be called without creating an instance of the class.

A private static method can only be accessed by other static methods within the same class. This is useful when you want to encapsulate some functionality within the class and do not want it to be exposed to other classes. Private static methods are typically used to implement utility methods that are used only within the class, such as helper methods that perform specific calculations or transformations.

** Boolean false or true by default in Java?

In Java, the default value of a boolean type is false.

* Maven
- [[https://github.com/fzakaria/nixos-maven-example][fzakaria/nixos-maven-example: An example of how to use buildMaven with Nix to build a Maven project]]

* Cheat sheet

- javap main.class
- java main

** Temporary directory
#+begin_src markdown
  [How to get the temporary directory path in Java - Marc Nuri](https://blog.marcnuri.com/how-to-get-the-temporary-file-path-in-java)

  > To get the temporary directory path in Java you can use the `java.io.tmpdir` [system property](https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getProperties-- "Link to the Javadoc for the System class where the default system properties are listed"). The JVM sets this property when it starts and points to the default temporary directory for the operating system.
  > 
  >     System.getProperty("java.io.tmpdir");
  > 
  > The following code snippet shows a simple program that logs the temporary directory when the application starts:
  > 
  > TempDir.java
  > 
  >     public class TempDir {
  >       public static void main(String[] args) {
  >         System.out.println("Temporary directory: " + System.getProperty("java.io.tmpdir"));
  >       }
  >     }
  > 
  > When executed, the program will output the following:
  > 
  >     Temporary directory: /tmp
  > 
  > ## [](https://blog.marcnuri.com/how-to-get-the-temporary-file-path-in-java/#undefined)What are the default temporary directories for each operating system?
  > 
  > -   Windows: `%USERPROFILE%\AppData\Local\Temp`
  > -   Linux: `/tmp`
  > -   macOS: `/tmp`
  > 
  > ## [](https://blog.marcnuri.com/how-to-get-the-temporary-file-path-in-java/#undefined)How to change the temporary directory path in Java?
  > 
  > The JVM automatically sets the temporary directory path as a system property. However, you can change it by setting the `java.io.tmpdir` property to the desired path when starting the JVM.
  > 
  >     java -Djava.io.tmpdir=$TEMP_DIR -jar my-app.jar
#+end_src

* Languages
- [[https://github.com/elonlit/Genesis][elonlit/Genesis: God's actual programming language.]]

* Libraries

- [[https://github.com/mabe02/lanterna][mabe02/lanterna: Java library for creating text-based GUIs]]
- [[https://github.com/JetBrains/jediterm][JetBrains/jediterm: Pure Java Terminal Emulator. Works with SSH and PTY.]]
- [[https://github.com/shred/acme4j][shred/acme4j: Java client for ACME (Let's Encrypt)]]
- [[https://github.com/ebarlas/microhttp][ebarlas/microhttp: Fast, scalable, self-contained, single-threaded Java web server]]
- [[https://github.com/oshi/oshi][oshi/oshi: Native Operating System and Hardware Information]]
- [[https://github.com/pgjdbc/pgjdbc][pgjdbc/pgjdbc: Postgresql JDBC Driver]]
- [[https://github.com/eclipse/deeplearning4j][eclipse/deeplearning4j: Suite of tools for deploying and training deep learning models using the JVM. Highlights include model import for keras, tensorflow, and onnx/pytorch, a modular and tiny c++ library for running math code and a java based math library on top of the core c++ library. Also includes samediff: a pytorch/tensorflow like library for running deep learning using automatic differentiation.]]

* Programs
- [[https://github.com/killbill/killbill][killbill/killbill: Open-Source Subscription Billing & Payments Platform]]

* Security
- [[https://github.com/CERTCC/CVE-2021-44228_scanner][CERTCC/CVE-2021-44228_scanner: Scanners for Jar files that may be vulnerable to CVE-2021-44228]]
  - [[https://github.com/0xInfection/LogMePwn][0xInfection/LogMePwn: A fully automated, reliable, super-fast, mass scanning and validation toolkit for the Log4J RCE CVE-2021-44228 vulnerability.]]
  - [[https://github.com/palantir/log4j-sniffer][palantir/log4j-sniffer: A tool that scans archives to check for vulnerable log4j versions]]
  - [[https://github.com/traefik/plugin-log4shell][traefik/plugin-log4shell: Log4Shell is a middleware plugin for Traefik which blocks JNDI attacks based on HTTP header values.]]
  - [[https://github.com/google/log4jscanner][google/log4jscanner]]

* Examples

** Write me a Java program with a shebung line to get https://www.gnu.org/ HTML page.

Here is an example Java program that uses the java.net package to fetch the HTML content of https://www.gnu.org/:

java

#!/usr/bin/env java

import java.io.*;
import java.net.*;

public class HttpGet {
    public static void main(String[] args) throws IOException {
        URL url = new URL("https://www.gnu.org/");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("GET");
        int responseCode = con.getResponseCode();
        if (responseCode == HttpURLConnection.HTTP_OK) {
            BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuilder content = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
                content.append(inputLine);
            }
            in.close();
            System.out.println(content.toString());
        } else {
            System.out.println("GET request failed");
        }
    }
}

Note that this program is a very basic example and doesn't handle errors or exceptions that may occur while fetching the content. In a real-world scenario, you would want to handle these cases properly.

* Tools
- [[https://github.com/AdoptOpenJDK/jlink.online][AdoptOpenJDK/jlink.online: Build optimized Java runtimes in your browser!]]
- [[https://github.com/Body-Alhoha/Remake][Body-Alhoha/Remake: Library to modify java classes bytecode]]
- [[https://github.com/brianmcgee/nix-gradle-sample][brianmcgee/nix-gradle-sample: Examples of building Gradle packages with Nix]]
- [[https://github.com/Col-E/Recaf][Col-E/Recaf: The modern Java bytecode editor]]
- [[https://github.com/find-sec-bugs/find-sec-bugs][find-sec-bugs/find-sec-bugs: The SpotBugs plugin for security audits of Java web applications and Android applications. (Also work with Kotlin, Groovy and Scala projects)]]
- [[https://github.com/GoogleContainerTools/jib][GoogleContainerTools/jib: 🏗 Build container images for your Java applications.]]
- [[https://github.com/iluwatar/uml-reverse-mapper][iluwatar/uml-reverse-mapper: Automatically generate class diagram from code. Supports Graphviz, PlantUML and Mermaid output formats.]]
- [[https://github.com/micrometer-metrics/micrometer][micrometer-metrics/micrometer: An application observability facade for the most popular observability tools. Think SLF4J, but for observability.]]
- [[https://github.com/microsoft/gctoolkit][microsoft/gctoolkit: Tool for parsing GC logs]]
- [[https://github.com/Naton1/jvm-explorer][Naton1/jvm-explorer: JVM Explorer is a Java desktop application for browsing loaded class files inside locally running Java Virtual Machines.]]
- [[https://github.com/platypusguy/jacobin][platypusguy/jacobin: A more than minimal JVM written in Go and capable of running Java 17 classes.]]
- [[https://github.com/Privado-Inc/privado][Privado-Inc/privado: Open Source Static Scanning tool to detect data flows in your code, find data security vulnerabilities & generate accurate Play Store Data Safety Report.]]
- [[https://github.com/runsidekick/sidekick][runsidekick/sidekick: Free and open-source live application debugger. Like chrome dev tools but for your backend]]
- [[https://github.com/soot-oss/soot][soot-oss/soot: Soot - A Java optimization framework]]
- [[https://github.com/Storyyeller/Krakatau][Storyyeller/Krakatau: Java decompiler, assembler, and disassembler]]
