:PROPERTIES:
:ID:       56a8bf5f-441d-40fd-8469-cda6a17e2210
:END:
#+title: QEMU

 - [[https://airbus-seclab.github.io/qemu_blog/][Introduction | QEMU internals]]
 - [[https://github.com/airbus-seclab/qemu_blog][airbus-seclab/qemu_blog: A series of posts about QEMU internals]]

 - [[https://github.com/Obirvalger/vml][Obirvalger/vml: Tool for easily and transparently work with qemu virtual machines]]

 - [[https://github.com/geohot/qira][geohot/qira: QEMU Interactive Runtime Analyser]]

 - [[https://github.com/wimpysworld/quickemu][wimpysworld/quickemu: The amazing Quickemu; as seen on YouTube]]

 - [[https://pikabu.ru/story/eshche_odin_post_kak_igrat_v_virtualnoy_mashine_4736956][Еще один пост, как играть в виртуальной машине. | Пикабу]]

 - qemu-bridge http://www.kaizou.org/2018/06/qemu-bridge/

 - [[https://habr.com/ru/post/522378/][Обратная отладка виртуальных машин в QEMU / Хабр]]

 - [[https://github.com/cosminmocan/vfio-single-amdgpu-passthrough][cosminmocan/vfio-single-amdgpu-passthrough: This repo is a tutorial for single amd gpu passthrough to various qemu VMs]]

 - [[https://github.com/digitalocean/go-qemu][digitalocean/go-qemu: Go packages to interact with QEMU using the QEMU Machine Protocol (QMP). Apache 2.0 Licensed.]]

 - [[https://github.com/nemuTUI/nemu][nemuTUI/nemu: Ncurses UI for QEMU]]

 - [[https://github.com/VMDashboard/vmdashboard][VMDashboard/vmdashboard: web-based open source virtualization management interface for QEMU and KVM virtual machines]]

 - [[https://github.com/abbbi/qmpbackup][abbbi/qmpbackup: Live Qemu Incremental backup using dirty-bitmaps]]

 - [[https://github.com/andre-richter/qemu-exit][andre-richter/qemu-exit: Exit QEMU with user-defined code]]

 - [[https://github.com/xolox/python-negotiator][xolox/python-negotiator: Scriptable KVM/QEMU guest agent implemented in Python]]

 - [[https://github.com/MarginResearch/cannoli][MarginResearch/cannoli: High-performance QEMU memory and instruction tracing]]

 - [[https://github.com/atrosinenko/qemujs][atrosinenko/qemujs: Qemu.js source code with proof-of-concept machine-code-to-WASM JIT.]]
   - [[https://habr.com/ru/post/315770/][Qemu.js с поддержкой JIT: фарш всё же можно провернуть назад / Хабр]]

 - [[https://gitlab.com/isard/isardvdi][Isard VDI (Virtual Desktop Infraestructure) Project. Open Source KVM Virtual Desktops based on KVM Linux and dockers. https://isardvdi.com/]]

 - [[https://github.com/nspin/kali-now/blob/main/nix/kali.nix][kali-now/kali.nix at main · nspin/kali-now]]

 - convert qcow2 to lvm
   : qemu-img convert -p -n -f qcow2 -O raw /mnt/data/images/102/vm-102-disk-0.qcow2 /dev/pve/vm-102-disk-0

 - physical machine to a virtual machine
   : qemu-img convert -c -f raw -O qcow2 /dev/sda /var/lib/libvirt/images/hdd-shrunk.qcow2

 - compact image
   : virt-sparsify -v --tmp /home/eng/tmp /home/eng/mj363.qcow2 /home/eng/mj363_s.qcow2

 - serial port
   : qemu-system-x86_64 -hda /home/oleg/vm/ubuntu-16.04.qcow -smp 4 -m 8192 -enable-kvm -nographic -serial mon:stdio -append 'root=/dev/sda1 console=ttyS0' -kernel ./vmlinuz-4.4.0-142-generic 

 - In QEMU you need to do ctrl-1 to go to the QEMU console, then
   “sendkey ctrl-alt-f1”, and then ctrl-2 to switch back to the VM
   screen.

#+BEGIN_SRC sh
  # -cdrom /srv/archive/microsoft-windows-7-sp1-en-x64-2017-08.iso -boot order=d \

  # -display none \
  # -vga qxl \
  # -spice unix,addr=/tmp/vm_spice.socket,disable-ticketing \
  # -device virtio-serial-pci \
  # -device virtserialport,chardev=spicechannel0,name=com.redhat.spice.0 \


  # TODO: -net nic -net bridge,br=bridge0

  # -vga qxl \
  # -device virtio-serial-pci \
  # -device virtserialport,chardev=spicechannel0,name=com.redhat.spice.0 \
  # -chardev spicevmc,id=spicechannel0,name=vdagent \
  # -spice unix,addr=/tmp/vm_spice.socket,disable-ticketing \


  # -usb \
  # -device usb-ehci,id=ehci \
      # -device usb-storage,bus=ehci.0,vendorid=0x0dd8,productid=173c \

   # -device ich9-usb-ehci1,id=usb \
   # -device ich9-usb-uhci1,masterbus=usb.0,firstport=0,multifunction=on \
   # -device ich9-usb-uhci2,masterbus=usb.0,firstport=2 \
   # -device ich9-usb-uhci3,masterbus=usb.0,firstport=4 \
   # -chardev spicevmc,name=usbredir,id=usbredirchardev1 \
   # -device usb-redir,chardev=usbredirchardev1,id=usbredirdev1 \
   # -chardev spicevmc,name=usbredir,id=usbredirchardev2 \
   # -device usb-redir,chardev=usbredirchardev2,id=usbredirdev2 \
   # -chardev spicevmc,name=usbredir,id=usbredirchardev3 \
   # -device usb-redir,chardev=usbredirchardev3,id=usbredirdev3

   # -chardev socket,id=usbredirchardev1,port=8100,host=192.168.105.120 \
   # -device usb-redir,chardev=usbredirchardev1,id=usbredirdev1,bus=ehci.0,debug=4 \


  # -usb \
  # -usbdevice host:0dd8:173c \

  # 04b8:0810

  # -device ich9-usb-ehci1,id=ehci,addr=1d.7,multifunction=on \
  # -device ich9-usb-uhci1,id=uhci-1,addr=1d.0,multifunction=on,masterbus=ehci.0,firstport=0 \
  # -device ich9-usb-uhci2,id=uhci-2,addr=1d.1,multifunction=on,masterbus=ehci.0,firstport=2 \
  # -device ich9-usb-uhci3,id=uhci-3,addr=1d.2,multifunction=on,masterbus=ehci.0,firstport=4 \

  # -chardev socket,id=usbredirchardev1,port=8100,host=192.168.105.120 \
  # -device usb-redir,chardev=usbredirchardev1,id=usbredirdev1,bus=ehci.0,debug=4 \


  # -usb \
  # -usbdevice host:04b8:0810 \

  # usbredir
  # See 265065


  # -cdrom /srv/archive/microsoft-windows-7-sp1-en-x64-2017-08.iso -boot order=d \
  # -usb -device usb-ehci,id=ehci -device usb-host,bus=ehci.0,vendorid=810 \

  # TODO: -device usb-host,hostbus=2,hostaddr=4 \

#+END_SRC

* Snapshot

Source [[https://blog.programster.org/qemu-img-cheatsheet][Qemu-img Cheatsheet | Programster's Blog]]

** Create Snapshot
#+begin_example
sup@kvm34:~$ sudo /usr/bin/virsh destroy vm33154
#+end_example

#+begin_example
sup@kvm34:~$ sudo /usr/bin/qemu-img snapshot -c backup /kvm/disks/vm33154.qcow2
#+end_example

#+begin_example
sup@kvm34:~$ sudo /usr/bin/qemu-img snapshot -l /kvm/disks/vm33154.qcow2
Snapshot list:
ID        TAG                 VM SIZE                DATE       VM CLOCK
1         backup      0 2021-01-19 15:47:15   00:00:00.000

sup@kvm34:~$ sudo /usr/bin/virsh start vm33154
Domain vm33154 started
#+end_example

** Delete Snapshot

#+begin_example
sup@kvm34:~$ sudo /usr/bin/virsh destroy vm33154
#+end_example

#+begin_example
sup@kvm34:~$ sudo /usr/bin/qemu-img snapshot -d backup /kvm/disks/vm33154.qcow2
#+end_example

#+begin_example
sup@kvm34:~$ sudo /usr/bin/qemu-img snapshot -l /kvm/disks/vm33154.qcow2
#+end_example

#+begin_example
sup@kvm34:~$ sudo /usr/bin/virsh start vm33154
Domain vm33154 started
#+end_example

** Restore (Apply) Snapshot

#+begin_example
sup@kvm34:~$ sudo /usr/bin/virsh destroy vm33154
#+end_example

#+begin_example
sup@kvm34:~$ sudo /usr/bin/qemu-img snapshot -a backup /kvm/disks/vm33154.qcow2
#+end_example

#+begin_example
sup@kvm34:~$ sudo /usr/bin/virsh start vm33154
Domain vm33154 started
#+end_example

** 

How to mount a qcow2 disk image
-------------------------------

This is a quick guide to mounting a qcow2 disk images on your host server. This is useful to reset passwords,
edit files, or recover something without the virtual machine running.

**Step 1 - Enable NBD on the Host**
    
    modprobe nbd max_part=8

**Step 2 - Connect the QCOW2 as network block device**

    qemu-nbd --connect=/dev/nbd0 /var/lib/vz/images/100/vm-100-disk-1.qcow2

**Step 3 - Find The Virtual Machine Partitions**

    fdisk /dev/nbd0 -l

**Step 4 - Mount the partition from the VM**

    mount /dev/nbd0p1 /mnt/somepoint/

**Step 5 - After you done, unmount and disconnect**

    umount /mnt/somepoint/
    qemu-nbd --disconnect /dev/nbd0
    rmmod nbd
