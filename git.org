#+title: Git

* rerere REuse REcorded REsolution

17.05.2020
#+begin_quote
[18:57] <#guix:nckx> mbakke: Does rebase destroy merge commits?
[18:57] <#guix:mbakke> nckx: I think so.
[18:58] <#guix:nckx> mbakke: How do you handle changes on c-u while you're working on them?
[18:59] <#guix:mbakke> nckx: I used to abort and do a new merge (solving the same conflicts anew) for a long time, until I discovered 'git rerere'
[19:00] <#guix:mbakke> nckx: though 'Merge: 8d33f263c1 ebbf915422' was the tip of the core-updates branch, no?
[19:00] <#lisp:scymtym> phoe: can you try whether the above work for you?
[19:00] <#guix:nckx> I'm not sure, I'm doing reflog autopsy at this point.
[19:01] <#guix:nckx> Just when you mentioned ‚Äòrerere‚Äô I was reading ‚Äòrere is not the solution, as you still have to resolve merges manually the first time across.‚Äô although this was a conflict-free merge, so maybe not relevant.
[19:01] <#guix:mbakke> right, 'git rerere' is only used to save merge resolutions and irrelevant when there are no conflicts
[19:02] <#rwxrob:gwalterix> hey hey
[19:02] <#lisp:phoe> scymtym: OK, one second.
[19:02] <#guix:mbakke> even with git rerere you need to 'git merge --abort' and run a new 'git merge' if the branch has moved
#+end_quote

[[https://www.youtube.com/watch?v=cuk3LQAG2PE][12.1 –°–∫—Ä–∏–Ω–∫–∞—Å—Ç –ø–æ Git ‚Äì ReReRe ‚Äì –ê–≤—Ç–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ - YouTube]]

: git config rerere.enabled true
: git config rerere.autoUpdate true

: git rerere forget index.html

: rm -rf .git/rr-cache
or removed automatically
- if older than rerere.rerereResolved (60 days by default)
- rerere.rerereUnresolved (15 days by default)

rerere-train.sh [COMMIT][--all]

* Servers

- [[https://github.com/gitblit/gitblit][gitblit/gitblit: pure java git solution]]
- [[https://github.com/honza/smithy][honza/smithy: A tiny git forge written in Go]]

* Tools
- [[https://github.com/banga/git-split-diffs][banga/git-split-diffs: GitHub style split diffs in your terminal]]
- [[https://github.com/Skyscanner/turbolift][Skyscanner/turbolift: A simple tool to help apply changes across many GitHub repositories simultaneously]]
- [[https://github.com/Milo123459/glitter][Milo123459/glitter: üåå‚≠ê Git tooling of the future.]]
- [[https://github.com/alarsyo/lohr][alarsyo/lohr: Git mirroring daemon]]
- [[https://github.com/rolandwalker/git-branchdates][rolandwalker/git-branchdates: Highly configurable git branch lister with TrueColor and GitHub PR support]]
- [[https://github.com/kolbasa/git-repo-watcher][kolbasa/git-repo-watcher: A simple bash script to watch a git repository and pull upstream changes if needed.]]
- [[https://github.com/janniks/git-ignore][janniks/git-ignore: An interactive CLI to generate .gitignore files (written in Rust)]]
- [[https://github.com/hutusi/git-paging][hutusi/git-paging: Treat git log as a book, exec `git next` or `git prev` to checkout the next or the previous commit.]]
- [[https://github.com/geongeorge/Git-User-Switch][geongeorge/Git-User-Switch: Switch git user and email at ease]]
- [[https://github.com/matsuyoshi30/gitsu][matsuyoshi30/gitsu: switch git user easily]]
- [[https://github.com/joshmcgrath08/multigitstatus][joshmcgrath08/multigitstatus: Monitor multiple Git repos in a terminal]]
- [[https://habr.com/ru/post/522942/][–ù–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Å –ø–æ–º–æ—â—å—é GitPython / –•–∞–±—Ä]]
- [[https://github.com/moul/git-ci][moul/git-ci: git subcommand to interract with CI/CD from command line]]
- [[https://github.com/github/git-sizer][github/git-sizer: Compute various size metrics for a Git repository, flagging those that might cause problems]]
- [[https://github.com/notwaldorf/tiny-care-terminal][notwaldorf/tiny-care-terminal: üíñüíª A little dashboard that tries to take care of you when you're using your terminal.]]
- [[https://github.com/dirk/quickhook][dirk/quickhook: Faster Git hook (pre-commit, etc.) runner]]
- [[https://github.com/asottile/git-code-debt][asottile/git-code-debt: A dashboard for monitoring code debt in a git repository.]]
- [[https://github.com/asottile/all-repos][asottile/all-repos: Clone all your repositories and apply sweeping changes.]]
- [[https://github.com/aspiers/git-deps][aspiers/git-deps: git commit dependency analysis tool]]
- [[https://github.com/isacikgoz/gitbatch][isacikgoz/gitbatch: manage your git repositories in one place]]
- [[https://github.com/barelyhuman/commitlog][barelyhuman/commitlog: Generate Changelogs from Commits (CLI)]]
- [[https://github.com/foriequal0/git-trim][foriequal0/git-trim: Automatically trims your branches whose tracking remote refs are merged or stray]]
- [[https://github.com/dmfutcher/git-profile][dmfutcher/git-profile: Simple identity switching for git]]
- [[https://github.com/rustic-games/jilu][rustic-games/jilu: Generate a change log based on the state of your Git repository.]]
- [[https://github.com/orf/git-workspace][orf/git-workspace: Sync personal and work git repositories from multiple providers]]
- [[https://github.com/NBISweden/AGAT][NBISweden/AGAT: Another Gff Analysis Toolkit]]
- [[https://github.com/chriswalz/bit][chriswalz/bit: Bit is a modern Git CLI]]
- [[https://github.com/augmentable-dev/askgit][augmentable-dev/askgit: Query git repositories with SQL. Generate reports, perform status checks, analyze codebases. üîç üìä]]

* Programms

- [[https://github.com/JakeWharton/gitout][JakeWharton/gitout: A command-line tool and Docker image to automatically backup Git repositories from GitHub or anywhere]]
- [[https://github.com/Eoin-McMahon/blindfold][Eoin-McMahon/blindfold: üîé Gitignore file generator written in rust]]
- [[https://github.com/zznop/sploit][zznop/sploit: Go package that aids in binary analysis and exploitation]]
- [[https://github.com/mujtaba1747/git-autocommit][mujtaba1747/git-autocommit: A bash script to automate pushing changes to github]]
- [[https://github.com/nicoespeon/gitgraph.js][nicoespeon/gitgraph.js: üëã [Looking for maintainers] - A JavaScript library to draw pretty git graphs in the browser]]
- [[https://github.com/pcottle/learnGitBranching][pcottle/learnGitBranching: An interactive git visualization to challenge and educate!]]
- [[https://github.com/MarkForged/GOMP][MarkForged/GOMP: GOMP (Git cOMPare) is a tool for comparing branches.]]
- [[https://github.com/someteam/acha][someteam/acha: Git Achievements]]
- [[https://github.com/bhauman/lein-figwheel][bhauman/lein-figwheel: Figwheel builds your ClojureScript code and hot loads it into the browser as you are coding!]]
- [[https://github.com/adamtornhill/code-maat][adamtornhill/code-maat: A command line tool to mine and analyze data from version-control systems]]
- [[https://github.com/apenwarr/gitbuilder][apenwarr/gitbuilder: Auto-builds and tests all the branches of your git projects, showing pass/fail results on a web page/RSS feed. Isolates failures to the first commit that caused the problem.]]
- [[https://github.com/holygeek/git-number][holygeek/git-number: Use numbers for dealing with files in git]]
- [[https://github.com/takaaki-kasai/git-foresta][takaaki-kasai/git-foresta: git-foresta: Text-based git log graph viewer]]
- [[https://github.com/hercules-ci/gitignore.nix][hercules-ci/gitignore.nix: Nix function for filtering local git sources]]
- [[https://github.com/g2p/git-fs][g2p/git-fs: A filesystem interface to git repositories]]
- [[https://github.com/Peaker/git-mediate][Peaker / git-mediate Become a conflict resolution hero (Haskell)]]
- [[https://github.com/nomeata/gipeda][nomeata/gipeda: Git Performance Dashboard]]
- [[https://github.com/smallhadroncollider/cmt][smallhadroncollider/cmt: Write consistent git commit messages based on a custom template]]
- [[https://github.com/ejwa/gitinspector][ejwa/gitinspector: The statistical analysis tool for git repositories]]
- [[https://github.com/alexkaratarakis/gitattributes][alexkaratarakis/gitattributes: A collection of useful .gitattributes templates]]
- [[https://github.com/erikbern/git-of-theseus][erikbern/git-of-theseus: Analyze how a Git repo grows over time]]
- [[https://github.com/karan/joe][karan/joe: A .gitignore magician in your command line]]
- [[https://github.com/rafi/gits][rafi/gits: A Fast CLI Git manager for multiple repositories]]
- [[https://github.com/jwu910/check-it-out][check-it-out]]
- [[https://github.com/augmentable-dev/gitqlite][augmentable-dev/gitqlite: Query git repositories with SQL. Uses SQLite virtual tables and go-git]]
- [[https://github.com/hirokidaichi/gilot][hirokidaichi/gilot: a tool to analyze and visualize git logs.]]
- [[https://github.com/StreakyCobra/gws][StreakyCobra/gws: Colorful KISS helper for git workspaces]]
- [[https://github.com/tj/git-extras/blob/master/Commands.md#git-effort][git-extras/Commands.md at master ¬∑ tj/git-extras]]
- [[https://github.com/rgburke/grv][rgburke/grv: GRV is a terminal interface for viewing git repositories]]
- [[https://github.com/github/git-sizer][github/git-sizer: Compute various size metrics for a Git repository, flagging those that might cause problems]]
- [[https://github.com/muesli/gitomatic][muesli/gitomatic: A tool to monitor git repositories and automatically pull & push changes]]
- [[https://github.com/dandavison/delta][dandavison/delta: A syntax-highlighter for git and diff output]]
- [[https://github.com/so-fancy/diff-so-fancy][so-fancy/diff-so-fancy: Good-lookin' diffs. Actually‚Ä¶ nah‚Ä¶ The best-lookin' diffs.]]
- [[https://www.conventionalcommits.org/en/v1.0.0/][Conventional Commits]]
- [[https://gist.github.com/gka/393f5ab2b95e927d305eb6e14767180e][visualize git logs accross multiple repositories]]
- [[https://github.com/bokub/git-history-editor][bokub/git-history-editor: :pencil2: Online commit editor, intuitive and easy to use]]
- [[https://github.com/IonicaBizau/git-stats][IonicaBizau/git-stats: üçÄ Local git statistics including GitHub-like contributions calendars.]]
- [[https://github.com/pomber/git-history][pomber/git-history: Quickly browse the history of a file from any git repository]]
  Replace github.com with github.githistory.xyz
- [[https://github.com/ezyang/git-ftp][ezyang/git-ftp: A quick and efficient way of pushing changed files to a website via FTP]]
- [[https://github.com/conventional-changelog/commitlint#readme][conventional-changelog/commitlint: üìì Lint commit messages]]

* Config examples

- [[https://github.com/jessfraz/dotfiles/blob/master/.gitconfig][dotfiles/.gitconfig at master ¬∑ jessfraz/dotfiles]]
- [[https://github.com/nomius/dotfiles/blob/master/gitconfig][dotfiles/gitconfig at master ¬∑ nomius/dotfiles]]

* Cheatsheet

  - post-update
#+BEGIN_SRC sh
  #!/bin/sh
  branch=$(git rev-parse --symbolic --abbrev-ref $1)
  echo Update pushed to branch $branch
  exec git update-server-info
#+END_SRC

  - reflog - feature@{1}

  - git reset --hard @~ (@~ is the same as HEAD~)

  - [[https://github.com/begriffs/gitftp][begriffs/gitftp: Browse git over anonymous FTP]]

  - Ignore certificate
    : git -c http.sslVerify=false

  - Ignore file
    : .git/info/exclude
    You could also use [C-u i] in Emacs Magit

  - vc-dwim
    #+BEGIN_SRC sh
      # Requirements: coreutils, perl, vc-dwim.

      case "$2,$3" in
          merge,)
              perl -i.bak -ne 's/^/# /, s/^# #/#/ if /^Conflicts/ .. /#/; print' "$1" ;;
          ,|template,)
              perl -i.bak -pe 'print `vc-chlog | tail +2 | sed "s/^[ \t]*//"`
                       if /^#/ && $first++ == 0' "$1" ;;
          ,*) ;;
      esac
    #+END_SRC

  - [[https://stackoverflow.com/questions/4110652/how-to-substitute-text-from-files-in-git-history][version control - How to substitute text from files in git history? - Stack Overflow]]
    #+BEGIN_SRC shell
      git filter-branch --tree-filter \
          "find . -name '*.php' -exec sed -i -e \ 's/original/changed/g' {} \;"
    #+END_SRC

  - [[https://stackoverflow.com/questions/5816134/finding-a-git-commit-that-introduced-a-string-in-any-branch][Find a commit that introduced a string in any branch]]
    : git log -S 'hello world' --source --all

  - [[https://www.youtube.com/watch?v=Bo-8EfDpKxA][Remove a file from all git history - YouTube]]
    : git filter-branch -f --index-filter 'git rm --cached --ignore-unmatch LICENSE.md' HEAD

  - [[https://stackoverflow.com/questions/1651985/git-merge-with-repository-on-local-filesystem][gitosis - git-merge with repository on local filesystem - Stack Overflow]]
    : git pull ../gitosis-admin-old/ master

  - Merge another repository
    : git subtree add --prefix=rails git://github.com/rails/rails.git master

  - Subtree
    : git subtree add --prefix <target_folder> <url> <branch/tag> --squash

  - Keep the sub-project up to date
    : git subtree pull --prefix <target_folder> <url> <branch/tag> --squash

  - Find the symbolic ref matching a hash (sha-1)
    : git ls-remote <url> | grep <sha-1>

  - [[https://bitbucket.org/durdn/cfg/src/master/.gitconfig?at=master&fileviewer=file-view-default][Nicola Paolucci git aliases]]
    : git sba <url> <destination-folder>

  - Extract a project to subtree
    : git subtree split --prefix <project> --branch <branch>
    #+BEGIN_SRC shell
      for file in $(ls -1 $1/); do
          git subtree split -P $1/$file -b $1/$file
      done
    #+END_SRC

  - Whether <commit> (originally committed to emacs-26) has been
    merged into master or any other local branch
    : git branch --contains <commit>

  - In order to list remote tracking branches add option '-r'
    : git branch -r --contains <commit>

  - Archive repository
    : git archive --prefix=$(git describe)/ HEAD | xz -9 > $(git describe).tar.xz

  - git-cal
    : [[ -n $(git log --max-count=1 --author='Oleg Pykhalov') ]] && git-cal --author='Oleg Pykhalov'

* Tutorials
  - [[https://www.youtube.com/channel/UCshmCws1MijkZLMkPmOmzbQ][Dan Gitschooldude]]
  - [[https://www.youtube.com/watch?v=8ET_gl1qAZ0][Advanced git Tutorial: Linus Torvalds - YouTube]]
  - [[https://www.atlassian.com/git/tutorials/git-hooks/local-hooks][Git Hooks - Local hooks | Atlassian Git Tutorial]]
  - [[https://github.com/lfit/itpol/blob/master/protecting-code-integrity.md][Protecting code integrity with PGP]]
  - [[https://mikegerwitz.com/papers/git-horror-story#automate][A Git Horror Story: Repository Integrity With Signed Commits]]

* Hooks

#+begin_example
#!/usr/bin/env bash

if [[ "$GIT_JENKINS" == true ]]
then
    branch="$(git rev-parse --abbrev-ref HEAD)"

    case $branch in
        wip-local)
            exec -a "$0" $HOME/bin/jenkins build guix maintenance
            ;;
        master)
            exec -a "$0" $HOME/bin/jenkins build guix upstream
            ;;
    esac
fi
#+end_example
