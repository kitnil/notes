
* Deploy

- [[https://github.com/kowainik/summoner][kowainik/summoner: ðŸ”® ðŸ”§ Tool for scaffolding batteries-included production-level Haskell projects]]

* JSON

- [[https://artyom.me/aeson][Aeson: the tutorial]]
- [[https://github.com/clovyr/aeson-yaml][clovyr/aeson-yaml: Encode any Aeson (JSON) value as YAML (in pure Haskell)]]

* Documentation

- [[https://github.com/google/haskell-trainings][google/haskell-trainings: Haskell 101 and 102: slides and codelabs]]
- [[https://github.com/ChrisPenner/comonads-by-example][ChrisPenner/comonads-by-example: Comonads By Example Conference talk]]
- [[https://github.com/myuon/ghc-compiler-notes][myuon/ghc-compiler-notes: A collection of Notes on GHC]]

* Cheat sheet

- [[https://github.com/typeclasses/haskell-phrasebook][typeclasses/haskell-phrasebook: The Haskell Phrasebook: a quick intro to Haskell via small annotated example programs]]
- https://www.youtube.com/watch?v=GPwtT31zKRY&feature=youtu.be
for "for loops over lists" use foldl'
for any other fold use foldr

https://stackoverflow.com/questions/4978578/how-to-split-a-string-in-haskell

Split string
#+BEGIN_SRC haskell
  import qualified Data.Text as T
  print $ T.splitOn (T.pack " ") (T.pack "this is a test")
#+END_SRC

Split string by REGEX
: splitRegex :: Regex -> String -> [String]
http://hackage.haskell.org/packages/archive/regex-compat/0.92/doc/html/Text-Regex.html

* Helpers

[[https://github.com/litxio/ptghci][litxio/ptghci: High-powered REPL for Haskell, inspired by IPython]]

print type after evaluation
:set +t

* Links

- https://github.com/bitemyapp/learnhaskell/blob/master/guide-ru.md
  - https://www.seas.upenn.edu/~cis194/spring13/lectures.html
- https://github.com/alexwl/haskell-code-explorer
- [[https://github.com/data61/fp-course][data61/fp-course: Functional Programming Course]]
- [[https://github.com/reanimate/reanimate][reanimate/reanimate: Haskell library for building declarative animations based on SVG graphics]]
- [[https://github.com/facebookincubator/retrie][facebookincubator/retrie: Retrie is a powerful, easy-to-use codemodding tool for Haskell.]]
- [[https://github.com/smallhadroncollider/brok][smallhadroncollider/brok: Find broken links in text documents]]
